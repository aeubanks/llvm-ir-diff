; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/Bitcode/Benchmarks/Halide/local_laplacian/local_laplacian.bc'
source_filename = "/usr/local/google/home/asbirlea/Halide/Halide/src/runtime/destructors.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.halide_filter_argument_t = type { ptr, i32, i32, %struct.halide_type_t, ptr, ptr, ptr }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_filter_metadata_t = type { i32, i32, ptr, ptr, ptr }
%closure_t.11 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t.10 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.9 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.8 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.7 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.6 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.5 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.4 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.3 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%closure_t.0 = type { float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr }
%closure_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr }
%struct.buffer_t = type { i64, ptr, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [2 x i8] }

@str = private constant [6 x i8] c"input\00", align 32
@str.2 = private constant [16 x i8] c"local_laplacian\00", align 32
@str.3 = private constant [19 x i8] c"Input buffer input\00", align 32
@str.4 = private constant [7 x i8] c"uint16\00", align 32
@str.5 = private constant [30 x i8] c"Output buffer local_laplacian\00", align 32
@str.6 = private constant [15 x i8] c"input.stride.0\00", align 32
@str.7 = private constant [2 x i8] c"1\00", align 32
@str.8 = private constant [25 x i8] c"local_laplacian.stride.0\00", align 32
@str.9 = private constant [3 x i8] c"f0\00", align 32
@str.10 = private constant [3 x i8] c"f2\00", align 32
@str.11 = private constant [3 x i8] c"f4\00", align 32
@str.12 = private constant [3 x i8] c"f5\00", align 32
@str.13 = private constant [4 x i8] c"f72\00", align 32
@str.14 = private constant [3 x i8] c"f6\00", align 32
@str.15 = private constant [4 x i8] c"f73\00", align 32
@str.16 = private constant [3 x i8] c"f7\00", align 32
@str.17 = private constant [4 x i8] c"f74\00", align 32
@str.18 = private constant [3 x i8] c"f8\00", align 32
@str.19 = private constant [4 x i8] c"f75\00", align 32
@str.20 = private constant [3 x i8] c"f9\00", align 32
@str.21 = private constant [4 x i8] c"f76\00", align 32
@str.22 = private constant [4 x i8] c"f10\00", align 32
@str.23 = private constant [4 x i8] c"f77\00", align 32
@str.24 = private constant [4 x i8] c"f78\00", align 32
@str.26 = private constant [5 x i8] c"f131\00", align 32
@str.27 = private constant [5 x i8] c"f130\00", align 32
@str.28 = private constant [5 x i8] c"f129\00", align 32
@str.29 = private constant [5 x i8] c"f128\00", align 32
@str.30 = private constant [5 x i8] c"f127\00", align 32
@str.31 = private constant [5 x i8] c"f126\00", align 32
@str.32 = private constant [5 x i8] c"f125\00", align 32
@str.33 = private constant [7 x i8] c"levels\00", align 32
@0 = private constant i32 0
@str.34 = private constant [6 x i8] c"alpha\00", align 32
@1 = private constant float 0.000000e+00
@str.35 = private constant [5 x i8] c"beta\00", align 32
@2 = private constant float 0.000000e+00
@3 = private constant [5 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { ptr @str.33, i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, ptr @0, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.34, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @1, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.35, i32 0, i32 0, %struct.halide_type_t { i8 2, i8 32, i16 1 }, ptr @2, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str, i32 1, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }, %struct.halide_filter_argument_t { ptr @str.2, i32 2, i32 3, %struct.halide_type_t { i8 1, i8 16, i16 1 }, ptr null, ptr null, ptr null }]
@str.36 = private constant [48 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41\00", align 32
@local_laplacian_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 5, ptr @3, ptr @str.36, ptr @str.2 }

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #0

declare i32 @halide_do_par_for(ptr, ptr, i32, i32, ptr noalias) local_unnamed_addr #1

declare i32 @halide_error_access_out_of_bounds(ptr, ptr, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_bad_elem_size(ptr, ptr, ptr, i32, i32) local_unnamed_addr #1

declare i32 @halide_error_buffer_allocation_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_buffer_argument_is_null(ptr, ptr) local_unnamed_addr #1

declare i32 @halide_error_buffer_extents_too_large(ptr, ptr, i64, i64) local_unnamed_addr #1

declare i32 @halide_error_constraint_violated(ptr, ptr, i32, ptr, i32) local_unnamed_addr #1

declare i32 @halide_error_out_of_memory(ptr) local_unnamed_addr #1

declare void @halide_free(ptr, ptr) local_unnamed_addr #1

declare noalias ptr @halide_malloc(ptr, i64) local_unnamed_addr #1

define i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr {
entry:
  %0 = alloca %closure_t.11, align 8
  %1 = alloca %closure_t.10, align 8
  %2 = alloca %closure_t.9, align 8
  %3 = alloca %closure_t.8, align 8
  %4 = alloca %closure_t.7, align 8
  %5 = alloca %closure_t.6, align 8
  %6 = alloca %closure_t.5, align 8
  %7 = alloca %closure_t.4, align 8
  %8 = alloca %closure_t.3, align 8
  %9 = alloca %closure_t.2, align 8
  %10 = alloca %closure_t.1, align 8
  %11 = alloca %closure_t.0, align 8
  %12 = alloca %closure_t, align 8
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %13 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %call_destructor.exit210.thread374

"assert succeeded":                               ; preds = %entry
  %buf_host = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 1
  %input.host = load ptr, ptr %buf_host, align 8
  %buf_extent = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 0
  %input.extent.0 = load i32, ptr %buf_extent, align 4
  %x1 = sext i32 %input.extent.0 to i64
  %buf_extent1 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 1
  %buf_extent2 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 2
  %buf_extent3 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 2, i64 3
  %buf_stride = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 0
  %input.stride.0 = load i32, ptr %buf_stride, align 4
  %buf_stride4 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 1
  %input.stride.1 = load i32, ptr %buf_stride4, align 4
  %14 = sext i32 %input.stride.1 to i64
  %buf_stride5 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 2
  %input.stride.2 = load i32, ptr %buf_stride5, align 4
  %15 = sext i32 %input.stride.2 to i64
  %buf_stride6 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 3, i64 3
  %buf_min = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 0
  %buf_min7 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 1
  %16 = load <2 x i32>, ptr %buf_extent1, align 4
  %17 = extractelement <2 x i32> %16, i64 0
  %18 = sext i32 %17 to i64
  %19 = extractelement <2 x i32> %16, i64 1
  %20 = sext i32 %19 to i64
  %21 = load <2 x i32>, ptr %buf_min, align 4
  %buf_min8 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 2
  %b108 = load i32, ptr %buf_min8, align 4
  %buf_min9 = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 4, i64 3
  %buf_elem_size = getelementptr inbounds %struct.buffer_t, ptr %input.buffer, i64 0, i32 5
  %input.elem_size = load i32, ptr %buf_elem_size, align 4
  %.not101 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not101, label %"assert failed10", label %"assert succeeded11", !prof !4

call_destructor.exit:                             ; preds = %"assert failed197", %"assert failed195"
  %.ph = phi i32 [ %1763, %"assert failed195" ], [ %1766, %"assert failed197" ]
  %.not100191 = icmp eq i32 %.ph, 0
  br i1 %.not100191, label %call_destructor.exit290, label %call_destructor.exit225.sink.split

call_destructor.exit205:                          ; preds = %"assert failed191", %"assert failed193"
  %.ph.ph = phi i32 [ %1612, %"assert failed193" ], [ %1609, %"assert failed191" ]
  %.not100191273 = icmp eq i32 %.ph.ph, 0
  br i1 %.not100191273, label %call_destructor.exit215, label %if.then.i209

if.then.i209:                                     ; preds = %call_destructor.exit205
  call void @halide_free(ptr null, ptr nonnull %1593) #7
  br label %call_destructor.exit215

call_destructor.exit210.thread374:                ; preds = %after_bb, %"assert failed", %"assert failed10", %"assert failed61", %"assert failed63", %"assert failed65", %"assert failed67", %"assert failed69", %"assert failed71", %"assert failed73", %"assert failed75", %"assert failed77", %"assert failed79", %"assert failed81", %"assert failed83", %"assert failed85", %"assert failed87", %"assert failed89", %"assert failed91", %"assert failed93", %"assert failed95", %"assert failed97", %"assert failed99", %"assert failed101", %"assert failed103", %"assert failed105", %"produce f2", %"assert failed109", %"assert failed111", %"produce f4", %"assert failed115", %"assert failed117", %"produce f5", %"assert failed121", %"assert failed123", %"produce f72", %"assert failed127", %"assert failed129", %"produce f6", %"assert failed133", %"assert failed135", %"produce f73", %"assert failed139", %"assert failed141", %"produce f7", %"assert failed145", %"assert failed147", %"produce f74", %"assert failed151", %"assert failed153", %"produce f8", %"assert failed157", %"assert failed159", %"produce f75", %"assert failed163", %"assert failed165", %"produce f9", %"assert failed169", %"assert failed171", %"assert failed173", %"assert failed175", %"produce f10", %"assert failed179", %"assert failed181", %"assert failed183", %"assert failed185", %if.then.i292, %after_bb44.thread
  %.051.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %1194, %"assert failed185" ], [ %1194, %"assert failed183" ], [ null, %"assert failed181" ], [ null, %"assert failed179" ], [ null, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.050.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %1160, %"assert failed185" ], [ %1160, %"assert failed183" ], [ %1160, %"assert failed181" ], [ %1160, %"assert failed179" ], [ %1160, %"produce f10" ], [ null, %"assert failed175" ], [ null, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.049.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %955, %"assert failed185" ], [ %955, %"assert failed183" ], [ %955, %"assert failed181" ], [ %955, %"assert failed179" ], [ %955, %"produce f10" ], [ %955, %"assert failed175" ], [ %955, %"assert failed173" ], [ null, %"assert failed171" ], [ null, %"assert failed169" ], [ null, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.048.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %918, %"assert failed185" ], [ %918, %"assert failed183" ], [ %918, %"assert failed181" ], [ %918, %"assert failed179" ], [ %918, %"produce f10" ], [ %918, %"assert failed175" ], [ %918, %"assert failed173" ], [ %918, %"assert failed171" ], [ %918, %"assert failed169" ], [ %918, %"produce f9" ], [ null, %"assert failed165" ], [ null, %"assert failed163" ], [ null, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.047.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %876, %"assert failed185" ], [ %876, %"assert failed183" ], [ %876, %"assert failed181" ], [ %876, %"assert failed179" ], [ %876, %"produce f10" ], [ %876, %"assert failed175" ], [ %876, %"assert failed173" ], [ %876, %"assert failed171" ], [ %876, %"assert failed169" ], [ %876, %"produce f9" ], [ %876, %"assert failed165" ], [ %876, %"assert failed163" ], [ %876, %"produce f75" ], [ null, %"assert failed159" ], [ null, %"assert failed157" ], [ null, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.046.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %836, %"assert failed185" ], [ %836, %"assert failed183" ], [ %836, %"assert failed181" ], [ %836, %"assert failed179" ], [ %836, %"produce f10" ], [ %836, %"assert failed175" ], [ %836, %"assert failed173" ], [ %836, %"assert failed171" ], [ %836, %"assert failed169" ], [ %836, %"produce f9" ], [ %836, %"assert failed165" ], [ %836, %"assert failed163" ], [ %836, %"produce f75" ], [ %836, %"assert failed159" ], [ %836, %"assert failed157" ], [ %836, %"produce f8" ], [ null, %"assert failed153" ], [ null, %"assert failed151" ], [ null, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.045.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %790, %"assert failed185" ], [ %790, %"assert failed183" ], [ %790, %"assert failed181" ], [ %790, %"assert failed179" ], [ %790, %"produce f10" ], [ %790, %"assert failed175" ], [ %790, %"assert failed173" ], [ %790, %"assert failed171" ], [ %790, %"assert failed169" ], [ %790, %"produce f9" ], [ %790, %"assert failed165" ], [ %790, %"assert failed163" ], [ %790, %"produce f75" ], [ %790, %"assert failed159" ], [ %790, %"assert failed157" ], [ %790, %"produce f8" ], [ %790, %"assert failed153" ], [ %790, %"assert failed151" ], [ %790, %"produce f74" ], [ null, %"assert failed147" ], [ null, %"assert failed145" ], [ null, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.044.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %734, %"assert failed185" ], [ %734, %"assert failed183" ], [ %734, %"assert failed181" ], [ %734, %"assert failed179" ], [ %734, %"produce f10" ], [ %734, %"assert failed175" ], [ %734, %"assert failed173" ], [ %734, %"assert failed171" ], [ %734, %"assert failed169" ], [ %734, %"produce f9" ], [ %734, %"assert failed165" ], [ %734, %"assert failed163" ], [ %734, %"produce f75" ], [ %734, %"assert failed159" ], [ %734, %"assert failed157" ], [ %734, %"produce f8" ], [ %734, %"assert failed153" ], [ %734, %"assert failed151" ], [ %734, %"produce f74" ], [ %734, %"assert failed147" ], [ %734, %"assert failed145" ], [ %734, %"produce f7" ], [ null, %"assert failed141" ], [ null, %"assert failed139" ], [ null, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.043.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %681, %"assert failed185" ], [ %681, %"assert failed183" ], [ %681, %"assert failed181" ], [ %681, %"assert failed179" ], [ %681, %"produce f10" ], [ %681, %"assert failed175" ], [ %681, %"assert failed173" ], [ %681, %"assert failed171" ], [ %681, %"assert failed169" ], [ %681, %"produce f9" ], [ %681, %"assert failed165" ], [ %681, %"assert failed163" ], [ %681, %"produce f75" ], [ %681, %"assert failed159" ], [ %681, %"assert failed157" ], [ %681, %"produce f8" ], [ %681, %"assert failed153" ], [ %681, %"assert failed151" ], [ %681, %"produce f74" ], [ %681, %"assert failed147" ], [ %681, %"assert failed145" ], [ %681, %"produce f7" ], [ %681, %"assert failed141" ], [ %681, %"assert failed139" ], [ %681, %"produce f73" ], [ null, %"assert failed135" ], [ null, %"assert failed133" ], [ null, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.042.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %625, %"assert failed185" ], [ %625, %"assert failed183" ], [ %625, %"assert failed181" ], [ %625, %"assert failed179" ], [ %625, %"produce f10" ], [ %625, %"assert failed175" ], [ %625, %"assert failed173" ], [ %625, %"assert failed171" ], [ %625, %"assert failed169" ], [ %625, %"produce f9" ], [ %625, %"assert failed165" ], [ %625, %"assert failed163" ], [ %625, %"produce f75" ], [ %625, %"assert failed159" ], [ %625, %"assert failed157" ], [ %625, %"produce f8" ], [ %625, %"assert failed153" ], [ %625, %"assert failed151" ], [ %625, %"produce f74" ], [ %625, %"assert failed147" ], [ %625, %"assert failed145" ], [ %625, %"produce f7" ], [ %625, %"assert failed141" ], [ %625, %"assert failed139" ], [ %625, %"produce f73" ], [ %625, %"assert failed135" ], [ %625, %"assert failed133" ], [ %625, %"produce f6" ], [ null, %"assert failed129" ], [ null, %"assert failed127" ], [ null, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.041.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %556, %"assert failed185" ], [ %556, %"assert failed183" ], [ %556, %"assert failed181" ], [ %556, %"assert failed179" ], [ %556, %"produce f10" ], [ %556, %"assert failed175" ], [ %556, %"assert failed173" ], [ %556, %"assert failed171" ], [ %556, %"assert failed169" ], [ %556, %"produce f9" ], [ %556, %"assert failed165" ], [ %556, %"assert failed163" ], [ %556, %"produce f75" ], [ %556, %"assert failed159" ], [ %556, %"assert failed157" ], [ %556, %"produce f8" ], [ %556, %"assert failed153" ], [ %556, %"assert failed151" ], [ %556, %"produce f74" ], [ %556, %"assert failed147" ], [ %556, %"assert failed145" ], [ %556, %"produce f7" ], [ %556, %"assert failed141" ], [ %556, %"assert failed139" ], [ %556, %"produce f73" ], [ %556, %"assert failed135" ], [ %556, %"assert failed133" ], [ %556, %"produce f6" ], [ %556, %"assert failed129" ], [ %556, %"assert failed127" ], [ %556, %"produce f72" ], [ null, %"assert failed123" ], [ null, %"assert failed121" ], [ null, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.040.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %500, %"assert failed185" ], [ %500, %"assert failed183" ], [ %500, %"assert failed181" ], [ %500, %"assert failed179" ], [ %500, %"produce f10" ], [ %500, %"assert failed175" ], [ %500, %"assert failed173" ], [ %500, %"assert failed171" ], [ %500, %"assert failed169" ], [ %500, %"produce f9" ], [ %500, %"assert failed165" ], [ %500, %"assert failed163" ], [ %500, %"produce f75" ], [ %500, %"assert failed159" ], [ %500, %"assert failed157" ], [ %500, %"produce f8" ], [ %500, %"assert failed153" ], [ %500, %"assert failed151" ], [ %500, %"produce f74" ], [ %500, %"assert failed147" ], [ %500, %"assert failed145" ], [ %500, %"produce f7" ], [ %500, %"assert failed141" ], [ %500, %"assert failed139" ], [ %500, %"produce f73" ], [ %500, %"assert failed135" ], [ %500, %"assert failed133" ], [ %500, %"produce f6" ], [ %500, %"assert failed129" ], [ %500, %"assert failed127" ], [ %500, %"produce f72" ], [ %500, %"assert failed123" ], [ %500, %"assert failed121" ], [ %500, %"produce f5" ], [ null, %"assert failed117" ], [ null, %"assert failed115" ], [ null, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.039.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %421, %"assert failed185" ], [ %421, %"assert failed183" ], [ %421, %"assert failed181" ], [ %421, %"assert failed179" ], [ %421, %"produce f10" ], [ %421, %"assert failed175" ], [ %421, %"assert failed173" ], [ %421, %"assert failed171" ], [ %421, %"assert failed169" ], [ %421, %"produce f9" ], [ %421, %"assert failed165" ], [ %421, %"assert failed163" ], [ %421, %"produce f75" ], [ %421, %"assert failed159" ], [ %421, %"assert failed157" ], [ %421, %"produce f8" ], [ %421, %"assert failed153" ], [ %421, %"assert failed151" ], [ %421, %"produce f74" ], [ %421, %"assert failed147" ], [ %421, %"assert failed145" ], [ %421, %"produce f7" ], [ %421, %"assert failed141" ], [ %421, %"assert failed139" ], [ %421, %"produce f73" ], [ %421, %"assert failed135" ], [ %421, %"assert failed133" ], [ %421, %"produce f6" ], [ %421, %"assert failed129" ], [ %421, %"assert failed127" ], [ %421, %"produce f72" ], [ %421, %"assert failed123" ], [ %421, %"assert failed121" ], [ %421, %"produce f5" ], [ %421, %"assert failed117" ], [ %421, %"assert failed115" ], [ %421, %"produce f4" ], [ null, %"assert failed111" ], [ null, %"assert failed109" ], [ null, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.038.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %338, %"assert failed185" ], [ %338, %"assert failed183" ], [ %338, %"assert failed181" ], [ %338, %"assert failed179" ], [ %338, %"produce f10" ], [ %338, %"assert failed175" ], [ %338, %"assert failed173" ], [ %338, %"assert failed171" ], [ %338, %"assert failed169" ], [ %338, %"produce f9" ], [ %338, %"assert failed165" ], [ %338, %"assert failed163" ], [ %338, %"produce f75" ], [ %338, %"assert failed159" ], [ %338, %"assert failed157" ], [ %338, %"produce f8" ], [ %338, %"assert failed153" ], [ %338, %"assert failed151" ], [ %338, %"produce f74" ], [ %338, %"assert failed147" ], [ %338, %"assert failed145" ], [ %338, %"produce f7" ], [ %338, %"assert failed141" ], [ %338, %"assert failed139" ], [ %338, %"produce f73" ], [ %338, %"assert failed135" ], [ %338, %"assert failed133" ], [ %338, %"produce f6" ], [ %338, %"assert failed129" ], [ %338, %"assert failed127" ], [ %338, %"produce f72" ], [ %338, %"assert failed123" ], [ %338, %"assert failed121" ], [ %338, %"produce f5" ], [ %338, %"assert failed117" ], [ %338, %"assert failed115" ], [ %338, %"produce f4" ], [ %338, %"assert failed111" ], [ %338, %"assert failed109" ], [ %338, %"produce f2" ], [ null, %"assert failed105" ], [ null, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.0.ph.ph.ph.ph = phi ptr [ null, %if.then.i292 ], [ %209, %"assert failed185" ], [ %209, %"assert failed183" ], [ %209, %"assert failed181" ], [ %209, %"assert failed179" ], [ %209, %"produce f10" ], [ %209, %"assert failed175" ], [ %209, %"assert failed173" ], [ %209, %"assert failed171" ], [ %209, %"assert failed169" ], [ %209, %"produce f9" ], [ %209, %"assert failed165" ], [ %209, %"assert failed163" ], [ %209, %"produce f75" ], [ %209, %"assert failed159" ], [ %209, %"assert failed157" ], [ %209, %"produce f8" ], [ %209, %"assert failed153" ], [ %209, %"assert failed151" ], [ %209, %"produce f74" ], [ %209, %"assert failed147" ], [ %209, %"assert failed145" ], [ %209, %"produce f7" ], [ %209, %"assert failed141" ], [ %209, %"assert failed139" ], [ %209, %"produce f73" ], [ %209, %"assert failed135" ], [ %209, %"assert failed133" ], [ %209, %"produce f6" ], [ %209, %"assert failed129" ], [ %209, %"assert failed127" ], [ %209, %"produce f72" ], [ %209, %"assert failed123" ], [ %209, %"assert failed121" ], [ %209, %"produce f5" ], [ %209, %"assert failed117" ], [ %209, %"assert failed115" ], [ %209, %"produce f4" ], [ %209, %"assert failed111" ], [ %209, %"assert failed109" ], [ %209, %"produce f2" ], [ %209, %"assert failed105" ], [ %209, %"assert failed103" ], [ null, %"assert failed101" ], [ null, %"assert failed99" ], [ null, %"assert failed97" ], [ null, %"assert failed95" ], [ null, %"assert failed93" ], [ null, %"assert failed91" ], [ null, %"assert failed89" ], [ null, %"assert failed87" ], [ null, %"assert failed85" ], [ null, %"assert failed83" ], [ null, %"assert failed81" ], [ null, %"assert failed79" ], [ null, %"assert failed77" ], [ null, %"assert failed75" ], [ null, %"assert failed73" ], [ null, %"assert failed71" ], [ null, %"assert failed69" ], [ null, %"assert failed67" ], [ null, %"assert failed65" ], [ null, %"assert failed63" ], [ null, %"assert failed61" ], [ null, %"assert failed10" ], [ null, %"assert failed" ], [ null, %after_bb44.thread ], [ null, %after_bb ]
  %.ph.ph.ph.ph = phi i32 [ 0, %if.then.i292 ], [ %1379, %"assert failed185" ], [ %1376, %"assert failed183" ], [ %1195, %"assert failed181" ], [ %1192, %"assert failed179" ], [ %1175, %"produce f10" ], [ %1161, %"assert failed175" ], [ %1158, %"assert failed173" ], [ %956, %"assert failed171" ], [ %953, %"assert failed169" ], [ %936, %"produce f9" ], [ %919, %"assert failed165" ], [ %916, %"assert failed163" ], [ %892, %"produce f75" ], [ %877, %"assert failed159" ], [ %874, %"assert failed157" ], [ %855, %"produce f8" ], [ %837, %"assert failed153" ], [ %834, %"assert failed151" ], [ %806, %"produce f74" ], [ %791, %"assert failed147" ], [ %788, %"assert failed145" ], [ %754, %"produce f7" ], [ %735, %"assert failed141" ], [ %732, %"assert failed139" ], [ %697, %"produce f73" ], [ %682, %"assert failed135" ], [ %679, %"assert failed133" ], [ %645, %"produce f6" ], [ %626, %"assert failed129" ], [ %623, %"assert failed127" ], [ %573, %"produce f72" ], [ %557, %"assert failed123" ], [ %554, %"assert failed121" ], [ %520, %"produce f5" ], [ %501, %"assert failed117" ], [ %498, %"assert failed115" ], [ %446, %"produce f4" ], [ %422, %"assert failed111" ], [ %419, %"assert failed109" ], [ %367, %"produce f2" ], [ %339, %"assert failed105" ], [ %336, %"assert failed103" ], [ %210, %"assert failed101" ], [ %207, %"assert failed99" ], [ %200, %"assert failed97" ], [ %197, %"assert failed95" ], [ %194, %"assert failed93" ], [ %192, %"assert failed91" ], [ %189, %"assert failed89" ], [ %186, %"assert failed87" ], [ %183, %"assert failed85" ], [ %180, %"assert failed83" ], [ %178, %"assert failed81" ], [ %175, %"assert failed79" ], [ %172, %"assert failed77" ], [ %170, %"assert failed75" ], [ %168, %"assert failed73" ], [ %164, %"assert failed71" ], [ %160, %"assert failed69" ], [ %158, %"assert failed67" ], [ %156, %"assert failed65" ], [ %154, %"assert failed63" ], [ %152, %"assert failed61" ], [ %27, %"assert failed10" ], [ %13, %"assert failed" ], [ 0, %after_bb44.thread ], [ 0, %after_bb ]
  %.not100191273334392 = icmp eq i32 %.ph.ph.ph.ph, 0
  br label %call_destructor.exit215

call_destructor.exit210:                          ; preds = %"assert succeeded188.thread841", %"assert succeeded188.thread", %"assert succeeded188"
  %22 = call i32 @halide_error_out_of_memory(ptr null) #4
  %.not100191273334 = icmp eq i32 %22, 0
  br i1 %.not100191273334, label %call_destructor.exit290, label %if.then.i214

if.then.i214:                                     ; preds = %call_destructor.exit210
  call void @halide_free(ptr null, ptr nonnull %1378) #7
  br label %call_destructor.exit215

call_destructor.exit215:                          ; preds = %call_destructor.exit205, %if.then.i209, %call_destructor.exit210.thread374, %if.then.i214
  %.051197249298372 = phi ptr [ %1194, %if.then.i214 ], [ %.051.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1194, %call_destructor.exit205 ], [ %1194, %if.then.i209 ]
  %.050198248299371 = phi ptr [ %1160, %if.then.i214 ], [ %.050.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %1160, %call_destructor.exit205 ], [ %1160, %if.then.i209 ]
  %.049199247300370 = phi ptr [ %955, %if.then.i214 ], [ %.049.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %955, %call_destructor.exit205 ], [ %955, %if.then.i209 ]
  %.048200246301369 = phi ptr [ %918, %if.then.i214 ], [ %.048.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %918, %call_destructor.exit205 ], [ %918, %if.then.i209 ]
  %.047201245302368 = phi ptr [ %876, %if.then.i214 ], [ %.047.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %876, %call_destructor.exit205 ], [ %876, %if.then.i209 ]
  %.046202244303367 = phi ptr [ %836, %if.then.i214 ], [ %.046.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %836, %call_destructor.exit205 ], [ %836, %if.then.i209 ]
  %.045203243304366 = phi ptr [ %790, %if.then.i214 ], [ %.045.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %790, %call_destructor.exit205 ], [ %790, %if.then.i209 ]
  %.044204242305365 = phi ptr [ %734, %if.then.i214 ], [ %.044.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %734, %call_destructor.exit205 ], [ %734, %if.then.i209 ]
  %.043205241306364 = phi ptr [ %681, %if.then.i214 ], [ %.043.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %681, %call_destructor.exit205 ], [ %681, %if.then.i209 ]
  %.042206240307363 = phi ptr [ %625, %if.then.i214 ], [ %.042.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %625, %call_destructor.exit205 ], [ %625, %if.then.i209 ]
  %.041207239308362 = phi ptr [ %556, %if.then.i214 ], [ %.041.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %556, %call_destructor.exit205 ], [ %556, %if.then.i209 ]
  %.040208238309361 = phi ptr [ %500, %if.then.i214 ], [ %.040.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %500, %call_destructor.exit205 ], [ %500, %if.then.i209 ]
  %.039209237310360 = phi ptr [ %421, %if.then.i214 ], [ %.039.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %421, %call_destructor.exit205 ], [ %421, %if.then.i209 ]
  %.038210236311359 = phi ptr [ %338, %if.then.i214 ], [ %.038.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %338, %call_destructor.exit205 ], [ %338, %if.then.i209 ]
  %.0211235312358 = phi ptr [ %209, %if.then.i214 ], [ %.0.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %209, %call_destructor.exit205 ], [ %209, %if.then.i209 ]
  %23 = phi i32 [ %22, %if.then.i214 ], [ %.ph.ph.ph.ph, %call_destructor.exit210.thread374 ], [ %.ph.ph, %call_destructor.exit205 ], [ %.ph.ph, %if.then.i209 ]
  %.not100212234313357 = phi i1 [ false, %if.then.i214 ], [ %.not100191273334392, %call_destructor.exit210.thread374 ], [ %.not100191273, %call_destructor.exit205 ], [ false, %if.then.i209 ]
  %tobool.i216 = icmp eq ptr %.051197249298372, null
  %brmerge.i218 = or i1 %tobool.i216, %.not100212234313357
  br i1 %brmerge.i218, label %call_destructor.exit220, label %if.then.i219

if.then.i219:                                     ; preds = %call_destructor.exit215
  call void @halide_free(ptr null, ptr nonnull %.051197249298372) #7
  br label %call_destructor.exit220

call_destructor.exit220:                          ; preds = %if.then.i219, %call_destructor.exit215
  %tobool.i221 = icmp eq ptr %.050198248299371, null
  %brmerge.i223 = or i1 %tobool.i221, %.not100212234313357
  br i1 %brmerge.i223, label %call_destructor.exit225, label %call_destructor.exit225.sink.split

call_destructor.exit225.sink.split:               ; preds = %call_destructor.exit220, %call_destructor.exit
  %.sink = phi ptr [ %1611, %call_destructor.exit ], [ %.050198248299371, %call_destructor.exit220 ]
  %.049199247300370415459.ph = phi ptr [ %955, %call_destructor.exit ], [ %.049199247300370, %call_destructor.exit220 ]
  %.048200246301369416458.ph = phi ptr [ %918, %call_destructor.exit ], [ %.048200246301369, %call_destructor.exit220 ]
  %.047201245302368417457.ph = phi ptr [ %876, %call_destructor.exit ], [ %.047201245302368, %call_destructor.exit220 ]
  %.046202244303367418456.ph = phi ptr [ %836, %call_destructor.exit ], [ %.046202244303367, %call_destructor.exit220 ]
  %.045203243304366419455.ph = phi ptr [ %790, %call_destructor.exit ], [ %.045203243304366, %call_destructor.exit220 ]
  %.044204242305365420454.ph = phi ptr [ %734, %call_destructor.exit ], [ %.044204242305365, %call_destructor.exit220 ]
  %.043205241306364421453.ph = phi ptr [ %681, %call_destructor.exit ], [ %.043205241306364, %call_destructor.exit220 ]
  %.042206240307363422452.ph = phi ptr [ %625, %call_destructor.exit ], [ %.042206240307363, %call_destructor.exit220 ]
  %.041207239308362423451.ph = phi ptr [ %556, %call_destructor.exit ], [ %.041207239308362, %call_destructor.exit220 ]
  %.040208238309361424450.ph = phi ptr [ %500, %call_destructor.exit ], [ %.040208238309361, %call_destructor.exit220 ]
  %.039209237310360425449.ph = phi ptr [ %421, %call_destructor.exit ], [ %.039209237310360, %call_destructor.exit220 ]
  %.038210236311359426448.ph = phi ptr [ %338, %call_destructor.exit ], [ %.038210236311359, %call_destructor.exit220 ]
  %.0211235312358427447.ph = phi ptr [ %209, %call_destructor.exit ], [ %.0211235312358, %call_destructor.exit220 ]
  %.ph843 = phi i32 [ %.ph, %call_destructor.exit ], [ %23, %call_destructor.exit220 ]
  call void @halide_free(ptr null, ptr nonnull %.sink) #7
  br label %call_destructor.exit225

call_destructor.exit225:                          ; preds = %call_destructor.exit225.sink.split, %call_destructor.exit220
  %.049199247300370415459 = phi ptr [ %.049199247300370, %call_destructor.exit220 ], [ %.049199247300370415459.ph, %call_destructor.exit225.sink.split ]
  %.048200246301369416458 = phi ptr [ %.048200246301369, %call_destructor.exit220 ], [ %.048200246301369416458.ph, %call_destructor.exit225.sink.split ]
  %.047201245302368417457 = phi ptr [ %.047201245302368, %call_destructor.exit220 ], [ %.047201245302368417457.ph, %call_destructor.exit225.sink.split ]
  %.046202244303367418456 = phi ptr [ %.046202244303367, %call_destructor.exit220 ], [ %.046202244303367418456.ph, %call_destructor.exit225.sink.split ]
  %.045203243304366419455 = phi ptr [ %.045203243304366, %call_destructor.exit220 ], [ %.045203243304366419455.ph, %call_destructor.exit225.sink.split ]
  %.044204242305365420454 = phi ptr [ %.044204242305365, %call_destructor.exit220 ], [ %.044204242305365420454.ph, %call_destructor.exit225.sink.split ]
  %.043205241306364421453 = phi ptr [ %.043205241306364, %call_destructor.exit220 ], [ %.043205241306364421453.ph, %call_destructor.exit225.sink.split ]
  %.042206240307363422452 = phi ptr [ %.042206240307363, %call_destructor.exit220 ], [ %.042206240307363422452.ph, %call_destructor.exit225.sink.split ]
  %.041207239308362423451 = phi ptr [ %.041207239308362, %call_destructor.exit220 ], [ %.041207239308362423451.ph, %call_destructor.exit225.sink.split ]
  %.040208238309361424450 = phi ptr [ %.040208238309361, %call_destructor.exit220 ], [ %.040208238309361424450.ph, %call_destructor.exit225.sink.split ]
  %.039209237310360425449 = phi ptr [ %.039209237310360, %call_destructor.exit220 ], [ %.039209237310360425449.ph, %call_destructor.exit225.sink.split ]
  %.038210236311359426448 = phi ptr [ %.038210236311359, %call_destructor.exit220 ], [ %.038210236311359426448.ph, %call_destructor.exit225.sink.split ]
  %.0211235312358427447 = phi ptr [ %.0211235312358, %call_destructor.exit220 ], [ %.0211235312358427447.ph, %call_destructor.exit225.sink.split ]
  %24 = phi i32 [ %23, %call_destructor.exit220 ], [ %.ph843, %call_destructor.exit225.sink.split ]
  %.not100212234313357428446 = phi i1 [ %.not100212234313357, %call_destructor.exit220 ], [ false, %call_destructor.exit225.sink.split ]
  %tobool.i226 = icmp eq ptr %.049199247300370415459, null
  %brmerge.i228 = or i1 %tobool.i226, %.not100212234313357428446
  br i1 %brmerge.i228, label %call_destructor.exit230, label %if.then.i229

if.then.i229:                                     ; preds = %call_destructor.exit225
  call void @halide_free(ptr null, ptr nonnull %.049199247300370415459) #7
  br label %call_destructor.exit230

call_destructor.exit230:                          ; preds = %if.then.i229, %call_destructor.exit225
  %tobool.i231 = icmp eq ptr %.048200246301369416458, null
  %brmerge.i233 = or i1 %tobool.i231, %.not100212234313357428446
  br i1 %brmerge.i233, label %call_destructor.exit235, label %call_destructor.exit235.sink.split

call_destructor.exit235.sink.split:               ; preds = %call_destructor.exit230, %"produce local_laplacian"
  %.sink845 = phi ptr [ %1765, %"produce local_laplacian" ], [ %.048200246301369416458, %call_destructor.exit230 ]
  %.047201245302368417457477515.ph = phi ptr [ %876, %"produce local_laplacian" ], [ %.047201245302368417457, %call_destructor.exit230 ]
  %.046202244303367418456478514.ph = phi ptr [ %836, %"produce local_laplacian" ], [ %.046202244303367418456, %call_destructor.exit230 ]
  %.045203243304366419455479513.ph = phi ptr [ %790, %"produce local_laplacian" ], [ %.045203243304366419455, %call_destructor.exit230 ]
  %.044204242305365420454480512.ph = phi ptr [ %734, %"produce local_laplacian" ], [ %.044204242305365420454, %call_destructor.exit230 ]
  %.043205241306364421453481511.ph = phi ptr [ %681, %"produce local_laplacian" ], [ %.043205241306364421453, %call_destructor.exit230 ]
  %.042206240307363422452482510.ph = phi ptr [ %625, %"produce local_laplacian" ], [ %.042206240307363422452, %call_destructor.exit230 ]
  %.041207239308362423451483509.ph = phi ptr [ %556, %"produce local_laplacian" ], [ %.041207239308362423451, %call_destructor.exit230 ]
  %.040208238309361424450484508.ph = phi ptr [ %500, %"produce local_laplacian" ], [ %.040208238309361424450, %call_destructor.exit230 ]
  %.039209237310360425449485507.ph = phi ptr [ %421, %"produce local_laplacian" ], [ %.039209237310360425449, %call_destructor.exit230 ]
  %.038210236311359426448486506.ph = phi ptr [ %338, %"produce local_laplacian" ], [ %.038210236311359426448, %call_destructor.exit230 ]
  %.0211235312358427447487505.ph = phi ptr [ %209, %"produce local_laplacian" ], [ %.0211235312358427447, %call_destructor.exit230 ]
  %.ph844 = phi i32 [ %2008, %"produce local_laplacian" ], [ %24, %call_destructor.exit230 ]
  call void @halide_free(ptr null, ptr nonnull %.sink845) #7
  br label %call_destructor.exit235

call_destructor.exit235:                          ; preds = %call_destructor.exit235.sink.split, %call_destructor.exit230
  %.047201245302368417457477515 = phi ptr [ %.047201245302368417457, %call_destructor.exit230 ], [ %.047201245302368417457477515.ph, %call_destructor.exit235.sink.split ]
  %.046202244303367418456478514 = phi ptr [ %.046202244303367418456, %call_destructor.exit230 ], [ %.046202244303367418456478514.ph, %call_destructor.exit235.sink.split ]
  %.045203243304366419455479513 = phi ptr [ %.045203243304366419455, %call_destructor.exit230 ], [ %.045203243304366419455479513.ph, %call_destructor.exit235.sink.split ]
  %.044204242305365420454480512 = phi ptr [ %.044204242305365420454, %call_destructor.exit230 ], [ %.044204242305365420454480512.ph, %call_destructor.exit235.sink.split ]
  %.043205241306364421453481511 = phi ptr [ %.043205241306364421453, %call_destructor.exit230 ], [ %.043205241306364421453481511.ph, %call_destructor.exit235.sink.split ]
  %.042206240307363422452482510 = phi ptr [ %.042206240307363422452, %call_destructor.exit230 ], [ %.042206240307363422452482510.ph, %call_destructor.exit235.sink.split ]
  %.041207239308362423451483509 = phi ptr [ %.041207239308362423451, %call_destructor.exit230 ], [ %.041207239308362423451483509.ph, %call_destructor.exit235.sink.split ]
  %.040208238309361424450484508 = phi ptr [ %.040208238309361424450, %call_destructor.exit230 ], [ %.040208238309361424450484508.ph, %call_destructor.exit235.sink.split ]
  %.039209237310360425449485507 = phi ptr [ %.039209237310360425449, %call_destructor.exit230 ], [ %.039209237310360425449485507.ph, %call_destructor.exit235.sink.split ]
  %.038210236311359426448486506 = phi ptr [ %.038210236311359426448, %call_destructor.exit230 ], [ %.038210236311359426448486506.ph, %call_destructor.exit235.sink.split ]
  %.0211235312358427447487505 = phi ptr [ %.0211235312358427447, %call_destructor.exit230 ], [ %.0211235312358427447487505.ph, %call_destructor.exit235.sink.split ]
  %25 = phi i32 [ %24, %call_destructor.exit230 ], [ %.ph844, %call_destructor.exit235.sink.split ]
  %.not100212234313357428446488504 = phi i1 [ %.not100212234313357428446, %call_destructor.exit230 ], [ false, %call_destructor.exit235.sink.split ]
  %tobool.i236 = icmp eq ptr %.047201245302368417457477515, null
  %brmerge.i238 = or i1 %tobool.i236, %.not100212234313357428446488504
  br i1 %brmerge.i238, label %call_destructor.exit240, label %if.then.i239

if.then.i239:                                     ; preds = %call_destructor.exit235
  call void @halide_free(ptr null, ptr nonnull %.047201245302368417457477515) #7
  br label %call_destructor.exit240

call_destructor.exit240:                          ; preds = %if.then.i239, %call_destructor.exit235
  %tobool.i241 = icmp eq ptr %.046202244303367418456478514, null
  %brmerge.i243 = or i1 %tobool.i241, %.not100212234313357428446488504
  br i1 %brmerge.i243, label %call_destructor.exit245, label %if.then.i244

if.then.i244:                                     ; preds = %call_destructor.exit240
  call void @halide_free(ptr null, ptr nonnull %.046202244303367418456478514) #7
  br label %call_destructor.exit245

call_destructor.exit245:                          ; preds = %if.then.i244, %call_destructor.exit240
  %tobool.i246 = icmp eq ptr %.045203243304366419455479513, null
  %brmerge.i248 = or i1 %tobool.i246, %.not100212234313357428446488504
  br i1 %brmerge.i248, label %call_destructor.exit250, label %if.then.i249

if.then.i249:                                     ; preds = %call_destructor.exit245
  call void @halide_free(ptr null, ptr nonnull %.045203243304366419455479513) #7
  br label %call_destructor.exit250

call_destructor.exit250:                          ; preds = %if.then.i249, %call_destructor.exit245
  %tobool.i251 = icmp eq ptr %.044204242305365420454480512, null
  %brmerge.i253 = or i1 %tobool.i251, %.not100212234313357428446488504
  br i1 %brmerge.i253, label %call_destructor.exit255, label %if.then.i254

if.then.i254:                                     ; preds = %call_destructor.exit250
  call void @halide_free(ptr null, ptr nonnull %.044204242305365420454480512) #7
  br label %call_destructor.exit255

call_destructor.exit255:                          ; preds = %if.then.i254, %call_destructor.exit250
  %tobool.i256 = icmp eq ptr %.043205241306364421453481511, null
  %brmerge.i258 = or i1 %tobool.i256, %.not100212234313357428446488504
  br i1 %brmerge.i258, label %call_destructor.exit260, label %if.then.i259

if.then.i259:                                     ; preds = %call_destructor.exit255
  call void @halide_free(ptr null, ptr nonnull %.043205241306364421453481511) #7
  br label %call_destructor.exit260

call_destructor.exit260:                          ; preds = %if.then.i259, %call_destructor.exit255
  %tobool.i261 = icmp eq ptr %.042206240307363422452482510, null
  %brmerge.i263 = or i1 %tobool.i261, %.not100212234313357428446488504
  br i1 %brmerge.i263, label %call_destructor.exit265, label %if.then.i264

if.then.i264:                                     ; preds = %call_destructor.exit260
  call void @halide_free(ptr null, ptr nonnull %.042206240307363422452482510) #7
  br label %call_destructor.exit265

call_destructor.exit265:                          ; preds = %if.then.i264, %call_destructor.exit260
  %tobool.i266 = icmp eq ptr %.041207239308362423451483509, null
  %brmerge.i268 = or i1 %tobool.i266, %.not100212234313357428446488504
  br i1 %brmerge.i268, label %call_destructor.exit270, label %if.then.i269

if.then.i269:                                     ; preds = %call_destructor.exit265
  call void @halide_free(ptr null, ptr nonnull %.041207239308362423451483509) #7
  br label %call_destructor.exit270

call_destructor.exit270:                          ; preds = %if.then.i269, %call_destructor.exit265
  %tobool.i271 = icmp eq ptr %.040208238309361424450484508, null
  %brmerge.i273 = or i1 %tobool.i271, %.not100212234313357428446488504
  br i1 %brmerge.i273, label %call_destructor.exit275, label %if.then.i274

if.then.i274:                                     ; preds = %call_destructor.exit270
  call void @halide_free(ptr null, ptr nonnull %.040208238309361424450484508) #7
  br label %call_destructor.exit275

call_destructor.exit275:                          ; preds = %if.then.i274, %call_destructor.exit270
  %tobool.i276 = icmp eq ptr %.039209237310360425449485507, null
  %brmerge.i278 = or i1 %tobool.i276, %.not100212234313357428446488504
  br i1 %brmerge.i278, label %call_destructor.exit280, label %if.then.i279

if.then.i279:                                     ; preds = %call_destructor.exit275
  call void @halide_free(ptr null, ptr nonnull %.039209237310360425449485507) #7
  br label %call_destructor.exit280

call_destructor.exit280:                          ; preds = %if.then.i279, %call_destructor.exit275
  %tobool.i281 = icmp eq ptr %.038210236311359426448486506, null
  %brmerge.i283 = or i1 %tobool.i281, %.not100212234313357428446488504
  br i1 %brmerge.i283, label %call_destructor.exit285, label %if.then.i284

if.then.i284:                                     ; preds = %call_destructor.exit280
  call void @halide_free(ptr null, ptr nonnull %.038210236311359426448486506) #7
  br label %call_destructor.exit285

call_destructor.exit285:                          ; preds = %if.then.i284, %call_destructor.exit280
  %tobool.i286 = icmp eq ptr %.0211235312358427447487505, null
  %brmerge.i288 = or i1 %tobool.i286, %.not100212234313357428446488504
  br i1 %brmerge.i288, label %call_destructor.exit290, label %if.then.i289

if.then.i289:                                     ; preds = %call_destructor.exit285
  call void @halide_free(ptr null, ptr nonnull %.0211235312358427447487505) #7
  br label %call_destructor.exit290

call_destructor.exit290:                          ; preds = %call_destructor.exit210, %call_destructor.exit, %if.then.i289, %call_destructor.exit285
  %26 = phi i32 [ %25, %if.then.i289 ], [ %25, %call_destructor.exit285 ], [ 0, %call_destructor.exit ], [ 0, %call_destructor.exit210 ]
  ret i32 %26

"assert failed10":                                ; preds = %"assert succeeded"
  %27 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded11":                             ; preds = %"assert succeeded"
  %28 = icmp eq ptr %input.host, null
  %input.dev = load i64, ptr %input.buffer, align 8
  %29 = icmp eq i64 %input.dev, 0
  %input.host_and_dev_are_null = and i1 %28, %29
  %buf_host12 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 1
  %local_laplacian.host = load ptr, ptr %buf_host12, align 8
  %local_laplacian.dev = load i64, ptr %local_laplacian.buffer, align 8
  %30 = icmp eq i64 %local_laplacian.dev, 0
  %31 = icmp eq ptr %local_laplacian.host, null
  %local_laplacian.host_and_dev_are_null = and i1 %31, %30
  %buf_extent16 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 0
  %local_laplacian.extent.0 = load i32, ptr %buf_extent16, align 4
  %x7 = sext i32 %local_laplacian.extent.0 to i64
  %buf_extent17 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 1
  %local_laplacian.extent.1 = load i32, ptr %buf_extent17, align 4
  %32 = sext i32 %local_laplacian.extent.1 to i64
  %buf_extent18 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 2
  %local_laplacian.extent.2 = load i32, ptr %buf_extent18, align 4
  %33 = sext i32 %local_laplacian.extent.2 to i64
  %buf_extent19 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 2, i64 3
  %buf_stride20 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 0
  %local_laplacian.stride.0 = load i32, ptr %buf_stride20, align 4
  %buf_stride21 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 1
  %local_laplacian.stride.1 = load i32, ptr %buf_stride21, align 4
  %34 = sext i32 %local_laplacian.stride.1 to i64
  %buf_stride22 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 2
  %local_laplacian.stride.2 = load i32, ptr %buf_stride22, align 4
  %35 = sext i32 %local_laplacian.stride.2 to i64
  %buf_stride23 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 3, i64 3
  %buf_min24 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 0
  %a286 = load i32, ptr %buf_min24, align 4
  %buf_min25 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 1
  %a114 = load i32, ptr %buf_min25, align 4
  %buf_min26 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 2
  %a108 = load i32, ptr %buf_min26, align 4
  %buf_min27 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 4, i64 3
  %buf_elem_size28 = getelementptr inbounds %struct.buffer_t, ptr %local_laplacian.buffer, i64 0, i32 5
  %local_laplacian.elem_size = load i32, ptr %buf_elem_size28, align 4
  %36 = add nsw i32 %a114, %local_laplacian.extent.1
  %37 = add nsw i32 %36, 125
  %a0 = ashr i32 %37, 6
  %38 = add nsw i32 %36, 253
  %39 = ashr i32 %38, 7
  %40 = shl nsw i32 %39, 1
  %b2 = add nsw i32 %40, 2
  %b750 = tail call i32 @llvm.smax.i32(i32 %a0, i32 %b2)
  %41 = add nsw i32 %a114, -126
  %a1 = ashr i32 %41, 6
  %42 = add nsw i32 %a114, -254
  %43 = ashr i32 %42, 7
  %44 = shl nsw i32 %43, 1
  %b3 = add nsw i32 %44, -1
  %b748 = tail call i32 @llvm.smin.i32(i32 %b3, i32 %a1)
  %45 = add nsw i32 %a286, %local_laplacian.extent.0
  %46 = add nsw i32 %45, 125
  %a2 = ashr i32 %46, 6
  %47 = add nsw i32 %45, 253
  %48 = ashr i32 %47, 7
  %49 = shl nsw i32 %48, 1
  %b4 = add nsw i32 %49, 2
  %b753 = tail call i32 @llvm.smax.i32(i32 %a2, i32 %b4)
  %50 = add nsw i32 %a286, -126
  %a3 = ashr i32 %50, 6
  %51 = add nsw i32 %a286, -254
  %52 = ashr i32 %51, 7
  %53 = shl nsw i32 %52, 1
  %b5 = add nsw i32 %53, -1
  %b751 = tail call i32 @llvm.smin.i32(i32 %b5, i32 %a3)
  %54 = add nsw i32 %levels, -1
  %55 = sitofp i32 %54 to float
  %56 = icmp slt i32 %levels, 1
  %57 = select i1 %56, float 0.000000e+00, float %55
  %a4 = fptosi float %57 to i32
  %b6 = add nsw i32 %levels, -2
  %a742 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a4)
  %58 = select i1 %56, float %55, float 0.000000e+00
  %a5 = fptosi float %58 to i32
  %a772 = tail call i32 @llvm.smin.i32(i32 %b6, i32 %a5)
  %59 = add nsw i32 %36, 61
  %a6 = ashr i32 %59, 5
  %60 = shl nsw i32 %b750, 1
  %b8 = add nsw i32 %60, 2
  %b735 = tail call i32 @llvm.smax.i32(i32 %a6, i32 %b8)
  %61 = add nsw i32 %a114, -62
  %a7 = ashr i32 %61, 5
  %62 = shl nsw i32 %b748, 1
  %b9 = add nsw i32 %62, -1
  %b733 = tail call i32 @llvm.smin.i32(i32 %b9, i32 %a7)
  %63 = add nsw i32 %45, 61
  %a8 = ashr i32 %63, 5
  %64 = shl nsw i32 %b753, 1
  %b10 = add nsw i32 %64, 2
  %b739 = tail call i32 @llvm.smax.i32(i32 %a8, i32 %b10)
  %65 = add nsw i32 %a286, -62
  %a9 = ashr i32 %65, 5
  %66 = shl i32 %b751, 1
  %b11 = add nsw i32 %66, -1
  %b737 = tail call i32 @llvm.smin.i32(i32 %b11, i32 %a9)
  %b14 = ashr i32 %61, 6
  %67 = tail call i32 @llvm.smin.i32(i32 %b14, i32 %44)
  %a11 = add nsw i32 %67, -1
  %.not133 = icmp slt i32 %a1, %67
  %b720 = select i1 %.not133, i32 %a1, i32 %a11
  %b17 = ashr i32 %65, 6
  %68 = tail call i32 @llvm.smin.i32(i32 %b17, i32 %53)
  %a14 = add nsw i32 %68, -1
  %.not134 = icmp slt i32 %a3, %68
  %b724 = select i1 %.not134, i32 %a3, i32 %a14
  %69 = add nsw i32 %36, 29
  %a16 = ashr i32 %69, 4
  %70 = shl nsw i32 %b735, 1
  %b18 = add nsw i32 %70, 2
  %b695 = tail call i32 @llvm.smax.i32(i32 %a16, i32 %b18)
  %71 = add nsw i32 %a114, -30
  %a17 = ashr i32 %71, 4
  %72 = shl i32 %b733, 1
  %b19 = add nsw i32 %72, -1
  %a691 = tail call i32 @llvm.smin.i32(i32 %b19, i32 %a17)
  %73 = add nsw i32 %45, 29
  %a18 = ashr i32 %73, 4
  %74 = shl nsw i32 %b739, 1
  %b20 = add nsw i32 %74, 2
  %b709 = tail call i32 @llvm.smax.i32(i32 %a18, i32 %b20)
  %75 = add nsw i32 %a286, -30
  %a19 = ashr i32 %75, 4
  %76 = shl i32 %b737, 1
  %b21 = add nsw i32 %76, -1
  %a705 = tail call i32 @llvm.smin.i32(i32 %b21, i32 %a19)
  %77 = shl nsw i32 %b720, 1
  %b23 = add nsw i32 %77, -1
  %b658 = tail call i32 @llvm.smin.i32(i32 %b23, i32 %a7)
  %78 = shl nsw i32 %b724, 1
  %b25 = add nsw i32 %78, -1
  %b675 = tail call i32 @llvm.smin.i32(i32 %b25, i32 %a9)
  %79 = add nsw i32 %36, 13
  %a24 = ashr i32 %79, 3
  %80 = shl nsw i32 %b695, 1
  %b26 = add nsw i32 %80, 2
  %b624 = tail call i32 @llvm.smax.i32(i32 %a24, i32 %b26)
  %81 = add nsw i32 %a114, -14
  %a25 = ashr i32 %81, 3
  %82 = shl nsw i32 %a691, 1
  %b27 = add nsw i32 %82, -1
  %a620 = tail call i32 @llvm.smin.i32(i32 %b27, i32 %a25)
  %83 = add nsw i32 %45, 13
  %a26 = ashr i32 %83, 3
  %84 = shl nsw i32 %b709, 1
  %b28 = add nsw i32 %84, 2
  %b641 = tail call i32 @llvm.smax.i32(i32 %a26, i32 %b28)
  %85 = add nsw i32 %a286, -14
  %a27 = ashr i32 %85, 3
  %86 = shl nsw i32 %a705, 1
  %b29 = add nsw i32 %86, -1
  %a637 = tail call i32 @llvm.smin.i32(i32 %b29, i32 %a27)
  %87 = shl nsw i32 %b658, 1
  %b31 = add nsw i32 %87, -1
  %a574 = tail call i32 @llvm.smin.i32(i32 %b31, i32 %a17)
  %88 = shl nsw i32 %b675, 1
  %b33 = add nsw i32 %88, -1
  %a595 = tail call i32 @llvm.smin.i32(i32 %b33, i32 %a19)
  %89 = add nsw i32 %36, 5
  %a32 = ashr i32 %89, 2
  %90 = shl nsw i32 %b624, 1
  %b34 = add nsw i32 %90, 2
  %b539 = tail call i32 @llvm.smax.i32(i32 %a32, i32 %b34)
  %91 = add nsw i32 %a114, -6
  %a33 = ashr i32 %91, 2
  %92 = shl nsw i32 %a620, 1
  %b35 = add nsw i32 %92, -1
  %a535 = tail call i32 @llvm.smin.i32(i32 %b35, i32 %a33)
  %93 = add nsw i32 %45, 5
  %a34 = ashr i32 %93, 2
  %94 = shl nsw i32 %b641, 1
  %b36 = add nsw i32 %94, 2
  %b556 = tail call i32 @llvm.smax.i32(i32 %a34, i32 %b36)
  %95 = add nsw i32 %a286, -6
  %a35 = ashr i32 %95, 2
  %96 = shl nsw i32 %a637, 1
  %b37 = add nsw i32 %96, -1
  %a552 = tail call i32 @llvm.smin.i32(i32 %b37, i32 %a35)
  %97 = shl nsw i32 %a574, 1
  %b39 = add nsw i32 %97, -1
  %a485 = tail call i32 @llvm.smin.i32(i32 %b39, i32 %a25)
  %98 = shl nsw i32 %a595, 1
  %b41 = add nsw i32 %98, -1
  %a509 = tail call i32 @llvm.smin.i32(i32 %b41, i32 %a27)
  %99 = add nsw i32 %36, 1
  %a40 = ashr i32 %99, 1
  %100 = shl nsw i32 %b539, 1
  %b42 = add nsw i32 %100, 2
  %b448 = tail call i32 @llvm.smax.i32(i32 %a40, i32 %b42)
  %a41 = ashr i32 %a114, 1
  %b43 = shl nsw i32 %a535, 1
  %f72.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b43, i32 %a41)
  %101 = add nsw i32 %45, 1
  %a42 = ashr i32 %101, 1
  %102 = shl nsw i32 %b556, 1
  %b44 = add nsw i32 %102, 2
  %b465 = tail call i32 @llvm.smax.i32(i32 %a42, i32 %b44)
  %a43 = ashr i32 %a286, 1
  %b45 = shl nsw i32 %a552, 1
  %f72.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b45, i32 %a43)
  %103 = shl nsw i32 %a485, 1
  %b47 = add nsw i32 %103, -1
  %a392 = tail call i32 @llvm.smin.i32(i32 %b47, i32 %a33)
  %104 = shl nsw i32 %a509, 1
  %b49 = add nsw i32 %104, -1
  %a416 = tail call i32 @llvm.smin.i32(i32 %b49, i32 %a35)
  %b51 = shl nsw i32 %a392, 1
  %f4.s0.v4.min.s = tail call i32 @llvm.smin.i32(i32 %b51, i32 %a41)
  %b53 = shl nsw i32 %a416, 1
  %f4.s0.v3.min.s = tail call i32 @llvm.smin.i32(i32 %b53, i32 %a43)
  %a54 = add nsw i32 %36, -1
  %105 = shl nsw i32 %b448, 1
  %b56 = add nsw i32 %105, 2
  %a53 = tail call i32 @llvm.smax.i32(i32 %a54, i32 %b56)
  %.not135 = icmp slt i32 %a53, %36
  %b149 = select i1 %.not135, i32 %a54, i32 %a53
  %106 = shl nsw i32 %f4.s0.v4.min.s, 1
  %b59 = add nsw i32 %106, -3
  %a56 = tail call i32 @llvm.smin.i32(i32 %b59, i32 %a114)
  %107 = shl nsw i32 %f72.s0.v4.min.s, 1
  %b58 = add nsw i32 %107, -3
  %a55 = tail call i32 @llvm.smin.i32(i32 %b58, i32 %a56)
  %a145 = tail call i32 @llvm.smin.i32(i32 %a114, i32 %a55)
  %a60 = add nsw i32 %45, -1
  %108 = shl nsw i32 %b465, 1
  %b62 = add nsw i32 %108, 2
  %a59 = tail call i32 @llvm.smax.i32(i32 %a60, i32 %b62)
  %.not136 = icmp slt i32 %a59, %45
  %b185 = select i1 %.not136, i32 %a60, i32 %a59
  %109 = shl nsw i32 %f4.s0.v3.min.s, 1
  %b65 = add nsw i32 %109, -3
  %a62 = tail call i32 @llvm.smin.i32(i32 %b65, i32 %a286)
  %110 = shl nsw i32 %f72.s0.v3.min.s, 1
  %b64 = add nsw i32 %110, -3
  %a61 = tail call i32 @llvm.smin.i32(i32 %b64, i32 %a62)
  %a181 = tail call i32 @llvm.smin.i32(i32 %a286, i32 %a61)
  %111 = tail call i32 @llvm.smax.i32(i32 %a772, i32 0)
  %112 = fmul float %57, 2.560000e+02
  %a66 = fptosi float %112 to i32
  %113 = shl nsw i32 %levels, 8
  %b68 = add nsw i32 %113, -256
  %a65 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a66)
  %114 = tail call i32 @llvm.smax.i32(i32 %a65, i32 0)
  %115 = tail call i32 @llvm.smax.i32(i32 %a742, i32 0)
  %116 = shl nsw i32 %115, 8
  %117 = fmul float %58, 2.560000e+02
  %a69 = fptosi float %117 to i32
  %a68 = tail call i32 @llvm.smin.i32(i32 %b68, i32 %a69)
  %118 = tail call i32 @llvm.smax.i32(i32 %a68, i32 0)
  %b121 = sub nsw i32 %118, %116
  %b75 = add nsw i32 %b185, -7
  %a72 = tail call i32 @llvm.smin.i32(i32 %b75, i32 %a181)
  %b76 = add nsw i32 %45, -8
  %b74 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a286)
  %a71 = tail call i32 @llvm.smin.i32(i32 %b74, i32 %a72)
  %119 = add i32 %input.extent.0, -1
  %120 = extractelement <2 x i32> %21, i64 0
  %b73 = add i32 %119, %120
  %a70 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a71)
  %121 = tail call i32 @llvm.smax.i32(i32 %a70, i32 %120)
  %122 = sub nsw i32 %b185, %a181
  %123 = and i32 %122, -8
  %124 = add i32 %a181, 7
  %a78 = add i32 %124, %123
  %a77 = tail call i32 @llvm.smin.i32(i32 %b185, i32 %a78)
  %125 = add nsw i32 %local_laplacian.extent.0, -1
  %126 = and i32 %125, -8
  %127 = add nsw i32 %a286, %126
  %a79 = add nsw i32 %127, 7
  %b79 = tail call i32 @llvm.smin.i32(i32 %a60, i32 %a79)
  %a76 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b79)
  %a75 = tail call i32 @llvm.smin.i32(i32 %b73, i32 %a76)
  %128 = tail call i32 @llvm.smax.i32(i32 %a75, i32 %120)
  %b90 = add nsw i32 %b149, -31
  %a87 = tail call i32 @llvm.smin.i32(i32 %b90, i32 %a145)
  %b91 = add nsw i32 %36, -64
  %b89 = tail call i32 @llvm.smin.i32(i32 %b91, i32 %a114)
  %a86 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a87)
  %129 = extractelement <2 x i32> %21, i64 1
  %130 = add nsw i32 %129, %17
  %b88 = add nsw i32 %130, -1
  %a85 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a86)
  %131 = tail call i32 @llvm.smax.i32(i32 %a85, i32 %129)
  %132 = sub nsw i32 %b149, %a145
  %133 = ashr i32 %132, 5
  %134 = and i32 %132, -32
  %135 = add i32 %a145, 31
  %a93 = add i32 %135, %134
  %a92 = tail call i32 @llvm.smin.i32(i32 %b149, i32 %a93)
  %136 = add nsw i32 %local_laplacian.extent.1, -1
  %137 = ashr i32 %136, 6
  %138 = or i32 %136, 63
  %a94 = add i32 %138, %a114
  %b94 = tail call i32 @llvm.smin.i32(i32 %a54, i32 %a94)
  %a91 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b94)
  %a90 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %a91)
  %139 = tail call i32 @llvm.smax.i32(i32 %a90, i32 %129)
  %140 = add i32 %19, -1
  %b104 = add i32 %140, %b108
  %a101 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a108)
  %141 = tail call i32 @llvm.smin.i32(i32 %a101, i32 0)
  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 %b108)
  %143 = add nsw i32 %a108, %local_laplacian.extent.2
  %a105 = add nsw i32 %143, -1
  %144 = icmp sgt i32 %143, 3
  %a104 = select i1 %144, i32 %a105, i32 2
  %a103 = tail call i32 @llvm.smin.i32(i32 %b104, i32 %a104)
  %145 = tail call i32 @llvm.smax.i32(i32 %a103, i32 %b108)
  %local_laplacian.extent.0.required.s = sub nsw i32 %b79, %b74
  %local_laplacian.extent.1.required.s = sub nsw i32 %b94, %b89
  %146 = add nsw i32 %local_laplacian.extent.1.required.s, 1
  %147 = add nsw i32 %local_laplacian.extent.0.required.s, 1
  %local_laplacian.stride.2.required = mul nsw i32 %146, %147
  br i1 %input.host_and_dev_are_null, label %after_bb, label %after_bb.thread

after_bb:                                         ; preds = %"assert succeeded11"
  %input.extent.0.required.s = sub nsw i32 %128, %121
  %148 = add nsw i32 %input.extent.0.required.s, 1
  %input.extent.1.required.s = sub nsw i32 %139, %131
  %149 = add nsw i32 %input.extent.1.required.s, 1
  %input.stride.2.required = mul nsw i32 %149, %148
  store i32 2, ptr %buf_elem_size, align 4
  store i32 %121, ptr %buf_min, align 4
  store i32 %148, ptr %buf_extent, align 4
  store i32 1, ptr %buf_stride, align 4
  store i32 %131, ptr %buf_min7, align 4
  store i32 %149, ptr %buf_extent1, align 4
  store i32 %148, ptr %buf_stride4, align 4
  store i32 %142, ptr %buf_min8, align 4
  %reass.sub569 = sub i32 %145, %142
  %150 = add i32 %reass.sub569, 1
  store i32 %150, ptr %buf_extent2, align 4
  store i32 %input.stride.2.required, ptr %buf_stride5, align 4
  store i32 0, ptr %buf_min9, align 4
  store i32 0, ptr %buf_extent3, align 4
  store i32 0, ptr %buf_stride6, align 4
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %call_destructor.exit210.thread374

after_bb.thread:                                  ; preds = %"assert succeeded11"
  br i1 %local_laplacian.host_and_dev_are_null, label %after_bb44.thread, label %true_bb58

after_bb44.thread:                                ; preds = %after_bb.thread, %after_bb
  store i32 2, ptr %buf_elem_size28, align 4
  store i32 %b74, ptr %buf_min24, align 4
  store i32 %147, ptr %buf_extent16, align 4
  store i32 1, ptr %buf_stride20, align 4
  store i32 %b89, ptr %buf_min25, align 4
  store i32 %146, ptr %buf_extent17, align 4
  store i32 %147, ptr %buf_stride21, align 4
  store i32 %local_laplacian.stride.2.required, ptr %buf_stride22, align 4
  store i32 0, ptr %buf_min27, align 4
  store i32 0, ptr %buf_extent19, align 4
  store i32 0, ptr %buf_stride23, align 4
  br label %call_destructor.exit210.thread374

true_bb58:                                        ; preds = %after_bb.thread
  %151 = icmp eq i32 %input.elem_size, 2
  br i1 %151, label %"assert succeeded62", label %"assert failed61", !prof !5

"assert failed61":                                ; preds = %true_bb58
  %152 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.3, ptr nonnull @str.4, i32 %input.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded62":                             ; preds = %true_bb58
  %153 = icmp eq i32 %local_laplacian.elem_size, 2
  br i1 %153, label %"assert succeeded64", label %"assert failed63", !prof !5

"assert failed63":                                ; preds = %"assert succeeded62"
  %154 = tail call i32 @halide_error_bad_elem_size(ptr null, ptr nonnull @str.5, ptr nonnull @str.4, i32 %local_laplacian.elem_size, i32 2) #4
  br label %call_destructor.exit210.thread374

"assert succeeded64":                             ; preds = %"assert succeeded62"
  %155 = sub nsw i32 %128, %input.extent.0
  %.not102 = icmp slt i32 %155, %120
  br i1 %.not102, label %"assert succeeded66", label %"assert failed65", !prof !5

"assert failed65":                                ; preds = %"assert succeeded64"
  %156 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 0, i32 %121, i32 %128, i32 %120, i32 %b73) #4
  br label %call_destructor.exit210.thread374

"assert succeeded66":                             ; preds = %"assert succeeded64"
  %157 = sub nsw i32 %139, %17
  %.not103 = icmp slt i32 %157, %129
  br i1 %.not103, label %"assert succeeded68", label %"assert failed67", !prof !5

"assert failed67":                                ; preds = %"assert succeeded66"
  %158 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 1, i32 %131, i32 %139, i32 %129, i32 %b88) #4
  br label %call_destructor.exit210.thread374

"assert succeeded68":                             ; preds = %"assert succeeded66"
  %159 = sub nsw i32 %145, %19
  %.not104 = icmp slt i32 %159, %b108
  br i1 %.not104, label %"assert succeeded70", label %"assert failed69", !prof !5

"assert failed69":                                ; preds = %"assert succeeded68"
  %160 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.3, i32 2, i32 %142, i32 %145, i32 %b108, i32 %b104) #4
  br label %call_destructor.exit210.thread374

"assert succeeded70":                             ; preds = %"assert succeeded68"
  %161 = sub nsw i32 %b79, %local_laplacian.extent.0
  %.not105 = icmp slt i32 %161, %a286
  %162 = icmp sle i32 %a286, %b76
  %163 = and i1 %162, %.not105
  br i1 %163, label %"assert succeeded72", label %"assert failed71", !prof !5

"assert failed71":                                ; preds = %"assert succeeded70"
  %164 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 0, i32 %b74, i32 %b79, i32 %a286, i32 %a60) #4
  br label %call_destructor.exit210.thread374

"assert succeeded72":                             ; preds = %"assert succeeded70"
  %165 = sub nsw i32 %b94, %local_laplacian.extent.1
  %.not106 = icmp slt i32 %165, %a114
  %166 = icmp sle i32 %a114, %b91
  %167 = and i1 %166, %.not106
  br i1 %167, label %"assert succeeded74", label %"assert failed73", !prof !5

"assert failed73":                                ; preds = %"assert succeeded72"
  %168 = tail call i32 @halide_error_access_out_of_bounds(ptr null, ptr nonnull @str.5, i32 1, i32 %b89, i32 %b94, i32 %a114, i32 %a54) #4
  br label %call_destructor.exit210.thread374

"assert succeeded74":                             ; preds = %"assert succeeded72"
  %169 = icmp eq i32 %input.stride.0, 1
  br i1 %169, label %"assert succeeded76", label %"assert failed75", !prof !5

"assert failed75":                                ; preds = %"assert succeeded74"
  %170 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.6, i32 %input.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded76":                             ; preds = %"assert succeeded74"
  %171 = icmp eq i32 %local_laplacian.stride.0, 1
  br i1 %171, label %"assert succeeded78", label %"assert failed77", !prof !5

"assert failed77":                                ; preds = %"assert succeeded76"
  %172 = tail call i32 @halide_error_constraint_violated(ptr null, ptr nonnull @str.8, i32 %local_laplacian.stride.0, ptr nonnull @str.7, i32 1) #4
  br label %call_destructor.exit210.thread374

"assert succeeded78":                             ; preds = %"assert succeeded76"
  %input.total_extent.1 = mul nsw i64 %18, %x1
  %local_laplacian.total_extent.1 = mul nsw i64 %32, %x7
  %173 = tail call i64 @llvm.abs.i64(i64 %x1, i1 true)
  %174 = icmp ult i64 %173, 2147483648
  br i1 %174, label %"assert succeeded80", label %"assert failed79", !prof !5

"assert failed79":                                ; preds = %"assert succeeded78"
  %175 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %173, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded80":                             ; preds = %"assert succeeded78"
  %x2 = mul nsw i64 %14, %18
  %176 = tail call i64 @llvm.abs.i64(i64 %x2, i1 true)
  %177 = icmp ult i64 %176, 2147483648
  br i1 %177, label %"assert succeeded82", label %"assert failed81", !prof !5

"assert failed81":                                ; preds = %"assert succeeded80"
  %178 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %176, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded82":                             ; preds = %"assert succeeded80"
  %179 = icmp slt i64 %input.total_extent.1, 2147483648
  br i1 %179, label %"assert succeeded84", label %"assert failed83", !prof !5

"assert failed83":                                ; preds = %"assert succeeded82"
  %180 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %input.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded84":                             ; preds = %"assert succeeded82"
  %x4 = mul nsw i64 %15, %20
  %181 = tail call i64 @llvm.abs.i64(i64 %x4, i1 true)
  %182 = icmp ult i64 %181, 2147483648
  br i1 %182, label %"assert succeeded86", label %"assert failed85", !prof !5

"assert failed85":                                ; preds = %"assert succeeded84"
  %183 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str, i64 %181, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded86":                             ; preds = %"assert succeeded84"
  %184 = mul nsw i64 %input.total_extent.1, %20
  %185 = icmp slt i64 %184, 2147483648
  br i1 %185, label %"assert succeeded88", label %"assert failed87", !prof !5

"assert failed87":                                ; preds = %"assert succeeded86"
  %186 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str, i64 %184, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded88":                             ; preds = %"assert succeeded86"
  %187 = tail call i64 @llvm.abs.i64(i64 %x7, i1 true)
  %188 = icmp ult i64 %187, 2147483648
  br i1 %188, label %"assert succeeded90", label %"assert failed89", !prof !5

"assert failed89":                                ; preds = %"assert succeeded88"
  %189 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %187, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded90":                             ; preds = %"assert succeeded88"
  %x8 = mul nsw i64 %34, %32
  %190 = tail call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %191 = icmp ult i64 %190, 2147483648
  br i1 %191, label %"assert succeeded92", label %"assert failed91", !prof !5

"assert failed91":                                ; preds = %"assert succeeded90"
  %192 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %190, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded92":                             ; preds = %"assert succeeded90"
  %193 = icmp slt i64 %local_laplacian.total_extent.1, 2147483648
  br i1 %193, label %"assert succeeded94", label %"assert failed93", !prof !5

"assert failed93":                                ; preds = %"assert succeeded92"
  %194 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %local_laplacian.total_extent.1, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded94":                             ; preds = %"assert succeeded92"
  %x10 = mul nsw i64 %35, %33
  %195 = tail call i64 @llvm.abs.i64(i64 %x10, i1 true)
  %196 = icmp ult i64 %195, 2147483648
  br i1 %196, label %"assert succeeded96", label %"assert failed95", !prof !5

"assert failed95":                                ; preds = %"assert succeeded94"
  %197 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.2, i64 %195, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded96":                             ; preds = %"assert succeeded94"
  %198 = mul nsw i64 %local_laplacian.total_extent.1, %33
  %199 = icmp slt i64 %198, 2147483648
  br i1 %199, label %"assert succeeded98", label %"assert failed97", !prof !5

"assert failed97":                                ; preds = %"assert succeeded96"
  %200 = tail call i32 @halide_error_buffer_extents_too_large(ptr null, ptr nonnull @str.2, i64 %198, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded98":                             ; preds = %"assert succeeded96"
  %201 = shl i32 %111, 8
  %202 = add i32 %201, %b121
  %f0.v3.extent_realized.s.s = sub i32 %114, %202
  %203 = add nsw i32 %f0.v3.extent_realized.s.s, 257
  %204 = zext i32 %203 to i64
  %205 = shl nuw nsw i64 %204, 2
  %206 = icmp ult i32 %203, 536870912
  br i1 %206, label %"assert succeeded100", label %"assert failed99", !prof !5

"assert failed99":                                ; preds = %"assert succeeded98"
  %207 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.9, i64 %205, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded100":                            ; preds = %"assert succeeded98"
  %208 = add nuw nsw i64 %205, 4
  %209 = tail call ptr @halide_malloc(ptr null, i64 %208)
  %.not107 = icmp eq ptr %209, null
  br i1 %.not107, label %"assert failed101", label %"produce f0", !prof !4

"assert failed101":                               ; preds = %"assert succeeded100"
  %210 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f0":                                     ; preds = %"assert succeeded100"
  %211 = icmp sgt i32 %f0.v3.extent_realized.s.s, -257
  br i1 %211, label %"for f0.s0.v3.preheader", label %"consume f0", !prof !5

"for f0.s0.v3.preheader":                         ; preds = %"produce f0"
  %212 = add nsw i32 %b121, -256
  %213 = sext i32 %b121 to i64
  %214 = shl nsw i64 %213, 2
  %215 = sub nsw i64 1024, %214
  %scevgep480 = getelementptr i8, ptr %209, i64 %215
  %216 = sext i32 %212 to i64
  %217 = add nuw i32 %114, 256
  %218 = sub i32 %217, %202
  %219 = zext i32 %218 to i64
  %220 = add nuw nsw i64 %219, 1
  %min.iters.check = icmp ult i32 %218, 3
  br i1 %min.iters.check, label %"for f0.s0.v3.preheader1071", label %vector.ph

vector.ph:                                        ; preds = %"for f0.s0.v3.preheader"
  %n.vec = and i64 %220, -4
  %ind.end = add nsw i64 %n.vec, %216
  %.cast = trunc i64 %n.vec to i32
  %ind.end847 = sub i32 %203, %.cast
  %.splatinsert = insertelement <4 x i32> poison, i32 %212, i64 0
  %.splat = shufflevector <4 x i32> %.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %induction = add <4 x i32> %.splat, <i32 0, i32 1, i32 2, i32 3>
  %broadcast.splatinsert = insertelement <4 x float> poison, float %alpha, i64 0
  %broadcast.splat = shufflevector <4 x float> %broadcast.splatinsert, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i32> [ %induction, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %offset.idx = add i64 %index, %216
  %221 = sitofp <4 x i32> %vec.ind to <4 x float>
  %222 = fmul <4 x float> %221, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %223 = fsub <4 x float> zeroinitializer, %222
  %224 = fmul <4 x float> %223, %221
  %225 = fmul <4 x float> %224, <float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000, float 0x3F60000000000000>
  %226 = fmul <4 x float> %225, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %227 = tail call <4 x float> @llvm.floor.v4f32(<4 x float> %226)
  %228 = fptosi <4 x float> %227 to <4 x i32>
  %229 = fmul <4 x float> %227, <float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000, float 0x3EB7F7D1C0000000>
  %230 = fmul <4 x float> %227, <float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000, float 0x3FE62E4000000000>
  %231 = fsub <4 x float> %225, %230
  %232 = fsub <4 x float> %231, %229
  %233 = fmul <4 x float> %232, %232
  %234 = shl <4 x i32> %228, <i32 23, i32 23, i32 23, i32 23>
  %235 = add <4 x i32> %234, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %236 = bitcast <4 x i32> %235 to <4 x float>
  %237 = fmul <4 x float> %233, <float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000, float 0x3F5385CCC0000000>
  %238 = fadd <4 x float> %237, <float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000, float 0x3FA54CD780000000>
  %239 = fmul <4 x float> %233, %238
  %240 = fadd <4 x float> %239, <float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000, float 0x3FDFFFFBC0000000>
  %241 = fmul <4 x float> %233, %240
  %242 = fadd <4 x float> %241, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %243 = fmul <4 x float> %233, <float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000, float 0x3F34F2FE60000000>
  %244 = fadd <4 x float> %243, <float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000, float 0x3F81632540000000>
  %245 = fmul <4 x float> %233, %244
  %246 = fadd <4 x float> %245, <float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000, float 0x3FC555C3E0000000>
  %247 = fmul <4 x float> %233, %246
  %248 = fadd <4 x float> %247, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %249 = fmul <4 x float> %232, %248
  %250 = fadd <4 x float> %242, %249
  %251 = fmul <4 x float> %250, %236
  %252 = icmp slt <4 x i32> %228, <i32 128, i32 128, i32 128, i32 128>
  %253 = select <4 x i1> %252, <4 x float> %251, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %254 = icmp sgt <4 x i32> %228, <i32 -127, i32 -127, i32 -127, i32 -127>
  %255 = select <4 x i1> %254, <4 x float> %253, <4 x float> zeroinitializer
  %256 = fmul <4 x float> %broadcast.splat, %221
  %257 = fmul <4 x float> %256, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %258 = fmul <4 x float> %257, %255
  %259 = getelementptr float, ptr %scevgep480, i64 %offset.idx
  store <4 x float> %258, ptr %259, align 4, !tbaa !6
  %index.next = add nuw i64 %index, 4
  %vec.ind.next = add <4 x i32> %vec.ind, <i32 4, i32 4, i32 4, i32 4>
  %260 = icmp eq i64 %index.next, %n.vec
  br i1 %260, label %middle.block, label %vector.body, !llvm.loop !9

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %220, %n.vec
  br i1 %cmp.n, label %"consume f0", label %"for f0.s0.v3.preheader1071"

"for f0.s0.v3.preheader1071":                     ; preds = %"for f0.s0.v3.preheader", %middle.block
  %lsr.iv482.ph = phi i64 [ %216, %"for f0.s0.v3.preheader" ], [ %ind.end, %middle.block ]
  %lsr.iv478.ph = phi i32 [ %203, %"for f0.s0.v3.preheader" ], [ %ind.end847, %middle.block ]
  br label %"for f0.s0.v3"

"for f0.s0.v3":                                   ; preds = %"for f0.s0.v3.preheader1071", %"for f0.s0.v3"
  %lsr.iv482 = phi i64 [ %lsr.iv.next483, %"for f0.s0.v3" ], [ %lsr.iv482.ph, %"for f0.s0.v3.preheader1071" ]
  %lsr.iv478 = phi i32 [ %lsr.iv.next479, %"for f0.s0.v3" ], [ %lsr.iv478.ph, %"for f0.s0.v3.preheader1071" ]
  %tmp487 = trunc i64 %lsr.iv482 to i32
  %261 = sitofp i32 %tmp487 to float
  %262 = fmul float %261, 3.906250e-03
  %263 = fsub float 0.000000e+00, %262
  %t3062 = fmul float %263, %261
  %264 = fmul float %t3062, 0x3F60000000000000
  %265 = fmul float %264, 0x3FF7154760000000
  %y.i = tail call float @llvm.floor.f32(float %265) #8
  %t3064 = fptosi float %y.i to i32
  %266 = fmul float %y.i, 0x3EB7F7D1C0000000
  %267 = fmul float %y.i, 0x3FE62E4000000000
  %268 = fsub float %264, %267
  %t3065 = fsub float %268, %266
  %t3066 = fmul float %t3065, %t3065
  %269 = shl i32 %t3064, 23
  %270 = add i32 %269, 1065353216
  %271 = bitcast i32 %270 to float
  %272 = insertelement <2 x float> poison, float %t3066, i64 0
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> zeroinitializer
  %274 = fmul <2 x float> %273, <float 0x3F5385CCC0000000, float 0x3F34F2FE60000000>
  %275 = fadd <2 x float> %274, <float 0x3FA54CD780000000, float 0x3F81632540000000>
  %276 = fmul <2 x float> %273, %275
  %277 = fadd <2 x float> %276, <float 0x3FDFFFFBC0000000, float 0x3FC555C3E0000000>
  %278 = fmul <2 x float> %273, %277
  %279 = fadd <2 x float> %278, <float 1.000000e+00, float 1.000000e+00>
  %280 = extractelement <2 x float> %279, i64 1
  %281 = fmul float %t3065, %280
  %282 = extractelement <2 x float> %279, i64 0
  %283 = fadd float %282, %281
  %284 = fmul float %283, %271
  %285 = icmp slt i32 %t3064, 128
  %286 = select i1 %285, float %284, float 0x7FF0000000000000
  %287 = icmp sgt i32 %t3064, -127
  %288 = select i1 %287, float %286, float 0.000000e+00
  %289 = fmul float %261, %alpha
  %290 = fmul float %289, 3.906250e-03
  %291 = fmul float %290, %288
  %scevgep484 = getelementptr float, ptr %scevgep480, i64 %lsr.iv482
  store float %291, ptr %scevgep484, align 4, !tbaa !6
  %lsr.iv.next479 = add i32 %lsr.iv478, -1
  %lsr.iv.next483 = add nsw i64 %lsr.iv482, 1
  %.not132 = icmp eq i32 %lsr.iv.next479, 0
  br i1 %.not132, label %"consume f0", label %"for f0.s0.v3", !llvm.loop !12

"consume f0":                                     ; preds = %"for f0.s0.v3", %middle.block, %"produce f0"
  %a127 = add nsw i32 %f72.s0.v4.min.s, -1
  %b129 = add nsw i32 %b448, -31
  %.not137 = icmp slt i32 %b129, %f72.s0.v4.min.s
  %b135 = select i1 %.not137, i32 %b129, i32 %a127
  %a134 = add nsw i32 %f4.s0.v4.min.s, -1
  %b136 = add nsw i32 %b448, -7
  %.not138 = icmp slt i32 %b136, %f4.s0.v4.min.s
  %a133 = select i1 %.not138, i32 %b136, i32 %a134
  %292 = tail call i32 @llvm.smin.i32(i32 %b135, i32 %a133)
  %293 = shl nsw i32 %292, 1
  %a132 = add nsw i32 %293, -1
  %b134 = shl nsw i32 %b135, 1
  %b133 = or i32 %b134, 1
  %.not139 = icmp slt i32 %b133, %293
  %a130 = select i1 %.not139, i32 %b133, i32 %a132
  %b132 = add nsw i32 %b134, 2
  %a129 = tail call i32 @llvm.smin.i32(i32 %b132, i32 %a130)
  %a128 = tail call i32 @llvm.smin.i32(i32 %b89, i32 %a129)
  %f2.v4.min_realized = tail call i32 @llvm.smin.i32(i32 %a87, i32 %a128)
  %294 = sub nsw i32 %b448, %f72.s0.v4.min.s
  %295 = add nsw i32 %294, 1
  %296 = and i32 %295, -32
  %297 = add nsw i32 %f72.s0.v4.min.s, 30
  %a136 = add i32 %297, %296
  %t1938 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a136)
  %298 = sub nsw i32 %b448, %f4.s0.v4.min.s
  %299 = add nsw i32 %298, 1
  %300 = and i32 %299, -8
  %301 = add nsw i32 %f4.s0.v4.min.s, 6
  %a154 = add i32 %301, %300
  %302 = tail call i32 @llvm.smin.i32(i32 %b448, i32 %a154)
  %303 = shl nsw i32 %302, 1
  %a153 = add nsw i32 %303, 2
  %304 = shl nsw i32 %t1938, 1
  %b155 = add nsw i32 %304, -1
  %.not140 = icmp slt i32 %a153, %304
  %a152 = select i1 %.not140, i32 %b155, i32 %a153
  %a151 = tail call i32 @llvm.smax.i32(i32 %a152, i32 %304)
  %b153 = or i32 %304, 1
  %a150 = tail call i32 @llvm.smax.i32(i32 %a151, i32 %b153)
  %b152 = add nsw i32 %304, 2
  %b150 = tail call i32 @llvm.smax.i32(i32 %a150, i32 %b152)
  %b148 = tail call i32 @llvm.smax.i32(i32 %b94, i32 %b150)
  %305 = tail call i32 @llvm.smax.i32(i32 %a92, i32 %b148)
  %a155 = add nsw i32 %f72.s0.v3.min.s, -1
  %b157 = add nsw i32 %b465, -7
  %.not141 = icmp slt i32 %b157, %f72.s0.v3.min.s
  %b165 = select i1 %.not141, i32 %b157, i32 %a155
  %a164 = add nsw i32 %f4.s0.v3.min.s, -1
  %.not142 = icmp slt i32 %b157, %f4.s0.v3.min.s
  %a163 = select i1 %.not142, i32 %b157, i32 %a164
  %306 = tail call i32 @llvm.smin.i32(i32 %b165, i32 %a163)
  %307 = shl nsw i32 %306, 1
  %a162 = add nsw i32 %307, -1
  %b164 = shl nsw i32 %b165, 1
  %b163 = or i32 %b164, 1
  %.not143 = icmp slt i32 %b163, %307
  %a160 = select i1 %.not143, i32 %b163, i32 %a162
  %b162 = add nsw i32 %b164, 2
  %a159 = tail call i32 @llvm.smin.i32(i32 %b162, i32 %a160)
  %b161 = add nsw i32 %b164, -1
  %a158 = tail call i32 @llvm.smin.i32(i32 %b161, i32 %a159)
  %308 = icmp sgt i32 %126, 0
  %a165 = select i1 %308, i32 %a286, i32 %127
  %b160 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %a165)
  %b159 = tail call i32 @llvm.smin.i32(i32 %b160, i32 %a158)
  %a156 = tail call i32 @llvm.smin.i32(i32 %b159, i32 %b74)
  %f2.v3.min_realized = tail call i32 @llvm.smin.i32(i32 %a72, i32 %a156)
  %reass.sub = sub i32 %b465, %f72.s0.v3.min.s
  %309 = add i32 %reass.sub, 1
  %310 = and i32 %309, -8
  %311 = add nsw i32 %f72.s0.v3.min.s, 6
  %a168 = add i32 %311, %310
  %t1943 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a168)
  %reass.sub527 = sub i32 %b465, %f4.s0.v3.min.s
  %312 = add i32 %reass.sub527, 1
  %313 = and i32 %312, -8
  %314 = add nsw i32 %f4.s0.v3.min.s, 6
  %a191 = add i32 %314, %313
  %315 = tail call i32 @llvm.smin.i32(i32 %b465, i32 %a191)
  %316 = shl nsw i32 %315, 1
  %a190 = add nsw i32 %316, 2
  %317 = shl nsw i32 %t1943, 1
  %b192 = add nsw i32 %317, -1
  %.not144 = icmp slt i32 %a190, %317
  %a189 = select i1 %.not144, i32 %b192, i32 %a190
  %a188 = tail call i32 @llvm.smax.i32(i32 %a189, i32 %317)
  %b190 = or i32 %317, 1
  %a187 = tail call i32 @llvm.smax.i32(i32 %a188, i32 %b190)
  %b189 = add nsw i32 %317, 2
  %a186 = tail call i32 @llvm.smax.i32(i32 %a187, i32 %b189)
  %318 = and i32 %local_laplacian.extent.0.required.s, -8
  %a192 = add nsw i32 %318, %b74
  %b194 = tail call i32 @llvm.smin.i32(i32 %b76, i32 %127)
  %319 = tail call i32 @llvm.smin.i32(i32 %b194, i32 %a192)
  %b188 = add nsw i32 %319, 7
  %b186 = tail call i32 @llvm.smax.i32(i32 %a186, i32 %b188)
  %b184 = tail call i32 @llvm.smax.i32(i32 %b79, i32 %b186)
  %320 = tail call i32 @llvm.smax.i32(i32 %a77, i32 %b184)
  %f2.v3.extent_realized.s = sub nsw i32 %320, %f2.v3.min_realized
  %reass.sub528 = sub i32 %305, %f2.v4.min_realized
  %321 = add i32 %reass.sub528, 1
  %322 = zext i32 %321 to i64
  %323 = add nsw i32 %f2.v3.extent_realized.s, 1
  %324 = zext i32 %323 to i64
  %325 = shl nuw nsw i64 %324, 2
  %326 = mul i64 %325, %322
  %327 = icmp ult i64 %326, 2147483648
  %328 = and i64 %325, 4294967292
  %329 = mul nuw i64 %328, %322
  %330 = lshr i64 %329, 32
  %331 = lshr i64 %324, 30
  %332 = mul nuw nsw i64 %331, %322
  %333 = add nuw nsw i64 %330, %332
  %334 = icmp ult i64 %333, 4294967296
  %335 = and i1 %327, %334
  br i1 %335, label %"assert succeeded104", label %"assert failed103", !prof !5

"assert failed103":                               ; preds = %"consume f0"
  %336 = tail call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.10, i64 %326, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded104":                            ; preds = %"consume f0"
  %337 = add nuw nsw i64 %326, 4
  %338 = tail call ptr @halide_malloc(ptr null, i64 %337)
  %.not529 = icmp eq ptr %338, null
  br i1 %.not529, label %"assert failed105", label %"produce f2", !prof !4

"assert failed105":                               ; preds = %"assert succeeded104"
  %339 = tail call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f2":                                     ; preds = %"assert succeeded104"
  %340 = sub nsw i32 %129, %a145
  %341 = add nsw i32 %340, 31
  %a195 = ashr i32 %341, 5
  %342 = icmp sgt i32 %340, 0
  %343 = select i1 %342, i32 %a195, i32 0
  %b196 = add nsw i32 %133, 1
  %.not145 = icmp slt i32 %133, %343
  %f2.s0.v4.v4.prologue = select i1 %.not145, i32 %b196, i32 %343
  %344 = sub nsw i32 %130, %a145
  %345 = ashr i32 %344, 5
  %a200 = add nsw i32 %345, -1
  %346 = tail call i32 @llvm.smin.i32(i32 %b88, i32 %b90)
  %347 = sub nsw i32 %346, %a145
  %b202 = ashr i32 %347, 5
  %.not146 = icmp slt i32 %b202, %345
  %a199 = select i1 %.not146, i32 %b202, i32 %a200
  %348 = tail call i32 @llvm.smin.i32(i32 %133, i32 %a199)
  %b198 = add nsw i32 %348, 1
  %f2.s0.v4.v4.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v4.v4.prologue, i32 %b198)
  store i32 %b185, ptr %12, align 8
  %349 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 1
  store i32 %a181, ptr %349, align 4
  %350 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 2
  store i32 %b149, ptr %350, align 8
  %351 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 3
  store i32 %a145, ptr %351, align 4
  %352 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 4
  store i32 %f2.s0.v4.v4.epilogue, ptr %352, align 8
  %353 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 5
  store i32 %f2.s0.v4.v4.prologue, ptr %353, align 4
  %354 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 6
  store i32 %f2.v3.extent_realized.s, ptr %354, align 8
  %355 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 7
  store i32 %f2.v3.min_realized, ptr %355, align 4
  %356 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 8
  store i32 %f2.v4.min_realized, ptr %356, align 8
  %357 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 9
  store i32 %input.extent.0, ptr %357, align 4
  %358 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 10
  %359 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %359, ptr %358, align 8
  %360 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 14
  store i32 %b108, ptr %360, align 8
  %361 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 15
  store i32 %input.stride.1, ptr %361, align 4
  %362 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 16
  store i32 %input.stride.2, ptr %362, align 8
  %363 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 17
  store ptr %338, ptr %363, align 8
  %364 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 18
  store ptr null, ptr %364, align 8
  %365 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 19
  store ptr %input.host, ptr %365, align 8
  %366 = getelementptr inbounds %closure_t, ptr %12, i64 0, i32 20
  store ptr %input.buffer, ptr %366, align 8
  %367 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f2.s0.v4.v4, i32 0, i32 %b196, ptr nonnull %12)
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %"consume f2", label %call_destructor.exit210.thread374, !prof !5

"consume f2":                                     ; preds = %"produce f2"
  %b252 = add nuw nsw i32 %115, 1
  %a249 = call i32 @llvm.smax.i32(i32 %a742, i32 %b252)
  %f4.v6.extent_realized.s = sub nsw i32 %a249, %111
  %369 = ashr i32 %b89, 1
  %a256 = add nsw i32 %369, -1
  %370 = add nsw i32 %b89, 3
  %b258 = ashr i32 %370, 1
  %.not147 = icmp slt i32 %b258, %369
  %a255 = select i1 %.not147, i32 %b258, i32 %a256
  %b259 = add nsw i32 %b539, -7
  %371 = call i32 @llvm.smin.i32(i32 %b259, i32 %a392)
  %372 = shl nsw i32 %371, 1
  %b257 = add nsw i32 %372, -1
  %a254 = call i32 @llvm.smin.i32(i32 %b257, i32 %a255)
  %a253 = call i32 @llvm.smin.i32(i32 %a256, i32 %a254)
  %a252 = call i32 @llvm.smin.i32(i32 %369, i32 %a253)
  %f4.v4.min_realized = call i32 @llvm.smin.i32(i32 %a133, i32 %a252)
  %373 = sub nsw i32 %b539, %a392
  %374 = ashr i32 %373, 3
  %375 = and i32 %373, -8
  %376 = add nsw i32 %a392, 7
  %a271 = add i32 %376, %375
  %377 = call i32 @llvm.smin.i32(i32 %b539, i32 %a271)
  %378 = shl nsw i32 %377, 1
  %a270 = add nsw i32 %378, 2
  %379 = ashr i32 %b94, 1
  %b272 = add nsw i32 %379, 1
  %a269 = call i32 @llvm.smax.i32(i32 %a270, i32 %b272)
  %b269 = call i32 @llvm.smax.i32(i32 %a269, i32 %379)
  %380 = call i32 @llvm.smax.i32(i32 %302, i32 %b269)
  %b280 = add nsw i32 %b556, -7
  %381 = call i32 @llvm.smin.i32(i32 %b280, i32 %a416)
  %382 = shl nsw i32 %381, 1
  %a277 = add nsw i32 %382, -1
  %383 = ashr i32 %b74, 1
  %a279 = add nsw i32 %383, -1
  %384 = ashr i32 %b79, 1
  %b281 = add nsw i32 %384, -6
  %.not148 = icmp slt i32 %b281, %383
  %b279 = select i1 %.not148, i32 %b281, i32 %a279
  %.not149 = icmp slt i32 %b279, %382
  %a276 = select i1 %.not149, i32 %b279, i32 %a277
  %385 = ashr i32 %b160, 1
  %b278 = add nsw i32 %385, -1
  %a275 = call i32 @llvm.smin.i32(i32 %b278, i32 %a276)
  %a274 = call i32 @llvm.smin.i32(i32 %385, i32 %a275)
  %f4.v3.min_realized = call i32 @llvm.smin.i32(i32 %a163, i32 %a274)
  %386 = sub nsw i32 %b556, %a416
  %387 = and i32 %386, -8
  %388 = add nsw i32 %a416, 7
  %a299 = add i32 %388, %387
  %389 = call i32 @llvm.smin.i32(i32 %b556, i32 %a299)
  %390 = shl nsw i32 %389, 1
  %a298 = add nsw i32 %390, 2
  %reass.sub530 = sub nsw i32 %384, %383
  %391 = add i32 %reass.sub530, 2
  %392 = and i32 %391, -8
  %393 = add nsw i32 %392, %383
  %a300 = add nsw i32 %393, -1
  %.not150 = icmp slt i32 %b281, %393
  %394 = select i1 %.not150, i32 %b281, i32 %a300
  %b300 = add nsw i32 %394, 7
  %a297 = call i32 @llvm.smax.i32(i32 %a298, i32 %b300)
  %395 = add nsw i32 %319, 9
  %b299 = ashr i32 %395, 1
  %a296 = call i32 @llvm.smax.i32(i32 %a297, i32 %b299)
  %b298 = ashr i32 %b188, 1
  %b296 = call i32 @llvm.smax.i32(i32 %a296, i32 %b298)
  %396 = call i32 @llvm.smax.i32(i32 %315, i32 %b296)
  %f4.v3.extent_realized.s = sub nsw i32 %396, %f4.v3.min_realized
  %397 = add nsw i32 %f4.v6.extent_realized.s, 1
  %398 = add nsw i32 %f4.v3.extent_realized.s, 1
  %f4.stride.1 = mul nsw i32 %398, %397
  %reass.sub531 = sub i32 %380, %f4.v4.min_realized
  %399 = add i32 %reass.sub531, 1
  %400 = zext i32 %399 to i64
  %401 = zext i32 %398 to i64
  %402 = shl nuw nsw i64 %401, 2
  %403 = and i64 %402, 4294967292
  %404 = mul nuw i64 %403, %400
  %405 = lshr i64 %404, 32
  %406 = lshr i64 %401, 30
  %407 = mul nuw nsw i64 %406, %400
  %t3067 = add nuw nsw i64 %405, %407
  %t3068 = mul i64 %402, %400
  %408 = zext i32 %397 to i64
  %409 = mul i64 %t3068, %408
  %410 = icmp ult i64 %409, 2147483648
  %411 = and i64 %t3068, 4294967292
  %412 = mul nuw i64 %411, %408
  %413 = lshr i64 %412, 32
  %414 = mul i64 %t3067, %408
  %415 = add i64 %414, %413
  %416 = or i64 %415, %t3067
  %417 = icmp ult i64 %416, 4294967296
  %418 = and i1 %410, %417
  br i1 %418, label %"assert succeeded110", label %"assert failed109", !prof !5

"assert failed109":                               ; preds = %"consume f2"
  %419 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.11, i64 %409, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded110":                            ; preds = %"consume f2"
  %420 = add nuw nsw i64 %409, 4
  %421 = call ptr @halide_malloc(ptr null, i64 %420)
  %.not532 = icmp eq ptr %421, null
  br i1 %.not532, label %"assert failed111", label %"produce f4", !prof !4

"assert failed111":                               ; preds = %"assert succeeded110"
  %422 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f4":                                     ; preds = %"assert succeeded110"
  %f4.s0.v6.loop_extent.s = sub nsw i32 %115, %111
  %423 = add nsw i32 %298, 9
  %424 = ashr i32 %423, 3
  store float %beta, ptr %11, align 8
  %425 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 1
  store i32 %b121, ptr %425, align 4
  %426 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 2
  store i32 %a772, ptr %426, align 8
  %427 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 3
  store i32 %f2.v3.extent_realized.s, ptr %427, align 4
  %428 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 4
  store i32 %f2.v3.min_realized, ptr %428, align 8
  %429 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 5
  store i32 %f2.v4.min_realized, ptr %429, align 4
  %430 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 6
  store i32 %b465, ptr %430, align 8
  %431 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 7
  store i32 %f4.s0.v3.min.s, ptr %431, align 4
  %432 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 8
  store i32 %b448, ptr %432, align 8
  %433 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 9
  store i32 %f4.s0.v4.min.s, ptr %433, align 4
  %434 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 10
  store i32 %f4.s0.v6.loop_extent.s, ptr %434, align 8
  %435 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 11
  store i32 %f4.stride.1, ptr %435, align 4
  %436 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 12
  store i32 %f4.v3.extent_realized.s, ptr %436, align 8
  %437 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 13
  store i32 %f4.v3.min_realized, ptr %437, align 4
  %438 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 14
  store i32 %f4.v4.min_realized, ptr %438, align 8
  %439 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 15
  store i32 %levels, ptr %439, align 4
  %440 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 16
  store ptr %209, ptr %440, align 8
  %441 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 17
  store ptr null, ptr %441, align 8
  %442 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 18
  store ptr %338, ptr %442, align 8
  %443 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 19
  store ptr null, ptr %443, align 8
  %444 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 20
  store ptr %421, ptr %444, align 8
  %445 = getelementptr inbounds %closure_t.0, ptr %11, i64 0, i32 21
  store ptr null, ptr %445, align 8
  %446 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f4.s0.v4.v4, i32 0, i32 %424, ptr nonnull %11)
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %"consume f4", label %call_destructor.exit210.thread374, !prof !5

"consume f4":                                     ; preds = %"produce f4"
  %b385 = add nsw i32 %b624, -7
  %448 = call i32 @llvm.smin.i32(i32 %b385, i32 %a485)
  %449 = shl nsw i32 %448, 1
  %a382 = add nsw i32 %449, -1
  %450 = add nsw i32 %b89, -6
  %b384 = ashr i32 %450, 2
  %.not151 = icmp slt i32 %b384, %449
  %a381 = select i1 %.not151, i32 %b384, i32 %a382
  %451 = ashr i32 %a255, 1
  %b383 = add nsw i32 %451, -1
  %a380 = call i32 @llvm.smin.i32(i32 %b383, i32 %a381)
  %a379 = call i32 @llvm.smin.i32(i32 %451, i32 %a380)
  %f5.v4.min_realized = call i32 @llvm.smin.i32(i32 %371, i32 %a379)
  %452 = sub nsw i32 %b624, %a485
  %453 = ashr i32 %452, 3
  %454 = and i32 %452, -8
  %455 = add nsw i32 %a485, 7
  %a397 = add i32 %455, %454
  %456 = call i32 @llvm.smin.i32(i32 %b624, i32 %a397)
  %457 = shl nsw i32 %456, 1
  %a396 = add nsw i32 %457, 2
  %458 = add nsw i32 %b94, 6
  %b398 = ashr i32 %458, 2
  %a395 = call i32 @llvm.smax.i32(i32 %a396, i32 %b398)
  %459 = add nsw i32 %b94, 2
  %b397 = ashr i32 %459, 2
  %b395 = call i32 @llvm.smax.i32(i32 %a395, i32 %b397)
  %460 = call i32 @llvm.smax.i32(i32 %377, i32 %b395)
  %b406 = add nsw i32 %b641, -7
  %461 = call i32 @llvm.smin.i32(i32 %b406, i32 %a509)
  %462 = shl nsw i32 %461, 1
  %a403 = add nsw i32 %462, -1
  %a405 = add nsw i32 %b74, -6
  %b407 = add nsw i32 %b79, -22
  %463 = call i32 @llvm.smin.i32(i32 %b407, i32 %a405)
  %b405 = ashr i32 %463, 2
  %.not152 = icmp slt i32 %b405, %462
  %a402 = select i1 %.not152, i32 %b405, i32 %a403
  %464 = ashr i32 %b279, 1
  %b404 = add nsw i32 %464, -1
  %a401 = call i32 @llvm.smin.i32(i32 %b404, i32 %a402)
  %a400 = call i32 @llvm.smin.i32(i32 %464, i32 %a401)
  %f5.v3.min_realized = call i32 @llvm.smin.i32(i32 %381, i32 %a400)
  %465 = sub nsw i32 %b641, %a509
  %466 = and i32 %465, -8
  %467 = add nsw i32 %a509, 7
  %a422 = add i32 %467, %466
  %468 = call i32 @llvm.smin.i32(i32 %b641, i32 %a422)
  %469 = shl nsw i32 %468, 1
  %a421 = add nsw i32 %469, 2
  %470 = ashr i32 %a405, 2
  %471 = add nsw i32 %b79, 6
  %472 = ashr i32 %471, 2
  %473 = sub nsw i32 %472, %470
  %474 = and i32 %473, -8
  %a423 = add nsw i32 %474, %470
  %b425 = ashr i32 %b407, 2
  %475 = call i32 @llvm.smin.i32(i32 %b425, i32 %a423)
  %b423 = add nsw i32 %475, 7
  %a420 = call i32 @llvm.smax.i32(i32 %a421, i32 %b423)
  %476 = add nsw i32 %394, 9
  %b422 = ashr i32 %476, 1
  %a419 = call i32 @llvm.smax.i32(i32 %a420, i32 %b422)
  %b421 = ashr i32 %b300, 1
  %b419 = call i32 @llvm.smax.i32(i32 %a419, i32 %b421)
  %477 = call i32 @llvm.smax.i32(i32 %389, i32 %b419)
  %f5.v3.extent_realized.s = sub nsw i32 %477, %f5.v3.min_realized
  %478 = add nsw i32 %f5.v3.extent_realized.s, 1
  %f5.stride.1 = mul nsw i32 %478, %397
  %reass.sub533 = sub i32 %460, %f5.v4.min_realized
  %479 = add i32 %reass.sub533, 1
  %480 = zext i32 %479 to i64
  %481 = zext i32 %478 to i64
  %482 = shl nuw nsw i64 %481, 2
  %483 = and i64 %482, 4294967292
  %484 = mul nuw i64 %483, %480
  %485 = lshr i64 %484, 32
  %486 = lshr i64 %481, 30
  %487 = mul nuw nsw i64 %486, %480
  %t3069 = add nuw nsw i64 %485, %487
  %t3070 = mul i64 %482, %480
  %488 = mul i64 %t3070, %408
  %489 = icmp ult i64 %488, 2147483648
  %490 = and i64 %t3070, 4294967292
  %491 = mul nuw i64 %490, %408
  %492 = lshr i64 %491, 32
  %493 = mul i64 %t3069, %408
  %494 = add i64 %493, %492
  %495 = or i64 %494, %t3069
  %496 = icmp ult i64 %495, 4294967296
  %497 = and i1 %489, %496
  br i1 %497, label %"assert succeeded116", label %"assert failed115", !prof !5

"assert failed115":                               ; preds = %"consume f4"
  %498 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.12, i64 %488, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded116":                            ; preds = %"consume f4"
  %499 = add nuw nsw i64 %488, 4
  %500 = call ptr @halide_malloc(ptr null, i64 %499)
  %.not534 = icmp eq ptr %500, null
  br i1 %.not534, label %"assert failed117", label %"produce f5", !prof !4

"assert failed117":                               ; preds = %"assert succeeded116"
  %501 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f5":                                     ; preds = %"assert succeeded116"
  %502 = add nsw i32 %374, 1
  store i32 %a772, ptr %10, align 8
  %503 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 1
  store i32 %f4.stride.1, ptr %503, align 4
  %504 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 2
  store i32 %f4.v3.extent_realized.s, ptr %504, align 8
  %505 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 3
  store i32 %f4.v3.min_realized, ptr %505, align 4
  %506 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 4
  store i32 %f4.v4.min_realized, ptr %506, align 8
  %507 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 5
  store i32 %b556, ptr %507, align 4
  %508 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 6
  store i32 %a416, ptr %508, align 8
  %509 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 7
  store i32 %b539, ptr %509, align 4
  %510 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 8
  store i32 %a392, ptr %510, align 8
  %511 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %511, align 4
  %512 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 10
  store i32 %f5.stride.1, ptr %512, align 8
  %513 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 11
  store i32 %f5.v3.extent_realized.s, ptr %513, align 4
  %514 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 12
  store i32 %f5.v3.min_realized, ptr %514, align 8
  %515 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 13
  store i32 %f5.v4.min_realized, ptr %515, align 4
  %516 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 14
  store ptr %421, ptr %516, align 8
  %517 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 15
  store ptr null, ptr %517, align 8
  %518 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 16
  store ptr %500, ptr %518, align 8
  %519 = getelementptr inbounds %closure_t.1, ptr %10, i64 0, i32 17
  store ptr null, ptr %519, align 8
  %520 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f5.s0.v4.v4, i32 0, i32 %502, ptr nonnull %10)
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %"consume f5", label %call_destructor.exit210.thread374, !prof !5

"consume f5":                                     ; preds = %"produce f5"
  %b440 = add nsw i32 %b539, -31
  %522 = call i32 @llvm.smin.i32(i32 %b440, i32 %a535)
  %523 = shl nsw i32 %522, 1
  %b438 = add nsw i32 %523, -1
  %a435 = call i32 @llvm.smin.i32(i32 %b438, i32 %a255)
  %f72.v4.min_realized = call i32 @llvm.smin.i32(i32 %b135, i32 %a435)
  %524 = sub nsw i32 %b539, %a535
  %525 = ashr i32 %524, 5
  %526 = and i32 %524, -32
  %527 = add nsw i32 %a535, 31
  %a448 = add i32 %527, %526
  %528 = call i32 @llvm.smin.i32(i32 %b539, i32 %a448)
  %529 = shl nsw i32 %528, 1
  %a447 = add nsw i32 %529, 2
  %b447 = call i32 @llvm.smax.i32(i32 %a447, i32 %b272)
  %530 = call i32 @llvm.smax.i32(i32 %t1938, i32 %b447)
  %531 = call i32 @llvm.smin.i32(i32 %b280, i32 %a552)
  %532 = shl nsw i32 %531, 1
  %a451 = add nsw i32 %532, -1
  %.not153 = icmp slt i32 %b279, %532
  %a450 = select i1 %.not153, i32 %b279, i32 %a451
  %f72.v3.min_realized = call i32 @llvm.smin.i32(i32 %b165, i32 %a450)
  %533 = sub nsw i32 %b556, %a552
  %534 = and i32 %533, -8
  %535 = add nsw i32 %a552, 7
  %a465 = add i32 %535, %534
  %536 = call i32 @llvm.smin.i32(i32 %b556, i32 %a465)
  %537 = shl nsw i32 %536, 1
  %a464 = add nsw i32 %537, 2
  %b464 = call i32 @llvm.smax.i32(i32 %a464, i32 %b300)
  %538 = call i32 @llvm.smax.i32(i32 %t1943, i32 %b464)
  %f72.v3.extent_realized.s = sub nsw i32 %538, %f72.v3.min_realized
  %reass.sub535 = sub i32 %530, %f72.v4.min_realized
  %539 = add i32 %reass.sub535, 1
  %540 = zext i32 %539 to i64
  %541 = add nsw i32 %f72.v3.extent_realized.s, 1
  %542 = zext i32 %541 to i64
  %543 = shl nuw nsw i64 %542, 2
  %544 = mul i64 %543, %540
  %545 = icmp ult i64 %544, 2147483648
  %546 = and i64 %543, 4294967292
  %547 = mul nuw i64 %546, %540
  %548 = lshr i64 %547, 32
  %549 = lshr i64 %542, 30
  %550 = mul nuw nsw i64 %549, %540
  %551 = add nuw nsw i64 %548, %550
  %552 = icmp ult i64 %551, 4294967296
  %553 = and i1 %545, %552
  br i1 %553, label %"assert succeeded122", label %"assert failed121", !prof !5

"assert failed121":                               ; preds = %"consume f5"
  %554 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.13, i64 %544, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded122":                            ; preds = %"consume f5"
  %555 = add nuw nsw i64 %544, 4
  %556 = call ptr @halide_malloc(ptr null, i64 %555)
  %.not536 = icmp eq ptr %556, null
  br i1 %.not536, label %"assert failed123", label %"produce f72", !prof !4

"assert failed123":                               ; preds = %"assert succeeded122"
  %557 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f72":                                    ; preds = %"assert succeeded122"
  %558 = add nsw i32 %294, 33
  %559 = ashr i32 %558, 5
  store i32 %f2.v3.extent_realized.s, ptr %9, align 8
  %560 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 1
  store i32 %f2.v3.min_realized, ptr %560, align 4
  %561 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 2
  store i32 %f2.v4.min_realized, ptr %561, align 8
  %562 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 3
  store i32 %b465, ptr %562, align 4
  %563 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 4
  store i32 %f72.s0.v3.min.s, ptr %563, align 8
  %564 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 5
  store i32 %b448, ptr %564, align 4
  %565 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 6
  store i32 %f72.s0.v4.min.s, ptr %565, align 8
  %566 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 7
  store i32 %f72.v3.extent_realized.s, ptr %566, align 4
  %567 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 8
  store i32 %f72.v3.min_realized, ptr %567, align 8
  %568 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 9
  store i32 %f72.v4.min_realized, ptr %568, align 4
  %569 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 10
  store ptr %338, ptr %569, align 8
  %570 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 11
  store ptr null, ptr %570, align 8
  %571 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 12
  store ptr %556, ptr %571, align 8
  %572 = getelementptr inbounds %closure_t.2, ptr %9, i64 0, i32 13
  store ptr null, ptr %572, align 8
  %573 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f72.s0.v4.v4, i32 0, i32 %559, ptr nonnull %9)
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %"consume f72", label %call_destructor.exit210.thread374, !prof !5

"consume f72":                                    ; preds = %"produce f72"
  %b480 = add nsw i32 %b695, -7
  %575 = call i32 @llvm.smin.i32(i32 %b480, i32 %a574)
  %576 = shl nsw i32 %575, 1
  %a477 = add nsw i32 %576, -1
  %577 = add nsw i32 %b89, -14
  %b479 = ashr i32 %577, 3
  %.not154 = icmp slt i32 %b479, %576
  %a476 = select i1 %.not154, i32 %b479, i32 %a477
  %b478 = ashr i32 %450, 3
  %a475 = call i32 @llvm.smin.i32(i32 %b478, i32 %a476)
  %f6.v4.min_realized = call i32 @llvm.smin.i32(i32 %448, i32 %a475)
  %578 = sub nsw i32 %b695, %a574
  %579 = ashr i32 %578, 3
  %580 = and i32 %578, -8
  %581 = add nsw i32 %a574, 7
  %a490 = add i32 %581, %580
  %582 = call i32 @llvm.smin.i32(i32 %b695, i32 %a490)
  %583 = shl nsw i32 %582, 1
  %a489 = add nsw i32 %583, 2
  %584 = add nsw i32 %b94, 14
  %b491 = ashr i32 %584, 3
  %a488 = call i32 @llvm.smax.i32(i32 %a489, i32 %b491)
  %b490 = ashr i32 %458, 3
  %b488 = call i32 @llvm.smax.i32(i32 %a488, i32 %b490)
  %585 = call i32 @llvm.smax.i32(i32 %456, i32 %b488)
  %b499 = add nsw i32 %b709, -7
  %586 = call i32 @llvm.smin.i32(i32 %b499, i32 %a595)
  %587 = shl nsw i32 %586, 1
  %a496 = add nsw i32 %587, -1
  %a498 = add nsw i32 %b74, -14
  %b500 = add nsw i32 %b79, -42
  %588 = call i32 @llvm.smin.i32(i32 %b500, i32 %a498)
  %b498 = ashr i32 %588, 3
  %.not155 = icmp slt i32 %b498, %587
  %a495 = select i1 %.not155, i32 %b498, i32 %a496
  %589 = ashr i32 %463, 3
  %b497 = add nsw i32 %589, -1
  %a494 = call i32 @llvm.smin.i32(i32 %b497, i32 %a495)
  %a493 = call i32 @llvm.smin.i32(i32 %589, i32 %a494)
  %f6.v3.min_realized = call i32 @llvm.smin.i32(i32 %461, i32 %a493)
  %590 = sub nsw i32 %b709, %a595
  %591 = and i32 %590, -8
  %592 = add nsw i32 %a595, 7
  %a515 = add i32 %592, %591
  %593 = call i32 @llvm.smin.i32(i32 %b709, i32 %a515)
  %594 = shl nsw i32 %593, 1
  %a514 = add nsw i32 %594, 2
  %595 = ashr i32 %a498, 3
  %596 = add nsw i32 %b79, 14
  %597 = ashr i32 %596, 3
  %598 = sub nsw i32 %597, %595
  %599 = and i32 %598, -8
  %a516 = add nsw i32 %599, %595
  %b518 = ashr i32 %b500, 3
  %600 = call i32 @llvm.smin.i32(i32 %b518, i32 %a516)
  %b516 = add nsw i32 %600, 7
  %a513 = call i32 @llvm.smax.i32(i32 %a514, i32 %b516)
  %601 = add nsw i32 %475, 9
  %b515 = ashr i32 %601, 1
  %a512 = call i32 @llvm.smax.i32(i32 %a513, i32 %b515)
  %b514 = ashr i32 %b423, 1
  %b512 = call i32 @llvm.smax.i32(i32 %a512, i32 %b514)
  %602 = call i32 @llvm.smax.i32(i32 %468, i32 %b512)
  %f6.v3.extent_realized.s = sub nsw i32 %602, %f6.v3.min_realized
  %603 = add nsw i32 %f6.v3.extent_realized.s, 1
  %f6.stride.1 = mul nsw i32 %603, %397
  %reass.sub537 = sub i32 %585, %f6.v4.min_realized
  %604 = add i32 %reass.sub537, 1
  %605 = zext i32 %604 to i64
  %606 = zext i32 %603 to i64
  %607 = shl nuw nsw i64 %606, 2
  %608 = and i64 %607, 4294967292
  %609 = mul nuw i64 %608, %605
  %610 = lshr i64 %609, 32
  %611 = lshr i64 %606, 30
  %612 = mul nuw nsw i64 %611, %605
  %t3071 = add nuw nsw i64 %610, %612
  %t3072 = mul i64 %607, %605
  %613 = mul i64 %t3072, %408
  %614 = icmp ult i64 %613, 2147483648
  %615 = and i64 %t3072, 4294967292
  %616 = mul nuw i64 %615, %408
  %617 = lshr i64 %616, 32
  %618 = mul i64 %t3071, %408
  %619 = add i64 %618, %617
  %620 = or i64 %619, %t3071
  %621 = icmp ult i64 %620, 4294967296
  %622 = and i1 %614, %621
  br i1 %622, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"consume f72"
  %623 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.14, i64 %613, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded128":                            ; preds = %"consume f72"
  %624 = add nuw nsw i64 %613, 4
  %625 = call ptr @halide_malloc(ptr null, i64 %624)
  %.not538 = icmp eq ptr %625, null
  br i1 %.not538, label %"assert failed129", label %"produce f6", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %626 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f6":                                     ; preds = %"assert succeeded128"
  %627 = add nsw i32 %453, 1
  store i32 %a772, ptr %8, align 8
  %628 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 1
  store i32 %f5.stride.1, ptr %628, align 4
  %629 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 2
  store i32 %f5.v3.extent_realized.s, ptr %629, align 8
  %630 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 3
  store i32 %f5.v3.min_realized, ptr %630, align 4
  %631 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 4
  store i32 %f5.v4.min_realized, ptr %631, align 8
  %632 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 5
  store i32 %b641, ptr %632, align 4
  %633 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 6
  store i32 %a509, ptr %633, align 8
  %634 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 7
  store i32 %b624, ptr %634, align 4
  %635 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 8
  store i32 %a485, ptr %635, align 8
  %636 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %636, align 4
  %637 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 10
  store i32 %f6.stride.1, ptr %637, align 8
  %638 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 11
  store i32 %f6.v3.extent_realized.s, ptr %638, align 4
  %639 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 12
  store i32 %f6.v3.min_realized, ptr %639, align 8
  %640 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 13
  store i32 %f6.v4.min_realized, ptr %640, align 4
  %641 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 14
  store ptr %500, ptr %641, align 8
  %642 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 15
  store ptr null, ptr %642, align 8
  %643 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 16
  store ptr %625, ptr %643, align 8
  %644 = getelementptr inbounds %closure_t.3, ptr %8, i64 0, i32 17
  store ptr null, ptr %644, align 8
  %645 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f6.s0.v4.v4, i32 0, i32 %627, ptr nonnull %8)
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %"consume f6", label %call_destructor.exit210.thread374, !prof !5

"consume f6":                                     ; preds = %"produce f6"
  %b532 = add nsw i32 %b624, -31
  %647 = call i32 @llvm.smin.i32(i32 %b532, i32 %a620)
  %648 = shl nsw i32 %647, 1
  %a529 = add nsw i32 %648, -1
  %.not156 = icmp slt i32 %b384, %648
  %a528 = select i1 %.not156, i32 %b384, i32 %a529
  %f73.v4.min_realized = call i32 @llvm.smin.i32(i32 %522, i32 %a528)
  %649 = sub nsw i32 %b624, %a620
  %650 = ashr i32 %649, 5
  %651 = and i32 %649, -32
  %652 = add nsw i32 %a620, 31
  %a539 = add i32 %652, %651
  %653 = call i32 @llvm.smin.i32(i32 %b624, i32 %a539)
  %654 = shl nsw i32 %653, 1
  %a538 = add nsw i32 %654, 2
  %b538 = call i32 @llvm.smax.i32(i32 %a538, i32 %b398)
  %655 = call i32 @llvm.smax.i32(i32 %528, i32 %b538)
  %656 = call i32 @llvm.smin.i32(i32 %b406, i32 %a637)
  %657 = shl nsw i32 %656, 1
  %a542 = add nsw i32 %657, -1
  %.not157 = icmp slt i32 %b405, %657
  %a541 = select i1 %.not157, i32 %b405, i32 %a542
  %f73.v3.min_realized = call i32 @llvm.smin.i32(i32 %531, i32 %a541)
  %658 = sub nsw i32 %b641, %a637
  %659 = and i32 %658, -8
  %660 = add nsw i32 %a637, 7
  %a556 = add i32 %660, %659
  %661 = call i32 @llvm.smin.i32(i32 %b641, i32 %a556)
  %662 = shl nsw i32 %661, 1
  %a555 = add nsw i32 %662, 2
  %b555 = call i32 @llvm.smax.i32(i32 %a555, i32 %b423)
  %663 = call i32 @llvm.smax.i32(i32 %536, i32 %b555)
  %f73.v3.extent_realized.s = sub nsw i32 %663, %f73.v3.min_realized
  %reass.sub539 = sub i32 %655, %f73.v4.min_realized
  %664 = add i32 %reass.sub539, 1
  %665 = zext i32 %664 to i64
  %666 = add nsw i32 %f73.v3.extent_realized.s, 1
  %667 = zext i32 %666 to i64
  %668 = shl nuw nsw i64 %667, 2
  %669 = mul i64 %668, %665
  %670 = icmp ult i64 %669, 2147483648
  %671 = and i64 %668, 4294967292
  %672 = mul nuw i64 %671, %665
  %673 = lshr i64 %672, 32
  %674 = lshr i64 %667, 30
  %675 = mul nuw nsw i64 %674, %665
  %676 = add nuw nsw i64 %673, %675
  %677 = icmp ult i64 %676, 4294967296
  %678 = and i1 %670, %677
  br i1 %678, label %"assert succeeded134", label %"assert failed133", !prof !5

"assert failed133":                               ; preds = %"consume f6"
  %679 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.15, i64 %669, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded134":                            ; preds = %"consume f6"
  %680 = add nuw nsw i64 %669, 4
  %681 = call ptr @halide_malloc(ptr null, i64 %680)
  %.not540 = icmp eq ptr %681, null
  br i1 %.not540, label %"assert failed135", label %"produce f73", !prof !4

"assert failed135":                               ; preds = %"assert succeeded134"
  %682 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f73":                                    ; preds = %"assert succeeded134"
  %683 = add nsw i32 %525, 1
  store i32 %f72.v3.extent_realized.s, ptr %7, align 8
  %684 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 1
  store i32 %f72.v3.min_realized, ptr %684, align 4
  %685 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 2
  store i32 %f72.v4.min_realized, ptr %685, align 8
  %686 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 3
  store i32 %b556, ptr %686, align 4
  %687 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 4
  store i32 %a552, ptr %687, align 8
  %688 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 5
  store i32 %b539, ptr %688, align 4
  %689 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 6
  store i32 %a535, ptr %689, align 8
  %690 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 7
  store i32 %f73.v3.extent_realized.s, ptr %690, align 4
  %691 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 8
  store i32 %f73.v3.min_realized, ptr %691, align 8
  %692 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 9
  store i32 %f73.v4.min_realized, ptr %692, align 4
  %693 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 10
  store ptr %556, ptr %693, align 8
  %694 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 11
  store ptr null, ptr %694, align 8
  %695 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 12
  store ptr %681, ptr %695, align 8
  %696 = getelementptr inbounds %closure_t.4, ptr %7, i64 0, i32 13
  store ptr null, ptr %696, align 8
  %697 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f73.s0.v4.v4, i32 0, i32 %683, ptr nonnull %7)
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %"consume f73", label %call_destructor.exit210.thread374, !prof !5

"consume f73":                                    ; preds = %"produce f73"
  %699 = add nsw i32 %b89, -30
  %b570 = ashr i32 %699, 4
  %.not158 = icmp slt i32 %b570, %87
  %a567 = select i1 %.not158, i32 %b570, i32 %b31
  %b569 = ashr i32 %577, 4
  %a566 = call i32 @llvm.smin.i32(i32 %b569, i32 %a567)
  %f7.v4.min_realized = call i32 @llvm.smin.i32(i32 %575, i32 %a566)
  %700 = add nsw i32 %b94, 30
  %b580 = ashr i32 %700, 4
  %a577 = call i32 @llvm.smax.i32(i32 %b18, i32 %b580)
  %b579 = ashr i32 %584, 4
  %b577 = call i32 @llvm.smax.i32(i32 %a577, i32 %b579)
  %701 = call i32 @llvm.smax.i32(i32 %582, i32 %b577)
  %a585 = add nsw i32 %b74, -30
  %b587 = add nsw i32 %b79, -82
  %702 = call i32 @llvm.smin.i32(i32 %b587, i32 %a585)
  %b586 = ashr i32 %702, 4
  %.not159 = icmp slt i32 %b586, %88
  %a583 = select i1 %.not159, i32 %b586, i32 %b33
  %703 = ashr i32 %588, 4
  %b585 = add nsw i32 %703, -1
  %a582 = call i32 @llvm.smin.i32(i32 %b585, i32 %a583)
  %a581 = call i32 @llvm.smin.i32(i32 %703, i32 %a582)
  %f7.v3.min_realized = call i32 @llvm.smin.i32(i32 %586, i32 %a581)
  %704 = ashr i32 %a585, 4
  %705 = add nsw i32 %b79, 30
  %706 = ashr i32 %705, 4
  %707 = sub nsw i32 %706, %704
  %708 = and i32 %707, -8
  %a601 = add nsw i32 %708, %704
  %b603 = ashr i32 %b587, 4
  %709 = call i32 @llvm.smin.i32(i32 %b603, i32 %a601)
  %b602 = add nsw i32 %709, 7
  %a599 = call i32 @llvm.smax.i32(i32 %b20, i32 %b602)
  %710 = add nsw i32 %600, 9
  %b601 = ashr i32 %710, 1
  %a598 = call i32 @llvm.smax.i32(i32 %a599, i32 %b601)
  %b600 = ashr i32 %b516, 1
  %b598 = call i32 @llvm.smax.i32(i32 %a598, i32 %b600)
  %711 = call i32 @llvm.smax.i32(i32 %593, i32 %b598)
  %f7.v3.extent_realized.s = sub nsw i32 %711, %f7.v3.min_realized
  %712 = add nsw i32 %f7.v3.extent_realized.s, 1
  %f7.stride.1 = mul nsw i32 %712, %397
  %reass.sub541 = sub i32 %701, %f7.v4.min_realized
  %713 = add i32 %reass.sub541, 1
  %714 = zext i32 %713 to i64
  %715 = zext i32 %712 to i64
  %716 = shl nuw nsw i64 %715, 2
  %717 = and i64 %716, 4294967292
  %718 = mul nuw i64 %717, %714
  %719 = lshr i64 %718, 32
  %720 = lshr i64 %715, 30
  %721 = mul nuw nsw i64 %720, %714
  %t3073 = add nuw nsw i64 %719, %721
  %t3074 = mul i64 %716, %714
  %722 = mul i64 %t3074, %408
  %723 = icmp ult i64 %722, 2147483648
  %724 = and i64 %t3074, 4294967292
  %725 = mul nuw i64 %724, %408
  %726 = lshr i64 %725, 32
  %727 = mul i64 %t3073, %408
  %728 = add i64 %727, %726
  %729 = or i64 %728, %t3073
  %730 = icmp ult i64 %729, 4294967296
  %731 = and i1 %723, %730
  br i1 %731, label %"assert succeeded140", label %"assert failed139", !prof !5

"assert failed139":                               ; preds = %"consume f73"
  %732 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.16, i64 %722, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded140":                            ; preds = %"consume f73"
  %733 = add nuw nsw i64 %722, 4
  %734 = call ptr @halide_malloc(ptr null, i64 %733)
  %.not542 = icmp eq ptr %734, null
  br i1 %.not542, label %"assert failed141", label %"produce f7", !prof !4

"assert failed141":                               ; preds = %"assert succeeded140"
  %735 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f7":                                     ; preds = %"assert succeeded140"
  %736 = add nsw i32 %579, 1
  store i32 %a772, ptr %6, align 8
  %737 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 1
  store i32 %f6.stride.1, ptr %737, align 4
  %738 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 2
  store i32 %f6.v3.extent_realized.s, ptr %738, align 8
  %739 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 3
  store i32 %f6.v3.min_realized, ptr %739, align 4
  %740 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 4
  store i32 %f6.v4.min_realized, ptr %740, align 8
  %741 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 5
  store i32 %b709, ptr %741, align 4
  %742 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 6
  store i32 %a595, ptr %742, align 8
  %743 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 7
  store i32 %b695, ptr %743, align 4
  %744 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 8
  store i32 %a574, ptr %744, align 8
  %745 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 9
  store i32 %f4.s0.v6.loop_extent.s, ptr %745, align 4
  %746 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 10
  store i32 %f7.stride.1, ptr %746, align 8
  %747 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 11
  store i32 %f7.v3.extent_realized.s, ptr %747, align 4
  %748 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 12
  store i32 %f7.v3.min_realized, ptr %748, align 8
  %749 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 13
  store i32 %f7.v4.min_realized, ptr %749, align 4
  %750 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 14
  store ptr %625, ptr %750, align 8
  %751 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 15
  store ptr null, ptr %751, align 8
  %752 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 16
  store ptr %734, ptr %752, align 8
  %753 = getelementptr inbounds %closure_t.5, ptr %6, i64 0, i32 17
  store ptr null, ptr %753, align 8
  %754 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f7.s0.v4.v4, i32 0, i32 %736, ptr nonnull %6)
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %"consume f7", label %call_destructor.exit210.thread374, !prof !5

"consume f7":                                     ; preds = %"produce f7"
  %b617 = add nsw i32 %b695, -31
  %756 = call i32 @llvm.smin.i32(i32 %b617, i32 %a691)
  %757 = shl nsw i32 %756, 1
  %a614 = add nsw i32 %757, -1
  %.not160 = icmp slt i32 %b479, %757
  %a613 = select i1 %.not160, i32 %b479, i32 %a614
  %f74.v4.min_realized = call i32 @llvm.smin.i32(i32 %647, i32 %a613)
  %758 = sub nsw i32 %b695, %a691
  %759 = ashr i32 %758, 5
  %760 = and i32 %758, -32
  %761 = add nsw i32 %a691, 31
  %a624 = add i32 %761, %760
  %762 = call i32 @llvm.smin.i32(i32 %b695, i32 %a624)
  %763 = shl nsw i32 %762, 1
  %a623 = add nsw i32 %763, 2
  %b623 = call i32 @llvm.smax.i32(i32 %a623, i32 %b491)
  %764 = call i32 @llvm.smax.i32(i32 %653, i32 %b623)
  %765 = call i32 @llvm.smin.i32(i32 %b499, i32 %a705)
  %766 = shl nsw i32 %765, 1
  %a627 = add nsw i32 %766, -1
  %.not161 = icmp slt i32 %b498, %766
  %a626 = select i1 %.not161, i32 %b498, i32 %a627
  %f74.v3.min_realized = call i32 @llvm.smin.i32(i32 %656, i32 %a626)
  %767 = sub nsw i32 %b709, %a705
  %768 = and i32 %767, -8
  %769 = add nsw i32 %a705, 7
  %a641 = add i32 %769, %768
  %770 = call i32 @llvm.smin.i32(i32 %b709, i32 %a641)
  %771 = shl nsw i32 %770, 1
  %a640 = add nsw i32 %771, 2
  %b640 = call i32 @llvm.smax.i32(i32 %a640, i32 %b516)
  %772 = call i32 @llvm.smax.i32(i32 %661, i32 %b640)
  %f74.v3.extent_realized.s = sub nsw i32 %772, %f74.v3.min_realized
  %reass.sub543 = sub i32 %764, %f74.v4.min_realized
  %773 = add i32 %reass.sub543, 1
  %774 = zext i32 %773 to i64
  %775 = add nsw i32 %f74.v3.extent_realized.s, 1
  %776 = zext i32 %775 to i64
  %777 = shl nuw nsw i64 %776, 2
  %778 = mul i64 %777, %774
  %779 = icmp ult i64 %778, 2147483648
  %780 = and i64 %777, 4294967292
  %781 = mul nuw i64 %780, %774
  %782 = lshr i64 %781, 32
  %783 = lshr i64 %776, 30
  %784 = mul nuw nsw i64 %783, %774
  %785 = add nuw nsw i64 %782, %784
  %786 = icmp ult i64 %785, 4294967296
  %787 = and i1 %779, %786
  br i1 %787, label %"assert succeeded146", label %"assert failed145", !prof !5

"assert failed145":                               ; preds = %"consume f7"
  %788 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.17, i64 %778, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded146":                            ; preds = %"consume f7"
  %789 = add nuw nsw i64 %778, 4
  %790 = call ptr @halide_malloc(ptr null, i64 %789)
  %.not544 = icmp eq ptr %790, null
  br i1 %.not544, label %"assert failed147", label %"produce f74", !prof !4

"assert failed147":                               ; preds = %"assert succeeded146"
  %791 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f74":                                    ; preds = %"assert succeeded146"
  %792 = add nsw i32 %650, 1
  store i32 %f73.v3.extent_realized.s, ptr %5, align 8
  %793 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 1
  store i32 %f73.v3.min_realized, ptr %793, align 4
  %794 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 2
  store i32 %f73.v4.min_realized, ptr %794, align 8
  %795 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 3
  store i32 %b641, ptr %795, align 4
  %796 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 4
  store i32 %a637, ptr %796, align 8
  %797 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 5
  store i32 %b624, ptr %797, align 4
  %798 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 6
  store i32 %a620, ptr %798, align 8
  %799 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 7
  store i32 %f74.v3.extent_realized.s, ptr %799, align 4
  %800 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 8
  store i32 %f74.v3.min_realized, ptr %800, align 8
  %801 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 9
  store i32 %f74.v4.min_realized, ptr %801, align 4
  %802 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 10
  store ptr %681, ptr %802, align 8
  %803 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 11
  store ptr null, ptr %803, align 8
  %804 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 12
  store ptr %790, ptr %804, align 8
  %805 = getelementptr inbounds %closure_t.6, ptr %5, i64 0, i32 13
  store ptr null, ptr %805, align 8
  %806 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f74.s0.v4.v4, i32 0, i32 %792, ptr nonnull %5)
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %"consume f74", label %call_destructor.exit210.thread374, !prof !5

"consume f74":                                    ; preds = %"produce f74"
  %.not162 = icmp slt i32 %a7, %77
  %a653 = select i1 %.not162, i32 %a7, i32 %b23
  %808 = add nsw i32 %b89, -62
  %b655 = ashr i32 %808, 5
  %a652 = call i32 @llvm.smin.i32(i32 %b655, i32 %a653)
  %b654 = ashr i32 %699, 5
  %a651 = call i32 @llvm.smin.i32(i32 %b654, i32 %a652)
  %f8.v4.min_realized = call i32 @llvm.smin.i32(i32 %b658, i32 %a651)
  %809 = add nsw i32 %b94, 62
  %b664 = ashr i32 %809, 5
  %a661 = call i32 @llvm.smax.i32(i32 %b735, i32 %b664)
  %b663 = ashr i32 %700, 5
  %a660 = call i32 @llvm.smax.i32(i32 %a661, i32 %b663)
  %810 = call i32 @llvm.smax.i32(i32 %a660, i32 %b735)
  %f8.v4.extent_realized.s = sub nsw i32 %810, %f8.v4.min_realized
  %.not163 = icmp slt i32 %a9, %78
  %a668 = select i1 %.not163, i32 %a9, i32 %b25
  %811 = ashr i32 %702, 5
  %b670 = add nsw i32 %811, -1
  %a667 = call i32 @llvm.smin.i32(i32 %b670, i32 %a668)
  %a666 = call i32 @llvm.smin.i32(i32 %811, i32 %a667)
  %f8.v3.min_realized = call i32 @llvm.smin.i32(i32 %b675, i32 %a666)
  %812 = add nsw i32 %709, 9
  %b681 = ashr i32 %812, 1
  %a678 = call i32 @llvm.smax.i32(i32 %b739, i32 %b681)
  %b680 = ashr i32 %b602, 1
  %a677 = call i32 @llvm.smax.i32(i32 %a678, i32 %b680)
  %813 = call i32 @llvm.smax.i32(i32 %a677, i32 %b739)
  %f8.v3.extent_realized.s = sub i32 %813, %f8.v3.min_realized
  %814 = add nsw i32 %f8.v4.extent_realized.s, 1
  %815 = add i32 %f8.v3.extent_realized.s, 1
  %f8.stride.2 = mul nsw i32 %815, %814
  %816 = zext i32 %814 to i64
  %817 = zext i32 %815 to i64
  %818 = shl nuw nsw i64 %817, 2
  %819 = and i64 %818, 4294967292
  %820 = mul nuw i64 %819, %816
  %821 = lshr i64 %820, 32
  %822 = lshr i64 %817, 30
  %823 = mul nuw nsw i64 %822, %816
  %t3075 = add nuw nsw i64 %821, %823
  %t3076 = mul i64 %818, %816
  %824 = mul i64 %t3076, %408
  %825 = icmp ult i64 %824, 2147483648
  %826 = and i64 %t3076, 4294967292
  %827 = mul nuw i64 %826, %408
  %828 = lshr i64 %827, 32
  %829 = mul i64 %t3075, %408
  %830 = add i64 %829, %828
  %831 = or i64 %830, %t3075
  %832 = icmp ult i64 %831, 4294967296
  %833 = and i1 %825, %832
  br i1 %833, label %"assert succeeded152", label %"assert failed151", !prof !5

"assert failed151":                               ; preds = %"consume f74"
  %834 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.18, i64 %824, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded152":                            ; preds = %"consume f74"
  %835 = add nuw nsw i64 %824, 4
  %836 = call ptr @halide_malloc(ptr null, i64 %835)
  %.not545 = icmp eq ptr %836, null
  br i1 %.not545, label %"assert failed153", label %"produce f8", !prof !4

"assert failed153":                               ; preds = %"assert succeeded152"
  %837 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f8":                                     ; preds = %"assert succeeded152"
  %838 = add nsw i32 %f4.s0.v6.loop_extent.s, 2
  store i32 %a772, ptr %4, align 8
  %839 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 1
  store i32 %f7.stride.1, ptr %839, align 4
  %840 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 2
  store i32 %f7.v3.extent_realized.s, ptr %840, align 8
  %841 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 3
  store i32 %f7.v3.min_realized, ptr %841, align 4
  %842 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 4
  store i32 %f7.v4.min_realized, ptr %842, align 8
  %843 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 5
  store i32 %b739, ptr %843, align 4
  %844 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 6
  store i32 %b675, ptr %844, align 8
  %845 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 7
  store i32 %b735, ptr %845, align 4
  %846 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 8
  store i32 %b658, ptr %846, align 8
  %847 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 9
  store i32 %f8.stride.2, ptr %847, align 4
  %848 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 10
  store i32 %f8.v3.extent_realized.s, ptr %848, align 8
  %849 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 11
  store i32 %f8.v3.min_realized, ptr %849, align 4
  %850 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 12
  store i32 %f8.v4.min_realized, ptr %850, align 8
  %851 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 13
  store ptr %734, ptr %851, align 8
  %852 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 14
  store ptr null, ptr %852, align 8
  %853 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 15
  store ptr %836, ptr %853, align 8
  %854 = getelementptr inbounds %closure_t.7, ptr %4, i64 0, i32 16
  store ptr null, ptr %854, align 8
  %855 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f8.s0.v6, i32 %111, i32 %838, ptr nonnull %4)
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %"consume f8", label %call_destructor.exit210.thread374, !prof !5

"consume f8":                                     ; preds = %"produce f8"
  %.not164 = icmp slt i32 %b570, %72
  %a686 = select i1 %.not164, i32 %b570, i32 %b19
  %f75.v4.min_realized = call i32 @llvm.smin.i32(i32 %756, i32 %a686)
  %857 = call i32 @llvm.smax.i32(i32 %762, i32 %a577)
  %.not165 = icmp slt i32 %b586, %76
  %a696 = select i1 %.not165, i32 %b586, i32 %b21
  %f75.v3.min_realized = call i32 @llvm.smin.i32(i32 %765, i32 %a696)
  %858 = call i32 @llvm.smax.i32(i32 %770, i32 %a599)
  %f75.v3.extent_realized.s = sub i32 %858, %f75.v3.min_realized
  %reass.sub546 = sub i32 %857, %f75.v4.min_realized
  %859 = add i32 %reass.sub546, 1
  %860 = zext i32 %859 to i64
  %861 = add i32 %f75.v3.extent_realized.s, 1
  %862 = zext i32 %861 to i64
  %863 = shl nuw nsw i64 %862, 2
  %864 = mul i64 %863, %860
  %865 = icmp ult i64 %864, 2147483648
  %866 = and i64 %863, 4294967292
  %867 = mul nuw i64 %866, %860
  %868 = lshr i64 %867, 32
  %869 = lshr i64 %862, 30
  %870 = mul nuw nsw i64 %869, %860
  %871 = add nuw nsw i64 %868, %870
  %872 = icmp ult i64 %871, 4294967296
  %873 = and i1 %865, %872
  br i1 %873, label %"assert succeeded158", label %"assert failed157", !prof !5

"assert failed157":                               ; preds = %"consume f8"
  %874 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.19, i64 %864, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded158":                            ; preds = %"consume f8"
  %875 = add nuw nsw i64 %864, 4
  %876 = call ptr @halide_malloc(ptr null, i64 %875)
  %.not547 = icmp eq ptr %876, null
  br i1 %.not547, label %"assert failed159", label %"produce f75", !prof !4

"assert failed159":                               ; preds = %"assert succeeded158"
  %877 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f75":                                    ; preds = %"assert succeeded158"
  %878 = add nsw i32 %759, 1
  store i32 %f74.v3.extent_realized.s, ptr %3, align 8
  %879 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 1
  store i32 %f74.v3.min_realized, ptr %879, align 4
  %880 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 2
  store i32 %f74.v4.min_realized, ptr %880, align 8
  %881 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 3
  store i32 %b709, ptr %881, align 4
  %882 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 4
  store i32 %a705, ptr %882, align 8
  %883 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 5
  store i32 %b695, ptr %883, align 4
  %884 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 6
  store i32 %a691, ptr %884, align 8
  %885 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 7
  store i32 %f75.v3.extent_realized.s, ptr %885, align 4
  %886 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 8
  store i32 %f75.v3.min_realized, ptr %886, align 8
  %887 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 9
  store i32 %f75.v4.min_realized, ptr %887, align 4
  %888 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 10
  store ptr %790, ptr %888, align 8
  %889 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 11
  store ptr null, ptr %889, align 8
  %890 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 12
  store ptr %876, ptr %890, align 8
  %891 = getelementptr inbounds %closure_t.8, ptr %3, i64 0, i32 13
  store ptr null, ptr %891, align 8
  %892 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f75.s0.v4.v4, i32 0, i32 %878, ptr nonnull %3)
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %"consume f75", label %call_destructor.exit210.thread374, !prof !5

"consume f75":                                    ; preds = %"produce f75"
  %.not166 = icmp slt i32 %a1, %44
  %a719 = select i1 %.not166, i32 %a1, i32 %b3
  %a718 = call i32 @llvm.smin.i32(i32 %b14, i32 %a719)
  %f9.v4.min_realized = call i32 @llvm.smin.i32(i32 %b720, i32 %a718)
  %b723 = ashr i32 %59, 6
  %f9.v4.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b750, i32 %b723)
  %.not167 = icmp slt i32 %a3, %53
  %a723 = select i1 %.not167, i32 %a3, i32 %b5
  %a722 = call i32 @llvm.smin.i32(i32 %b17, i32 %a723)
  %f9.v3.min_realized = call i32 @llvm.smin.i32(i32 %b724, i32 %a722)
  %b727 = ashr i32 %63, 6
  %f9.v3.extent_realized.s.s = call i32 @llvm.smax.i32(i32 %b753, i32 %b727)
  %894 = sub nsw i32 %f9.v4.extent_realized.s.s, %f9.v4.min_realized
  %895 = add nsw i32 %894, 1
  %896 = sub nsw i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %897 = add nsw i32 %896, 1
  %f9.stride.2 = mul nsw i32 %895, %897
  %898 = zext i32 %895 to i64
  %899 = zext i32 %897 to i64
  %900 = shl nuw nsw i64 %899, 2
  %901 = and i64 %900, 4294967292
  %902 = mul nuw i64 %901, %898
  %903 = lshr i64 %902, 32
  %904 = lshr i64 %899, 30
  %905 = mul nuw nsw i64 %904, %898
  %t3079 = add nuw nsw i64 %903, %905
  %t3080 = mul i64 %900, %898
  %906 = mul i64 %t3080, %408
  %907 = icmp ult i64 %906, 2147483648
  %908 = and i64 %t3080, 4294967292
  %909 = mul nuw i64 %908, %408
  %910 = lshr i64 %909, 32
  %911 = mul i64 %t3079, %408
  %912 = add i64 %911, %910
  %913 = or i64 %912, %t3079
  %914 = icmp ult i64 %913, 4294967296
  %915 = and i1 %907, %914
  br i1 %915, label %"assert succeeded164", label %"assert failed163", !prof !5

"assert failed163":                               ; preds = %"consume f75"
  %916 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.20, i64 %906, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded164":                            ; preds = %"consume f75"
  %917 = add nuw nsw i64 %906, 4
  %918 = call ptr @halide_malloc(ptr null, i64 %917)
  %.not548 = icmp eq ptr %918, null
  br i1 %.not548, label %"assert failed165", label %"produce f9", !prof !4

"assert failed165":                               ; preds = %"assert succeeded164"
  %919 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f9":                                     ; preds = %"assert succeeded164"
  store i32 %a772, ptr %2, align 8
  %920 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 1
  store i32 %f8.stride.2, ptr %920, align 4
  %921 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 2
  store i32 %f8.v3.extent_realized.s, ptr %921, align 8
  %922 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 3
  store i32 %f8.v3.min_realized, ptr %922, align 4
  %923 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 4
  store i32 %f8.v4.min_realized, ptr %923, align 8
  %924 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 5
  store i32 %b753, ptr %924, align 4
  %925 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 6
  store i32 %b724, ptr %925, align 8
  %926 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 7
  store i32 %b750, ptr %926, align 4
  %927 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 8
  store i32 %b720, ptr %927, align 8
  %928 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 9
  store i32 %f9.stride.2, ptr %928, align 4
  %929 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 10
  store i32 %f9.v3.extent_realized.s.s, ptr %929, align 8
  %930 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 11
  store i32 %f9.v3.min_realized, ptr %930, align 4
  %931 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 12
  store i32 %f9.v4.min_realized, ptr %931, align 8
  %932 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 13
  store ptr %836, ptr %932, align 8
  %933 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 14
  store ptr null, ptr %933, align 8
  %934 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 15
  store ptr %918, ptr %934, align 8
  %935 = getelementptr inbounds %closure_t.9, ptr %2, i64 0, i32 16
  store ptr null, ptr %935, align 8
  %936 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f9.s0.v6, i32 %111, i32 %838, ptr nonnull %2)
  %937 = icmp eq i32 %936, 0
  br i1 %937, label %"consume f9", label %call_destructor.exit210.thread374, !prof !5

"consume f9":                                     ; preds = %"produce f9"
  %reass.sub549 = sub i32 %b735, %b733
  %938 = add i32 %reass.sub549, 1
  %939 = zext i32 %938 to i64
  %t3081 = add i32 %b739, 1
  %940 = sub i32 %t3081, %b737
  %941 = zext i32 %940 to i64
  %942 = shl nuw nsw i64 %941, 2
  %943 = mul i64 %942, %939
  %944 = icmp ult i64 %943, 2147483648
  %945 = and i64 %942, 4294967292
  %946 = mul nuw i64 %945, %939
  %947 = lshr i64 %946, 32
  %948 = lshr i64 %941, 30
  %949 = mul nuw nsw i64 %948, %939
  %950 = add nuw nsw i64 %947, %949
  %951 = icmp ult i64 %950, 4294967296
  %952 = and i1 %944, %951
  br i1 %952, label %"assert succeeded170", label %"assert failed169", !prof !5

"assert failed169":                               ; preds = %"consume f9"
  %953 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.21, i64 %943, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded170":                            ; preds = %"consume f9"
  %954 = add nuw nsw i64 %943, 4
  %955 = call ptr @halide_malloc(ptr null, i64 %954)
  %.not550 = icmp eq ptr %955, null
  br i1 %.not550, label %"assert failed171", label %"produce f76", !prof !4

"assert failed171":                               ; preds = %"assert succeeded170"
  %956 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f76":                                    ; preds = %"assert succeeded170"
  %957 = add i32 %b735, 1
  %958 = icmp slt i32 %b733, %957
  br i1 %958, label %"for f76.s0.v4.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.preheader":                        ; preds = %"produce f76"
  %959 = sext i32 %b739 to i64
  %960 = sext i32 %b737 to i64
  %reass.sub567 = sub nsw i64 %959, %960
  %961 = shl nsw i64 %reass.sub567, 2
  %962 = add nsw i64 %961, 4
  %963 = shl i32 %861, 1
  %964 = icmp sgt i32 %t3081, %b737
  br i1 %964, label %"for f76.s0.v4.us.preheader", label %"consume f76", !prof !5

"for f76.s0.v4.us.preheader":                     ; preds = %"for f76.s0.v4.preheader"
  %965 = xor i32 %f75.v4.min_realized, -1
  %966 = add i32 %72, %965
  %967 = mul i32 %861, %966
  %968 = sub i32 %967, %f75.v3.min_realized
  %969 = sub i32 %72, %f75.v4.min_realized
  %970 = mul i32 %861, %969
  %971 = sub i32 %970, %f75.v3.min_realized
  %972 = or i32 %72, 1
  %973 = sub i32 %972, %f75.v4.min_realized
  %974 = mul i32 %861, %973
  %975 = sub i32 %974, %f75.v3.min_realized
  %976 = add i32 %72, 2
  %977 = sub i32 %976, %f75.v4.min_realized
  %978 = mul i32 %861, %977
  %979 = sub i32 %978, %f75.v3.min_realized
  %980 = sub i32 %b739, %b737
  %981 = add i32 %978, %76
  %982 = sub i32 %981, %f75.v3.min_realized
  %983 = shl i32 %861, 1
  %984 = add i32 %974, %76
  %985 = sub i32 %984, %f75.v3.min_realized
  %986 = add i32 %970, %76
  %987 = sub i32 %986, %f75.v3.min_realized
  %988 = add i32 %967, %76
  %989 = sub i32 %988, %f75.v3.min_realized
  %990 = sub i32 %b739, %b737
  %991 = zext i32 %990 to i64
  %992 = add nuw nsw i64 %991, 1
  %min.iters.check860 = icmp ult i32 %990, 3
  %mul.result = shl i32 %980, 1
  %mul.result850 = shl i32 %980, 1
  %mul.overflow851 = icmp slt i32 %980, 0
  %mul.result853 = shl i32 %980, 1
  %mul.result856 = shl i32 %980, 1
  %n.vec863 = and i64 %992, -4
  %.cast864 = trunc i64 %n.vec863 to i32
  %993 = shl i32 %.cast864, 1
  %.cast867 = trunc i64 %n.vec863 to i32
  %994 = shl i32 %.cast867, 1
  %.cast870 = trunc i64 %n.vec863 to i32
  %995 = shl i32 %.cast870, 1
  %.cast873 = trunc i64 %n.vec863 to i32
  %996 = shl i32 %.cast873, 1
  %997 = shl nuw nsw i64 %n.vec863, 2
  %.cast878 = trunc i64 %n.vec863 to i32
  %ind.end879 = sub i32 %940, %.cast878
  %invariant.gep = getelementptr float, ptr %876, i64 -1
  %invariant.gep1072 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1074 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1076 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1078 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1080 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1082 = getelementptr float, ptr %876, i64 -1
  %invariant.gep1084 = getelementptr float, ptr %876, i64 -1
  %cmp.n881 = icmp eq i64 %992, %n.vec863
  br label %"for f76.s0.v4.us"

"for f76.s0.v4.us":                               ; preds = %"for f76.s0.v4.us.preheader", %"end for f76.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f76.s0.v4.us.preheader" ], [ %indvar.next, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv474.us = phi i32 [ %968, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next475.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv470.us = phi i32 [ %971, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next471.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv466.us = phi i32 [ %975, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next467.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv462.us = phi i32 [ %979, %"for f76.s0.v4.us.preheader" ], [ %lsr.iv.next463.us, %"end for f76.s0.v3.loopexit.us" ]
  %lsr.iv456.us = phi ptr [ %955, %"for f76.s0.v4.us.preheader" ], [ %scevgep458.us, %"end for f76.s0.v3.loopexit.us" ]
  %f76.s0.v4.us = phi i32 [ %b733, %"for f76.s0.v4.us.preheader" ], [ %1136, %"end for f76.s0.v3.loopexit.us" ]
  br i1 %min.iters.check860, label %"for f76.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f76.s0.v4.us"
  %998 = mul i32 %983, %indvar
  %999 = add i32 %989, %998
  %1000 = add i32 %987, %998
  %1001 = add i32 %985, %998
  %1002 = add i32 %982, %998
  %1003 = add i32 %1002, %mul.result
  %1004 = icmp slt i32 %1003, %1002
  %1005 = add i32 %1001, %mul.result850
  %1006 = icmp slt i32 %1005, %1001
  %1007 = or i1 %1006, %mul.overflow851
  %1008 = add i32 %1000, %mul.result853
  %1009 = icmp slt i32 %1008, %1000
  %1010 = add i32 %999, %mul.result856
  %1011 = icmp slt i32 %1010, %999
  %1012 = or i1 %1004, %1007
  %1013 = or i1 %1009, %1012
  %1014 = or i1 %1011, %1013
  br i1 %1014, label %"for f76.s0.v3.us.preheader", label %vector.ph861

vector.ph861:                                     ; preds = %vector.scevcheck
  %ind.end865 = add i32 %lsr.iv474.us, %993
  %ind.end868 = add i32 %lsr.iv470.us, %994
  %ind.end871 = add i32 %lsr.iv466.us, %995
  %ind.end874 = add i32 %lsr.iv462.us, %996
  %ind.end876 = getelementptr i8, ptr %lsr.iv456.us, i64 %997
  br label %vector.body882

vector.body882:                                   ; preds = %vector.body882, %vector.ph861
  %index883 = phi i64 [ 0, %vector.ph861 ], [ %index.next914, %vector.body882 ]
  %1015 = shl i64 %index883, 2
  %next.gep = getelementptr i8, ptr %lsr.iv456.us, i64 %1015
  %.cast884 = trunc i64 %index883 to i32
  %1016 = shl i32 %.cast884, 1
  %offset.idx885 = add i32 %lsr.iv462.us, %1016
  %.cast886 = trunc i64 %index883 to i32
  %1017 = shl i32 %.cast886, 1
  %offset.idx887 = add i32 %lsr.iv466.us, %1017
  %.cast888 = trunc i64 %index883 to i32
  %1018 = shl i32 %.cast888, 1
  %offset.idx889 = add i32 %lsr.iv470.us, %1018
  %.cast890 = trunc i64 %index883 to i32
  %1019 = shl i32 %.cast890, 1
  %offset.idx891 = add i32 %lsr.iv474.us, %1019
  %1020 = add i32 %offset.idx891, %76
  %1021 = add i32 %offset.idx889, %76
  %1022 = add i32 %offset.idx887, %76
  %1023 = add i32 %offset.idx885, %76
  %1024 = sext i32 %1023 to i64
  %1025 = add nsw i64 %1024, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %1025
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !13
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec892 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1073 = getelementptr float, ptr %invariant.gep1072, i64 %1024
  %wide.vec893 = load <8 x float>, ptr %gep1073, align 4, !tbaa !13
  %strided.vec894 = shufflevector <8 x float> %wide.vec893, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec895 = shufflevector <8 x float> %wide.vec893, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1026 = fadd <4 x float> %strided.vec, %strided.vec895
  %1027 = fmul <4 x float> %1026, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1028 = fadd <4 x float> %strided.vec894, %1027
  %1029 = fadd <4 x float> %strided.vec892, %1028
  %1030 = fmul <4 x float> %1029, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1031 = sext i32 %1022 to i64
  %1032 = add nsw i64 %1031, 2
  %gep1075 = getelementptr float, ptr %invariant.gep1074, i64 %1032
  %wide.vec896 = load <8 x float>, ptr %gep1075, align 4, !tbaa !13
  %strided.vec897 = shufflevector <8 x float> %wide.vec896, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec898 = shufflevector <8 x float> %wide.vec896, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1077 = getelementptr float, ptr %invariant.gep1076, i64 %1031
  %wide.vec899 = load <8 x float>, ptr %gep1077, align 4, !tbaa !13
  %strided.vec900 = shufflevector <8 x float> %wide.vec899, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec901 = shufflevector <8 x float> %wide.vec899, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1033 = fadd <4 x float> %strided.vec897, %strided.vec901
  %1034 = fmul <4 x float> %1033, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1035 = fadd <4 x float> %strided.vec900, %1034
  %1036 = fadd <4 x float> %strided.vec898, %1035
  %1037 = sext i32 %1021 to i64
  %1038 = add nsw i64 %1037, 2
  %gep1079 = getelementptr float, ptr %invariant.gep1078, i64 %1038
  %wide.vec902 = load <8 x float>, ptr %gep1079, align 4, !tbaa !13
  %strided.vec903 = shufflevector <8 x float> %wide.vec902, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec904 = shufflevector <8 x float> %wide.vec902, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1081 = getelementptr float, ptr %invariant.gep1080, i64 %1037
  %wide.vec905 = load <8 x float>, ptr %gep1081, align 4, !tbaa !13
  %strided.vec906 = shufflevector <8 x float> %wide.vec905, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec907 = shufflevector <8 x float> %wide.vec905, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1039 = fadd <4 x float> %strided.vec903, %strided.vec907
  %1040 = fmul <4 x float> %1039, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1041 = fadd <4 x float> %strided.vec906, %1040
  %1042 = fadd <4 x float> %strided.vec904, %1041
  %1043 = fadd <4 x float> %1036, %1042
  %1044 = fmul <4 x float> %1043, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1045 = sext i32 %1020 to i64
  %1046 = add nsw i64 %1045, 2
  %gep1083 = getelementptr float, ptr %invariant.gep1082, i64 %1046
  %wide.vec908 = load <8 x float>, ptr %gep1083, align 4, !tbaa !13
  %strided.vec909 = shufflevector <8 x float> %wide.vec908, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec910 = shufflevector <8 x float> %wide.vec908, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1085 = getelementptr float, ptr %invariant.gep1084, i64 %1045
  %wide.vec911 = load <8 x float>, ptr %gep1085, align 4, !tbaa !13
  %strided.vec912 = shufflevector <8 x float> %wide.vec911, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec913 = shufflevector <8 x float> %wide.vec911, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1047 = fadd <4 x float> %strided.vec909, %strided.vec913
  %1048 = fmul <4 x float> %1047, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1049 = fadd <4 x float> %strided.vec912, %1048
  %1050 = fadd <4 x float> %strided.vec910, %1049
  %1051 = fmul <4 x float> %1050, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1052 = fadd <4 x float> %1044, %1051
  %1053 = fadd <4 x float> %1030, %1052
  %1054 = fmul <4 x float> %1053, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1054, ptr %next.gep, align 4, !tbaa !15
  %index.next914 = add nuw i64 %index883, 4
  %1055 = icmp eq i64 %index.next914, %n.vec863
  br i1 %1055, label %middle.block858, label %vector.body882, !llvm.loop !17

middle.block858:                                  ; preds = %vector.body882
  br i1 %cmp.n881, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us.preheader"

"for f76.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f76.s0.v4.us", %middle.block858
  %lsr.iv476.us.ph = phi i32 [ %lsr.iv474.us, %vector.scevcheck ], [ %lsr.iv474.us, %"for f76.s0.v4.us" ], [ %ind.end865, %middle.block858 ]
  %lsr.iv472.us.ph = phi i32 [ %lsr.iv470.us, %vector.scevcheck ], [ %lsr.iv470.us, %"for f76.s0.v4.us" ], [ %ind.end868, %middle.block858 ]
  %lsr.iv468.us.ph = phi i32 [ %lsr.iv466.us, %vector.scevcheck ], [ %lsr.iv466.us, %"for f76.s0.v4.us" ], [ %ind.end871, %middle.block858 ]
  %lsr.iv464.us.ph = phi i32 [ %lsr.iv462.us, %vector.scevcheck ], [ %lsr.iv462.us, %"for f76.s0.v4.us" ], [ %ind.end874, %middle.block858 ]
  %lsr.iv459.us.ph = phi ptr [ %lsr.iv456.us, %vector.scevcheck ], [ %lsr.iv456.us, %"for f76.s0.v4.us" ], [ %ind.end876, %middle.block858 ]
  %lsr.iv453.us.ph = phi i32 [ %940, %vector.scevcheck ], [ %940, %"for f76.s0.v4.us" ], [ %ind.end879, %middle.block858 ]
  br label %"for f76.s0.v3.us"

"for f76.s0.v3.us":                               ; preds = %"for f76.s0.v3.us.preheader", %"for f76.s0.v3.us"
  %lsr.iv476.us = phi i32 [ %lsr.iv.next477.us, %"for f76.s0.v3.us" ], [ %lsr.iv476.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv472.us = phi i32 [ %lsr.iv.next473.us, %"for f76.s0.v3.us" ], [ %lsr.iv472.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv468.us = phi i32 [ %lsr.iv.next469.us, %"for f76.s0.v3.us" ], [ %lsr.iv468.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv464.us = phi i32 [ %lsr.iv.next465.us, %"for f76.s0.v3.us" ], [ %lsr.iv464.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv459.us = phi ptr [ %scevgep460.us, %"for f76.s0.v3.us" ], [ %lsr.iv459.us.ph, %"for f76.s0.v3.us.preheader" ]
  %lsr.iv453.us = phi i32 [ %lsr.iv.next454.us, %"for f76.s0.v3.us" ], [ %lsr.iv453.us.ph, %"for f76.s0.v3.us.preheader" ]
  %1056 = add i32 %lsr.iv476.us, %76
  %1057 = add i32 %lsr.iv472.us, %76
  %1058 = add i32 %lsr.iv468.us, %76
  %1059 = add i32 %lsr.iv464.us, %76
  %1060 = sext i32 %1059 to i64
  %1061 = add nsw i64 %1060, 2
  %1062 = getelementptr inbounds float, ptr %876, i64 %1061
  %1063 = load float, ptr %1062, align 4, !tbaa !13
  %1064 = add nsw i64 %1060, 1
  %1065 = getelementptr inbounds float, ptr %876, i64 %1064
  %1066 = load float, ptr %1065, align 4, !tbaa !13
  %1067 = getelementptr inbounds float, ptr %876, i64 %1060
  %1068 = load float, ptr %1067, align 4, !tbaa !13
  %1069 = fadd float %1066, %1068
  %1070 = fmul float %1069, 3.000000e+00
  %1071 = add nsw i64 %1060, -1
  %1072 = getelementptr inbounds float, ptr %876, i64 %1071
  %1073 = sext i32 %1058 to i64
  %1074 = add nsw i64 %1073, 2
  %1075 = getelementptr inbounds float, ptr %876, i64 %1074
  %1076 = add nsw i64 %1073, 1
  %1077 = getelementptr inbounds float, ptr %876, i64 %1076
  %1078 = load float, ptr %1077, align 4, !tbaa !13
  %1079 = getelementptr inbounds float, ptr %876, i64 %1073
  %1080 = load float, ptr %1079, align 4, !tbaa !13
  %1081 = fadd float %1078, %1080
  %1082 = fmul float %1081, 3.000000e+00
  %1083 = add nsw i64 %1073, -1
  %1084 = getelementptr inbounds float, ptr %876, i64 %1083
  %1085 = load float, ptr %1084, align 4, !tbaa !13
  %1086 = fadd float %1085, %1082
  %1087 = sext i32 %1057 to i64
  %1088 = add nsw i64 %1087, 2
  %1089 = getelementptr inbounds float, ptr %876, i64 %1088
  %1090 = load float, ptr %1089, align 4, !tbaa !13
  %1091 = add nsw i64 %1087, 1
  %1092 = getelementptr inbounds float, ptr %876, i64 %1091
  %1093 = load float, ptr %1092, align 4, !tbaa !13
  %1094 = getelementptr inbounds float, ptr %876, i64 %1087
  %1095 = load float, ptr %1094, align 4, !tbaa !13
  %1096 = fadd float %1093, %1095
  %1097 = fmul float %1096, 3.000000e+00
  %1098 = add nsw i64 %1087, -1
  %1099 = getelementptr inbounds float, ptr %876, i64 %1098
  %1100 = load float, ptr %1099, align 4, !tbaa !13
  %1101 = fadd float %1100, %1097
  %1102 = fadd float %1090, %1101
  %1103 = load float, ptr %1072, align 4, !tbaa !13
  %1104 = load float, ptr %1075, align 4, !tbaa !13
  %1105 = insertelement <2 x float> poison, float %1103, i64 0
  %1106 = insertelement <2 x float> %1105, float %1104, i64 1
  %1107 = insertelement <2 x float> poison, float %1070, i64 0
  %1108 = insertelement <2 x float> %1107, float %1086, i64 1
  %1109 = fadd <2 x float> %1106, %1108
  %1110 = insertelement <2 x float> poison, float %1063, i64 0
  %1111 = insertelement <2 x float> %1110, float %1102, i64 1
  %1112 = fadd <2 x float> %1111, %1109
  %1113 = fmul <2 x float> %1112, <float 1.250000e-01, float 3.750000e-01>
  %1114 = sext i32 %1056 to i64
  %1115 = add nsw i64 %1114, 2
  %1116 = getelementptr inbounds float, ptr %876, i64 %1115
  %1117 = load float, ptr %1116, align 4, !tbaa !13
  %1118 = add nsw i64 %1114, 1
  %1119 = getelementptr inbounds float, ptr %876, i64 %1118
  %1120 = load float, ptr %1119, align 4, !tbaa !13
  %1121 = getelementptr inbounds float, ptr %876, i64 %1114
  %1122 = load float, ptr %1121, align 4, !tbaa !13
  %1123 = fadd float %1120, %1122
  %1124 = fmul float %1123, 3.000000e+00
  %1125 = add nsw i64 %1114, -1
  %1126 = getelementptr inbounds float, ptr %876, i64 %1125
  %1127 = load float, ptr %1126, align 4, !tbaa !13
  %1128 = fadd float %1127, %1124
  %1129 = fadd float %1117, %1128
  %1130 = fmul float %1129, 1.250000e-01
  %1131 = extractelement <2 x float> %1113, i64 1
  %1132 = fadd float %1131, %1130
  %1133 = extractelement <2 x float> %1113, i64 0
  %1134 = fadd float %1133, %1132
  %1135 = fmul float %1134, 1.250000e-01
  store float %1135, ptr %lsr.iv459.us, align 4, !tbaa !15
  %lsr.iv.next454.us = add i32 %lsr.iv453.us, -1
  %scevgep460.us = getelementptr i8, ptr %lsr.iv459.us, i64 4
  %lsr.iv.next465.us = add i32 %lsr.iv464.us, 2
  %lsr.iv.next469.us = add i32 %lsr.iv468.us, 2
  %lsr.iv.next473.us = add i32 %lsr.iv472.us, 2
  %lsr.iv.next477.us = add i32 %lsr.iv476.us, 2
  %.not131.us = icmp eq i32 %lsr.iv.next454.us, 0
  br i1 %.not131.us, label %"end for f76.s0.v3.loopexit.us", label %"for f76.s0.v3.us", !llvm.loop !18

"end for f76.s0.v3.loopexit.us":                  ; preds = %"for f76.s0.v3.us", %middle.block858
  %1136 = add nsw i32 %f76.s0.v4.us, 1
  %scevgep458.us = getelementptr i1, ptr %lsr.iv456.us, i64 %962
  %lsr.iv.next463.us = add i32 %lsr.iv462.us, %963
  %lsr.iv.next467.us = add i32 %lsr.iv466.us, %963
  %lsr.iv.next471.us = add i32 %lsr.iv470.us, %963
  %lsr.iv.next475.us = add i32 %lsr.iv474.us, %963
  %.not130.us = icmp eq i32 %f76.s0.v4.us, %b735
  %indvar.next = add i32 %indvar, 1
  br i1 %.not130.us, label %"consume f76", label %"for f76.s0.v4.us"

"consume f76":                                    ; preds = %"end for f76.s0.v3.loopexit.us", %"for f76.s0.v4.preheader", %"produce f76"
  %f10.v4.extent_realized.s = sub nsw i32 %39, %43
  %f10.v3.extent_realized.s = sub nsw i32 %48, %52
  %1137 = add nsw i32 %f10.v4.extent_realized.s, 1
  %1138 = add nsw i32 %f10.v3.extent_realized.s, 1
  %f10.stride.2 = mul nsw i32 %1137, %1138
  %1139 = zext i32 %1137 to i64
  %1140 = zext i32 %1138 to i64
  %1141 = shl nuw nsw i64 %1140, 2
  %1142 = and i64 %1141, 4294967292
  %1143 = mul nuw i64 %1142, %1139
  %1144 = lshr i64 %1143, 32
  %1145 = lshr i64 %1140, 30
  %1146 = mul nuw nsw i64 %1145, %1139
  %t3083 = add nuw nsw i64 %1144, %1146
  %t3084 = mul i64 %1141, %1139
  %1147 = zext i32 %838 to i64
  %1148 = mul i64 %t3084, %1147
  %1149 = icmp ult i64 %1148, 2147483648
  %1150 = and i64 %t3084, 4294967292
  %1151 = mul nuw i64 %1150, %1147
  %1152 = lshr i64 %1151, 32
  %1153 = mul i64 %t3083, %1147
  %1154 = add i64 %1153, %1152
  %1155 = or i64 %1154, %t3083
  %1156 = icmp ult i64 %1155, 4294967296
  %1157 = and i1 %1149, %1156
  br i1 %1157, label %"assert succeeded174", label %"assert failed173", !prof !5

"assert failed173":                               ; preds = %"consume f76"
  %1158 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.22, i64 %1148, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded174":                            ; preds = %"consume f76"
  %1159 = add nuw nsw i64 %1148, 4
  %1160 = call ptr @halide_malloc(ptr null, i64 %1159)
  %.not551 = icmp eq ptr %1160, null
  br i1 %.not551, label %"assert failed175", label %"produce f10", !prof !4

"assert failed175":                               ; preds = %"assert succeeded174"
  %1161 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f10":                                    ; preds = %"assert succeeded174"
  store i32 %a772, ptr %1, align 8
  %1162 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 1
  store i32 %f10.stride.2, ptr %1162, align 4
  %1163 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 2
  store i32 %f10.v3.extent_realized.s, ptr %1163, align 8
  %1164 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 3
  store i32 %f10.v4.extent_realized.s, ptr %1164, align 4
  %1165 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 4
  store i32 %f9.stride.2, ptr %1165, align 8
  %1166 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 5
  store i32 %f9.v3.extent_realized.s.s, ptr %1166, align 4
  %1167 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 6
  store i32 %f9.v3.min_realized, ptr %1167, align 8
  %1168 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 7
  store i32 %f9.v4.min_realized, ptr %1168, align 4
  %1169 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 8
  store i32 %a286, ptr %1169, align 8
  %1170 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 9
  store i32 %a114, ptr %1170, align 4
  %1171 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 10
  store ptr %1160, ptr %1171, align 8
  %1172 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 11
  store ptr null, ptr %1172, align 8
  %1173 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 12
  store ptr %918, ptr %1173, align 8
  %1174 = getelementptr inbounds %closure_t.10, ptr %1, i64 0, i32 13
  store ptr null, ptr %1174, align 8
  %1175 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_f10.s0.v6, i32 %111, i32 %838, ptr nonnull %1)
  %1176 = icmp eq i32 %1175, 0
  br i1 %1176, label %"consume f10", label %call_destructor.exit210.thread374, !prof !5

"consume f10":                                    ; preds = %"produce f10"
  %reass.sub552 = sub i32 %b750, %b748
  %1177 = add i32 %reass.sub552, 1
  %1178 = zext i32 %1177 to i64
  %t3085 = add i32 %b753, 1
  %1179 = sub i32 %t3085, %b751
  %1180 = zext i32 %1179 to i64
  %1181 = shl nuw nsw i64 %1180, 2
  %1182 = mul i64 %1181, %1178
  %1183 = icmp ult i64 %1182, 2147483648
  %1184 = and i64 %1181, 4294967292
  %1185 = mul nuw i64 %1184, %1178
  %1186 = lshr i64 %1185, 32
  %1187 = lshr i64 %1180, 30
  %1188 = mul nuw nsw i64 %1187, %1178
  %1189 = add nuw nsw i64 %1186, %1188
  %1190 = icmp ult i64 %1189, 4294967296
  %1191 = and i1 %1183, %1190
  br i1 %1191, label %"assert succeeded180", label %"assert failed179", !prof !5

"assert failed179":                               ; preds = %"consume f10"
  %1192 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.23, i64 %1182, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded180":                            ; preds = %"consume f10"
  %1193 = add nuw nsw i64 %1182, 4
  %1194 = call ptr @halide_malloc(ptr null, i64 %1193)
  %.not553 = icmp eq ptr %1194, null
  br i1 %.not553, label %"assert failed181", label %"produce f77", !prof !4

"assert failed181":                               ; preds = %"assert succeeded180"
  %1195 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f77":                                    ; preds = %"assert succeeded180"
  %.not108 = icmp slt i32 %b750, %b748
  br i1 %.not108, label %"consume f77", label %"for f77.s0.v4.preheader", !prof !4

"for f77.s0.v4.preheader":                        ; preds = %"produce f77"
  %1196 = sext i32 %b753 to i64
  %1197 = sext i32 %b751 to i64
  %reass.sub554 = sub nsw i64 %1196, %1197
  %1198 = shl nsw i64 %reass.sub554, 2
  %1199 = add nsw i64 %1198, 4
  %1200 = shl i32 %940, 1
  %.not127 = icmp slt i32 %b753, %b751
  br i1 %.not127, label %"consume f77", label %"for f77.s0.v4.preheader578", !prof !4

"for f77.s0.v4.preheader578":                     ; preds = %"for f77.s0.v4.preheader"
  %1201 = xor i32 %b733, -1
  %1202 = add i32 %62, %1201
  %1203 = mul i32 %940, %1202
  %1204 = sub i32 %1203, %b737
  %1205 = sub i32 %62, %b733
  %1206 = mul i32 %940, %1205
  %1207 = sub i32 %1206, %b737
  %1208 = or i32 %62, 1
  %1209 = sub i32 %1208, %b733
  %1210 = mul i32 %940, %1209
  %1211 = sub i32 %1210, %b737
  %1212 = add nsw i32 %62, 2
  %1213 = sub i32 %1212, %b733
  %1214 = mul i32 %940, %1213
  %1215 = sub i32 %1214, %b737
  %1216 = sub i32 %b753, %b751
  %1217 = add i32 %1214, %66
  %1218 = sub i32 %1217, %b737
  %1219 = shl i32 %940, 1
  %1220 = add i32 %1210, %66
  %1221 = sub i32 %1220, %b737
  %1222 = add i32 %1206, %66
  %1223 = sub i32 %1222, %b737
  %1224 = add i32 %1203, %66
  %1225 = sub i32 %1224, %b737
  %1226 = sub i32 %b753, %b751
  %1227 = zext i32 %1226 to i64
  %1228 = add nuw nsw i64 %1227, 1
  %min.iters.check932 = icmp ult i32 %1226, 3
  %mul.result919 = shl i32 %1216, 1
  %mul.result922 = shl i32 %1216, 1
  %mul.overflow923 = icmp slt i32 %1216, 0
  %mul.result925 = shl i32 %1216, 1
  %mul.result928 = shl i32 %1216, 1
  %n.vec935 = and i64 %1228, -4
  %.cast936 = trunc i64 %n.vec935 to i32
  %1229 = shl i32 %.cast936, 1
  %.cast939 = trunc i64 %n.vec935 to i32
  %1230 = shl i32 %.cast939, 1
  %.cast942 = trunc i64 %n.vec935 to i32
  %1231 = shl i32 %.cast942, 1
  %.cast945 = trunc i64 %n.vec935 to i32
  %1232 = shl i32 %.cast945, 1
  %1233 = shl nuw nsw i64 %n.vec935, 2
  %.cast950 = trunc i64 %n.vec935 to i32
  %ind.end951 = sub i32 %1179, %.cast950
  %invariant.gep1086 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1088 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1090 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1092 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1094 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1096 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1098 = getelementptr float, ptr %955, i64 -1
  %invariant.gep1100 = getelementptr float, ptr %955, i64 -1
  %cmp.n953 = icmp eq i64 %1228, %n.vec935
  br label %"for f77.s0.v4"

"for f77.s0.v4":                                  ; preds = %"for f77.s0.v4.preheader578", %"end for f77.s0.v3.loopexit"
  %indvar916 = phi i32 [ 0, %"for f77.s0.v4.preheader578" ], [ %indvar.next917, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv449 = phi i32 [ %1204, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next450, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv445 = phi i32 [ %1207, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next446, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv441 = phi i32 [ %1211, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next442, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv437 = phi i32 [ %1215, %"for f77.s0.v4.preheader578" ], [ %lsr.iv.next438, %"end for f77.s0.v3.loopexit" ]
  %lsr.iv431 = phi ptr [ %1194, %"for f77.s0.v4.preheader578" ], [ %scevgep433, %"end for f77.s0.v3.loopexit" ]
  %f77.s0.v4 = phi i32 [ %b748, %"for f77.s0.v4.preheader578" ], [ %1372, %"end for f77.s0.v3.loopexit" ]
  br i1 %min.iters.check932, label %"for f77.s0.v3.preheader", label %vector.scevcheck915

vector.scevcheck915:                              ; preds = %"for f77.s0.v4"
  %1234 = mul i32 %1219, %indvar916
  %1235 = add i32 %1225, %1234
  %1236 = add i32 %1223, %1234
  %1237 = add i32 %1221, %1234
  %1238 = add i32 %1218, %1234
  %1239 = add i32 %1238, %mul.result919
  %1240 = icmp slt i32 %1239, %1238
  %1241 = add i32 %1237, %mul.result922
  %1242 = icmp slt i32 %1241, %1237
  %1243 = or i1 %1242, %mul.overflow923
  %1244 = add i32 %1236, %mul.result925
  %1245 = icmp slt i32 %1244, %1236
  %1246 = add i32 %1235, %mul.result928
  %1247 = icmp slt i32 %1246, %1235
  %1248 = or i1 %1240, %1243
  %1249 = or i1 %1245, %1248
  %1250 = or i1 %1247, %1249
  br i1 %1250, label %"for f77.s0.v3.preheader", label %vector.ph933

vector.ph933:                                     ; preds = %vector.scevcheck915
  %ind.end937 = add i32 %lsr.iv449, %1229
  %ind.end940 = add i32 %lsr.iv445, %1230
  %ind.end943 = add i32 %lsr.iv441, %1231
  %ind.end946 = add i32 %lsr.iv437, %1232
  %ind.end948 = getelementptr i8, ptr %lsr.iv431, i64 %1233
  br label %vector.body954

vector.body954:                                   ; preds = %vector.body954, %vector.ph933
  %index955 = phi i64 [ 0, %vector.ph933 ], [ %index.next989, %vector.body954 ]
  %1251 = shl i64 %index955, 2
  %next.gep956 = getelementptr i8, ptr %lsr.iv431, i64 %1251
  %.cast957 = trunc i64 %index955 to i32
  %1252 = shl i32 %.cast957, 1
  %offset.idx958 = add i32 %lsr.iv437, %1252
  %.cast959 = trunc i64 %index955 to i32
  %1253 = shl i32 %.cast959, 1
  %offset.idx960 = add i32 %lsr.iv441, %1253
  %.cast961 = trunc i64 %index955 to i32
  %1254 = shl i32 %.cast961, 1
  %offset.idx962 = add i32 %lsr.iv445, %1254
  %.cast963 = trunc i64 %index955 to i32
  %1255 = shl i32 %.cast963, 1
  %offset.idx964 = add i32 %lsr.iv449, %1255
  %1256 = add i32 %offset.idx964, %66
  %1257 = add i32 %offset.idx962, %66
  %1258 = add i32 %offset.idx960, %66
  %1259 = add i32 %offset.idx958, %66
  %1260 = sext i32 %1259 to i64
  %1261 = add nsw i64 %1260, 2
  %gep1087 = getelementptr float, ptr %invariant.gep1086, i64 %1261
  %wide.vec965 = load <8 x float>, ptr %gep1087, align 4, !tbaa !15
  %strided.vec966 = shufflevector <8 x float> %wide.vec965, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec967 = shufflevector <8 x float> %wide.vec965, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1089 = getelementptr float, ptr %invariant.gep1088, i64 %1260
  %wide.vec968 = load <8 x float>, ptr %gep1089, align 4, !tbaa !15
  %strided.vec969 = shufflevector <8 x float> %wide.vec968, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec970 = shufflevector <8 x float> %wide.vec968, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1262 = fadd <4 x float> %strided.vec966, %strided.vec970
  %1263 = fmul <4 x float> %1262, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1264 = fadd <4 x float> %strided.vec969, %1263
  %1265 = fadd <4 x float> %strided.vec967, %1264
  %1266 = fmul <4 x float> %1265, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1267 = sext i32 %1258 to i64
  %1268 = add nsw i64 %1267, 2
  %gep1091 = getelementptr float, ptr %invariant.gep1090, i64 %1268
  %wide.vec971 = load <8 x float>, ptr %gep1091, align 4, !tbaa !15
  %strided.vec972 = shufflevector <8 x float> %wide.vec971, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec973 = shufflevector <8 x float> %wide.vec971, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1093 = getelementptr float, ptr %invariant.gep1092, i64 %1267
  %wide.vec974 = load <8 x float>, ptr %gep1093, align 4, !tbaa !15
  %strided.vec975 = shufflevector <8 x float> %wide.vec974, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec976 = shufflevector <8 x float> %wide.vec974, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1269 = fadd <4 x float> %strided.vec972, %strided.vec976
  %1270 = fmul <4 x float> %1269, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1271 = fadd <4 x float> %strided.vec975, %1270
  %1272 = fadd <4 x float> %strided.vec973, %1271
  %1273 = sext i32 %1257 to i64
  %1274 = add nsw i64 %1273, 2
  %gep1095 = getelementptr float, ptr %invariant.gep1094, i64 %1274
  %wide.vec977 = load <8 x float>, ptr %gep1095, align 4, !tbaa !15
  %strided.vec978 = shufflevector <8 x float> %wide.vec977, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec979 = shufflevector <8 x float> %wide.vec977, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1097 = getelementptr float, ptr %invariant.gep1096, i64 %1273
  %wide.vec980 = load <8 x float>, ptr %gep1097, align 4, !tbaa !15
  %strided.vec981 = shufflevector <8 x float> %wide.vec980, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec982 = shufflevector <8 x float> %wide.vec980, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1275 = fadd <4 x float> %strided.vec978, %strided.vec982
  %1276 = fmul <4 x float> %1275, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1277 = fadd <4 x float> %strided.vec981, %1276
  %1278 = fadd <4 x float> %strided.vec979, %1277
  %1279 = fadd <4 x float> %1272, %1278
  %1280 = fmul <4 x float> %1279, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1281 = sext i32 %1256 to i64
  %1282 = add nsw i64 %1281, 2
  %gep1099 = getelementptr float, ptr %invariant.gep1098, i64 %1282
  %wide.vec983 = load <8 x float>, ptr %gep1099, align 4, !tbaa !15
  %strided.vec984 = shufflevector <8 x float> %wide.vec983, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec985 = shufflevector <8 x float> %wide.vec983, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1101 = getelementptr float, ptr %invariant.gep1100, i64 %1281
  %wide.vec986 = load <8 x float>, ptr %gep1101, align 4, !tbaa !15
  %strided.vec987 = shufflevector <8 x float> %wide.vec986, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec988 = shufflevector <8 x float> %wide.vec986, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1283 = fadd <4 x float> %strided.vec984, %strided.vec988
  %1284 = fmul <4 x float> %1283, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1285 = fadd <4 x float> %strided.vec987, %1284
  %1286 = fadd <4 x float> %strided.vec985, %1285
  %1287 = fmul <4 x float> %1286, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1288 = fadd <4 x float> %1280, %1287
  %1289 = fadd <4 x float> %1266, %1288
  %1290 = fmul <4 x float> %1289, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %1290, ptr %next.gep956, align 4, !tbaa !19
  %index.next989 = add nuw i64 %index955, 4
  %1291 = icmp eq i64 %index.next989, %n.vec935
  br i1 %1291, label %middle.block930, label %vector.body954, !llvm.loop !21

middle.block930:                                  ; preds = %vector.body954
  br i1 %cmp.n953, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3.preheader"

"for f77.s0.v3.preheader":                        ; preds = %vector.scevcheck915, %"for f77.s0.v4", %middle.block930
  %lsr.iv451.ph = phi i32 [ %lsr.iv449, %vector.scevcheck915 ], [ %lsr.iv449, %"for f77.s0.v4" ], [ %ind.end937, %middle.block930 ]
  %lsr.iv447.ph = phi i32 [ %lsr.iv445, %vector.scevcheck915 ], [ %lsr.iv445, %"for f77.s0.v4" ], [ %ind.end940, %middle.block930 ]
  %lsr.iv443.ph = phi i32 [ %lsr.iv441, %vector.scevcheck915 ], [ %lsr.iv441, %"for f77.s0.v4" ], [ %ind.end943, %middle.block930 ]
  %lsr.iv439.ph = phi i32 [ %lsr.iv437, %vector.scevcheck915 ], [ %lsr.iv437, %"for f77.s0.v4" ], [ %ind.end946, %middle.block930 ]
  %lsr.iv434.ph = phi ptr [ %lsr.iv431, %vector.scevcheck915 ], [ %lsr.iv431, %"for f77.s0.v4" ], [ %ind.end948, %middle.block930 ]
  %lsr.iv428.ph = phi i32 [ %1179, %vector.scevcheck915 ], [ %1179, %"for f77.s0.v4" ], [ %ind.end951, %middle.block930 ]
  br label %"for f77.s0.v3"

"for f77.s0.v3":                                  ; preds = %"for f77.s0.v3.preheader", %"for f77.s0.v3"
  %lsr.iv451 = phi i32 [ %lsr.iv.next452, %"for f77.s0.v3" ], [ %lsr.iv451.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv447 = phi i32 [ %lsr.iv.next448, %"for f77.s0.v3" ], [ %lsr.iv447.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv443 = phi i32 [ %lsr.iv.next444, %"for f77.s0.v3" ], [ %lsr.iv443.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv439 = phi i32 [ %lsr.iv.next440, %"for f77.s0.v3" ], [ %lsr.iv439.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv434 = phi ptr [ %scevgep435, %"for f77.s0.v3" ], [ %lsr.iv434.ph, %"for f77.s0.v3.preheader" ]
  %lsr.iv428 = phi i32 [ %lsr.iv.next429, %"for f77.s0.v3" ], [ %lsr.iv428.ph, %"for f77.s0.v3.preheader" ]
  %1292 = add i32 %lsr.iv451, %66
  %1293 = add i32 %lsr.iv447, %66
  %1294 = add i32 %lsr.iv443, %66
  %1295 = add i32 %lsr.iv439, %66
  %1296 = sext i32 %1295 to i64
  %1297 = add nsw i64 %1296, 2
  %1298 = getelementptr inbounds float, ptr %955, i64 %1297
  %1299 = load float, ptr %1298, align 4, !tbaa !15
  %1300 = add nsw i64 %1296, 1
  %1301 = getelementptr inbounds float, ptr %955, i64 %1300
  %1302 = load float, ptr %1301, align 4, !tbaa !15
  %1303 = getelementptr inbounds float, ptr %955, i64 %1296
  %1304 = load float, ptr %1303, align 4, !tbaa !15
  %1305 = fadd float %1302, %1304
  %1306 = fmul float %1305, 3.000000e+00
  %1307 = add nsw i64 %1296, -1
  %1308 = getelementptr inbounds float, ptr %955, i64 %1307
  %1309 = sext i32 %1294 to i64
  %1310 = add nsw i64 %1309, 2
  %1311 = getelementptr inbounds float, ptr %955, i64 %1310
  %1312 = add nsw i64 %1309, 1
  %1313 = getelementptr inbounds float, ptr %955, i64 %1312
  %1314 = load float, ptr %1313, align 4, !tbaa !15
  %1315 = getelementptr inbounds float, ptr %955, i64 %1309
  %1316 = load float, ptr %1315, align 4, !tbaa !15
  %1317 = fadd float %1314, %1316
  %1318 = fmul float %1317, 3.000000e+00
  %1319 = add nsw i64 %1309, -1
  %1320 = getelementptr inbounds float, ptr %955, i64 %1319
  %1321 = load float, ptr %1320, align 4, !tbaa !15
  %1322 = fadd float %1321, %1318
  %1323 = sext i32 %1293 to i64
  %1324 = add nsw i64 %1323, 2
  %1325 = getelementptr inbounds float, ptr %955, i64 %1324
  %1326 = load float, ptr %1325, align 4, !tbaa !15
  %1327 = add nsw i64 %1323, 1
  %1328 = getelementptr inbounds float, ptr %955, i64 %1327
  %1329 = load float, ptr %1328, align 4, !tbaa !15
  %1330 = getelementptr inbounds float, ptr %955, i64 %1323
  %1331 = load float, ptr %1330, align 4, !tbaa !15
  %1332 = fadd float %1329, %1331
  %1333 = fmul float %1332, 3.000000e+00
  %1334 = add nsw i64 %1323, -1
  %1335 = getelementptr inbounds float, ptr %955, i64 %1334
  %1336 = load float, ptr %1335, align 4, !tbaa !15
  %1337 = fadd float %1336, %1333
  %1338 = fadd float %1326, %1337
  %1339 = load float, ptr %1308, align 4, !tbaa !15
  %1340 = load float, ptr %1311, align 4, !tbaa !15
  %1341 = insertelement <2 x float> poison, float %1339, i64 0
  %1342 = insertelement <2 x float> %1341, float %1340, i64 1
  %1343 = insertelement <2 x float> poison, float %1306, i64 0
  %1344 = insertelement <2 x float> %1343, float %1322, i64 1
  %1345 = fadd <2 x float> %1342, %1344
  %1346 = insertelement <2 x float> poison, float %1299, i64 0
  %1347 = insertelement <2 x float> %1346, float %1338, i64 1
  %1348 = fadd <2 x float> %1347, %1345
  %1349 = fmul <2 x float> %1348, <float 1.250000e-01, float 3.750000e-01>
  %1350 = sext i32 %1292 to i64
  %1351 = add nsw i64 %1350, 2
  %1352 = getelementptr inbounds float, ptr %955, i64 %1351
  %1353 = load float, ptr %1352, align 4, !tbaa !15
  %1354 = add nsw i64 %1350, 1
  %1355 = getelementptr inbounds float, ptr %955, i64 %1354
  %1356 = load float, ptr %1355, align 4, !tbaa !15
  %1357 = getelementptr inbounds float, ptr %955, i64 %1350
  %1358 = load float, ptr %1357, align 4, !tbaa !15
  %1359 = fadd float %1356, %1358
  %1360 = fmul float %1359, 3.000000e+00
  %1361 = add nsw i64 %1350, -1
  %1362 = getelementptr inbounds float, ptr %955, i64 %1361
  %1363 = load float, ptr %1362, align 4, !tbaa !15
  %1364 = fadd float %1363, %1360
  %1365 = fadd float %1353, %1364
  %1366 = fmul float %1365, 1.250000e-01
  %1367 = extractelement <2 x float> %1349, i64 1
  %1368 = fadd float %1367, %1366
  %1369 = extractelement <2 x float> %1349, i64 0
  %1370 = fadd float %1369, %1368
  %1371 = fmul float %1370, 1.250000e-01
  store float %1371, ptr %lsr.iv434, align 4, !tbaa !19
  %lsr.iv.next429 = add i32 %lsr.iv428, -1
  %scevgep435 = getelementptr i8, ptr %lsr.iv434, i64 4
  %lsr.iv.next440 = add i32 %lsr.iv439, 2
  %lsr.iv.next444 = add i32 %lsr.iv443, 2
  %lsr.iv.next448 = add i32 %lsr.iv447, 2
  %lsr.iv.next452 = add i32 %lsr.iv451, 2
  %.not129 = icmp eq i32 %lsr.iv.next429, 0
  br i1 %.not129, label %"end for f77.s0.v3.loopexit", label %"for f77.s0.v3", !llvm.loop !22

"end for f77.s0.v3.loopexit":                     ; preds = %"for f77.s0.v3", %middle.block930
  %1372 = add nsw i32 %f77.s0.v4, 1
  %scevgep433 = getelementptr i1, ptr %lsr.iv431, i64 %1199
  %lsr.iv.next438 = add i32 %lsr.iv437, %1200
  %lsr.iv.next442 = add i32 %lsr.iv441, %1200
  %lsr.iv.next446 = add i32 %lsr.iv445, %1200
  %lsr.iv.next450 = add i32 %lsr.iv449, %1200
  %.not128 = icmp eq i32 %f77.s0.v4, %b750
  %indvar.next917 = add i32 %indvar916, 1
  br i1 %.not128, label %"consume f77", label %"for f77.s0.v4"

"consume f77":                                    ; preds = %"end for f77.s0.v3.loopexit", %"for f77.s0.v4.preheader", %"produce f77"
  %1373 = icmp ult i64 %t3084, 2147483648
  %1374 = icmp ult i64 %t3083, 4294967296
  %1375 = and i1 %1373, %1374
  br i1 %1375, label %"assert succeeded184", label %"assert failed183", !prof !5

"assert failed183":                               ; preds = %"consume f77"
  %1376 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.24, i64 %t3084, i64 2147483647) #4
  br label %call_destructor.exit210.thread374

"assert succeeded184":                            ; preds = %"consume f77"
  %1377 = add nuw nsw i64 %t3084, 4
  %1378 = call ptr @halide_malloc(ptr null, i64 %1377)
  %.not555 = icmp eq ptr %1378, null
  br i1 %.not555, label %"assert failed185", label %"produce f78", !prof !4

"assert failed185":                               ; preds = %"assert succeeded184"
  %1379 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit210.thread374

"produce f78":                                    ; preds = %"assert succeeded184"
  %1380 = add nsw i32 %39, 1
  %.not109 = icmp slt i32 %39, %43
  br i1 %.not109, label %"assert succeeded188.thread", label %"for f78.s0.v4.preheader", !prof !4

"for f78.s0.v4.preheader":                        ; preds = %"produce f78"
  %1381 = add nsw i32 %48, 1
  %1382 = sub nsw i32 %1381, %52
  %1383 = sext i32 %1138 to i64
  %1384 = sext i32 %43 to i64
  %1385 = shl i32 %1179, 1
  %.not124 = icmp slt i32 %48, %52
  %1386 = sext i32 %52 to i64
  br i1 %.not124, label %"assert succeeded188.thread841", label %"for f78.s0.v4.preheader576", !prof !4

"for f78.s0.v4.preheader576":                     ; preds = %"for f78.s0.v4.preheader"
  %1387 = xor i32 %b748, -1
  %1388 = add i32 %44, %1387
  %1389 = mul i32 %1179, %1388
  %1390 = sub i32 %1389, %b751
  %1391 = sub i32 %44, %b748
  %1392 = mul i32 %1179, %1391
  %1393 = sub i32 %1392, %b751
  %1394 = or i32 %44, 1
  %1395 = sub i32 %1394, %b748
  %1396 = mul i32 %1179, %1395
  %1397 = sub i32 %1396, %b751
  %1398 = add nsw i32 %44, 2
  %1399 = sub i32 %1398, %b748
  %1400 = mul i32 %1179, %1399
  %1401 = sub i32 %1400, %b751
  %1402 = add i32 %1400, %53
  %1403 = sub i32 %1402, %b751
  %1404 = shl i32 %1179, 1
  %1405 = add i32 %1396, %53
  %1406 = sub i32 %1405, %b751
  %1407 = add i32 %1392, %53
  %1408 = sub i32 %1407, %b751
  %1409 = add i32 %1389, %53
  %1410 = sub i32 %1409, %b751
  %1411 = zext i32 %f10.v3.extent_realized.s to i64
  %1412 = add nuw nsw i64 %1411, 1
  %min.iters.check1007 = icmp ult i32 %f10.v3.extent_realized.s, 3
  %mul.result994 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result997 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.overflow998 = icmp slt i32 %f10.v3.extent_realized.s, 0
  %mul.result1000 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %mul.result1003 = shl nsw i32 %f10.v3.extent_realized.s, 1
  %n.vec1010 = and i64 %1412, -4
  %.cast1011 = trunc i64 %n.vec1010 to i32
  %1413 = shl i32 %.cast1011, 1
  %.cast1014 = trunc i64 %n.vec1010 to i32
  %1414 = shl i32 %.cast1014, 1
  %.cast1017 = trunc i64 %n.vec1010 to i32
  %1415 = shl i32 %.cast1017, 1
  %.cast1020 = trunc i64 %n.vec1010 to i32
  %1416 = shl i32 %.cast1020, 1
  %ind.end1023 = add nsw i64 %n.vec1010, %1386
  %.cast1025 = trunc i64 %n.vec1010 to i32
  %ind.end1026 = sub i32 %1382, %.cast1025
  %invariant.gep1102 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1104 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1106 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1108 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1110 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1112 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1114 = getelementptr float, ptr %1194, i64 -1
  %invariant.gep1116 = getelementptr float, ptr %1194, i64 -1
  %cmp.n1028 = icmp eq i64 %1412, %n.vec1010
  br label %"for f78.s0.v4"

"for f78.s0.v4":                                  ; preds = %"for f78.s0.v4.preheader576", %"end for f78.s0.v3.loopexit"
  %indvar991 = phi i32 [ 0, %"for f78.s0.v4.preheader576" ], [ %indvar.next992, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv422 = phi i32 [ %1390, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next423, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv418 = phi i32 [ %1393, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next419, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv414 = phi i32 [ %1397, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next415, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv410 = phi i32 [ %1401, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next411, %"end for f78.s0.v3.loopexit" ]
  %lsr.iv406 = phi i64 [ %1384, %"for f78.s0.v4.preheader576" ], [ %lsr.iv.next407, %"end for f78.s0.v3.loopexit" ]
  %1417 = sub nsw i64 %lsr.iv406, %1384
  %1418 = mul i64 %1417, %1383
  %1419 = sub i64 %1418, %1386
  br i1 %min.iters.check1007, label %"for f78.s0.v3.preheader", label %vector.scevcheck990

vector.scevcheck990:                              ; preds = %"for f78.s0.v4"
  %1420 = mul i32 %1404, %indvar991
  %1421 = add i32 %1410, %1420
  %1422 = add i32 %1408, %1420
  %1423 = add i32 %1406, %1420
  %1424 = add i32 %1403, %1420
  %1425 = add i32 %1424, %mul.result994
  %1426 = icmp slt i32 %1425, %1424
  %1427 = add i32 %1423, %mul.result997
  %1428 = icmp slt i32 %1427, %1423
  %1429 = or i1 %1428, %mul.overflow998
  %1430 = add i32 %1422, %mul.result1000
  %1431 = icmp slt i32 %1430, %1422
  %1432 = add i32 %1421, %mul.result1003
  %1433 = icmp slt i32 %1432, %1421
  %1434 = or i1 %1426, %1429
  %1435 = or i1 %1431, %1434
  %1436 = or i1 %1433, %1435
  br i1 %1436, label %"for f78.s0.v3.preheader", label %vector.ph1008

vector.ph1008:                                    ; preds = %vector.scevcheck990
  %ind.end1012 = add i32 %lsr.iv422, %1413
  %ind.end1015 = add i32 %lsr.iv418, %1414
  %ind.end1018 = add i32 %lsr.iv414, %1415
  %ind.end1021 = add i32 %lsr.iv410, %1416
  br label %vector.body1029

vector.body1029:                                  ; preds = %vector.body1029, %vector.ph1008
  %index1030 = phi i64 [ 0, %vector.ph1008 ], [ %index.next1064, %vector.body1029 ]
  %.cast1032 = trunc i64 %index1030 to i32
  %1437 = shl i32 %.cast1032, 1
  %offset.idx1033 = add i32 %lsr.iv410, %1437
  %.cast1034 = trunc i64 %index1030 to i32
  %1438 = shl i32 %.cast1034, 1
  %offset.idx1035 = add i32 %lsr.iv414, %1438
  %.cast1036 = trunc i64 %index1030 to i32
  %1439 = shl i32 %.cast1036, 1
  %offset.idx1037 = add i32 %lsr.iv418, %1439
  %.cast1038 = trunc i64 %index1030 to i32
  %1440 = shl i32 %.cast1038, 1
  %offset.idx1039 = add i32 %lsr.iv422, %1440
  %1441 = add i32 %offset.idx1039, %53
  %1442 = add i32 %offset.idx1037, %53
  %1443 = add i32 %offset.idx1035, %53
  %1444 = add i32 %offset.idx1033, %53
  %1445 = sext i32 %1444 to i64
  %1446 = add nsw i64 %1445, 2
  %gep1103 = getelementptr float, ptr %invariant.gep1102, i64 %1446
  %wide.vec1040 = load <8 x float>, ptr %gep1103, align 4, !tbaa !19
  %strided.vec1041 = shufflevector <8 x float> %wide.vec1040, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1042 = shufflevector <8 x float> %wide.vec1040, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1105 = getelementptr float, ptr %invariant.gep1104, i64 %1445
  %wide.vec1043 = load <8 x float>, ptr %gep1105, align 4, !tbaa !19
  %strided.vec1044 = shufflevector <8 x float> %wide.vec1043, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1045 = shufflevector <8 x float> %wide.vec1043, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1447 = fadd <4 x float> %strided.vec1041, %strided.vec1045
  %1448 = fmul <4 x float> %1447, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1449 = fadd <4 x float> %strided.vec1044, %1448
  %1450 = fadd <4 x float> %strided.vec1042, %1449
  %1451 = fmul <4 x float> %1450, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1452 = sext i32 %1443 to i64
  %1453 = add nsw i64 %1452, 2
  %gep1107 = getelementptr float, ptr %invariant.gep1106, i64 %1453
  %wide.vec1046 = load <8 x float>, ptr %gep1107, align 4, !tbaa !19
  %strided.vec1047 = shufflevector <8 x float> %wide.vec1046, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1048 = shufflevector <8 x float> %wide.vec1046, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1109 = getelementptr float, ptr %invariant.gep1108, i64 %1452
  %wide.vec1049 = load <8 x float>, ptr %gep1109, align 4, !tbaa !19
  %strided.vec1050 = shufflevector <8 x float> %wide.vec1049, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1051 = shufflevector <8 x float> %wide.vec1049, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1454 = fadd <4 x float> %strided.vec1047, %strided.vec1051
  %1455 = fmul <4 x float> %1454, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1456 = fadd <4 x float> %strided.vec1050, %1455
  %1457 = fadd <4 x float> %strided.vec1048, %1456
  %1458 = sext i32 %1442 to i64
  %1459 = add nsw i64 %1458, 2
  %gep1111 = getelementptr float, ptr %invariant.gep1110, i64 %1459
  %wide.vec1052 = load <8 x float>, ptr %gep1111, align 4, !tbaa !19
  %strided.vec1053 = shufflevector <8 x float> %wide.vec1052, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1054 = shufflevector <8 x float> %wide.vec1052, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1113 = getelementptr float, ptr %invariant.gep1112, i64 %1458
  %wide.vec1055 = load <8 x float>, ptr %gep1113, align 4, !tbaa !19
  %strided.vec1056 = shufflevector <8 x float> %wide.vec1055, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1057 = shufflevector <8 x float> %wide.vec1055, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1460 = fadd <4 x float> %strided.vec1053, %strided.vec1057
  %1461 = fmul <4 x float> %1460, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1462 = fadd <4 x float> %strided.vec1056, %1461
  %1463 = fadd <4 x float> %strided.vec1054, %1462
  %1464 = fadd <4 x float> %1457, %1463
  %1465 = fmul <4 x float> %1464, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1466 = sext i32 %1441 to i64
  %1467 = add nsw i64 %1466, 2
  %gep1115 = getelementptr float, ptr %invariant.gep1114, i64 %1467
  %wide.vec1058 = load <8 x float>, ptr %gep1115, align 4, !tbaa !19
  %strided.vec1059 = shufflevector <8 x float> %wide.vec1058, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1060 = shufflevector <8 x float> %wide.vec1058, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep1117 = getelementptr float, ptr %invariant.gep1116, i64 %1466
  %wide.vec1061 = load <8 x float>, ptr %gep1117, align 4, !tbaa !19
  %strided.vec1062 = shufflevector <8 x float> %wide.vec1061, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec1063 = shufflevector <8 x float> %wide.vec1061, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1468 = fadd <4 x float> %strided.vec1059, %strided.vec1063
  %1469 = fmul <4 x float> %1468, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1470 = fadd <4 x float> %strided.vec1062, %1469
  %1471 = fadd <4 x float> %strided.vec1060, %1470
  %1472 = fmul <4 x float> %1471, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1473 = fadd <4 x float> %1465, %1472
  %1474 = fadd <4 x float> %1451, %1473
  %1475 = fmul <4 x float> %1474, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1476 = add i64 %index1030, %1418
  %1477 = getelementptr inbounds float, ptr %1378, i64 %1476
  store <4 x float> %1475, ptr %1477, align 4, !tbaa !23
  %index.next1064 = add nuw i64 %index1030, 4
  %1478 = icmp eq i64 %index.next1064, %n.vec1010
  br i1 %1478, label %middle.block1005, label %vector.body1029, !llvm.loop !25

middle.block1005:                                 ; preds = %vector.body1029
  br i1 %cmp.n1028, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3.preheader"

"for f78.s0.v3.preheader":                        ; preds = %vector.scevcheck990, %"for f78.s0.v4", %middle.block1005
  %lsr.iv424.ph = phi i32 [ %lsr.iv422, %vector.scevcheck990 ], [ %lsr.iv422, %"for f78.s0.v4" ], [ %ind.end1012, %middle.block1005 ]
  %lsr.iv420.ph = phi i32 [ %lsr.iv418, %vector.scevcheck990 ], [ %lsr.iv418, %"for f78.s0.v4" ], [ %ind.end1015, %middle.block1005 ]
  %lsr.iv416.ph = phi i32 [ %lsr.iv414, %vector.scevcheck990 ], [ %lsr.iv414, %"for f78.s0.v4" ], [ %ind.end1018, %middle.block1005 ]
  %lsr.iv412.ph = phi i32 [ %lsr.iv410, %vector.scevcheck990 ], [ %lsr.iv410, %"for f78.s0.v4" ], [ %ind.end1021, %middle.block1005 ]
  %lsr.iv408.ph = phi i64 [ %1386, %vector.scevcheck990 ], [ %1386, %"for f78.s0.v4" ], [ %ind.end1023, %middle.block1005 ]
  %lsr.iv404.ph = phi i32 [ %1382, %vector.scevcheck990 ], [ %1382, %"for f78.s0.v4" ], [ %ind.end1026, %middle.block1005 ]
  br label %"for f78.s0.v3"

"for f78.s0.v3":                                  ; preds = %"for f78.s0.v3.preheader", %"for f78.s0.v3"
  %lsr.iv424 = phi i32 [ %lsr.iv.next425, %"for f78.s0.v3" ], [ %lsr.iv424.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv420 = phi i32 [ %lsr.iv.next421, %"for f78.s0.v3" ], [ %lsr.iv420.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv416 = phi i32 [ %lsr.iv.next417, %"for f78.s0.v3" ], [ %lsr.iv416.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv412 = phi i32 [ %lsr.iv.next413, %"for f78.s0.v3" ], [ %lsr.iv412.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv408 = phi i64 [ %lsr.iv.next409, %"for f78.s0.v3" ], [ %lsr.iv408.ph, %"for f78.s0.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f78.s0.v3" ], [ %lsr.iv404.ph, %"for f78.s0.v3.preheader" ]
  %1479 = add i32 %lsr.iv424, %53
  %1480 = add i32 %lsr.iv420, %53
  %1481 = add i32 %lsr.iv416, %53
  %1482 = add i32 %lsr.iv412, %53
  %1483 = sext i32 %1482 to i64
  %1484 = add nsw i64 %1483, 2
  %1485 = getelementptr inbounds float, ptr %1194, i64 %1484
  %1486 = load float, ptr %1485, align 4, !tbaa !19
  %1487 = add nsw i64 %1483, 1
  %1488 = getelementptr inbounds float, ptr %1194, i64 %1487
  %1489 = load float, ptr %1488, align 4, !tbaa !19
  %1490 = getelementptr inbounds float, ptr %1194, i64 %1483
  %1491 = load float, ptr %1490, align 4, !tbaa !19
  %1492 = fadd float %1489, %1491
  %1493 = fmul float %1492, 3.000000e+00
  %1494 = add nsw i64 %1483, -1
  %1495 = getelementptr inbounds float, ptr %1194, i64 %1494
  %1496 = sext i32 %1481 to i64
  %1497 = add nsw i64 %1496, 2
  %1498 = getelementptr inbounds float, ptr %1194, i64 %1497
  %1499 = add nsw i64 %1496, 1
  %1500 = getelementptr inbounds float, ptr %1194, i64 %1499
  %1501 = load float, ptr %1500, align 4, !tbaa !19
  %1502 = getelementptr inbounds float, ptr %1194, i64 %1496
  %1503 = load float, ptr %1502, align 4, !tbaa !19
  %1504 = fadd float %1501, %1503
  %1505 = fmul float %1504, 3.000000e+00
  %1506 = add nsw i64 %1496, -1
  %1507 = getelementptr inbounds float, ptr %1194, i64 %1506
  %1508 = load float, ptr %1507, align 4, !tbaa !19
  %1509 = fadd float %1508, %1505
  %1510 = sext i32 %1480 to i64
  %1511 = add nsw i64 %1510, 2
  %1512 = getelementptr inbounds float, ptr %1194, i64 %1511
  %1513 = load float, ptr %1512, align 4, !tbaa !19
  %1514 = add nsw i64 %1510, 1
  %1515 = getelementptr inbounds float, ptr %1194, i64 %1514
  %1516 = load float, ptr %1515, align 4, !tbaa !19
  %1517 = getelementptr inbounds float, ptr %1194, i64 %1510
  %1518 = load float, ptr %1517, align 4, !tbaa !19
  %1519 = fadd float %1516, %1518
  %1520 = fmul float %1519, 3.000000e+00
  %1521 = add nsw i64 %1510, -1
  %1522 = getelementptr inbounds float, ptr %1194, i64 %1521
  %1523 = load float, ptr %1522, align 4, !tbaa !19
  %1524 = fadd float %1523, %1520
  %1525 = fadd float %1513, %1524
  %1526 = load float, ptr %1495, align 4, !tbaa !19
  %1527 = load float, ptr %1498, align 4, !tbaa !19
  %1528 = insertelement <2 x float> poison, float %1526, i64 0
  %1529 = insertelement <2 x float> %1528, float %1527, i64 1
  %1530 = insertelement <2 x float> poison, float %1493, i64 0
  %1531 = insertelement <2 x float> %1530, float %1509, i64 1
  %1532 = fadd <2 x float> %1529, %1531
  %1533 = insertelement <2 x float> poison, float %1486, i64 0
  %1534 = insertelement <2 x float> %1533, float %1525, i64 1
  %1535 = fadd <2 x float> %1534, %1532
  %1536 = fmul <2 x float> %1535, <float 1.250000e-01, float 3.750000e-01>
  %1537 = sext i32 %1479 to i64
  %1538 = add nsw i64 %1537, 2
  %1539 = getelementptr inbounds float, ptr %1194, i64 %1538
  %1540 = load float, ptr %1539, align 4, !tbaa !19
  %1541 = add nsw i64 %1537, 1
  %1542 = getelementptr inbounds float, ptr %1194, i64 %1541
  %1543 = load float, ptr %1542, align 4, !tbaa !19
  %1544 = getelementptr inbounds float, ptr %1194, i64 %1537
  %1545 = load float, ptr %1544, align 4, !tbaa !19
  %1546 = fadd float %1543, %1545
  %1547 = fmul float %1546, 3.000000e+00
  %1548 = add nsw i64 %1537, -1
  %1549 = getelementptr inbounds float, ptr %1194, i64 %1548
  %1550 = load float, ptr %1549, align 4, !tbaa !19
  %1551 = fadd float %1550, %1547
  %1552 = fadd float %1540, %1551
  %1553 = fmul float %1552, 1.250000e-01
  %1554 = extractelement <2 x float> %1536, i64 1
  %1555 = fadd float %1554, %1553
  %1556 = extractelement <2 x float> %1536, i64 0
  %1557 = fadd float %1556, %1555
  %1558 = fmul float %1557, 1.250000e-01
  %1559 = add i64 %1419, %lsr.iv408
  %1560 = getelementptr inbounds float, ptr %1378, i64 %1559
  store float %1558, ptr %1560, align 4, !tbaa !23
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next409 = add nsw i64 %lsr.iv408, 1
  %lsr.iv.next413 = add i32 %lsr.iv412, 2
  %lsr.iv.next417 = add i32 %lsr.iv416, 2
  %lsr.iv.next421 = add i32 %lsr.iv420, 2
  %lsr.iv.next425 = add i32 %lsr.iv424, 2
  %.not126 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not126, label %"end for f78.s0.v3.loopexit", label %"for f78.s0.v3", !llvm.loop !26

"end for f78.s0.v3.loopexit":                     ; preds = %"for f78.s0.v3", %middle.block1005
  %lsr.iv.next407 = add nsw i64 %lsr.iv406, 1
  %lsr426 = trunc i64 %lsr.iv.next407 to i32
  %lsr.iv.next411 = add i32 %lsr.iv410, %1385
  %lsr.iv.next415 = add i32 %lsr.iv414, %1385
  %lsr.iv.next419 = add i32 %lsr.iv418, %1385
  %lsr.iv.next423 = add i32 %lsr.iv422, %1385
  %.not125 = icmp eq i32 %1380, %lsr426
  %indvar.next992 = add i32 %indvar991, 1
  br i1 %.not125, label %"assert succeeded188", label %"for f78.s0.v4"

"assert succeeded188":                            ; preds = %"end for f78.s0.v3.loopexit"
  %1561 = call ptr @halide_malloc(ptr null, i64 %1377)
  %.not556 = icmp eq ptr %1561, null
  br i1 %.not556, label %call_destructor.exit210, label %"for f132.s0.v4.preheader", !prof !4

"assert succeeded188.thread841":                  ; preds = %"for f78.s0.v4.preheader"
  %1562 = call ptr @halide_malloc(ptr null, i64 %1377)
  %.not556842 = icmp eq ptr %1562, null
  br i1 %.not556842, label %call_destructor.exit210, label %"consume f132", !prof !4

"assert succeeded188.thread":                     ; preds = %"produce f78"
  %1563 = call ptr @halide_malloc(ptr null, i64 %1377)
  %.not566 = icmp eq ptr %1563, null
  br i1 %.not566, label %call_destructor.exit210, label %"consume f132", !prof !4

"for f132.s0.v4.preheader":                       ; preds = %"assert succeeded188"
  %1564 = sext i32 %f10.stride.2 to i64
  br i1 %.not124, label %"consume f132", label %"for f132.s0.v4", !prof !27

"for f132.s0.v4":                                 ; preds = %"for f132.s0.v4.preheader", %"end for f132.s0.v3.loopexit"
  %lsr.iv395 = phi i64 [ %lsr.iv.next396, %"end for f132.s0.v3.loopexit" ], [ %1384, %"for f132.s0.v4.preheader" ]
  %lsr403 = trunc i64 %lsr.iv395 to i32
  %1565 = sub nsw i32 %lsr403, %43
  %1566 = mul i32 %1565, %1382
  %1567 = sub i32 %1566, %52
  %1568 = sub nsw i64 %lsr.iv395, %1384
  %1569 = mul i64 %1568, %1383
  %1570 = sub i64 %1569, %1386
  br label %"for f132.s0.v3"

"for f132.s0.v3":                                 ; preds = %"for f132.s0.v3", %"for f132.s0.v4"
  %lsr.iv397 = phi i64 [ %1386, %"for f132.s0.v4" ], [ %lsr.iv.next398, %"for f132.s0.v3" ]
  %lsr.iv393 = phi i32 [ %1382, %"for f132.s0.v4" ], [ %lsr.iv.next394, %"for f132.s0.v3" ]
  %1571 = trunc i64 %lsr.iv397 to i32
  %tmp401 = add i32 %1567, %1571
  %1572 = sext i32 %tmp401 to i64
  %1573 = getelementptr inbounds float, ptr %1378, i64 %1572
  %1574 = load float, ptr %1573, align 4, !tbaa !23
  %t2188 = fmul float %1574, %55
  %a752 = fptosi float %t2188 to i32
  %a755 = call i32 @llvm.smin.i32(i32 %b6, i32 %a752)
  %1575 = call i32 @llvm.smax.i32(i32 %a755, i32 0)
  %1576 = sitofp i32 %1575 to float
  %t2190 = fsub float %t2188, %1576
  %t2191 = sub nsw i32 %1575, %111
  %1577 = sext i32 %t2191 to i64
  %1578 = add nsw i64 %1577, 1
  %1579 = mul nsw i64 %1578, %1564
  %1580 = add nsw i64 %1579, %1572
  %1581 = getelementptr inbounds float, ptr %1160, i64 %1580
  %1582 = load float, ptr %1581, align 4, !tbaa !28
  %1583 = fmul float %1582, %t2190
  %1584 = mul nsw i64 %1577, %1564
  %1585 = add nsw i64 %1584, %1572
  %1586 = getelementptr inbounds float, ptr %1160, i64 %1585
  %1587 = load float, ptr %1586, align 4, !tbaa !28
  %1588 = fsub float 1.000000e+00, %t2190
  %1589 = fmul float %1587, %1588
  %1590 = fadd float %1583, %1589
  %1591 = add i64 %1570, %lsr.iv397
  %1592 = getelementptr inbounds float, ptr %1561, i64 %1591
  store float %1590, ptr %1592, align 4, !tbaa !30
  %lsr.iv.next394 = add i32 %lsr.iv393, -1
  %lsr.iv.next398 = add nsw i64 %lsr.iv397, 1
  %.not122 = icmp eq i32 %lsr.iv.next394, 0
  br i1 %.not122, label %"end for f132.s0.v3.loopexit", label %"for f132.s0.v3"

"end for f132.s0.v3.loopexit":                    ; preds = %"for f132.s0.v3"
  %lsr.iv.next396 = add nsw i64 %lsr.iv395, 1
  %lsr402 = trunc i64 %lsr.iv.next396 to i32
  %.not121 = icmp eq i32 %1380, %lsr402
  br i1 %.not121, label %"consume f132", label %"for f132.s0.v4"

"consume f132":                                   ; preds = %"end for f132.s0.v3.loopexit", %"assert succeeded188.thread841", %"for f132.s0.v4.preheader", %"assert succeeded188.thread"
  %1593 = phi ptr [ %1563, %"assert succeeded188.thread" ], [ %1561, %"for f132.s0.v4.preheader" ], [ %1562, %"assert succeeded188.thread841" ], [ %1561, %"end for f132.s0.v3.loopexit" ]
  call void @halide_free(ptr null, ptr nonnull %1378) #7
  %f131.v3.extent_realized.s = sub nsw i32 %a2, %a3
  %reass.sub557 = sub nsw i32 %a0, %a1
  %1594 = add nsw i32 %reass.sub557, 1
  %1595 = zext i32 %1594 to i64
  %1596 = add nsw i32 %f131.v3.extent_realized.s, 1
  %1597 = zext i32 %1596 to i64
  %1598 = shl nuw nsw i64 %1597, 2
  %1599 = mul i64 %1598, %1595
  %1600 = icmp ult i64 %1599, 2147483648
  %1601 = and i64 %1598, 4294967292
  %1602 = mul nuw i64 %1601, %1595
  %1603 = lshr i64 %1602, 32
  %1604 = lshr i64 %1597, 30
  %1605 = mul nuw nsw i64 %1604, %1595
  %1606 = add nuw nsw i64 %1603, %1605
  %1607 = icmp ult i64 %1606, 4294967296
  %1608 = and i1 %1600, %1607
  br i1 %1608, label %"assert succeeded192", label %"assert failed191", !prof !5

"assert failed191":                               ; preds = %"consume f132"
  %1609 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.26, i64 %1599, i64 2147483647) #4
  br label %call_destructor.exit205

"assert succeeded192":                            ; preds = %"consume f132"
  %1610 = add nuw nsw i64 %1599, 4
  %1611 = call ptr @halide_malloc(ptr null, i64 %1610)
  %.not558 = icmp eq ptr %1611, null
  br i1 %.not558, label %"assert failed193", label %"produce f131", !prof !4

"assert failed193":                               ; preds = %"assert succeeded192"
  %1612 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit205

"produce f131":                                   ; preds = %"assert succeeded192"
  %1613 = add nsw i32 %a0, 1
  %.not110 = icmp slt i32 %a0, %a1
  br i1 %.not110, label %"consume f131", label %"for f131.s0.v4.preheader", !prof !4

"for f131.s0.v4.preheader":                       ; preds = %"produce f131"
  %1614 = sext i32 %1596 to i64
  %1615 = sext i32 %a1 to i64
  %1616 = add i32 %f9.v3.extent_realized.s.s, 1
  %1617 = sub i32 %1616, %f9.v3.min_realized
  %1618 = sext i32 %b753 to i64
  %1619 = sext i32 %b751 to i64
  %reass.sub560 = sub nsw i64 %1618, %1619
  %1620 = add nsw i64 %reass.sub560, 1
  %.not116 = icmp slt i32 %a2, %a3
  %1621 = sext i32 %a3 to i64
  %1622 = xor i32 %43, -1
  %1623 = sext i32 %f10.stride.2 to i64
  %1624 = sext i32 %f9.stride.2 to i64
  br i1 %.not116, label %"consume f131", label %"for f131.s0.v4.preheader572", !prof !4

"for f131.s0.v4.preheader572":                    ; preds = %"for f131.s0.v4.preheader"
  %1625 = sext i32 %b748 to i64
  %1626 = sub nsw i64 %1615, %1625
  %1627 = mul i64 %1620, %1626
  %1628 = sub i64 %1627, %1619
  %1629 = sub i32 %a1, %f9.v4.min_realized
  %1630 = mul i32 %1617, %1629
  %1631 = sub i32 %1630, %f9.v3.min_realized
  br label %"for f131.s0.v4"

"for f131.s0.v4":                                 ; preds = %"for f131.s0.v4.preheader572", %"end for f131.s0.v3.loopexit"
  %lsr.iv385 = phi i64 [ %lsr.iv.next386, %"end for f131.s0.v3.loopexit" ], [ %1628, %"for f131.s0.v4.preheader572" ]
  %lsr.iv378 = phi i32 [ %lsr.iv.next379, %"end for f131.s0.v3.loopexit" ], [ %1631, %"for f131.s0.v4.preheader572" ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %"end for f131.s0.v3.loopexit" ], [ %1615, %"for f131.s0.v4.preheader572" ]
  %lsr392 = trunc i64 %lsr.iv374 to i32
  %1632 = add i32 %lsr.iv378, %a3
  %1633 = add i64 %lsr.iv385, %1621
  %1634 = shl i64 %1633, 2
  %scevgep387 = getelementptr i8, ptr %1194, i64 %1634
  %1635 = shl i32 %lsr392, 1
  %1636 = and i32 %1635, 2
  %1637 = ashr i32 %lsr392, 1
  %1638 = add nsw i32 %1637, %1622
  %1639 = add nsw i32 %1638, %1636
  %t2196 = mul nsw i32 %1639, %1138
  %1640 = sub nsw i32 %1637, %43
  %t2200 = mul nsw i32 %1640, %1138
  %1641 = sext i32 %t2200 to i64
  %1642 = sext i32 %t2196 to i64
  %1643 = sub nsw i64 %lsr.iv374, %1615
  %1644 = mul i64 %1643, %1614
  %1645 = sub i64 %1644, %1621
  br label %"for f131.s0.v3"

"for f131.s0.v3":                                 ; preds = %"for f131.s0.v3", %"for f131.s0.v4"
  %lsr.iv388 = phi ptr [ %scevgep387, %"for f131.s0.v4" ], [ %scevgep389, %"for f131.s0.v3" ]
  %lsr.iv380 = phi i32 [ %1632, %"for f131.s0.v4" ], [ %lsr.iv.next381, %"for f131.s0.v3" ]
  %lsr.iv376 = phi i64 [ %1621, %"for f131.s0.v4" ], [ %lsr.iv.next377, %"for f131.s0.v3" ]
  %lsr.iv372 = phi i32 [ %1596, %"for f131.s0.v4" ], [ %lsr.iv.next373, %"for f131.s0.v3" ]
  %1646 = load float, ptr %lsr.iv388, align 4, !tbaa !19
  %t2192 = fmul float %1646, %55
  %a756 = fptosi float %t2192 to i32
  %a759 = call i32 @llvm.smin.i32(i32 %b6, i32 %a756)
  %1647 = call i32 @llvm.smax.i32(i32 %a759, i32 0)
  %1648 = sitofp i32 %1647 to float
  %t2194 = fsub float %t2192, %1648
  %tmp384 = trunc i64 %lsr.iv376 to i32
  %1649 = shl i32 %tmp384, 1
  %1650 = and i32 %1649, 2
  %1651 = ashr i32 %tmp384, 1
  %1652 = sub nsw i32 %1651, %52
  %t2195 = add nsw i32 %1652, %1650
  %t2204 = sub nsw i32 %1647, %111
  %1653 = sext i32 %t2204 to i64
  %1654 = add nsw i64 %1653, 1
  %1655 = mul nsw i64 %1654, %1623
  %1656 = sext i32 %1652 to i64
  %1657 = add nsw i64 %1656, %1641
  %1658 = add nsw i64 %1655, %1657
  %1659 = getelementptr inbounds float, ptr %1160, i64 %1658
  %1660 = sext i32 %t2195 to i64
  %1661 = add nsw i64 %1660, %1641
  %1662 = add nsw i64 %1661, -1
  %1663 = add nsw i64 %1662, %1655
  %1664 = getelementptr inbounds float, ptr %1160, i64 %1663
  %1665 = add nsw i64 %1656, %1642
  %1666 = add nsw i64 %1655, %1665
  %1667 = getelementptr inbounds float, ptr %1160, i64 %1666
  %1668 = add nsw i64 %1660, %1642
  %1669 = add nsw i64 %1668, -1
  %1670 = add nsw i64 %1669, %1655
  %1671 = getelementptr inbounds float, ptr %1160, i64 %1670
  %1672 = load float, ptr %1659, align 4, !tbaa !28
  %1673 = load float, ptr %1664, align 4, !tbaa !28
  %1674 = load float, ptr %1667, align 4, !tbaa !28
  %1675 = insertelement <2 x float> poison, float %1673, i64 0
  %1676 = insertelement <2 x float> %1675, float %1674, i64 1
  %1677 = fmul <2 x float> %1676, <float 2.500000e-01, float 7.500000e-01>
  %1678 = load float, ptr %1671, align 4, !tbaa !28
  %1679 = insertelement <2 x float> poison, float %1672, i64 0
  %1680 = insertelement <2 x float> %1679, float %1678, i64 1
  %1681 = fmul <2 x float> %1680, <float 7.500000e-01, float 2.500000e-01>
  %1682 = fadd <2 x float> %1677, %1681
  %1683 = fmul <2 x float> %1682, <float 7.500000e-01, float 2.500000e-01>
  %shift = shufflevector <2 x float> %1683, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1684 = fadd <2 x float> %1683, %shift
  %1685 = extractelement <2 x float> %1684, i64 0
  %1686 = mul nsw i64 %1654, %1624
  %1687 = sext i32 %lsr.iv380 to i64
  %1688 = add nsw i64 %1686, %1687
  %1689 = getelementptr inbounds float, ptr %918, i64 %1688
  %1690 = load float, ptr %1689, align 4, !tbaa !32
  %1691 = fsub float %1690, %1685
  %1692 = fmul float %t2194, %1691
  %1693 = mul nsw i64 %1653, %1623
  %1694 = add nsw i64 %1693, %1657
  %1695 = getelementptr inbounds float, ptr %1160, i64 %1694
  %1696 = add nsw i64 %1662, %1693
  %1697 = getelementptr inbounds float, ptr %1160, i64 %1696
  %1698 = add nsw i64 %1693, %1665
  %1699 = getelementptr inbounds float, ptr %1160, i64 %1698
  %1700 = add nsw i64 %1669, %1693
  %1701 = getelementptr inbounds float, ptr %1160, i64 %1700
  %1702 = load float, ptr %1695, align 4, !tbaa !28
  %1703 = load float, ptr %1697, align 4, !tbaa !28
  %1704 = load float, ptr %1699, align 4, !tbaa !28
  %1705 = insertelement <2 x float> poison, float %1703, i64 0
  %1706 = insertelement <2 x float> %1705, float %1704, i64 1
  %1707 = fmul <2 x float> %1706, <float 2.500000e-01, float 7.500000e-01>
  %1708 = load float, ptr %1701, align 4, !tbaa !28
  %1709 = insertelement <2 x float> poison, float %1702, i64 0
  %1710 = insertelement <2 x float> %1709, float %1708, i64 1
  %1711 = fmul <2 x float> %1710, <float 7.500000e-01, float 2.500000e-01>
  %1712 = fadd <2 x float> %1707, %1711
  %1713 = fmul <2 x float> %1712, <float 7.500000e-01, float 2.500000e-01>
  %shift1065 = shufflevector <2 x float> %1713, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1714 = fadd <2 x float> %1713, %shift1065
  %1715 = extractelement <2 x float> %1714, i64 0
  %1716 = mul nsw i64 %1653, %1624
  %1717 = add nsw i64 %1716, %1687
  %1718 = getelementptr inbounds float, ptr %918, i64 %1717
  %1719 = load float, ptr %1718, align 4, !tbaa !32
  %1720 = fsub float %1719, %1715
  %1721 = fsub float 1.000000e+00, %t2194
  %1722 = fmul float %1721, %1720
  %1723 = fadd float %1692, %1722
  %1724 = getelementptr inbounds float, ptr %1593, i64 %1657
  %1725 = getelementptr inbounds float, ptr %1593, i64 %1662
  %1726 = getelementptr inbounds float, ptr %1593, i64 %1665
  %1727 = getelementptr inbounds float, ptr %1593, i64 %1669
  %1728 = load float, ptr %1724, align 4, !tbaa !30
  %1729 = load float, ptr %1725, align 4, !tbaa !30
  %1730 = load float, ptr %1726, align 4, !tbaa !30
  %1731 = insertelement <2 x float> poison, float %1729, i64 0
  %1732 = insertelement <2 x float> %1731, float %1730, i64 1
  %1733 = fmul <2 x float> %1732, <float 2.500000e-01, float 7.500000e-01>
  %1734 = load float, ptr %1727, align 4, !tbaa !30
  %1735 = insertelement <2 x float> poison, float %1728, i64 0
  %1736 = insertelement <2 x float> %1735, float %1734, i64 1
  %1737 = fmul <2 x float> %1736, <float 7.500000e-01, float 2.500000e-01>
  %1738 = fadd <2 x float> %1733, %1737
  %1739 = fmul <2 x float> %1738, <float 7.500000e-01, float 2.500000e-01>
  %shift1066 = shufflevector <2 x float> %1739, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1740 = fadd <2 x float> %1739, %shift1066
  %1741 = extractelement <2 x float> %1740, i64 0
  %1742 = fadd float %1723, %1741
  %1743 = add i64 %1645, %lsr.iv376
  %1744 = getelementptr inbounds float, ptr %1611, i64 %1743
  store float %1742, ptr %1744, align 4, !tbaa !34
  %lsr.iv.next373 = add i32 %lsr.iv372, -1
  %lsr.iv.next377 = add nsw i64 %lsr.iv376, 1
  %lsr.iv.next381 = add i32 %lsr.iv380, 1
  %scevgep389 = getelementptr i8, ptr %lsr.iv388, i64 4
  %.not118 = icmp eq i32 %lsr.iv.next373, 0
  br i1 %.not118, label %"end for f131.s0.v3.loopexit", label %"for f131.s0.v3"

"end for f131.s0.v3.loopexit":                    ; preds = %"for f131.s0.v3"
  %lsr.iv.next375 = add nsw i64 %lsr.iv374, 1
  %lsr391 = trunc i64 %lsr.iv.next375 to i32
  %lsr.iv.next379 = add i32 %lsr.iv378, %1617
  %lsr.iv.next386 = add i64 %lsr.iv385, %1620
  %.not117 = icmp eq i32 %1613, %lsr391
  br i1 %.not117, label %"consume f131", label %"for f131.s0.v4"

"consume f131":                                   ; preds = %"end for f131.s0.v3.loopexit", %"for f131.s0.v4.preheader", %"produce f131"
  call void @halide_free(ptr null, ptr nonnull %1160) #7
  call void @halide_free(ptr null, ptr nonnull %1194) #7
  call void @halide_free(ptr null, ptr nonnull %1593) #7
  %1745 = call i32 @llvm.smax.i32(i32 %809, i32 %59)
  %1746 = ashr i32 %1745, 5
  %.not170 = icmp slt i32 %a9, %811
  %f130.v3.min_realized = select i1 %.not170, i32 %a9, i32 %b670
  %1747 = call i32 @llvm.smax.i32(i32 %b681, i32 %a8)
  %f130.v3.extent_realized.s = sub nsw i32 %1747, %f130.v3.min_realized
  %reass.sub561 = sub nsw i32 %1746, %b655
  %1748 = add nsw i32 %reass.sub561, 1
  %1749 = zext i32 %1748 to i64
  %1750 = add nsw i32 %f130.v3.extent_realized.s, 1
  %1751 = zext i32 %1750 to i64
  %1752 = shl nuw nsw i64 %1751, 2
  %1753 = mul i64 %1752, %1749
  %1754 = icmp ult i64 %1753, 2147483648
  %1755 = and i64 %1752, 4294967292
  %1756 = mul nuw i64 %1755, %1749
  %1757 = lshr i64 %1756, 32
  %1758 = lshr i64 %1751, 30
  %1759 = mul nuw nsw i64 %1758, %1749
  %1760 = add nuw nsw i64 %1757, %1759
  %1761 = icmp ult i64 %1760, 4294967296
  %1762 = and i1 %1754, %1761
  br i1 %1762, label %"assert succeeded196", label %"assert failed195", !prof !5

"assert failed195":                               ; preds = %"consume f131"
  %1763 = call i32 @halide_error_buffer_allocation_too_large(ptr null, ptr nonnull @str.27, i64 %1753, i64 2147483647) #4
  br label %call_destructor.exit

"assert succeeded196":                            ; preds = %"consume f131"
  %1764 = add nuw nsw i64 %1753, 4
  %1765 = call ptr @halide_malloc(ptr null, i64 %1764)
  %.not562 = icmp eq ptr %1765, null
  br i1 %.not562, label %"assert failed197", label %"produce f130", !prof !4

"assert failed197":                               ; preds = %"assert succeeded196"
  %1766 = call i32 @halide_error_out_of_memory(ptr null) #4
  br label %call_destructor.exit

"produce f130":                                   ; preds = %"assert succeeded196"
  %1767 = add nsw i32 %a6, 1
  %.not111 = icmp sgt i32 %a7, %a6
  br i1 %.not111, label %"produce local_laplacian", label %"for f130.s0.v4.preheader", !prof !4

"for f130.s0.v4.preheader":                       ; preds = %"produce f130"
  %reass.sub563 = sub nsw i32 %a8, %a9
  %1768 = add nsw i32 %reass.sub563, 1
  %narrow = mul nsw i32 %f130.v3.min_realized, -4
  %1769 = sext i32 %narrow to i64
  %scevgep = getelementptr i8, ptr %1765, i64 %1769
  %1770 = sext i32 %f130.v3.extent_realized.s to i64
  %1771 = shl nsw i64 %1770, 2
  %1772 = add nsw i64 %1771, 4
  %1773 = sext i32 %b739 to i64
  %1774 = sext i32 %b737 to i64
  %reass.sub565 = sub nsw i64 %1773, %1774
  %1775 = add nsw i64 %reass.sub565, 1
  %.not112 = icmp slt i32 %a8, %a9
  %1776 = sext i32 %a9 to i64
  %1777 = xor i32 %a1, -1
  %1778 = xor i32 %f9.v4.min_realized, -1
  %1779 = sext i32 %f9.stride.2 to i64
  %1780 = sext i32 %f9.v3.min_realized to i64
  %1781 = sext i32 %f8.stride.2 to i64
  %1782 = sext i32 %b655 to i64
  br i1 %.not112, label %"produce local_laplacian", label %"for f130.s0.v4.preheader570", !prof !4

"for f130.s0.v4.preheader570":                    ; preds = %"for f130.s0.v4.preheader"
  %1783 = sext i32 %a7 to i64
  %1784 = sext i32 %b733 to i64
  %1785 = sub nsw i64 %1783, %1784
  %1786 = mul i64 %1775, %1785
  %1787 = sub i64 %1786, %1774
  %1788 = sub i32 %a7, %f8.v4.min_realized
  %1789 = mul i32 %815, %1788
  %1790 = sub i32 %1789, %f8.v3.min_realized
  br label %"for f130.s0.v4"

"for f130.s0.v4":                                 ; preds = %"for f130.s0.v4.preheader570", %"end for f130.s0.v3.loopexit"
  %lsr.iv363 = phi i64 [ %lsr.iv.next364, %"end for f130.s0.v3.loopexit" ], [ %1787, %"for f130.s0.v4.preheader570" ]
  %lsr.iv358 = phi i32 [ %lsr.iv.next359, %"end for f130.s0.v3.loopexit" ], [ %1790, %"for f130.s0.v4.preheader570" ]
  %lsr.iv348 = phi i64 [ %lsr.iv.next349, %"end for f130.s0.v3.loopexit" ], [ %1783, %"for f130.s0.v4.preheader570" ]
  %lsr371 = trunc i64 %lsr.iv348 to i32
  %1791 = add i32 %lsr.iv358, %a9
  %1792 = add i64 %lsr.iv363, %1776
  %1793 = shl i64 %1792, 2
  %scevgep365 = getelementptr i8, ptr %955, i64 %1793
  %1794 = shl i32 %lsr371, 1
  %1795 = and i32 %1794, 2
  %1796 = ashr i32 %lsr371, 1
  %t2210 = add nsw i32 %1795, %1796
  %1797 = add nsw i32 %t2210, %1777
  %t2216 = mul nsw i32 %1797, %1596
  %1798 = sub nsw i32 %1796, %a1
  %t2218 = mul nsw i32 %1798, %1596
  %1799 = add i32 %t2210, %1778
  %t2223 = mul nsw i32 %1799, %897
  %1800 = sub nsw i32 %1796, %f9.v4.min_realized
  %t2228 = mul nsw i32 %1800, %897
  %1801 = sext i32 %t2228 to i64
  %1802 = sext i32 %t2223 to i64
  %1803 = sext i32 %t2218 to i64
  %1804 = sext i32 %t2216 to i64
  %1805 = sub i64 %lsr.iv348, %1782
  %1806 = mul i64 %1805, %1772
  %scevgep350 = getelementptr i8, ptr %scevgep, i64 %1806
  br label %"for f130.s0.v3"

"for f130.s0.v3":                                 ; preds = %"for f130.s0.v3", %"for f130.s0.v4"
  %lsr.iv366 = phi ptr [ %scevgep365, %"for f130.s0.v4" ], [ %scevgep367, %"for f130.s0.v3" ]
  %lsr.iv360 = phi i32 [ %1791, %"for f130.s0.v4" ], [ %lsr.iv.next361, %"for f130.s0.v3" ]
  %lsr.iv352 = phi i64 [ %1776, %"for f130.s0.v4" ], [ %lsr.iv.next353, %"for f130.s0.v3" ]
  %lsr.iv = phi i32 [ %1768, %"for f130.s0.v4" ], [ %lsr.iv.next, %"for f130.s0.v3" ]
  %tmp370 = trunc i64 %lsr.iv352 to i32
  %1807 = shl i32 %tmp370, 1
  %1808 = and i32 %1807, 2
  %1809 = ashr i32 %tmp370, 1
  %t2211 = add nsw i32 %1808, %1809
  %1810 = load float, ptr %lsr.iv366, align 4, !tbaa !15
  %t2212 = fmul float %1810, %55
  %a770 = fptosi float %t2212 to i32
  %a773 = call i32 @llvm.smin.i32(i32 %b6, i32 %a770)
  %1811 = call i32 @llvm.smax.i32(i32 %a773, i32 0)
  %1812 = sitofp i32 %1811 to float
  %t2214 = fsub float %t2212, %1812
  %t2215 = sub nsw i32 %t2211, %a3
  %t2217 = sub nsw i32 %1809, %a3
  %t2220 = sub nsw i32 %1811, %111
  %1813 = sext i32 %t2220 to i64
  %1814 = add nsw i64 %1813, 1
  %1815 = mul nsw i64 %1814, %1779
  %1816 = sext i32 %1809 to i64
  %1817 = sub nsw i64 %1816, %1780
  %1818 = add nsw i64 %1817, %1801
  %1819 = add nsw i64 %1815, %1818
  %1820 = getelementptr inbounds float, ptr %918, i64 %1819
  %1821 = sext i32 %t2211 to i64
  %1822 = sub nsw i64 %1821, %1780
  %1823 = add nsw i64 %1822, %1801
  %1824 = add nsw i64 %1823, -1
  %1825 = add nsw i64 %1824, %1815
  %1826 = getelementptr inbounds float, ptr %918, i64 %1825
  %1827 = add nsw i64 %1817, %1802
  %1828 = add nsw i64 %1815, %1827
  %1829 = getelementptr inbounds float, ptr %918, i64 %1828
  %1830 = add nsw i64 %1822, %1802
  %1831 = add nsw i64 %1830, -1
  %1832 = add nsw i64 %1831, %1815
  %1833 = getelementptr inbounds float, ptr %918, i64 %1832
  %1834 = load float, ptr %1820, align 4, !tbaa !32
  %1835 = load float, ptr %1826, align 4, !tbaa !32
  %1836 = load float, ptr %1829, align 4, !tbaa !32
  %1837 = insertelement <2 x float> poison, float %1835, i64 0
  %1838 = insertelement <2 x float> %1837, float %1836, i64 1
  %1839 = fmul <2 x float> %1838, <float 2.500000e-01, float 7.500000e-01>
  %1840 = load float, ptr %1833, align 4, !tbaa !32
  %1841 = insertelement <2 x float> poison, float %1834, i64 0
  %1842 = insertelement <2 x float> %1841, float %1840, i64 1
  %1843 = fmul <2 x float> %1842, <float 7.500000e-01, float 2.500000e-01>
  %1844 = fadd <2 x float> %1839, %1843
  %1845 = fmul <2 x float> %1844, <float 7.500000e-01, float 2.500000e-01>
  %shift1067 = shufflevector <2 x float> %1845, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1846 = fadd <2 x float> %1845, %shift1067
  %1847 = extractelement <2 x float> %1846, i64 0
  %1848 = mul nsw i64 %1814, %1781
  %1849 = sext i32 %lsr.iv360 to i64
  %1850 = add nsw i64 %1848, %1849
  %1851 = getelementptr inbounds float, ptr %836, i64 %1850
  %1852 = load float, ptr %1851, align 4, !tbaa !36
  %1853 = fsub float %1852, %1847
  %1854 = fmul float %t2214, %1853
  %1855 = mul nsw i64 %1813, %1779
  %1856 = add nsw i64 %1855, %1818
  %1857 = getelementptr inbounds float, ptr %918, i64 %1856
  %1858 = add nsw i64 %1824, %1855
  %1859 = getelementptr inbounds float, ptr %918, i64 %1858
  %1860 = add nsw i64 %1855, %1827
  %1861 = getelementptr inbounds float, ptr %918, i64 %1860
  %1862 = add nsw i64 %1831, %1855
  %1863 = getelementptr inbounds float, ptr %918, i64 %1862
  %1864 = load float, ptr %1857, align 4, !tbaa !32
  %1865 = load float, ptr %1859, align 4, !tbaa !32
  %1866 = load float, ptr %1861, align 4, !tbaa !32
  %1867 = insertelement <2 x float> poison, float %1865, i64 0
  %1868 = insertelement <2 x float> %1867, float %1866, i64 1
  %1869 = fmul <2 x float> %1868, <float 2.500000e-01, float 7.500000e-01>
  %1870 = load float, ptr %1863, align 4, !tbaa !32
  %1871 = insertelement <2 x float> poison, float %1864, i64 0
  %1872 = insertelement <2 x float> %1871, float %1870, i64 1
  %1873 = fmul <2 x float> %1872, <float 7.500000e-01, float 2.500000e-01>
  %1874 = fadd <2 x float> %1869, %1873
  %1875 = fmul <2 x float> %1874, <float 7.500000e-01, float 2.500000e-01>
  %shift1068 = shufflevector <2 x float> %1875, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1876 = fadd <2 x float> %1875, %shift1068
  %1877 = extractelement <2 x float> %1876, i64 0
  %1878 = mul nsw i64 %1813, %1781
  %1879 = add nsw i64 %1878, %1849
  %1880 = getelementptr inbounds float, ptr %836, i64 %1879
  %1881 = load float, ptr %1880, align 4, !tbaa !36
  %1882 = fsub float %1881, %1877
  %1883 = fsub float 1.000000e+00, %t2214
  %1884 = fmul float %1883, %1882
  %1885 = fadd float %1854, %1884
  %1886 = sext i32 %t2217 to i64
  %1887 = add nsw i64 %1886, %1803
  %1888 = getelementptr inbounds float, ptr %1611, i64 %1887
  %1889 = sext i32 %t2215 to i64
  %1890 = add nsw i64 %1889, -1
  %1891 = add nsw i64 %1890, %1803
  %1892 = getelementptr inbounds float, ptr %1611, i64 %1891
  %1893 = add nsw i64 %1886, %1804
  %1894 = getelementptr inbounds float, ptr %1611, i64 %1893
  %1895 = add nsw i64 %1890, %1804
  %1896 = getelementptr inbounds float, ptr %1611, i64 %1895
  %1897 = load float, ptr %1888, align 4, !tbaa !34
  %1898 = load float, ptr %1892, align 4, !tbaa !34
  %1899 = load float, ptr %1894, align 4, !tbaa !34
  %1900 = insertelement <2 x float> poison, float %1898, i64 0
  %1901 = insertelement <2 x float> %1900, float %1899, i64 1
  %1902 = fmul <2 x float> %1901, <float 2.500000e-01, float 7.500000e-01>
  %1903 = load float, ptr %1896, align 4, !tbaa !34
  %1904 = insertelement <2 x float> poison, float %1897, i64 0
  %1905 = insertelement <2 x float> %1904, float %1903, i64 1
  %1906 = fmul <2 x float> %1905, <float 7.500000e-01, float 2.500000e-01>
  %1907 = fadd <2 x float> %1902, %1906
  %1908 = fmul <2 x float> %1907, <float 7.500000e-01, float 2.500000e-01>
  %shift1069 = shufflevector <2 x float> %1908, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %1909 = fadd <2 x float> %1908, %shift1069
  %1910 = extractelement <2 x float> %1909, i64 0
  %1911 = fadd float %1885, %1910
  %scevgep354 = getelementptr float, ptr %scevgep350, i64 %lsr.iv352
  store float %1911, ptr %scevgep354, align 4, !tbaa !38
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next353 = add nsw i64 %lsr.iv352, 1
  %lsr.iv.next361 = add i32 %lsr.iv360, 1
  %scevgep367 = getelementptr i8, ptr %lsr.iv366, i64 4
  %.not114 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not114, label %"end for f130.s0.v3.loopexit", label %"for f130.s0.v3"

"end for f130.s0.v3.loopexit":                    ; preds = %"for f130.s0.v3"
  %lsr.iv.next349 = add nsw i64 %lsr.iv348, 1
  %lsr = trunc i64 %lsr.iv.next349 to i32
  %lsr.iv.next359 = add i32 %lsr.iv358, %815
  %lsr.iv.next364 = add i64 %lsr.iv363, %1775
  %.not113 = icmp eq i32 %1767, %lsr
  br i1 %.not113, label %"produce local_laplacian", label %"for f130.s0.v4"

"produce local_laplacian":                        ; preds = %"end for f130.s0.v3.loopexit", %"for f130.s0.v4.preheader", %"produce f130"
  call void @halide_free(ptr null, ptr nonnull %918) #7
  call void @halide_free(ptr null, ptr nonnull %955) #7
  call void @halide_free(ptr null, ptr nonnull %1611) #7
  %1912 = sub nsw i32 %129, %a114
  %1913 = add nsw i32 %1912, 63
  %a775 = ashr i32 %1913, 6
  %1914 = icmp sgt i32 %1912, 0
  %1915 = select i1 %1914, i32 %a775, i32 0
  %1916 = add nsw i32 %local_laplacian.extent.1, 63
  %b776 = ashr i32 %1916, 6
  %local_laplacian.s0.v4.v264.prologue = call i32 @llvm.smin.i32(i32 %b776, i32 %1915)
  %1917 = sub nsw i32 %130, %a114
  %1918 = ashr i32 %1917, 6
  %a780 = add nsw i32 %1918, -1
  %1919 = call i32 @llvm.smin.i32(i32 %b88, i32 %b91)
  %1920 = sub nsw i32 %1919, %a114
  %b782 = ashr i32 %1920, 6
  %.not171 = icmp slt i32 %b782, %1918
  %a779 = select i1 %.not171, i32 %b782, i32 %a780
  %1921 = call i32 @llvm.smin.i32(i32 %137, i32 %a779)
  %b778 = add nsw i32 %1921, 1
  %local_laplacian.s0.v4.v264.epilogue = call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v4.v264.prologue, i32 %b778)
  store float %beta, ptr %0, align 8
  %1922 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 1
  store i32 %b121, ptr %1922, align 4
  %1923 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 2
  store i32 %a772, ptr %1923, align 8
  %1924 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 3
  store i32 %f130.v3.extent_realized.s, ptr %1924, align 4
  %1925 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 4
  store i32 %f130.v3.min_realized, ptr %1925, align 8
  %1926 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 5
  store i32 %f2.v3.extent_realized.s, ptr %1926, align 4
  %1927 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 6
  store i32 %f2.v3.min_realized, ptr %1927, align 8
  %1928 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 7
  store i32 %f2.v4.min_realized, ptr %1928, align 4
  %1929 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 8
  store i32 %f4.stride.1, ptr %1929, align 8
  %1930 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 9
  store i32 %f4.v3.extent_realized.s, ptr %1930, align 4
  %1931 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 10
  store i32 %f4.v3.min_realized, ptr %1931, align 8
  %1932 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 11
  store i32 %f4.v4.min_realized, ptr %1932, align 4
  %1933 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 12
  store i32 %f5.stride.1, ptr %1933, align 8
  %1934 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 13
  store i32 %f5.v3.extent_realized.s, ptr %1934, align 4
  %1935 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 14
  store i32 %f5.v3.min_realized, ptr %1935, align 8
  %1936 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 15
  store i32 %f5.v4.min_realized, ptr %1936, align 4
  %1937 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 16
  store i32 %f6.stride.1, ptr %1937, align 8
  %1938 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 17
  store i32 %f6.v3.extent_realized.s, ptr %1938, align 4
  %1939 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 18
  store i32 %f6.v3.min_realized, ptr %1939, align 8
  %1940 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 19
  store i32 %f6.v4.min_realized, ptr %1940, align 4
  %1941 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 20
  store i32 %f7.stride.1, ptr %1941, align 8
  %1942 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 21
  store i32 %f7.v3.extent_realized.s, ptr %1942, align 4
  %1943 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 22
  store i32 %f7.v3.min_realized, ptr %1943, align 8
  %1944 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 23
  store i32 %f7.v4.min_realized, ptr %1944, align 4
  %1945 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 24
  store i32 %f72.v3.extent_realized.s, ptr %1945, align 8
  %1946 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 25
  store i32 %f72.v3.min_realized, ptr %1946, align 4
  %1947 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 26
  store i32 %f72.v4.min_realized, ptr %1947, align 8
  %1948 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 27
  store i32 %f73.v3.extent_realized.s, ptr %1948, align 4
  %1949 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 28
  store i32 %f73.v3.min_realized, ptr %1949, align 8
  %1950 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 29
  store i32 %f73.v4.min_realized, ptr %1950, align 4
  %1951 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 30
  store i32 %f74.v3.extent_realized.s, ptr %1951, align 8
  %1952 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 31
  store i32 %f74.v3.min_realized, ptr %1952, align 4
  %1953 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 32
  store i32 %f74.v4.min_realized, ptr %1953, align 8
  %1954 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 33
  store i32 %f75.v3.extent_realized.s, ptr %1954, align 4
  %1955 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 34
  store i32 %f75.v3.min_realized, ptr %1955, align 8
  %1956 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 35
  store i32 %f75.v4.min_realized, ptr %1956, align 4
  %1957 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 36
  store i32 %f8.stride.2, ptr %1957, align 8
  %1958 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 37
  store i32 %f8.v3.extent_realized.s, ptr %1958, align 4
  %1959 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 38
  store i32 %f8.v3.min_realized, ptr %1959, align 8
  %1960 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 39
  store i32 %f8.v4.min_realized, ptr %1960, align 4
  %1961 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 40
  store i32 %input.extent.0, ptr %1961, align 8
  %1962 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 41
  %1963 = shufflevector <2 x i32> %16, <2 x i32> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %1963, ptr %1962, align 4
  %1964 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 45
  store i32 %b108, ptr %1964, align 4
  %1965 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 46
  store i32 %input.stride.1, ptr %1965, align 8
  %1966 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 47
  store i32 %input.stride.2, ptr %1966, align 4
  %1967 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 48
  store i32 %levels, ptr %1967, align 8
  %1968 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 49
  store i32 %local_laplacian.extent.0, ptr %1968, align 4
  %1969 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 50
  store i32 %local_laplacian.extent.1, ptr %1969, align 8
  %1970 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 51
  store i32 %local_laplacian.extent.2, ptr %1970, align 4
  %1971 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 52
  store i32 %a286, ptr %1971, align 8
  %1972 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 53
  store i32 %b74, ptr %1972, align 4
  %1973 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 54
  store i32 %a114, ptr %1973, align 8
  %1974 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 55
  store i32 %b89, ptr %1974, align 4
  %1975 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 56
  store i32 %a108, ptr %1975, align 8
  %1976 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 57
  store i32 %local_laplacian.s0.v4.v264.epilogue, ptr %1976, align 4
  %1977 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 58
  store i32 %local_laplacian.s0.v4.v264.prologue, ptr %1977, align 8
  %1978 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 59
  store i32 %local_laplacian.stride.1, ptr %1978, align 4
  %1979 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 60
  store i32 %local_laplacian.stride.2, ptr %1979, align 8
  %1980 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 61
  store ptr %209, ptr %1980, align 8
  %1981 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 62
  store ptr null, ptr %1981, align 8
  %1982 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 63
  store ptr %1765, ptr %1982, align 8
  %1983 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 64
  store ptr null, ptr %1983, align 8
  %1984 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 65
  store ptr %338, ptr %1984, align 8
  %1985 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 66
  store ptr null, ptr %1985, align 8
  %1986 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 67
  store ptr %421, ptr %1986, align 8
  %1987 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 68
  store ptr null, ptr %1987, align 8
  %1988 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 69
  store ptr %500, ptr %1988, align 8
  %1989 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 70
  store ptr null, ptr %1989, align 8
  %1990 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 71
  store ptr %625, ptr %1990, align 8
  %1991 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 72
  store ptr null, ptr %1991, align 8
  %1992 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 73
  store ptr %734, ptr %1992, align 8
  %1993 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 74
  store ptr null, ptr %1993, align 8
  %1994 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 75
  store ptr %556, ptr %1994, align 8
  %1995 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 76
  store ptr null, ptr %1995, align 8
  %1996 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 77
  store ptr %681, ptr %1996, align 8
  %1997 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 78
  store ptr null, ptr %1997, align 8
  %1998 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 79
  store ptr %790, ptr %1998, align 8
  %1999 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 80
  store ptr null, ptr %1999, align 8
  %2000 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 81
  store ptr %876, ptr %2000, align 8
  %2001 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 82
  store ptr null, ptr %2001, align 8
  %2002 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 83
  store ptr %836, ptr %2002, align 8
  %2003 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 84
  store ptr null, ptr %2003, align 8
  %2004 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 85
  store ptr %input.host, ptr %2004, align 8
  %2005 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 86
  store ptr %input.buffer, ptr %2005, align 8
  %2006 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 87
  store ptr %local_laplacian.host, ptr %2006, align 8
  %2007 = getelementptr inbounds %closure_t.11, ptr %0, i64 0, i32 88
  store ptr %local_laplacian.buffer, ptr %2007, align 8
  %2008 = call i32 @halide_do_par_for(ptr null, ptr nonnull @par_for___local_laplacian_local_laplacian.s0.v4.v264, i32 0, i32 %b776, ptr nonnull %0)
  %2009 = icmp eq i32 %2008, 0
  br i1 %2009, label %if.then.i292, label %call_destructor.exit235.sink.split, !prof !5

if.then.i292:                                     ; preds = %"produce local_laplacian"
  call void @halide_free(ptr null, ptr nonnull %209) #7
  call void @halide_free(ptr null, ptr nonnull %338) #7
  call void @halide_free(ptr null, ptr nonnull %421) #7
  call void @halide_free(ptr null, ptr nonnull %500) #7
  call void @halide_free(ptr null, ptr nonnull %556) #7
  call void @halide_free(ptr null, ptr nonnull %625) #7
  call void @halide_free(ptr null, ptr nonnull %681) #7
  call void @halide_free(ptr null, ptr nonnull %734) #7
  call void @halide_free(ptr null, ptr nonnull %790) #7
  call void @halide_free(ptr null, ptr nonnull %836) #7
  call void @halide_free(ptr null, ptr nonnull %876) #7
  call void @halide_free(ptr null, ptr nonnull %1765) #7
  br label %call_destructor.exit210.thread374
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f2.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f2.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
entry:
  %f2.s0.v3.max = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 1
  %1 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 2
  %f2.s0.v4.max = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 3
  %f2.s0.v4.min = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 4
  %f2.s0.v4.v4.epilogue = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 5
  %f2.s0.v4.v4.prologue = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 6
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 7
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 8
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 9
  %input.extent.0 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 11
  %13 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 13
  %b240 = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 14
  %f2.s0.v3.min = load i32, ptr %0, align 4
  %15 = load <2 x i32>, ptr %12, align 4
  %b248 = load i32, ptr %14, align 4
  %16 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 15
  %input.stride.1 = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 16
  %input.stride.2 = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 17
  %f2.host = load ptr, ptr %18, align 8
  %19 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 19
  %input.host = load ptr, ptr %19, align 8
  %20 = icmp sgt i32 %f2.s0.v4.v4.epilogue, %f2.s0.v4.v4
  %21 = icmp sle i32 %f2.s0.v4.v4.prologue, %f2.s0.v4.v4
  %22 = and i1 %20, %21
  br i1 %22, label %"for f2.s0.v4.v280.preheader", label %"for f2.s0.v4.v2809.preheader"

"for f2.s0.v4.v280.preheader":                    ; preds = %entry
  %23 = sext i32 %input.stride.2 to i64
  %24 = sext i32 %b248 to i64
  %25 = extractelement <2 x i32> %15, i64 0
  %26 = sext i32 %25 to i64
  %27 = sext i32 %f2.s0.v3.min to i64
  %28 = shl nsw i32 %f2.s0.v4.v4, 5
  %a202 = add nsw i32 %f2.s0.v4.min, %28
  %b204 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base = tail call i32 @llvm.smin.i32(i32 %b204, i32 %a202)
  %29 = sext i32 %f2.s0.v4.v280.base to i64
  %30 = sub nsw i64 %29, %10
  %31 = add nsw i64 %6, 1
  %32 = mul nsw i64 %30, %31
  %33 = sub nsw i64 %27, %8
  %34 = add i64 %33, %32
  %scevgep = getelementptr float, ptr %f2.host, i64 %34
  %35 = shl nsw i64 %6, 2
  %36 = add nsw i64 %35, 4
  %37 = add nsw i64 %26, %24
  %38 = sub nsw i64 0, %37
  %smax = tail call i64 @llvm.smax.i64(i64 %38, i64 -1)
  %39 = xor i64 %smax, -1
  %smax29 = tail call i64 @llvm.smax.i64(i64 %39, i64 %24)
  %40 = mul nsw i64 %smax29, %23
  %41 = mul i32 %input.stride.1, %b240
  %42 = extractelement <2 x i32> %15, i64 1
  %43 = add i32 %41, %42
  %44 = mul i32 %input.stride.2, %b248
  %45 = add i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = sub nsw i64 %40, %46
  %48 = mul i32 %input.stride.1, %f2.s0.v4.v280.base
  %49 = add i32 %48, %f2.s0.v3.min
  %smax37 = tail call i64 @llvm.smax.i64(i64 %38, i64 -2)
  %50 = xor i64 %smax37, -1
  %smax38 = tail call i64 @llvm.smax.i64(i64 %50, i64 %24)
  %51 = mul nsw i64 %smax38, %23
  %52 = sub nsw i64 %51, %46
  %smax44 = tail call i64 @llvm.smax.i64(i64 %38, i64 -3)
  %53 = xor i64 %smax44, -1
  %smax45 = tail call i64 @llvm.smax.i64(i64 %53, i64 %24)
  %54 = mul nsw i64 %smax45, %23
  %55 = sub nsw i64 %54, %46
  %56 = insertelement <2 x i32> poison, i32 %b248, i64 0
  %57 = insertelement <2 x i32> %56, i32 %f2.s0.v3.min, i64 1
  %58 = add nsw <2 x i32> %15, %57
  %59 = sub nsw <2 x i32> %15, %57
  %60 = shufflevector <2 x i32> %58, <2 x i32> %59, <4 x i32> <i32 0, i32 0, i32 0, i32 3>
  %61 = extractelement <2 x i32> %59, i64 1
  %62 = add nsw i32 %61, 7
  %a204 = ashr i32 %62, 3
  %63 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %64 = ashr i32 %63, 3
  %b205 = add nsw i32 %64, 1
  %65 = add nsw i32 %42, %input.extent.0
  %66 = sub nsw i32 %65, %f2.s0.v3.min
  %67 = ashr i32 %66, 3
  %a210 = add nsw i32 %67, -1
  %68 = add nsw i32 %63, -7
  %b212 = ashr i32 %68, 3
  %.not13 = icmp slt i32 %b212, %67
  %a209 = select i1 %.not13, i32 %b212, i32 %a210
  %a211 = add nsw i32 %f2.s0.v3.max, -7
  %b213 = add nsw i32 %65, -1
  %69 = tail call i32 @llvm.smin.i32(i32 %b213, i32 %a211)
  %70 = sub nsw i32 %69, %f2.s0.v3.min
  %b211 = ashr i32 %70, 3
  %a208 = tail call i32 @llvm.smin.i32(i32 %b211, i32 %a209)
  %71 = tail call i32 @llvm.smin.i32(i32 %64, i32 %a208)
  %b207 = add nsw i32 %71, 1
  %72 = insertelement <8 x i32> undef, i32 %b213, i64 0
  %b216 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %b215 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = extractelement <2 x i32> %58, i64 0
  %a216 = add nsw i32 %73, -1
  %74 = icmp sgt <4 x i32> %60, <i32 0, i32 1, i32 2, i32 0>
  %75 = extractelement <4 x i1> %74, i64 3
  %76 = select i1 %75, i32 %a204, i32 0
  %.not12 = icmp slt i32 %64, %76
  %f2.s0.v3.v3.prologue = select i1 %.not12, i32 %b205, i32 %76
  %f2.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %f2.s0.v3.v3.prologue, i32 %b207)
  %77 = icmp sgt i32 %f2.s0.v3.v3.prologue, 0
  %.not14 = icmp sgt i32 %f2.s0.v3.v3.prologue, %71
  %.not4 = icmp slt i32 %64, %f2.s0.v3.v3.epilogue
  %78 = extractelement <4 x i1> %74, i64 2
  %a215 = select i1 %78, i32 2, i32 %a216
  %79 = tail call i32 @llvm.smax.i32(i32 %a215, i32 %b248)
  %80 = mul nsw i32 %79, %input.stride.2
  %.scalar = sub i32 %80, %45
  %81 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> poison, <8 x i32> zeroinitializer
  %83 = extractelement <4 x i1> %74, i64 1
  %84 = select i1 %83, i32 0, i32 %a216
  %85 = zext i1 %83 to i32
  %a217 = or i32 %84, %85
  %86 = tail call i32 @llvm.smax.i32(i32 %a217, i32 %b248)
  %87 = mul nsw i32 %86, %input.stride.2
  %.scalar30 = sub i32 %87, %45
  %88 = insertelement <8 x i32> undef, i32 %.scalar30, i64 0
  %89 = shufflevector <8 x i32> %88, <8 x i32> poison, <8 x i32> zeroinitializer
  %90 = extractelement <4 x i1> %74, i64 0
  %91 = select i1 %90, i32 0, i32 %a216
  %92 = tail call i32 @llvm.smax.i32(i32 %91, i32 %b248)
  %93 = mul nsw i32 %92, %input.stride.2
  %.scalar31 = sub i32 %93, %45
  %94 = insertelement <8 x i32> undef, i32 %.scalar31, i64 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> poison, <8 x i32> zeroinitializer
  %96 = sub nsw i32 %f2.s0.v3.v3.epilogue, %f2.s0.v3.v3.prologue
  %97 = sext i32 %f2.s0.v3.v3.prologue to i64
  %98 = shl nsw i64 %97, 3
  %99 = shl i32 %f2.s0.v3.v3.prologue, 3
  %100 = sub nsw i32 %b205, %f2.s0.v3.v3.epilogue
  %101 = shl i32 %f2.s0.v3.v3.epilogue, 3
  %102 = add i32 %101, %f2.s0.v3.min
  br label %"for f2.s0.v4.v280"

"for f2.s0.v4.v2809.preheader":                   ; preds = %entry
  %103 = getelementptr inbounds %closure_t, ptr %closure, i64 0, i32 10
  %input.extent.1 = load i32, ptr %103, align 4
  %104 = shl nsw i32 %f2.s0.v4.v4, 5
  %a236 = add nsw i32 %f2.s0.v4.min, %104
  %b238 = add nsw i32 %f2.s0.v4.max, -31
  %f2.s0.v4.v280.base8 = tail call i32 @llvm.smin.i32(i32 %b238, i32 %a236)
  %105 = sub nsw i32 %f2.s0.v3.max, %f2.s0.v3.min
  %106 = lshr i32 %105, 3
  %107 = add nuw nsw i32 %106, 1
  %108 = icmp sgt i32 %105, -1
  %b239 = add nsw i32 %f2.s0.v3.max, -7
  %109 = add i32 %input.extent.1, -1
  %b241 = add i32 %109, %b240
  %110 = extractelement <2 x i32> %15, i64 1
  %111 = add nsw i32 %110, %input.extent.0
  %112 = add nsw i32 %111, -1
  %113 = insertelement <8 x i32> undef, i32 %112, i64 0
  %b243 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %b242 = shufflevector <2 x i32> %15, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = mul nsw i32 %input.stride.2, %b248
  %115 = mul nsw i32 %input.stride.1, %b240
  %116 = add nsw i32 %115, %110
  %t1960.s = add nsw i32 %116, %114
  %117 = extractelement <2 x i32> %15, i64 0
  %118 = add nsw i32 %b248, %117
  %a243 = add nsw i32 %118, -1
  %.inv11 = icmp sgt i32 %118, 2
  %a242 = select i1 %.inv11, i32 2, i32 %a243
  %119 = tail call i32 @llvm.smax.i32(i32 %a242, i32 %b248)
  %120 = mul nsw i32 %119, %input.stride.2
  %.scalar35 = sub i32 %120, %t1960.s
  %121 = insertelement <8 x i32> undef, i32 %.scalar35, i64 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> poison, <8 x i32> zeroinitializer
  %123 = icmp sgt i32 %118, 1
  %124 = select i1 %123, i32 0, i32 %a243
  %125 = zext i1 %123 to i32
  %a244 = or i32 %124, %125
  %126 = tail call i32 @llvm.smax.i32(i32 %a244, i32 %b248)
  %127 = mul nsw i32 %126, %input.stride.2
  %.scalar36 = sub i32 %127, %t1960.s
  %128 = insertelement <8 x i32> undef, i32 %.scalar36, i64 0
  %129 = shufflevector <8 x i32> %128, <8 x i32> poison, <8 x i32> zeroinitializer
  %.inv = icmp sgt i32 %118, 0
  %130 = select i1 %.inv, i32 0, i32 %a243
  %131 = tail call i32 @llvm.smax.i32(i32 %130, i32 %b248)
  %132 = mul nsw i32 %131, %input.stride.2
  %.scalar37 = sub i32 %132, %t1960.s
  %133 = insertelement <8 x i32> undef, i32 %.scalar37, i64 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> poison, <8 x i32> zeroinitializer
  %135 = add nsw i64 %6, 1
  %136 = sext i32 %f2.s0.v4.v280.base8 to i64
  %137 = sub nsw i64 %136, %10
  br i1 %108, label %"for f2.s0.v4.v2809.us", label %destructor_block, !prof !5

"for f2.s0.v4.v2809.us":                          ; preds = %"for f2.s0.v4.v2809.preheader", %"end for f2.s0.v3.v313.loopexit.us"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f2.s0.v3.v313.loopexit.us" ], [ 0, %"for f2.s0.v4.v2809.preheader" ]
  %138 = trunc i64 %indvars.iv to i32
  %a239.us = add nsw i32 %f2.s0.v4.v280.base8, %138
  %a238.us = tail call i32 @llvm.smin.i32(i32 %b241, i32 %a239.us)
  %139 = tail call i32 @llvm.smax.i32(i32 %a238.us, i32 %b240)
  %140 = mul nsw i32 %139, %input.stride.1
  %141 = insertelement <8 x i32> undef, i32 %140, i64 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = add nsw i64 %137, %indvars.iv
  %144 = mul nsw i64 %143, %135
  %145 = sub i64 %144, %8
  br label %"for f2.s0.v3.v312.us"

"for f2.s0.v3.v312.us":                           ; preds = %"for f2.s0.v4.v2809.us", %"for f2.s0.v3.v312.us"
  %lsr.iv57.us = phi i32 [ %lsr.iv.next58.us, %"for f2.s0.v3.v312.us" ], [ %f2.s0.v3.min, %"for f2.s0.v4.v2809.us" ]
  %lsr.iv55.us = phi i32 [ %lsr.iv.next56.us, %"for f2.s0.v3.v312.us" ], [ %107, %"for f2.s0.v4.v2809.us" ]
  %f2.s0.v3.v283.base15.us = tail call i32 @llvm.smin.i32(i32 %b239, i32 %lsr.iv57.us)
  %146 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base15.us, i64 0
  %147 = shufflevector <8 x i32> %146, <8 x i32> undef, <8 x i32> zeroinitializer
  %a241.us = add nsw <8 x i32> %147, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a240.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b243, <8 x i32> %a241.us)
  %148 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a240.us, <8 x i32> %b242)
  %t1958.us = add nsw <8 x i32> %148, %142
  %149 = add <8 x i32> %122, %t1958.us
  %150 = shufflevector <8 x i32> %149, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = sext <4 x i32> %150 to <4 x i64>
  %152 = extractelement <4 x i64> %151, i64 0
  %153 = getelementptr inbounds i16, ptr %input.host, i64 %152
  %154 = load i16, ptr %153, align 2, !tbaa !40
  %155 = insertelement <8 x i16> undef, i16 %154, i64 0
  %156 = extractelement <4 x i64> %151, i64 1
  %157 = getelementptr inbounds i16, ptr %input.host, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !40
  %159 = insertelement <8 x i16> %155, i16 %158, i64 1
  %160 = extractelement <4 x i64> %151, i64 2
  %161 = getelementptr inbounds i16, ptr %input.host, i64 %160
  %162 = load i16, ptr %161, align 2, !tbaa !40
  %163 = insertelement <8 x i16> %159, i16 %162, i64 2
  %164 = extractelement <4 x i64> %151, i64 3
  %165 = getelementptr inbounds i16, ptr %input.host, i64 %164
  %166 = load i16, ptr %165, align 2, !tbaa !40
  %167 = insertelement <8 x i16> %163, i16 %166, i64 3
  %168 = shufflevector <8 x i32> %149, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %169 = sext <4 x i32> %168 to <4 x i64>
  %170 = extractelement <4 x i64> %169, i64 0
  %171 = getelementptr inbounds i16, ptr %input.host, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !40
  %173 = insertelement <8 x i16> %167, i16 %172, i64 4
  %174 = extractelement <4 x i64> %169, i64 1
  %175 = getelementptr inbounds i16, ptr %input.host, i64 %174
  %176 = load i16, ptr %175, align 2, !tbaa !40
  %177 = insertelement <8 x i16> %173, i16 %176, i64 5
  %178 = extractelement <4 x i64> %169, i64 2
  %179 = getelementptr inbounds i16, ptr %input.host, i64 %178
  %180 = load i16, ptr %179, align 2, !tbaa !40
  %181 = insertelement <8 x i16> %177, i16 %180, i64 6
  %182 = extractelement <4 x i64> %169, i64 3
  %183 = getelementptr inbounds i16, ptr %input.host, i64 %182
  %184 = load i16, ptr %183, align 2, !tbaa !40
  %185 = insertelement <8 x i16> %181, i16 %184, i64 7
  %186 = uitofp <8 x i16> %185 to <8 x float>
  %187 = fmul <8 x float> %186, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %188 = add <8 x i32> %129, %t1958.us
  %189 = shufflevector <8 x i32> %188, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %190 = sext <4 x i32> %189 to <4 x i64>
  %191 = extractelement <4 x i64> %190, i64 0
  %192 = getelementptr inbounds i16, ptr %input.host, i64 %191
  %193 = load i16, ptr %192, align 2, !tbaa !40
  %194 = insertelement <8 x i16> undef, i16 %193, i64 0
  %195 = extractelement <4 x i64> %190, i64 1
  %196 = getelementptr inbounds i16, ptr %input.host, i64 %195
  %197 = load i16, ptr %196, align 2, !tbaa !40
  %198 = insertelement <8 x i16> %194, i16 %197, i64 1
  %199 = extractelement <4 x i64> %190, i64 2
  %200 = getelementptr inbounds i16, ptr %input.host, i64 %199
  %201 = load i16, ptr %200, align 2, !tbaa !40
  %202 = insertelement <8 x i16> %198, i16 %201, i64 2
  %203 = extractelement <4 x i64> %190, i64 3
  %204 = getelementptr inbounds i16, ptr %input.host, i64 %203
  %205 = load i16, ptr %204, align 2, !tbaa !40
  %206 = insertelement <8 x i16> %202, i16 %205, i64 3
  %207 = shufflevector <8 x i32> %188, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %208 = sext <4 x i32> %207 to <4 x i64>
  %209 = extractelement <4 x i64> %208, i64 0
  %210 = getelementptr inbounds i16, ptr %input.host, i64 %209
  %211 = load i16, ptr %210, align 2, !tbaa !40
  %212 = insertelement <8 x i16> %206, i16 %211, i64 4
  %213 = extractelement <4 x i64> %208, i64 1
  %214 = getelementptr inbounds i16, ptr %input.host, i64 %213
  %215 = load i16, ptr %214, align 2, !tbaa !40
  %216 = insertelement <8 x i16> %212, i16 %215, i64 5
  %217 = extractelement <4 x i64> %208, i64 2
  %218 = getelementptr inbounds i16, ptr %input.host, i64 %217
  %219 = load i16, ptr %218, align 2, !tbaa !40
  %220 = insertelement <8 x i16> %216, i16 %219, i64 6
  %221 = extractelement <4 x i64> %208, i64 3
  %222 = getelementptr inbounds i16, ptr %input.host, i64 %221
  %223 = load i16, ptr %222, align 2, !tbaa !40
  %224 = insertelement <8 x i16> %220, i16 %223, i64 7
  %225 = uitofp <8 x i16> %224 to <8 x float>
  %226 = fmul <8 x float> %225, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %227 = add <8 x i32> %134, %t1958.us
  %228 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %229 = sext <4 x i32> %228 to <4 x i64>
  %230 = extractelement <4 x i64> %229, i64 0
  %231 = getelementptr inbounds i16, ptr %input.host, i64 %230
  %232 = load i16, ptr %231, align 2, !tbaa !40
  %233 = insertelement <8 x i16> undef, i16 %232, i64 0
  %234 = extractelement <4 x i64> %229, i64 1
  %235 = getelementptr inbounds i16, ptr %input.host, i64 %234
  %236 = load i16, ptr %235, align 2, !tbaa !40
  %237 = insertelement <8 x i16> %233, i16 %236, i64 1
  %238 = extractelement <4 x i64> %229, i64 2
  %239 = getelementptr inbounds i16, ptr %input.host, i64 %238
  %240 = load i16, ptr %239, align 2, !tbaa !40
  %241 = insertelement <8 x i16> %237, i16 %240, i64 2
  %242 = extractelement <4 x i64> %229, i64 3
  %243 = getelementptr inbounds i16, ptr %input.host, i64 %242
  %244 = load i16, ptr %243, align 2, !tbaa !40
  %245 = insertelement <8 x i16> %241, i16 %244, i64 3
  %246 = shufflevector <8 x i32> %227, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %247 = sext <4 x i32> %246 to <4 x i64>
  %248 = extractelement <4 x i64> %247, i64 0
  %249 = getelementptr inbounds i16, ptr %input.host, i64 %248
  %250 = load i16, ptr %249, align 2, !tbaa !40
  %251 = insertelement <8 x i16> %245, i16 %250, i64 4
  %252 = extractelement <4 x i64> %247, i64 1
  %253 = getelementptr inbounds i16, ptr %input.host, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !40
  %255 = insertelement <8 x i16> %251, i16 %254, i64 5
  %256 = extractelement <4 x i64> %247, i64 2
  %257 = getelementptr inbounds i16, ptr %input.host, i64 %256
  %258 = load i16, ptr %257, align 2, !tbaa !40
  %259 = insertelement <8 x i16> %255, i16 %258, i64 6
  %260 = extractelement <4 x i64> %247, i64 3
  %261 = getelementptr inbounds i16, ptr %input.host, i64 %260
  %262 = load i16, ptr %261, align 2, !tbaa !40
  %263 = insertelement <8 x i16> %259, i16 %262, i64 7
  %264 = uitofp <8 x i16> %263 to <8 x float>
  %265 = fmul <8 x float> %264, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %266 = fadd <8 x float> %226, %265
  %267 = fadd <8 x float> %187, %266
  %268 = sext i32 %f2.s0.v3.v283.base15.us to i64
  %269 = add i64 %145, %268
  %270 = getelementptr inbounds float, ptr %f2.host, i64 %269
  store <8 x float> %267, ptr %270, align 4, !tbaa !42
  %lsr.iv.next56.us = add nsw i32 %lsr.iv55.us, -1
  %lsr.iv.next58.us = add i32 %lsr.iv57.us, 8
  %.not3.us = icmp eq i32 %lsr.iv.next56.us, 0
  br i1 %.not3.us, label %"end for f2.s0.v3.v313.loopexit.us", label %"for f2.s0.v3.v312.us"

"end for f2.s0.v3.v313.loopexit.us":              ; preds = %"for f2.s0.v3.v312.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not.us = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not.us, label %destructor_block, label %"for f2.s0.v4.v2809.us"

"for f2.s0.v4.v280":                              ; preds = %"end for f2.s0.v3.v35", %"for f2.s0.v4.v280.preheader"
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %"end for f2.s0.v3.v35" ], [ 0, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv30 = phi i32 [ %lsr.iv.next31, %"end for f2.s0.v3.v35" ], [ %49, %"for f2.s0.v4.v280.preheader" ]
  %lsr.iv20 = phi ptr [ %scevgep22, %"end for f2.s0.v3.v35" ], [ %scevgep, %"for f2.s0.v4.v280.preheader" ]
  br i1 %77, label %"for f2.s0.v3.v3.preheader", label %"end for f2.s0.v3.v3", !prof !5

"for f2.s0.v3.v3.preheader":                      ; preds = %"for f2.s0.v4.v280"
  %271 = trunc i64 %indvars.iv27 to i32
  %272 = add nsw i32 %f2.s0.v4.v280.base, %271
  %273 = mul nsw i32 %272, %input.stride.1
  %274 = insertelement <8 x i32> undef, i32 %273, i64 0
  %275 = shufflevector <8 x i32> %274, <8 x i32> undef, <8 x i32> zeroinitializer
  %276 = add nsw i64 %30, %indvars.iv27
  %277 = mul nsw i64 %276, %31
  %278 = sub i64 %277, %8
  br label %"for f2.s0.v3.v3"

"for f2.s0.v3.v3":                                ; preds = %"for f2.s0.v3.v3.preheader", %"for f2.s0.v3.v3"
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.min, %"for f2.s0.v3.v3.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f2.s0.v3.v3" ], [ %f2.s0.v3.v3.prologue, %"for f2.s0.v3.v3.preheader" ]
  %f2.s0.v3.v283.base = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv16)
  %279 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base, i64 0
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> zeroinitializer
  %a214 = add nsw <8 x i32> %280, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a213 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a214)
  %281 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a213, <8 x i32> %b215)
  %t1949 = add nsw <8 x i32> %281, %275
  %282 = add <8 x i32> %82, %t1949
  %283 = shufflevector <8 x i32> %282, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %284 = sext <4 x i32> %283 to <4 x i64>
  %285 = extractelement <4 x i64> %284, i64 0
  %286 = getelementptr inbounds i16, ptr %input.host, i64 %285
  %287 = load i16, ptr %286, align 2, !tbaa !40
  %288 = insertelement <8 x i16> undef, i16 %287, i64 0
  %289 = extractelement <4 x i64> %284, i64 1
  %290 = getelementptr inbounds i16, ptr %input.host, i64 %289
  %291 = load i16, ptr %290, align 2, !tbaa !40
  %292 = insertelement <8 x i16> %288, i16 %291, i64 1
  %293 = extractelement <4 x i64> %284, i64 2
  %294 = getelementptr inbounds i16, ptr %input.host, i64 %293
  %295 = load i16, ptr %294, align 2, !tbaa !40
  %296 = insertelement <8 x i16> %292, i16 %295, i64 2
  %297 = extractelement <4 x i64> %284, i64 3
  %298 = getelementptr inbounds i16, ptr %input.host, i64 %297
  %299 = load i16, ptr %298, align 2, !tbaa !40
  %300 = insertelement <8 x i16> %296, i16 %299, i64 3
  %301 = shufflevector <8 x i32> %282, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %302 = sext <4 x i32> %301 to <4 x i64>
  %303 = extractelement <4 x i64> %302, i64 0
  %304 = getelementptr inbounds i16, ptr %input.host, i64 %303
  %305 = load i16, ptr %304, align 2, !tbaa !40
  %306 = insertelement <8 x i16> %300, i16 %305, i64 4
  %307 = extractelement <4 x i64> %302, i64 1
  %308 = getelementptr inbounds i16, ptr %input.host, i64 %307
  %309 = load i16, ptr %308, align 2, !tbaa !40
  %310 = insertelement <8 x i16> %306, i16 %309, i64 5
  %311 = extractelement <4 x i64> %302, i64 2
  %312 = getelementptr inbounds i16, ptr %input.host, i64 %311
  %313 = load i16, ptr %312, align 2, !tbaa !40
  %314 = insertelement <8 x i16> %310, i16 %313, i64 6
  %315 = extractelement <4 x i64> %302, i64 3
  %316 = getelementptr inbounds i16, ptr %input.host, i64 %315
  %317 = load i16, ptr %316, align 2, !tbaa !40
  %318 = insertelement <8 x i16> %314, i16 %317, i64 7
  %319 = uitofp <8 x i16> %318 to <8 x float>
  %320 = fmul <8 x float> %319, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %321 = add <8 x i32> %89, %t1949
  %322 = shufflevector <8 x i32> %321, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %323 = sext <4 x i32> %322 to <4 x i64>
  %324 = extractelement <4 x i64> %323, i64 0
  %325 = getelementptr inbounds i16, ptr %input.host, i64 %324
  %326 = load i16, ptr %325, align 2, !tbaa !40
  %327 = insertelement <8 x i16> undef, i16 %326, i64 0
  %328 = extractelement <4 x i64> %323, i64 1
  %329 = getelementptr inbounds i16, ptr %input.host, i64 %328
  %330 = load i16, ptr %329, align 2, !tbaa !40
  %331 = insertelement <8 x i16> %327, i16 %330, i64 1
  %332 = extractelement <4 x i64> %323, i64 2
  %333 = getelementptr inbounds i16, ptr %input.host, i64 %332
  %334 = load i16, ptr %333, align 2, !tbaa !40
  %335 = insertelement <8 x i16> %331, i16 %334, i64 2
  %336 = extractelement <4 x i64> %323, i64 3
  %337 = getelementptr inbounds i16, ptr %input.host, i64 %336
  %338 = load i16, ptr %337, align 2, !tbaa !40
  %339 = insertelement <8 x i16> %335, i16 %338, i64 3
  %340 = shufflevector <8 x i32> %321, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %341 = sext <4 x i32> %340 to <4 x i64>
  %342 = extractelement <4 x i64> %341, i64 0
  %343 = getelementptr inbounds i16, ptr %input.host, i64 %342
  %344 = load i16, ptr %343, align 2, !tbaa !40
  %345 = insertelement <8 x i16> %339, i16 %344, i64 4
  %346 = extractelement <4 x i64> %341, i64 1
  %347 = getelementptr inbounds i16, ptr %input.host, i64 %346
  %348 = load i16, ptr %347, align 2, !tbaa !40
  %349 = insertelement <8 x i16> %345, i16 %348, i64 5
  %350 = extractelement <4 x i64> %341, i64 2
  %351 = getelementptr inbounds i16, ptr %input.host, i64 %350
  %352 = load i16, ptr %351, align 2, !tbaa !40
  %353 = insertelement <8 x i16> %349, i16 %352, i64 6
  %354 = extractelement <4 x i64> %341, i64 3
  %355 = getelementptr inbounds i16, ptr %input.host, i64 %354
  %356 = load i16, ptr %355, align 2, !tbaa !40
  %357 = insertelement <8 x i16> %353, i16 %356, i64 7
  %358 = uitofp <8 x i16> %357 to <8 x float>
  %359 = fmul <8 x float> %358, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %360 = add <8 x i32> %95, %t1949
  %361 = shufflevector <8 x i32> %360, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %362 = sext <4 x i32> %361 to <4 x i64>
  %363 = extractelement <4 x i64> %362, i64 0
  %364 = getelementptr inbounds i16, ptr %input.host, i64 %363
  %365 = load i16, ptr %364, align 2, !tbaa !40
  %366 = insertelement <8 x i16> undef, i16 %365, i64 0
  %367 = extractelement <4 x i64> %362, i64 1
  %368 = getelementptr inbounds i16, ptr %input.host, i64 %367
  %369 = load i16, ptr %368, align 2, !tbaa !40
  %370 = insertelement <8 x i16> %366, i16 %369, i64 1
  %371 = extractelement <4 x i64> %362, i64 2
  %372 = getelementptr inbounds i16, ptr %input.host, i64 %371
  %373 = load i16, ptr %372, align 2, !tbaa !40
  %374 = insertelement <8 x i16> %370, i16 %373, i64 2
  %375 = extractelement <4 x i64> %362, i64 3
  %376 = getelementptr inbounds i16, ptr %input.host, i64 %375
  %377 = load i16, ptr %376, align 2, !tbaa !40
  %378 = insertelement <8 x i16> %374, i16 %377, i64 3
  %379 = shufflevector <8 x i32> %360, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %380 = sext <4 x i32> %379 to <4 x i64>
  %381 = extractelement <4 x i64> %380, i64 0
  %382 = getelementptr inbounds i16, ptr %input.host, i64 %381
  %383 = load i16, ptr %382, align 2, !tbaa !40
  %384 = insertelement <8 x i16> %378, i16 %383, i64 4
  %385 = extractelement <4 x i64> %380, i64 1
  %386 = getelementptr inbounds i16, ptr %input.host, i64 %385
  %387 = load i16, ptr %386, align 2, !tbaa !40
  %388 = insertelement <8 x i16> %384, i16 %387, i64 5
  %389 = extractelement <4 x i64> %380, i64 2
  %390 = getelementptr inbounds i16, ptr %input.host, i64 %389
  %391 = load i16, ptr %390, align 2, !tbaa !40
  %392 = insertelement <8 x i16> %388, i16 %391, i64 6
  %393 = extractelement <4 x i64> %380, i64 3
  %394 = getelementptr inbounds i16, ptr %input.host, i64 %393
  %395 = load i16, ptr %394, align 2, !tbaa !40
  %396 = insertelement <8 x i16> %392, i16 %395, i64 7
  %397 = uitofp <8 x i16> %396 to <8 x float>
  %398 = fmul <8 x float> %397, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %399 = fadd <8 x float> %359, %398
  %400 = fadd <8 x float> %320, %399
  %401 = sext i32 %f2.s0.v3.v283.base to i64
  %402 = add i64 %278, %401
  %403 = getelementptr inbounds float, ptr %f2.host, i64 %402
  store <8 x float> %400, ptr %403, align 4, !tbaa !42
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %lsr.iv.next17 = add i32 %lsr.iv16, 8
  %.not10 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not10, label %"end for f2.s0.v3.v3", label %"for f2.s0.v3.v3"

"end for f2.s0.v3.v3":                            ; preds = %"for f2.s0.v3.v3", %"for f2.s0.v4.v280"
  br i1 %.not14, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31.preheader", !prof !4

"for f2.s0.v3.v31.preheader":                     ; preds = %"end for f2.s0.v3.v3"
  %scevgep23 = getelementptr float, ptr %lsr.iv20, i64 %98
  %404 = add i32 %lsr.iv30, %99
  %405 = sext i32 %404 to i64
  %406 = add nsw i64 %47, %405
  %scevgep32 = getelementptr i16, ptr %input.host, i64 %406
  %407 = add nsw i64 %52, %405
  %scevgep39 = getelementptr i16, ptr %input.host, i64 %407
  %408 = add nsw i64 %55, %405
  %scevgep46 = getelementptr i16, ptr %input.host, i64 %408
  br label %"for f2.s0.v3.v31"

"for f2.s0.v3.v31":                               ; preds = %"for f2.s0.v3.v31", %"for f2.s0.v3.v31.preheader"
  %lsr.iv25 = phi i64 [ 0, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next26, %"for f2.s0.v3.v31" ]
  %lsr.iv18 = phi i32 [ %96, %"for f2.s0.v3.v31.preheader" ], [ %lsr.iv.next19, %"for f2.s0.v3.v31" ]
  %uglygep49 = getelementptr i8, ptr %scevgep46, i64 %lsr.iv25
  %409 = load <8 x i16>, ptr %uglygep49, align 2, !tbaa !40
  %410 = uitofp <8 x i16> %409 to <8 x float>
  %411 = fmul <8 x float> %410, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %uglygep42 = getelementptr i8, ptr %scevgep39, i64 %lsr.iv25
  %412 = load <8 x i16>, ptr %uglygep42, align 2, !tbaa !40
  %413 = uitofp <8 x i16> %412 to <8 x float>
  %414 = fmul <8 x float> %413, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %uglygep35 = getelementptr i8, ptr %scevgep32, i64 %lsr.iv25
  %415 = load <8 x i16>, ptr %uglygep35, align 2, !tbaa !40
  %416 = uitofp <8 x i16> %415 to <8 x float>
  %417 = fmul <8 x float> %416, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %418 = fadd <8 x float> %414, %417
  %419 = fadd <8 x float> %411, %418
  %420 = shl nuw i64 %lsr.iv25, 1
  %uglygep = getelementptr i8, ptr %scevgep23, i64 %420
  store <8 x float> %419, ptr %uglygep, align 4, !tbaa !42
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %lsr.iv.next26 = add nuw nsw i64 %lsr.iv25, 16
  %.not8 = icmp eq i32 %lsr.iv.next19, 0
  br i1 %.not8, label %"end for f2.s0.v3.v32", label %"for f2.s0.v3.v31"

"end for f2.s0.v3.v32":                           ; preds = %"for f2.s0.v3.v31", %"end for f2.s0.v3.v3"
  br i1 %.not4, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34.preheader", !prof !4

"for f2.s0.v3.v34.preheader":                     ; preds = %"end for f2.s0.v3.v32"
  %421 = trunc i64 %indvars.iv27 to i32
  %422 = add nsw i32 %f2.s0.v4.v280.base, %421
  %423 = mul nsw i32 %422, %input.stride.1
  %424 = insertelement <8 x i32> undef, i32 %423, i64 0
  %425 = shufflevector <8 x i32> %424, <8 x i32> undef, <8 x i32> zeroinitializer
  %426 = add nsw i64 %30, %indvars.iv27
  %427 = mul nsw i64 %426, %31
  %428 = sub i64 %427, %8
  br label %"for f2.s0.v3.v34"

"for f2.s0.v3.v34":                               ; preds = %"for f2.s0.v3.v34", %"for f2.s0.v3.v34.preheader"
  %lsr.iv53 = phi i32 [ %102, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next54, %"for f2.s0.v3.v34" ]
  %lsr.iv51 = phi i32 [ %100, %"for f2.s0.v3.v34.preheader" ], [ %lsr.iv.next52, %"for f2.s0.v3.v34" ]
  %f2.s0.v3.v283.base7 = tail call i32 @llvm.smin.i32(i32 %a211, i32 %lsr.iv53)
  %429 = insertelement <8 x i32> undef, i32 %f2.s0.v3.v283.base7, i64 0
  %430 = shufflevector <8 x i32> %429, <8 x i32> undef, <8 x i32> zeroinitializer
  %a229 = add nsw <8 x i32> %430, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a228 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b216, <8 x i32> %a229)
  %431 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a228, <8 x i32> %b215)
  %t1955 = add nsw <8 x i32> %431, %425
  %432 = add <8 x i32> %82, %t1955
  %433 = shufflevector <8 x i32> %432, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %434 = sext <4 x i32> %433 to <4 x i64>
  %435 = extractelement <4 x i64> %434, i64 0
  %436 = getelementptr inbounds i16, ptr %input.host, i64 %435
  %437 = load i16, ptr %436, align 2, !tbaa !40
  %438 = insertelement <8 x i16> undef, i16 %437, i64 0
  %439 = extractelement <4 x i64> %434, i64 1
  %440 = getelementptr inbounds i16, ptr %input.host, i64 %439
  %441 = load i16, ptr %440, align 2, !tbaa !40
  %442 = insertelement <8 x i16> %438, i16 %441, i64 1
  %443 = extractelement <4 x i64> %434, i64 2
  %444 = getelementptr inbounds i16, ptr %input.host, i64 %443
  %445 = load i16, ptr %444, align 2, !tbaa !40
  %446 = insertelement <8 x i16> %442, i16 %445, i64 2
  %447 = extractelement <4 x i64> %434, i64 3
  %448 = getelementptr inbounds i16, ptr %input.host, i64 %447
  %449 = load i16, ptr %448, align 2, !tbaa !40
  %450 = insertelement <8 x i16> %446, i16 %449, i64 3
  %451 = shufflevector <8 x i32> %432, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %452 = sext <4 x i32> %451 to <4 x i64>
  %453 = extractelement <4 x i64> %452, i64 0
  %454 = getelementptr inbounds i16, ptr %input.host, i64 %453
  %455 = load i16, ptr %454, align 2, !tbaa !40
  %456 = insertelement <8 x i16> %450, i16 %455, i64 4
  %457 = extractelement <4 x i64> %452, i64 1
  %458 = getelementptr inbounds i16, ptr %input.host, i64 %457
  %459 = load i16, ptr %458, align 2, !tbaa !40
  %460 = insertelement <8 x i16> %456, i16 %459, i64 5
  %461 = extractelement <4 x i64> %452, i64 2
  %462 = getelementptr inbounds i16, ptr %input.host, i64 %461
  %463 = load i16, ptr %462, align 2, !tbaa !40
  %464 = insertelement <8 x i16> %460, i16 %463, i64 6
  %465 = extractelement <4 x i64> %452, i64 3
  %466 = getelementptr inbounds i16, ptr %input.host, i64 %465
  %467 = load i16, ptr %466, align 2, !tbaa !40
  %468 = insertelement <8 x i16> %464, i16 %467, i64 7
  %469 = uitofp <8 x i16> %468 to <8 x float>
  %470 = fmul <8 x float> %469, <float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000, float 0x3EBD2F37C0000000>
  %471 = add <8 x i32> %89, %t1955
  %472 = shufflevector <8 x i32> %471, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %473 = sext <4 x i32> %472 to <4 x i64>
  %474 = extractelement <4 x i64> %473, i64 0
  %475 = getelementptr inbounds i16, ptr %input.host, i64 %474
  %476 = load i16, ptr %475, align 2, !tbaa !40
  %477 = insertelement <8 x i16> undef, i16 %476, i64 0
  %478 = extractelement <4 x i64> %473, i64 1
  %479 = getelementptr inbounds i16, ptr %input.host, i64 %478
  %480 = load i16, ptr %479, align 2, !tbaa !40
  %481 = insertelement <8 x i16> %477, i16 %480, i64 1
  %482 = extractelement <4 x i64> %473, i64 2
  %483 = getelementptr inbounds i16, ptr %input.host, i64 %482
  %484 = load i16, ptr %483, align 2, !tbaa !40
  %485 = insertelement <8 x i16> %481, i16 %484, i64 2
  %486 = extractelement <4 x i64> %473, i64 3
  %487 = getelementptr inbounds i16, ptr %input.host, i64 %486
  %488 = load i16, ptr %487, align 2, !tbaa !40
  %489 = insertelement <8 x i16> %485, i16 %488, i64 3
  %490 = shufflevector <8 x i32> %471, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %491 = sext <4 x i32> %490 to <4 x i64>
  %492 = extractelement <4 x i64> %491, i64 0
  %493 = getelementptr inbounds i16, ptr %input.host, i64 %492
  %494 = load i16, ptr %493, align 2, !tbaa !40
  %495 = insertelement <8 x i16> %489, i16 %494, i64 4
  %496 = extractelement <4 x i64> %491, i64 1
  %497 = getelementptr inbounds i16, ptr %input.host, i64 %496
  %498 = load i16, ptr %497, align 2, !tbaa !40
  %499 = insertelement <8 x i16> %495, i16 %498, i64 5
  %500 = extractelement <4 x i64> %491, i64 2
  %501 = getelementptr inbounds i16, ptr %input.host, i64 %500
  %502 = load i16, ptr %501, align 2, !tbaa !40
  %503 = insertelement <8 x i16> %499, i16 %502, i64 6
  %504 = extractelement <4 x i64> %491, i64 3
  %505 = getelementptr inbounds i16, ptr %input.host, i64 %504
  %506 = load i16, ptr %505, align 2, !tbaa !40
  %507 = insertelement <8 x i16> %503, i16 %506, i64 7
  %508 = uitofp <8 x i16> %507 to <8 x float>
  %509 = fmul <8 x float> %508, <float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000, float 0x3EE2C8C700000000>
  %510 = add <8 x i32> %95, %t1955
  %511 = shufflevector <8 x i32> %510, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %512 = sext <4 x i32> %511 to <4 x i64>
  %513 = extractelement <4 x i64> %512, i64 0
  %514 = getelementptr inbounds i16, ptr %input.host, i64 %513
  %515 = load i16, ptr %514, align 2, !tbaa !40
  %516 = insertelement <8 x i16> undef, i16 %515, i64 0
  %517 = extractelement <4 x i64> %512, i64 1
  %518 = getelementptr inbounds i16, ptr %input.host, i64 %517
  %519 = load i16, ptr %518, align 2, !tbaa !40
  %520 = insertelement <8 x i16> %516, i16 %519, i64 1
  %521 = extractelement <4 x i64> %512, i64 2
  %522 = getelementptr inbounds i16, ptr %input.host, i64 %521
  %523 = load i16, ptr %522, align 2, !tbaa !40
  %524 = insertelement <8 x i16> %520, i16 %523, i64 2
  %525 = extractelement <4 x i64> %512, i64 3
  %526 = getelementptr inbounds i16, ptr %input.host, i64 %525
  %527 = load i16, ptr %526, align 2, !tbaa !40
  %528 = insertelement <8 x i16> %524, i16 %527, i64 3
  %529 = shufflevector <8 x i32> %510, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %530 = sext <4 x i32> %529 to <4 x i64>
  %531 = extractelement <4 x i64> %530, i64 0
  %532 = getelementptr inbounds i16, ptr %input.host, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !40
  %534 = insertelement <8 x i16> %528, i16 %533, i64 4
  %535 = extractelement <4 x i64> %530, i64 1
  %536 = getelementptr inbounds i16, ptr %input.host, i64 %535
  %537 = load i16, ptr %536, align 2, !tbaa !40
  %538 = insertelement <8 x i16> %534, i16 %537, i64 5
  %539 = extractelement <4 x i64> %530, i64 2
  %540 = getelementptr inbounds i16, ptr %input.host, i64 %539
  %541 = load i16, ptr %540, align 2, !tbaa !40
  %542 = insertelement <8 x i16> %538, i16 %541, i64 6
  %543 = extractelement <4 x i64> %530, i64 3
  %544 = getelementptr inbounds i16, ptr %input.host, i64 %543
  %545 = load i16, ptr %544, align 2, !tbaa !40
  %546 = insertelement <8 x i16> %542, i16 %545, i64 7
  %547 = uitofp <8 x i16> %546 to <8 x float>
  %548 = fmul <8 x float> %547, <float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000, float 0x3ED322E400000000>
  %549 = fadd <8 x float> %509, %548
  %550 = fadd <8 x float> %470, %549
  %551 = sext i32 %f2.s0.v3.v283.base7 to i64
  %552 = add i64 %428, %551
  %553 = getelementptr inbounds float, ptr %f2.host, i64 %552
  store <8 x float> %550, ptr %553, align 4, !tbaa !42
  %lsr.iv.next52 = add i32 %lsr.iv51, -1
  %lsr.iv.next54 = add i32 %lsr.iv53, 8
  %.not7 = icmp eq i32 %lsr.iv.next52, 0
  br i1 %.not7, label %"end for f2.s0.v3.v35", label %"for f2.s0.v3.v34"

"end for f2.s0.v3.v35":                           ; preds = %"for f2.s0.v3.v34", %"end for f2.s0.v3.v32"
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %scevgep22 = getelementptr i1, ptr %lsr.iv20, i64 %36
  %lsr.iv.next31 = add i32 %lsr.iv30, %input.stride.1
  %.not5 = icmp eq i64 %indvars.iv.next28, 32
  br i1 %.not5, label %destructor_block, label %"for f2.s0.v4.v280"

destructor_block:                                 ; preds = %"end for f2.s0.v3.v313.loopexit.us", %"end for f2.s0.v3.v35", %"for f2.s0.v4.v2809.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f4.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f4.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f4.s0.v4.v296.preheader":
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 2
  %a304 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 3
  %f2.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 4
  %f2.v3.min_realized = load i32, ptr %3, align 4
  %4 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 5
  %f2.v4.min_realized = load i32, ptr %4, align 4
  %5 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 6
  %f4.s0.v3.max = load i32, ptr %5, align 4
  %6 = sext i32 %f4.s0.v3.max to i64
  %7 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 7
  %f4.s0.v3.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 8
  %f4.s0.v4.max = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 9
  %f4.s0.v4.min.s = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 10
  %f4.s0.v6.loop_extent.s = load i32, ptr %10, align 4
  %11 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 11
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = sext i32 %f4.stride.1 to i64
  %13 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 12
  %f4.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f4.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 13
  %f4.v3.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f4.v3.min_realized to i64
  %17 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 14
  %f4.v4.min_realized = load i32, ptr %17, align 4
  %18 = sext i32 %f4.v4.min_realized to i64
  %19 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 15
  %levels = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 16
  %f0.host = load ptr, ptr %20, align 8
  %21 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 18
  %f2.host = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds %closure_t.0, ptr %closure, i64 0, i32 20
  %f4.host = load ptr, ptr %22, align 8
  %23 = shl nsw i32 %f4.s0.v4.v4, 3
  %24 = add nsw i32 %f4.s0.v4.min.s, %23
  %a303 = add nsw i32 %24, -1
  %b305 = add nsw i32 %f4.s0.v4.max, -7
  %.not8 = icmp slt i32 %b305, %24
  %f4.s0.v4.v296.base = select i1 %.not8, i32 %b305, i32 %a303
  %25 = sext i32 %f4.s0.v4.v296.base to i64
  %26 = sub nsw i64 %25, %18
  %27 = shl nsw i64 %12, 2
  %28 = add nsw i64 %14, 1
  %29 = tail call i32 @llvm.smax.i32(i32 %a304, i32 0)
  %smax = zext i32 %29 to i64
  %30 = shl nsw i64 %14, 2
  %31 = add nsw i64 %30, 4
  %32 = shl i32 %f4.s0.v3.min.s, 1
  %33 = add i32 %f2.v3.extent_realized.s, 1
  %34 = shl i32 %f2.v3.extent_realized.s, 1
  %35 = add i32 %34, 2
  %36 = icmp sgt i32 %f4.s0.v6.loop_extent.s, -2
  %37 = sub nsw i32 %f4.s0.v3.max, %f4.s0.v3.min.s
  %38 = add nsw i32 %37, 2
  %a305 = ashr i32 %38, 3
  %39 = icmp sgt i32 %37, 5
  %40 = select i1 %39, i32 %a305, i32 0
  %41 = icmp sgt i32 %40, 0
  %42 = add nsw i32 %37, 9
  %43 = ashr i32 %42, 3
  %44 = icmp sgt i32 %43, %40
  %45 = add nsw i32 %levels, -1
  %46 = sitofp i32 %45 to float
  %47 = fdiv float 1.000000e+00, %46
  %48 = insertelement <8 x float> undef, float %46, i64 0
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <8 x i32> zeroinitializer
  %50 = shl nsw i32 %levels, 8
  %51 = add nsw i32 %50, -256
  %52 = insertelement <8 x i32> undef, i32 %51, i64 0
  %b309 = shufflevector <8 x i32> %52, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = insertelement <8 x float> undef, float %beta, i64 0
  %54 = shufflevector <8 x float> %53, <8 x float> undef, <8 x i32> zeroinitializer
  %55 = shl nsw i32 %f4.s0.v3.max, 1
  %56 = sub nsw i32 %55, %f2.v3.min_realized
  %57 = add nsw i64 %6, -7
  %58 = sub nsw i64 %57, %16
  br i1 %36, label %"for f4.s0.v4.v296.us.preheader", label %destructor_block, !prof !5

"for f4.s0.v4.v296.us.preheader":                 ; preds = %"for f4.s0.v4.v296.preheader"
  %59 = add nuw i32 %29, 2
  %60 = add i32 %59, %f4.s0.v6.loop_extent.s
  %61 = shl i32 %f4.s0.v4.v296.base, 1
  %62 = xor i32 %f2.v4.min_realized, -1
  %63 = add i32 %61, %62
  %64 = mul i32 %63, %33
  %65 = sub i32 %64, %f2.v3.min_realized
  %reass.sub = sub i32 %61, %f2.v4.min_realized
  %66 = mul i32 %reass.sub, %33
  %67 = sub i32 %66, %f2.v3.min_realized
  %68 = add i32 %reass.sub, 1
  %69 = mul i32 %68, %33
  %70 = sub i32 %69, %f2.v3.min_realized
  %71 = add i32 %reass.sub, 2
  %72 = mul i32 %71, %33
  %73 = sub i32 %72, %f2.v3.min_realized
  %74 = xor i64 %16, -1
  %75 = sext i32 %f4.s0.v3.min.s to i64
  %76 = add nsw i64 %74, %75
  %77 = mul nsw i64 %26, %12
  %78 = add i64 %76, %77
  %scevgep = getelementptr float, ptr %f4.host, i64 %78
  %79 = zext i32 %60 to i64
  br label %"for f4.s0.v4.v296.us"

"for f4.s0.v4.v296.us":                           ; preds = %"for f4.s0.v4.v296.us.preheader", %"end for f4.s0.v6.loopexit.us"
  %indvars.iv109 = phi i64 [ 0, %"for f4.s0.v4.v296.us.preheader" ], [ %indvars.iv.next110, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %65, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next27.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %67, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next23.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %70, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next19.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %73, %"for f4.s0.v4.v296.us.preheader" ], [ %lsr.iv.next15.us, %"end for f4.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f4.s0.v4.v296.us.preheader" ], [ %scevgep6.us, %"end for f4.s0.v6.loopexit.us" ]
  %80 = trunc i64 %indvars.iv109 to i32
  %81 = add i32 %f4.s0.v4.v296.base, %80
  %82 = shl nsw i32 %81, 1
  %83 = sub nsw i32 %82, %f2.v4.min_realized
  %84 = add nsw i32 %83, -1
  %85 = mul nsw i32 %84, %33
  %t1996.us = add nsw i32 %85, %56
  %86 = sext i32 %t1996.us to i64
  %87 = add nsw i64 %86, -16
  %88 = getelementptr inbounds float, ptr %f2.host, i64 %87
  %89 = add nsw i64 %86, -8
  %90 = getelementptr inbounds float, ptr %f2.host, i64 %89
  %91 = add nsw i64 %86, -14
  %92 = getelementptr inbounds float, ptr %f2.host, i64 %91
  %93 = add nsw i64 %86, -6
  %94 = getelementptr inbounds float, ptr %f2.host, i64 %93
  %95 = add nsw i64 %86, -12
  %96 = getelementptr inbounds float, ptr %f2.host, i64 %95
  %97 = add nsw i64 %86, -4
  %98 = getelementptr inbounds float, ptr %f2.host, i64 %97
  %99 = mul nsw i32 %83, %33
  %t2001.us = add nsw i32 %99, %56
  %100 = sext i32 %t2001.us to i64
  %101 = add nsw i64 %100, -16
  %102 = getelementptr inbounds float, ptr %f2.host, i64 %101
  %103 = add nsw i64 %100, -8
  %104 = getelementptr inbounds float, ptr %f2.host, i64 %103
  %105 = add nsw i64 %100, -14
  %106 = getelementptr inbounds float, ptr %f2.host, i64 %105
  %107 = add nsw i64 %100, -6
  %108 = getelementptr inbounds float, ptr %f2.host, i64 %107
  %109 = add nsw i64 %100, -12
  %110 = getelementptr inbounds float, ptr %f2.host, i64 %109
  %111 = add nsw i64 %100, -4
  %112 = getelementptr inbounds float, ptr %f2.host, i64 %111
  %113 = add nsw i32 %83, 1
  %114 = mul nsw i32 %113, %33
  %t2006.us = add nsw i32 %114, %56
  %115 = sext i32 %t2006.us to i64
  %116 = add nsw i64 %115, -16
  %117 = getelementptr inbounds float, ptr %f2.host, i64 %116
  %118 = add nsw i64 %115, -8
  %119 = getelementptr inbounds float, ptr %f2.host, i64 %118
  %120 = add nsw i64 %115, -14
  %121 = getelementptr inbounds float, ptr %f2.host, i64 %120
  %122 = add nsw i64 %115, -6
  %123 = getelementptr inbounds float, ptr %f2.host, i64 %122
  %124 = add nsw i64 %115, -12
  %125 = getelementptr inbounds float, ptr %f2.host, i64 %124
  %126 = add nsw i64 %115, -4
  %127 = getelementptr inbounds float, ptr %f2.host, i64 %126
  %128 = add nsw i32 %83, 2
  %129 = mul nsw i32 %128, %33
  %t2011.us = add nsw i32 %129, %56
  %130 = sext i32 %t2011.us to i64
  %131 = add nsw i64 %130, -16
  %132 = getelementptr inbounds float, ptr %f2.host, i64 %131
  %133 = add nsw i64 %130, -8
  %134 = getelementptr inbounds float, ptr %f2.host, i64 %133
  %135 = add nsw i64 %130, -14
  %136 = getelementptr inbounds float, ptr %f2.host, i64 %135
  %137 = add nsw i64 %130, -6
  %138 = getelementptr inbounds float, ptr %f2.host, i64 %137
  %139 = add nsw i64 %130, -12
  %140 = getelementptr inbounds float, ptr %f2.host, i64 %139
  %141 = add nsw i64 %130, -4
  %142 = getelementptr inbounds float, ptr %f2.host, i64 %141
  %143 = add nsw i64 %26, %indvars.iv109
  %144 = mul nsw i64 %143, %12
  %145 = add i64 %58, %144
  br label %"for f4.s0.v6.us"

"for f4.s0.v6.us":                                ; preds = %"for f4.s0.v4.v296.us", %"end for f4.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f4.s0.v4.v296.us" ], [ %indvars.iv.next, %"end for f4.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f4.s0.v4.v296.us" ], [ %scevgep10.us, %"end for f4.s0.v3.v32.us" ]
  br i1 %41, label %"for f4.s0.v3.v3.preheader.us", label %"end for f4.s0.v3.v3.us", !prof !5

"for f4.s0.v3.v3.us":                             ; preds = %"for f4.s0.v3.v3.preheader.us", %"for f4.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f4.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f4.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f4.s0.v3.v3.us" ], [ %a305, %"for f4.s0.v3.v3.preheader.us" ]
  %146 = add i32 %lsr.iv28.us, %32
  %147 = sext i32 %146 to i64
  %148 = add nsw i64 %147, -4
  %149 = getelementptr inbounds float, ptr %f2.host, i64 %148
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !42
  %151 = add nsw i64 %147, 4
  %152 = getelementptr inbounds float, ptr %f2.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !42
  %t1973.us = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %154 = add nsw i64 %147, -2
  %155 = getelementptr inbounds float, ptr %f2.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !42
  %157 = add nsw i64 %147, 6
  %158 = getelementptr inbounds float, ptr %f2.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !42
  %t1974.us = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1975.us = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %160 = getelementptr inbounds float, ptr %f2.host, i64 %147
  %161 = load <8 x float>, ptr %160, align 4, !tbaa !42
  %162 = add nsw i64 %147, 8
  %163 = getelementptr inbounds float, ptr %f2.host, i64 %162
  %164 = load <8 x float>, ptr %163, align 4, !tbaa !42
  %t1976.us = shufflevector <8 x float> %161, <8 x float> %164, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %165 = add i32 %lsr.iv24.us, %32
  %166 = sext i32 %165 to i64
  %167 = add nsw i64 %166, -4
  %168 = getelementptr inbounds float, ptr %f2.host, i64 %167
  %169 = load <8 x float>, ptr %168, align 4, !tbaa !42
  %170 = add nsw i64 %166, 4
  %171 = getelementptr inbounds float, ptr %f2.host, i64 %170
  %172 = load <8 x float>, ptr %171, align 4, !tbaa !42
  %t1978.us = shufflevector <8 x float> %169, <8 x float> %172, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %173 = add nsw i64 %166, -2
  %174 = getelementptr inbounds float, ptr %f2.host, i64 %173
  %175 = load <8 x float>, ptr %174, align 4, !tbaa !42
  %176 = add nsw i64 %166, 6
  %177 = getelementptr inbounds float, ptr %f2.host, i64 %176
  %178 = load <8 x float>, ptr %177, align 4, !tbaa !42
  %t1979.us = shufflevector <8 x float> %175, <8 x float> %178, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1980.us = shufflevector <8 x float> %175, <8 x float> %178, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %179 = getelementptr inbounds float, ptr %f2.host, i64 %166
  %180 = load <8 x float>, ptr %179, align 4, !tbaa !42
  %181 = add nsw i64 %166, 8
  %182 = getelementptr inbounds float, ptr %f2.host, i64 %181
  %183 = load <8 x float>, ptr %182, align 4, !tbaa !42
  %t1981.us = shufflevector <8 x float> %180, <8 x float> %183, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %184 = add i32 %lsr.iv20.us, %32
  %185 = sext i32 %184 to i64
  %186 = add nsw i64 %185, -4
  %187 = getelementptr inbounds float, ptr %f2.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !42
  %189 = add nsw i64 %185, 4
  %190 = getelementptr inbounds float, ptr %f2.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !42
  %t1983.us = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %192 = add nsw i64 %185, -2
  %193 = getelementptr inbounds float, ptr %f2.host, i64 %192
  %194 = load <8 x float>, ptr %193, align 4, !tbaa !42
  %195 = add nsw i64 %185, 6
  %196 = getelementptr inbounds float, ptr %f2.host, i64 %195
  %197 = load <8 x float>, ptr %196, align 4, !tbaa !42
  %t1984.us = shufflevector <8 x float> %194, <8 x float> %197, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1985.us = shufflevector <8 x float> %194, <8 x float> %197, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %198 = getelementptr inbounds float, ptr %f2.host, i64 %185
  %199 = load <8 x float>, ptr %198, align 4, !tbaa !42
  %200 = add nsw i64 %185, 8
  %201 = getelementptr inbounds float, ptr %f2.host, i64 %200
  %202 = load <8 x float>, ptr %201, align 4, !tbaa !42
  %t1986.us = shufflevector <8 x float> %199, <8 x float> %202, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %203 = add i32 %lsr.iv16.us, %32
  %204 = sext i32 %203 to i64
  %205 = add nsw i64 %204, -4
  %206 = getelementptr inbounds float, ptr %f2.host, i64 %205
  %207 = load <8 x float>, ptr %206, align 4, !tbaa !42
  %208 = add nsw i64 %204, 4
  %209 = getelementptr inbounds float, ptr %f2.host, i64 %208
  %210 = load <8 x float>, ptr %209, align 4, !tbaa !42
  %t1988.us = shufflevector <8 x float> %207, <8 x float> %210, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %211 = add nsw i64 %204, -2
  %212 = getelementptr inbounds float, ptr %f2.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !42
  %214 = add nsw i64 %204, 6
  %215 = getelementptr inbounds float, ptr %f2.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !42
  %t1989.us = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1990.us = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %217 = getelementptr inbounds float, ptr %f2.host, i64 %204
  %218 = load <8 x float>, ptr %217, align 4, !tbaa !42
  %219 = add nsw i64 %204, 8
  %220 = getelementptr inbounds float, ptr %f2.host, i64 %219
  %221 = load <8 x float>, ptr %220, align 4, !tbaa !42
  %t1991.us = shufflevector <8 x float> %218, <8 x float> %221, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fmul <8 x float> %49, %t1991.us
  %223 = fmul <8 x float> %222, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a307.us = fptosi <8 x float> %223 to <8 x i32>
  %a306.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a307.us)
  %224 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a306.us, <8 x i32> zeroinitializer)
  %225 = sub <8 x i32> %224, %1747
  %226 = add nsw <8 x i32> %225, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %227 = shufflevector <8 x i32> %226, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %228 = sext <4 x i32> %227 to <4 x i64>
  %229 = extractelement <4 x i64> %228, i64 0
  %230 = getelementptr inbounds float, ptr %f0.host, i64 %229
  %231 = load float, ptr %230, align 4, !tbaa !6
  %232 = insertelement <8 x float> undef, float %231, i64 0
  %233 = extractelement <4 x i64> %228, i64 1
  %234 = getelementptr inbounds float, ptr %f0.host, i64 %233
  %235 = load float, ptr %234, align 4, !tbaa !6
  %236 = insertelement <8 x float> %232, float %235, i64 1
  %237 = extractelement <4 x i64> %228, i64 2
  %238 = getelementptr inbounds float, ptr %f0.host, i64 %237
  %239 = load float, ptr %238, align 4, !tbaa !6
  %240 = insertelement <8 x float> %236, float %239, i64 2
  %241 = extractelement <4 x i64> %228, i64 3
  %242 = getelementptr inbounds float, ptr %f0.host, i64 %241
  %243 = load float, ptr %242, align 4, !tbaa !6
  %244 = insertelement <8 x float> %240, float %243, i64 3
  %245 = shufflevector <8 x i32> %226, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %246 = sext <4 x i32> %245 to <4 x i64>
  %247 = extractelement <4 x i64> %246, i64 0
  %248 = getelementptr inbounds float, ptr %f0.host, i64 %247
  %249 = load float, ptr %248, align 4, !tbaa !6
  %250 = insertelement <8 x float> %244, float %249, i64 4
  %251 = extractelement <4 x i64> %246, i64 1
  %252 = getelementptr inbounds float, ptr %f0.host, i64 %251
  %253 = load float, ptr %252, align 4, !tbaa !6
  %254 = insertelement <8 x float> %250, float %253, i64 5
  %255 = extractelement <4 x i64> %246, i64 2
  %256 = getelementptr inbounds float, ptr %f0.host, i64 %255
  %257 = load float, ptr %256, align 4, !tbaa !6
  %258 = insertelement <8 x float> %254, float %257, i64 6
  %259 = extractelement <4 x i64> %246, i64 3
  %260 = getelementptr inbounds float, ptr %f0.host, i64 %259
  %261 = load float, ptr %260, align 4, !tbaa !6
  %262 = insertelement <8 x float> %258, float %261, i64 7
  %263 = fsub <8 x float> %t1991.us, %1749
  %264 = fmul <8 x float> %54, %263
  %265 = fadd <8 x float> %1749, %264
  %266 = fadd <8 x float> %265, %262
  %267 = fmul <8 x float> %49, %t1990.us
  %268 = fmul <8 x float> %267, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a309.us = fptosi <8 x float> %268 to <8 x i32>
  %a308.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a309.us)
  %269 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a308.us, <8 x i32> zeroinitializer)
  %270 = sub <8 x i32> %269, %1747
  %271 = add nsw <8 x i32> %270, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %272 = shufflevector <8 x i32> %271, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %273 = sext <4 x i32> %272 to <4 x i64>
  %274 = extractelement <4 x i64> %273, i64 0
  %275 = getelementptr inbounds float, ptr %f0.host, i64 %274
  %276 = load float, ptr %275, align 4, !tbaa !6
  %277 = insertelement <8 x float> undef, float %276, i64 0
  %278 = extractelement <4 x i64> %273, i64 1
  %279 = getelementptr inbounds float, ptr %f0.host, i64 %278
  %280 = load float, ptr %279, align 4, !tbaa !6
  %281 = insertelement <8 x float> %277, float %280, i64 1
  %282 = extractelement <4 x i64> %273, i64 2
  %283 = getelementptr inbounds float, ptr %f0.host, i64 %282
  %284 = load float, ptr %283, align 4, !tbaa !6
  %285 = insertelement <8 x float> %281, float %284, i64 2
  %286 = extractelement <4 x i64> %273, i64 3
  %287 = getelementptr inbounds float, ptr %f0.host, i64 %286
  %288 = load float, ptr %287, align 4, !tbaa !6
  %289 = insertelement <8 x float> %285, float %288, i64 3
  %290 = shufflevector <8 x i32> %271, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %291 = sext <4 x i32> %290 to <4 x i64>
  %292 = extractelement <4 x i64> %291, i64 0
  %293 = getelementptr inbounds float, ptr %f0.host, i64 %292
  %294 = load float, ptr %293, align 4, !tbaa !6
  %295 = insertelement <8 x float> %289, float %294, i64 4
  %296 = extractelement <4 x i64> %291, i64 1
  %297 = getelementptr inbounds float, ptr %f0.host, i64 %296
  %298 = load float, ptr %297, align 4, !tbaa !6
  %299 = insertelement <8 x float> %295, float %298, i64 5
  %300 = extractelement <4 x i64> %291, i64 2
  %301 = getelementptr inbounds float, ptr %f0.host, i64 %300
  %302 = load float, ptr %301, align 4, !tbaa !6
  %303 = insertelement <8 x float> %299, float %302, i64 6
  %304 = extractelement <4 x i64> %291, i64 3
  %305 = getelementptr inbounds float, ptr %f0.host, i64 %304
  %306 = load float, ptr %305, align 4, !tbaa !6
  %307 = insertelement <8 x float> %303, float %306, i64 7
  %308 = fsub <8 x float> %t1990.us, %1749
  %309 = fmul <8 x float> %54, %308
  %310 = fadd <8 x float> %1749, %309
  %311 = fadd <8 x float> %310, %307
  %312 = fmul <8 x float> %49, %t1989.us
  %313 = fmul <8 x float> %312, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a311.us = fptosi <8 x float> %313 to <8 x i32>
  %a310.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a311.us)
  %314 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a310.us, <8 x i32> zeroinitializer)
  %315 = sub <8 x i32> %314, %1747
  %316 = add nsw <8 x i32> %315, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %317 = shufflevector <8 x i32> %316, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %318 = sext <4 x i32> %317 to <4 x i64>
  %319 = extractelement <4 x i64> %318, i64 0
  %320 = getelementptr inbounds float, ptr %f0.host, i64 %319
  %321 = load float, ptr %320, align 4, !tbaa !6
  %322 = insertelement <8 x float> undef, float %321, i64 0
  %323 = extractelement <4 x i64> %318, i64 1
  %324 = getelementptr inbounds float, ptr %f0.host, i64 %323
  %325 = load float, ptr %324, align 4, !tbaa !6
  %326 = insertelement <8 x float> %322, float %325, i64 1
  %327 = extractelement <4 x i64> %318, i64 2
  %328 = getelementptr inbounds float, ptr %f0.host, i64 %327
  %329 = load float, ptr %328, align 4, !tbaa !6
  %330 = insertelement <8 x float> %326, float %329, i64 2
  %331 = extractelement <4 x i64> %318, i64 3
  %332 = getelementptr inbounds float, ptr %f0.host, i64 %331
  %333 = load float, ptr %332, align 4, !tbaa !6
  %334 = insertelement <8 x float> %330, float %333, i64 3
  %335 = shufflevector <8 x i32> %316, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %336 = sext <4 x i32> %335 to <4 x i64>
  %337 = extractelement <4 x i64> %336, i64 0
  %338 = getelementptr inbounds float, ptr %f0.host, i64 %337
  %339 = load float, ptr %338, align 4, !tbaa !6
  %340 = insertelement <8 x float> %334, float %339, i64 4
  %341 = extractelement <4 x i64> %336, i64 1
  %342 = getelementptr inbounds float, ptr %f0.host, i64 %341
  %343 = load float, ptr %342, align 4, !tbaa !6
  %344 = insertelement <8 x float> %340, float %343, i64 5
  %345 = extractelement <4 x i64> %336, i64 2
  %346 = getelementptr inbounds float, ptr %f0.host, i64 %345
  %347 = load float, ptr %346, align 4, !tbaa !6
  %348 = insertelement <8 x float> %344, float %347, i64 6
  %349 = extractelement <4 x i64> %336, i64 3
  %350 = getelementptr inbounds float, ptr %f0.host, i64 %349
  %351 = load float, ptr %350, align 4, !tbaa !6
  %352 = insertelement <8 x float> %348, float %351, i64 7
  %353 = fsub <8 x float> %t1989.us, %1749
  %354 = fmul <8 x float> %54, %353
  %355 = fadd <8 x float> %1749, %354
  %356 = fadd <8 x float> %355, %352
  %357 = fadd <8 x float> %311, %356
  %358 = fmul <8 x float> %357, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %359 = fmul <8 x float> %49, %t1988.us
  %360 = fmul <8 x float> %359, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a313.us = fptosi <8 x float> %360 to <8 x i32>
  %a312.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a313.us)
  %361 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a312.us, <8 x i32> zeroinitializer)
  %362 = sub <8 x i32> %361, %1747
  %363 = add nsw <8 x i32> %362, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %364 = shufflevector <8 x i32> %363, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %365 = sext <4 x i32> %364 to <4 x i64>
  %366 = extractelement <4 x i64> %365, i64 0
  %367 = getelementptr inbounds float, ptr %f0.host, i64 %366
  %368 = load float, ptr %367, align 4, !tbaa !6
  %369 = insertelement <8 x float> undef, float %368, i64 0
  %370 = extractelement <4 x i64> %365, i64 1
  %371 = getelementptr inbounds float, ptr %f0.host, i64 %370
  %372 = load float, ptr %371, align 4, !tbaa !6
  %373 = insertelement <8 x float> %369, float %372, i64 1
  %374 = extractelement <4 x i64> %365, i64 2
  %375 = getelementptr inbounds float, ptr %f0.host, i64 %374
  %376 = load float, ptr %375, align 4, !tbaa !6
  %377 = insertelement <8 x float> %373, float %376, i64 2
  %378 = extractelement <4 x i64> %365, i64 3
  %379 = getelementptr inbounds float, ptr %f0.host, i64 %378
  %380 = load float, ptr %379, align 4, !tbaa !6
  %381 = insertelement <8 x float> %377, float %380, i64 3
  %382 = shufflevector <8 x i32> %363, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %383 = sext <4 x i32> %382 to <4 x i64>
  %384 = extractelement <4 x i64> %383, i64 0
  %385 = getelementptr inbounds float, ptr %f0.host, i64 %384
  %386 = load float, ptr %385, align 4, !tbaa !6
  %387 = insertelement <8 x float> %381, float %386, i64 4
  %388 = extractelement <4 x i64> %383, i64 1
  %389 = getelementptr inbounds float, ptr %f0.host, i64 %388
  %390 = load float, ptr %389, align 4, !tbaa !6
  %391 = insertelement <8 x float> %387, float %390, i64 5
  %392 = extractelement <4 x i64> %383, i64 2
  %393 = getelementptr inbounds float, ptr %f0.host, i64 %392
  %394 = load float, ptr %393, align 4, !tbaa !6
  %395 = insertelement <8 x float> %391, float %394, i64 6
  %396 = extractelement <4 x i64> %383, i64 3
  %397 = getelementptr inbounds float, ptr %f0.host, i64 %396
  %398 = load float, ptr %397, align 4, !tbaa !6
  %399 = insertelement <8 x float> %395, float %398, i64 7
  %400 = fsub <8 x float> %t1988.us, %1749
  %401 = fmul <8 x float> %54, %400
  %402 = fadd <8 x float> %1749, %401
  %403 = fadd <8 x float> %402, %399
  %404 = fadd <8 x float> %358, %403
  %405 = fadd <8 x float> %266, %404
  %406 = fmul <8 x float> %405, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %407 = fmul <8 x float> %49, %t1986.us
  %408 = fmul <8 x float> %407, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a315.us = fptosi <8 x float> %408 to <8 x i32>
  %a314.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a315.us)
  %409 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a314.us, <8 x i32> zeroinitializer)
  %410 = sub <8 x i32> %409, %1747
  %411 = add nsw <8 x i32> %410, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %412 = shufflevector <8 x i32> %411, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %413 = sext <4 x i32> %412 to <4 x i64>
  %414 = extractelement <4 x i64> %413, i64 0
  %415 = getelementptr inbounds float, ptr %f0.host, i64 %414
  %416 = load float, ptr %415, align 4, !tbaa !6
  %417 = insertelement <8 x float> undef, float %416, i64 0
  %418 = extractelement <4 x i64> %413, i64 1
  %419 = getelementptr inbounds float, ptr %f0.host, i64 %418
  %420 = load float, ptr %419, align 4, !tbaa !6
  %421 = insertelement <8 x float> %417, float %420, i64 1
  %422 = extractelement <4 x i64> %413, i64 2
  %423 = getelementptr inbounds float, ptr %f0.host, i64 %422
  %424 = load float, ptr %423, align 4, !tbaa !6
  %425 = insertelement <8 x float> %421, float %424, i64 2
  %426 = extractelement <4 x i64> %413, i64 3
  %427 = getelementptr inbounds float, ptr %f0.host, i64 %426
  %428 = load float, ptr %427, align 4, !tbaa !6
  %429 = insertelement <8 x float> %425, float %428, i64 3
  %430 = shufflevector <8 x i32> %411, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %431 = sext <4 x i32> %430 to <4 x i64>
  %432 = extractelement <4 x i64> %431, i64 0
  %433 = getelementptr inbounds float, ptr %f0.host, i64 %432
  %434 = load float, ptr %433, align 4, !tbaa !6
  %435 = insertelement <8 x float> %429, float %434, i64 4
  %436 = extractelement <4 x i64> %431, i64 1
  %437 = getelementptr inbounds float, ptr %f0.host, i64 %436
  %438 = load float, ptr %437, align 4, !tbaa !6
  %439 = insertelement <8 x float> %435, float %438, i64 5
  %440 = extractelement <4 x i64> %431, i64 2
  %441 = getelementptr inbounds float, ptr %f0.host, i64 %440
  %442 = load float, ptr %441, align 4, !tbaa !6
  %443 = insertelement <8 x float> %439, float %442, i64 6
  %444 = extractelement <4 x i64> %431, i64 3
  %445 = getelementptr inbounds float, ptr %f0.host, i64 %444
  %446 = load float, ptr %445, align 4, !tbaa !6
  %447 = insertelement <8 x float> %443, float %446, i64 7
  %448 = fsub <8 x float> %t1986.us, %1749
  %449 = fmul <8 x float> %54, %448
  %450 = fadd <8 x float> %1749, %449
  %451 = fadd <8 x float> %450, %447
  %452 = fmul <8 x float> %49, %t1985.us
  %453 = fmul <8 x float> %452, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a317.us = fptosi <8 x float> %453 to <8 x i32>
  %a316.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a317.us)
  %454 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a316.us, <8 x i32> zeroinitializer)
  %455 = sub <8 x i32> %454, %1747
  %456 = add nsw <8 x i32> %455, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %457 = shufflevector <8 x i32> %456, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %458 = sext <4 x i32> %457 to <4 x i64>
  %459 = extractelement <4 x i64> %458, i64 0
  %460 = getelementptr inbounds float, ptr %f0.host, i64 %459
  %461 = load float, ptr %460, align 4, !tbaa !6
  %462 = insertelement <8 x float> undef, float %461, i64 0
  %463 = extractelement <4 x i64> %458, i64 1
  %464 = getelementptr inbounds float, ptr %f0.host, i64 %463
  %465 = load float, ptr %464, align 4, !tbaa !6
  %466 = insertelement <8 x float> %462, float %465, i64 1
  %467 = extractelement <4 x i64> %458, i64 2
  %468 = getelementptr inbounds float, ptr %f0.host, i64 %467
  %469 = load float, ptr %468, align 4, !tbaa !6
  %470 = insertelement <8 x float> %466, float %469, i64 2
  %471 = extractelement <4 x i64> %458, i64 3
  %472 = getelementptr inbounds float, ptr %f0.host, i64 %471
  %473 = load float, ptr %472, align 4, !tbaa !6
  %474 = insertelement <8 x float> %470, float %473, i64 3
  %475 = shufflevector <8 x i32> %456, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %476 = sext <4 x i32> %475 to <4 x i64>
  %477 = extractelement <4 x i64> %476, i64 0
  %478 = getelementptr inbounds float, ptr %f0.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !6
  %480 = insertelement <8 x float> %474, float %479, i64 4
  %481 = extractelement <4 x i64> %476, i64 1
  %482 = getelementptr inbounds float, ptr %f0.host, i64 %481
  %483 = load float, ptr %482, align 4, !tbaa !6
  %484 = insertelement <8 x float> %480, float %483, i64 5
  %485 = extractelement <4 x i64> %476, i64 2
  %486 = getelementptr inbounds float, ptr %f0.host, i64 %485
  %487 = load float, ptr %486, align 4, !tbaa !6
  %488 = insertelement <8 x float> %484, float %487, i64 6
  %489 = extractelement <4 x i64> %476, i64 3
  %490 = getelementptr inbounds float, ptr %f0.host, i64 %489
  %491 = load float, ptr %490, align 4, !tbaa !6
  %492 = insertelement <8 x float> %488, float %491, i64 7
  %493 = fsub <8 x float> %t1985.us, %1749
  %494 = fmul <8 x float> %54, %493
  %495 = fadd <8 x float> %1749, %494
  %496 = fadd <8 x float> %495, %492
  %497 = fmul <8 x float> %49, %t1984.us
  %498 = fmul <8 x float> %497, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a319.us = fptosi <8 x float> %498 to <8 x i32>
  %a318.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a319.us)
  %499 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a318.us, <8 x i32> zeroinitializer)
  %500 = sub <8 x i32> %499, %1747
  %501 = add nsw <8 x i32> %500, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %502 = shufflevector <8 x i32> %501, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %503 = sext <4 x i32> %502 to <4 x i64>
  %504 = extractelement <4 x i64> %503, i64 0
  %505 = getelementptr inbounds float, ptr %f0.host, i64 %504
  %506 = load float, ptr %505, align 4, !tbaa !6
  %507 = insertelement <8 x float> undef, float %506, i64 0
  %508 = extractelement <4 x i64> %503, i64 1
  %509 = getelementptr inbounds float, ptr %f0.host, i64 %508
  %510 = load float, ptr %509, align 4, !tbaa !6
  %511 = insertelement <8 x float> %507, float %510, i64 1
  %512 = extractelement <4 x i64> %503, i64 2
  %513 = getelementptr inbounds float, ptr %f0.host, i64 %512
  %514 = load float, ptr %513, align 4, !tbaa !6
  %515 = insertelement <8 x float> %511, float %514, i64 2
  %516 = extractelement <4 x i64> %503, i64 3
  %517 = getelementptr inbounds float, ptr %f0.host, i64 %516
  %518 = load float, ptr %517, align 4, !tbaa !6
  %519 = insertelement <8 x float> %515, float %518, i64 3
  %520 = shufflevector <8 x i32> %501, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %521 = sext <4 x i32> %520 to <4 x i64>
  %522 = extractelement <4 x i64> %521, i64 0
  %523 = getelementptr inbounds float, ptr %f0.host, i64 %522
  %524 = load float, ptr %523, align 4, !tbaa !6
  %525 = insertelement <8 x float> %519, float %524, i64 4
  %526 = extractelement <4 x i64> %521, i64 1
  %527 = getelementptr inbounds float, ptr %f0.host, i64 %526
  %528 = load float, ptr %527, align 4, !tbaa !6
  %529 = insertelement <8 x float> %525, float %528, i64 5
  %530 = extractelement <4 x i64> %521, i64 2
  %531 = getelementptr inbounds float, ptr %f0.host, i64 %530
  %532 = load float, ptr %531, align 4, !tbaa !6
  %533 = insertelement <8 x float> %529, float %532, i64 6
  %534 = extractelement <4 x i64> %521, i64 3
  %535 = getelementptr inbounds float, ptr %f0.host, i64 %534
  %536 = load float, ptr %535, align 4, !tbaa !6
  %537 = insertelement <8 x float> %533, float %536, i64 7
  %538 = fsub <8 x float> %t1984.us, %1749
  %539 = fmul <8 x float> %54, %538
  %540 = fadd <8 x float> %1749, %539
  %541 = fadd <8 x float> %540, %537
  %542 = fadd <8 x float> %496, %541
  %543 = fmul <8 x float> %542, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %544 = fmul <8 x float> %49, %t1983.us
  %545 = fmul <8 x float> %544, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a321.us = fptosi <8 x float> %545 to <8 x i32>
  %a320.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a321.us)
  %546 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a320.us, <8 x i32> zeroinitializer)
  %547 = sub <8 x i32> %546, %1747
  %548 = add nsw <8 x i32> %547, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %549 = shufflevector <8 x i32> %548, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %550 = sext <4 x i32> %549 to <4 x i64>
  %551 = extractelement <4 x i64> %550, i64 0
  %552 = getelementptr inbounds float, ptr %f0.host, i64 %551
  %553 = load float, ptr %552, align 4, !tbaa !6
  %554 = insertelement <8 x float> undef, float %553, i64 0
  %555 = extractelement <4 x i64> %550, i64 1
  %556 = getelementptr inbounds float, ptr %f0.host, i64 %555
  %557 = load float, ptr %556, align 4, !tbaa !6
  %558 = insertelement <8 x float> %554, float %557, i64 1
  %559 = extractelement <4 x i64> %550, i64 2
  %560 = getelementptr inbounds float, ptr %f0.host, i64 %559
  %561 = load float, ptr %560, align 4, !tbaa !6
  %562 = insertelement <8 x float> %558, float %561, i64 2
  %563 = extractelement <4 x i64> %550, i64 3
  %564 = getelementptr inbounds float, ptr %f0.host, i64 %563
  %565 = load float, ptr %564, align 4, !tbaa !6
  %566 = insertelement <8 x float> %562, float %565, i64 3
  %567 = shufflevector <8 x i32> %548, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %568 = sext <4 x i32> %567 to <4 x i64>
  %569 = extractelement <4 x i64> %568, i64 0
  %570 = getelementptr inbounds float, ptr %f0.host, i64 %569
  %571 = load float, ptr %570, align 4, !tbaa !6
  %572 = insertelement <8 x float> %566, float %571, i64 4
  %573 = extractelement <4 x i64> %568, i64 1
  %574 = getelementptr inbounds float, ptr %f0.host, i64 %573
  %575 = load float, ptr %574, align 4, !tbaa !6
  %576 = insertelement <8 x float> %572, float %575, i64 5
  %577 = extractelement <4 x i64> %568, i64 2
  %578 = getelementptr inbounds float, ptr %f0.host, i64 %577
  %579 = load float, ptr %578, align 4, !tbaa !6
  %580 = insertelement <8 x float> %576, float %579, i64 6
  %581 = extractelement <4 x i64> %568, i64 3
  %582 = getelementptr inbounds float, ptr %f0.host, i64 %581
  %583 = load float, ptr %582, align 4, !tbaa !6
  %584 = insertelement <8 x float> %580, float %583, i64 7
  %585 = fsub <8 x float> %t1983.us, %1749
  %586 = fmul <8 x float> %54, %585
  %587 = fadd <8 x float> %1749, %586
  %588 = fadd <8 x float> %587, %584
  %589 = fadd <8 x float> %543, %588
  %590 = fadd <8 x float> %451, %589
  %591 = fmul <8 x float> %49, %t1981.us
  %592 = fmul <8 x float> %591, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a323.us = fptosi <8 x float> %592 to <8 x i32>
  %a322.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a323.us)
  %593 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a322.us, <8 x i32> zeroinitializer)
  %594 = sub <8 x i32> %593, %1747
  %595 = add nsw <8 x i32> %594, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %596 = shufflevector <8 x i32> %595, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %597 = sext <4 x i32> %596 to <4 x i64>
  %598 = extractelement <4 x i64> %597, i64 0
  %599 = getelementptr inbounds float, ptr %f0.host, i64 %598
  %600 = load float, ptr %599, align 4, !tbaa !6
  %601 = insertelement <8 x float> undef, float %600, i64 0
  %602 = extractelement <4 x i64> %597, i64 1
  %603 = getelementptr inbounds float, ptr %f0.host, i64 %602
  %604 = load float, ptr %603, align 4, !tbaa !6
  %605 = insertelement <8 x float> %601, float %604, i64 1
  %606 = extractelement <4 x i64> %597, i64 2
  %607 = getelementptr inbounds float, ptr %f0.host, i64 %606
  %608 = load float, ptr %607, align 4, !tbaa !6
  %609 = insertelement <8 x float> %605, float %608, i64 2
  %610 = extractelement <4 x i64> %597, i64 3
  %611 = getelementptr inbounds float, ptr %f0.host, i64 %610
  %612 = load float, ptr %611, align 4, !tbaa !6
  %613 = insertelement <8 x float> %609, float %612, i64 3
  %614 = shufflevector <8 x i32> %595, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %615 = sext <4 x i32> %614 to <4 x i64>
  %616 = extractelement <4 x i64> %615, i64 0
  %617 = getelementptr inbounds float, ptr %f0.host, i64 %616
  %618 = load float, ptr %617, align 4, !tbaa !6
  %619 = insertelement <8 x float> %613, float %618, i64 4
  %620 = extractelement <4 x i64> %615, i64 1
  %621 = getelementptr inbounds float, ptr %f0.host, i64 %620
  %622 = load float, ptr %621, align 4, !tbaa !6
  %623 = insertelement <8 x float> %619, float %622, i64 5
  %624 = extractelement <4 x i64> %615, i64 2
  %625 = getelementptr inbounds float, ptr %f0.host, i64 %624
  %626 = load float, ptr %625, align 4, !tbaa !6
  %627 = insertelement <8 x float> %623, float %626, i64 6
  %628 = extractelement <4 x i64> %615, i64 3
  %629 = getelementptr inbounds float, ptr %f0.host, i64 %628
  %630 = load float, ptr %629, align 4, !tbaa !6
  %631 = insertelement <8 x float> %627, float %630, i64 7
  %632 = fsub <8 x float> %t1981.us, %1749
  %633 = fmul <8 x float> %54, %632
  %634 = fadd <8 x float> %1749, %633
  %635 = fadd <8 x float> %634, %631
  %636 = fmul <8 x float> %49, %t1980.us
  %637 = fmul <8 x float> %636, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a325.us = fptosi <8 x float> %637 to <8 x i32>
  %a324.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a325.us)
  %638 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a324.us, <8 x i32> zeroinitializer)
  %639 = sub <8 x i32> %638, %1747
  %640 = add nsw <8 x i32> %639, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %641 = shufflevector <8 x i32> %640, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %642 = sext <4 x i32> %641 to <4 x i64>
  %643 = extractelement <4 x i64> %642, i64 0
  %644 = getelementptr inbounds float, ptr %f0.host, i64 %643
  %645 = load float, ptr %644, align 4, !tbaa !6
  %646 = insertelement <8 x float> undef, float %645, i64 0
  %647 = extractelement <4 x i64> %642, i64 1
  %648 = getelementptr inbounds float, ptr %f0.host, i64 %647
  %649 = load float, ptr %648, align 4, !tbaa !6
  %650 = insertelement <8 x float> %646, float %649, i64 1
  %651 = extractelement <4 x i64> %642, i64 2
  %652 = getelementptr inbounds float, ptr %f0.host, i64 %651
  %653 = load float, ptr %652, align 4, !tbaa !6
  %654 = insertelement <8 x float> %650, float %653, i64 2
  %655 = extractelement <4 x i64> %642, i64 3
  %656 = getelementptr inbounds float, ptr %f0.host, i64 %655
  %657 = load float, ptr %656, align 4, !tbaa !6
  %658 = insertelement <8 x float> %654, float %657, i64 3
  %659 = shufflevector <8 x i32> %640, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %660 = sext <4 x i32> %659 to <4 x i64>
  %661 = extractelement <4 x i64> %660, i64 0
  %662 = getelementptr inbounds float, ptr %f0.host, i64 %661
  %663 = load float, ptr %662, align 4, !tbaa !6
  %664 = insertelement <8 x float> %658, float %663, i64 4
  %665 = extractelement <4 x i64> %660, i64 1
  %666 = getelementptr inbounds float, ptr %f0.host, i64 %665
  %667 = load float, ptr %666, align 4, !tbaa !6
  %668 = insertelement <8 x float> %664, float %667, i64 5
  %669 = extractelement <4 x i64> %660, i64 2
  %670 = getelementptr inbounds float, ptr %f0.host, i64 %669
  %671 = load float, ptr %670, align 4, !tbaa !6
  %672 = insertelement <8 x float> %668, float %671, i64 6
  %673 = extractelement <4 x i64> %660, i64 3
  %674 = getelementptr inbounds float, ptr %f0.host, i64 %673
  %675 = load float, ptr %674, align 4, !tbaa !6
  %676 = insertelement <8 x float> %672, float %675, i64 7
  %677 = fsub <8 x float> %t1980.us, %1749
  %678 = fmul <8 x float> %54, %677
  %679 = fadd <8 x float> %1749, %678
  %680 = fadd <8 x float> %679, %676
  %681 = fmul <8 x float> %49, %t1979.us
  %682 = fmul <8 x float> %681, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a327.us = fptosi <8 x float> %682 to <8 x i32>
  %a326.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a327.us)
  %683 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a326.us, <8 x i32> zeroinitializer)
  %684 = sub <8 x i32> %683, %1747
  %685 = add nsw <8 x i32> %684, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %686 = shufflevector <8 x i32> %685, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %687 = sext <4 x i32> %686 to <4 x i64>
  %688 = extractelement <4 x i64> %687, i64 0
  %689 = getelementptr inbounds float, ptr %f0.host, i64 %688
  %690 = load float, ptr %689, align 4, !tbaa !6
  %691 = insertelement <8 x float> undef, float %690, i64 0
  %692 = extractelement <4 x i64> %687, i64 1
  %693 = getelementptr inbounds float, ptr %f0.host, i64 %692
  %694 = load float, ptr %693, align 4, !tbaa !6
  %695 = insertelement <8 x float> %691, float %694, i64 1
  %696 = extractelement <4 x i64> %687, i64 2
  %697 = getelementptr inbounds float, ptr %f0.host, i64 %696
  %698 = load float, ptr %697, align 4, !tbaa !6
  %699 = insertelement <8 x float> %695, float %698, i64 2
  %700 = extractelement <4 x i64> %687, i64 3
  %701 = getelementptr inbounds float, ptr %f0.host, i64 %700
  %702 = load float, ptr %701, align 4, !tbaa !6
  %703 = insertelement <8 x float> %699, float %702, i64 3
  %704 = shufflevector <8 x i32> %685, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %705 = sext <4 x i32> %704 to <4 x i64>
  %706 = extractelement <4 x i64> %705, i64 0
  %707 = getelementptr inbounds float, ptr %f0.host, i64 %706
  %708 = load float, ptr %707, align 4, !tbaa !6
  %709 = insertelement <8 x float> %703, float %708, i64 4
  %710 = extractelement <4 x i64> %705, i64 1
  %711 = getelementptr inbounds float, ptr %f0.host, i64 %710
  %712 = load float, ptr %711, align 4, !tbaa !6
  %713 = insertelement <8 x float> %709, float %712, i64 5
  %714 = extractelement <4 x i64> %705, i64 2
  %715 = getelementptr inbounds float, ptr %f0.host, i64 %714
  %716 = load float, ptr %715, align 4, !tbaa !6
  %717 = insertelement <8 x float> %713, float %716, i64 6
  %718 = extractelement <4 x i64> %705, i64 3
  %719 = getelementptr inbounds float, ptr %f0.host, i64 %718
  %720 = load float, ptr %719, align 4, !tbaa !6
  %721 = insertelement <8 x float> %717, float %720, i64 7
  %722 = fsub <8 x float> %t1979.us, %1749
  %723 = fmul <8 x float> %54, %722
  %724 = fadd <8 x float> %1749, %723
  %725 = fadd <8 x float> %724, %721
  %726 = fadd <8 x float> %680, %725
  %727 = fmul <8 x float> %726, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %728 = fmul <8 x float> %49, %t1978.us
  %729 = fmul <8 x float> %728, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a329.us = fptosi <8 x float> %729 to <8 x i32>
  %a328.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a329.us)
  %730 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a328.us, <8 x i32> zeroinitializer)
  %731 = sub <8 x i32> %730, %1747
  %732 = add nsw <8 x i32> %731, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %733 = shufflevector <8 x i32> %732, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %734 = sext <4 x i32> %733 to <4 x i64>
  %735 = extractelement <4 x i64> %734, i64 0
  %736 = getelementptr inbounds float, ptr %f0.host, i64 %735
  %737 = load float, ptr %736, align 4, !tbaa !6
  %738 = insertelement <8 x float> undef, float %737, i64 0
  %739 = extractelement <4 x i64> %734, i64 1
  %740 = getelementptr inbounds float, ptr %f0.host, i64 %739
  %741 = load float, ptr %740, align 4, !tbaa !6
  %742 = insertelement <8 x float> %738, float %741, i64 1
  %743 = extractelement <4 x i64> %734, i64 2
  %744 = getelementptr inbounds float, ptr %f0.host, i64 %743
  %745 = load float, ptr %744, align 4, !tbaa !6
  %746 = insertelement <8 x float> %742, float %745, i64 2
  %747 = extractelement <4 x i64> %734, i64 3
  %748 = getelementptr inbounds float, ptr %f0.host, i64 %747
  %749 = load float, ptr %748, align 4, !tbaa !6
  %750 = insertelement <8 x float> %746, float %749, i64 3
  %751 = shufflevector <8 x i32> %732, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %752 = sext <4 x i32> %751 to <4 x i64>
  %753 = extractelement <4 x i64> %752, i64 0
  %754 = getelementptr inbounds float, ptr %f0.host, i64 %753
  %755 = load float, ptr %754, align 4, !tbaa !6
  %756 = insertelement <8 x float> %750, float %755, i64 4
  %757 = extractelement <4 x i64> %752, i64 1
  %758 = getelementptr inbounds float, ptr %f0.host, i64 %757
  %759 = load float, ptr %758, align 4, !tbaa !6
  %760 = insertelement <8 x float> %756, float %759, i64 5
  %761 = extractelement <4 x i64> %752, i64 2
  %762 = getelementptr inbounds float, ptr %f0.host, i64 %761
  %763 = load float, ptr %762, align 4, !tbaa !6
  %764 = insertelement <8 x float> %760, float %763, i64 6
  %765 = extractelement <4 x i64> %752, i64 3
  %766 = getelementptr inbounds float, ptr %f0.host, i64 %765
  %767 = load float, ptr %766, align 4, !tbaa !6
  %768 = insertelement <8 x float> %764, float %767, i64 7
  %769 = fsub <8 x float> %t1978.us, %1749
  %770 = fmul <8 x float> %54, %769
  %771 = fadd <8 x float> %1749, %770
  %772 = fadd <8 x float> %771, %768
  %773 = fadd <8 x float> %727, %772
  %774 = fadd <8 x float> %635, %773
  %775 = fadd <8 x float> %590, %774
  %776 = fmul <8 x float> %775, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %777 = fmul <8 x float> %49, %t1976.us
  %778 = fmul <8 x float> %777, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a331.us = fptosi <8 x float> %778 to <8 x i32>
  %a330.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a331.us)
  %779 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a330.us, <8 x i32> zeroinitializer)
  %780 = sub <8 x i32> %779, %1747
  %781 = add nsw <8 x i32> %780, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %782 = shufflevector <8 x i32> %781, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %783 = sext <4 x i32> %782 to <4 x i64>
  %784 = extractelement <4 x i64> %783, i64 0
  %785 = getelementptr inbounds float, ptr %f0.host, i64 %784
  %786 = load float, ptr %785, align 4, !tbaa !6
  %787 = insertelement <8 x float> undef, float %786, i64 0
  %788 = extractelement <4 x i64> %783, i64 1
  %789 = getelementptr inbounds float, ptr %f0.host, i64 %788
  %790 = load float, ptr %789, align 4, !tbaa !6
  %791 = insertelement <8 x float> %787, float %790, i64 1
  %792 = extractelement <4 x i64> %783, i64 2
  %793 = getelementptr inbounds float, ptr %f0.host, i64 %792
  %794 = load float, ptr %793, align 4, !tbaa !6
  %795 = insertelement <8 x float> %791, float %794, i64 2
  %796 = extractelement <4 x i64> %783, i64 3
  %797 = getelementptr inbounds float, ptr %f0.host, i64 %796
  %798 = load float, ptr %797, align 4, !tbaa !6
  %799 = insertelement <8 x float> %795, float %798, i64 3
  %800 = shufflevector <8 x i32> %781, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %801 = sext <4 x i32> %800 to <4 x i64>
  %802 = extractelement <4 x i64> %801, i64 0
  %803 = getelementptr inbounds float, ptr %f0.host, i64 %802
  %804 = load float, ptr %803, align 4, !tbaa !6
  %805 = insertelement <8 x float> %799, float %804, i64 4
  %806 = extractelement <4 x i64> %801, i64 1
  %807 = getelementptr inbounds float, ptr %f0.host, i64 %806
  %808 = load float, ptr %807, align 4, !tbaa !6
  %809 = insertelement <8 x float> %805, float %808, i64 5
  %810 = extractelement <4 x i64> %801, i64 2
  %811 = getelementptr inbounds float, ptr %f0.host, i64 %810
  %812 = load float, ptr %811, align 4, !tbaa !6
  %813 = insertelement <8 x float> %809, float %812, i64 6
  %814 = extractelement <4 x i64> %801, i64 3
  %815 = getelementptr inbounds float, ptr %f0.host, i64 %814
  %816 = load float, ptr %815, align 4, !tbaa !6
  %817 = insertelement <8 x float> %813, float %816, i64 7
  %818 = fsub <8 x float> %t1976.us, %1749
  %819 = fmul <8 x float> %54, %818
  %820 = fadd <8 x float> %1749, %819
  %821 = fadd <8 x float> %820, %817
  %822 = fmul <8 x float> %49, %t1975.us
  %823 = fmul <8 x float> %822, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a333.us = fptosi <8 x float> %823 to <8 x i32>
  %a332.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a333.us)
  %824 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a332.us, <8 x i32> zeroinitializer)
  %825 = sub <8 x i32> %824, %1747
  %826 = add nsw <8 x i32> %825, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %827 = shufflevector <8 x i32> %826, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %828 = sext <4 x i32> %827 to <4 x i64>
  %829 = extractelement <4 x i64> %828, i64 0
  %830 = getelementptr inbounds float, ptr %f0.host, i64 %829
  %831 = load float, ptr %830, align 4, !tbaa !6
  %832 = insertelement <8 x float> undef, float %831, i64 0
  %833 = extractelement <4 x i64> %828, i64 1
  %834 = getelementptr inbounds float, ptr %f0.host, i64 %833
  %835 = load float, ptr %834, align 4, !tbaa !6
  %836 = insertelement <8 x float> %832, float %835, i64 1
  %837 = extractelement <4 x i64> %828, i64 2
  %838 = getelementptr inbounds float, ptr %f0.host, i64 %837
  %839 = load float, ptr %838, align 4, !tbaa !6
  %840 = insertelement <8 x float> %836, float %839, i64 2
  %841 = extractelement <4 x i64> %828, i64 3
  %842 = getelementptr inbounds float, ptr %f0.host, i64 %841
  %843 = load float, ptr %842, align 4, !tbaa !6
  %844 = insertelement <8 x float> %840, float %843, i64 3
  %845 = shufflevector <8 x i32> %826, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %846 = sext <4 x i32> %845 to <4 x i64>
  %847 = extractelement <4 x i64> %846, i64 0
  %848 = getelementptr inbounds float, ptr %f0.host, i64 %847
  %849 = load float, ptr %848, align 4, !tbaa !6
  %850 = insertelement <8 x float> %844, float %849, i64 4
  %851 = extractelement <4 x i64> %846, i64 1
  %852 = getelementptr inbounds float, ptr %f0.host, i64 %851
  %853 = load float, ptr %852, align 4, !tbaa !6
  %854 = insertelement <8 x float> %850, float %853, i64 5
  %855 = extractelement <4 x i64> %846, i64 2
  %856 = getelementptr inbounds float, ptr %f0.host, i64 %855
  %857 = load float, ptr %856, align 4, !tbaa !6
  %858 = insertelement <8 x float> %854, float %857, i64 6
  %859 = extractelement <4 x i64> %846, i64 3
  %860 = getelementptr inbounds float, ptr %f0.host, i64 %859
  %861 = load float, ptr %860, align 4, !tbaa !6
  %862 = insertelement <8 x float> %858, float %861, i64 7
  %863 = fsub <8 x float> %t1975.us, %1749
  %864 = fmul <8 x float> %54, %863
  %865 = fadd <8 x float> %1749, %864
  %866 = fadd <8 x float> %865, %862
  %867 = fmul <8 x float> %49, %t1974.us
  %868 = fmul <8 x float> %867, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a335.us = fptosi <8 x float> %868 to <8 x i32>
  %a334.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a335.us)
  %869 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a334.us, <8 x i32> zeroinitializer)
  %870 = sub <8 x i32> %869, %1747
  %871 = add nsw <8 x i32> %870, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %872 = shufflevector <8 x i32> %871, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %873 = sext <4 x i32> %872 to <4 x i64>
  %874 = extractelement <4 x i64> %873, i64 0
  %875 = getelementptr inbounds float, ptr %f0.host, i64 %874
  %876 = load float, ptr %875, align 4, !tbaa !6
  %877 = insertelement <8 x float> undef, float %876, i64 0
  %878 = extractelement <4 x i64> %873, i64 1
  %879 = getelementptr inbounds float, ptr %f0.host, i64 %878
  %880 = load float, ptr %879, align 4, !tbaa !6
  %881 = insertelement <8 x float> %877, float %880, i64 1
  %882 = extractelement <4 x i64> %873, i64 2
  %883 = getelementptr inbounds float, ptr %f0.host, i64 %882
  %884 = load float, ptr %883, align 4, !tbaa !6
  %885 = insertelement <8 x float> %881, float %884, i64 2
  %886 = extractelement <4 x i64> %873, i64 3
  %887 = getelementptr inbounds float, ptr %f0.host, i64 %886
  %888 = load float, ptr %887, align 4, !tbaa !6
  %889 = insertelement <8 x float> %885, float %888, i64 3
  %890 = shufflevector <8 x i32> %871, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %891 = sext <4 x i32> %890 to <4 x i64>
  %892 = extractelement <4 x i64> %891, i64 0
  %893 = getelementptr inbounds float, ptr %f0.host, i64 %892
  %894 = load float, ptr %893, align 4, !tbaa !6
  %895 = insertelement <8 x float> %889, float %894, i64 4
  %896 = extractelement <4 x i64> %891, i64 1
  %897 = getelementptr inbounds float, ptr %f0.host, i64 %896
  %898 = load float, ptr %897, align 4, !tbaa !6
  %899 = insertelement <8 x float> %895, float %898, i64 5
  %900 = extractelement <4 x i64> %891, i64 2
  %901 = getelementptr inbounds float, ptr %f0.host, i64 %900
  %902 = load float, ptr %901, align 4, !tbaa !6
  %903 = insertelement <8 x float> %899, float %902, i64 6
  %904 = extractelement <4 x i64> %891, i64 3
  %905 = getelementptr inbounds float, ptr %f0.host, i64 %904
  %906 = load float, ptr %905, align 4, !tbaa !6
  %907 = insertelement <8 x float> %903, float %906, i64 7
  %908 = fsub <8 x float> %t1974.us, %1749
  %909 = fmul <8 x float> %54, %908
  %910 = fadd <8 x float> %1749, %909
  %911 = fadd <8 x float> %910, %907
  %912 = fadd <8 x float> %866, %911
  %913 = fmul <8 x float> %912, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %914 = fmul <8 x float> %49, %t1973.us
  %915 = fmul <8 x float> %914, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a337.us = fptosi <8 x float> %915 to <8 x i32>
  %a336.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a337.us)
  %916 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a336.us, <8 x i32> zeroinitializer)
  %917 = sub <8 x i32> %916, %1747
  %918 = add nsw <8 x i32> %917, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %919 = shufflevector <8 x i32> %918, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %920 = sext <4 x i32> %919 to <4 x i64>
  %921 = extractelement <4 x i64> %920, i64 0
  %922 = getelementptr inbounds float, ptr %f0.host, i64 %921
  %923 = load float, ptr %922, align 4, !tbaa !6
  %924 = insertelement <8 x float> undef, float %923, i64 0
  %925 = extractelement <4 x i64> %920, i64 1
  %926 = getelementptr inbounds float, ptr %f0.host, i64 %925
  %927 = load float, ptr %926, align 4, !tbaa !6
  %928 = insertelement <8 x float> %924, float %927, i64 1
  %929 = extractelement <4 x i64> %920, i64 2
  %930 = getelementptr inbounds float, ptr %f0.host, i64 %929
  %931 = load float, ptr %930, align 4, !tbaa !6
  %932 = insertelement <8 x float> %928, float %931, i64 2
  %933 = extractelement <4 x i64> %920, i64 3
  %934 = getelementptr inbounds float, ptr %f0.host, i64 %933
  %935 = load float, ptr %934, align 4, !tbaa !6
  %936 = insertelement <8 x float> %932, float %935, i64 3
  %937 = shufflevector <8 x i32> %918, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %938 = sext <4 x i32> %937 to <4 x i64>
  %939 = extractelement <4 x i64> %938, i64 0
  %940 = getelementptr inbounds float, ptr %f0.host, i64 %939
  %941 = load float, ptr %940, align 4, !tbaa !6
  %942 = insertelement <8 x float> %936, float %941, i64 4
  %943 = extractelement <4 x i64> %938, i64 1
  %944 = getelementptr inbounds float, ptr %f0.host, i64 %943
  %945 = load float, ptr %944, align 4, !tbaa !6
  %946 = insertelement <8 x float> %942, float %945, i64 5
  %947 = extractelement <4 x i64> %938, i64 2
  %948 = getelementptr inbounds float, ptr %f0.host, i64 %947
  %949 = load float, ptr %948, align 4, !tbaa !6
  %950 = insertelement <8 x float> %946, float %949, i64 6
  %951 = extractelement <4 x i64> %938, i64 3
  %952 = getelementptr inbounds float, ptr %f0.host, i64 %951
  %953 = load float, ptr %952, align 4, !tbaa !6
  %954 = insertelement <8 x float> %950, float %953, i64 7
  %955 = fsub <8 x float> %t1973.us, %1749
  %956 = fmul <8 x float> %54, %955
  %957 = fadd <8 x float> %1749, %956
  %958 = fadd <8 x float> %957, %954
  %959 = fadd <8 x float> %913, %958
  %960 = fadd <8 x float> %821, %959
  %961 = fmul <8 x float> %960, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %962 = fadd <8 x float> %776, %961
  %963 = fadd <8 x float> %406, %962
  %964 = fmul <8 x float> %963, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %964, ptr %lsr.iv11.us, align 4, !tbaa !44
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not7.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not7.us, label %"end for f4.s0.v3.v3.us", label %"for f4.s0.v3.v3.us"

"end for f4.s0.v3.v3.us":                         ; preds = %"for f4.s0.v3.v3.us", %"for f4.s0.v6.us"
  br i1 %44, label %"for f4.s0.v3.v31.preheader.us", label %"end for f4.s0.v3.v32.us", !prof !5

"end for f4.s0.v3.v32.us":                        ; preds = %"for f4.s0.v3.v31.preheader.us", %"end for f4.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %31
  %.not5.us = icmp eq i64 %indvars.iv.next, %79
  br i1 %.not5.us, label %"end for f4.s0.v6.loopexit.us", label %"for f4.s0.v6.us"

"for f4.s0.v3.v31.preheader.us":                  ; preds = %"end for f4.s0.v3.v3.us"
  %965 = load <8 x float>, ptr %88, align 4, !tbaa !42
  %966 = load <8 x float>, ptr %90, align 4, !tbaa !42
  %t1997.us = shufflevector <8 x float> %965, <8 x float> %966, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %967 = load <8 x float>, ptr %92, align 4, !tbaa !42
  %968 = load <8 x float>, ptr %94, align 4, !tbaa !42
  %t1998.us = shufflevector <8 x float> %967, <8 x float> %968, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t1999.us = shufflevector <8 x float> %967, <8 x float> %968, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %969 = load <8 x float>, ptr %96, align 4, !tbaa !42
  %970 = load <8 x float>, ptr %98, align 4, !tbaa !42
  %t2000.us = shufflevector <8 x float> %969, <8 x float> %970, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %971 = load <8 x float>, ptr %102, align 4, !tbaa !42
  %972 = load <8 x float>, ptr %104, align 4, !tbaa !42
  %t2002.us = shufflevector <8 x float> %971, <8 x float> %972, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %973 = load <8 x float>, ptr %106, align 4, !tbaa !42
  %974 = load <8 x float>, ptr %108, align 4, !tbaa !42
  %t2003.us = shufflevector <8 x float> %973, <8 x float> %974, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2004.us = shufflevector <8 x float> %973, <8 x float> %974, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %975 = load <8 x float>, ptr %110, align 4, !tbaa !42
  %976 = load <8 x float>, ptr %112, align 4, !tbaa !42
  %t2005.us = shufflevector <8 x float> %975, <8 x float> %976, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %977 = load <8 x float>, ptr %117, align 4, !tbaa !42
  %978 = load <8 x float>, ptr %119, align 4, !tbaa !42
  %t2007.us = shufflevector <8 x float> %977, <8 x float> %978, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %979 = load <8 x float>, ptr %121, align 4, !tbaa !42
  %980 = load <8 x float>, ptr %123, align 4, !tbaa !42
  %t2008.us = shufflevector <8 x float> %979, <8 x float> %980, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2009.us = shufflevector <8 x float> %979, <8 x float> %980, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %981 = load <8 x float>, ptr %125, align 4, !tbaa !42
  %982 = load <8 x float>, ptr %127, align 4, !tbaa !42
  %t2010.us = shufflevector <8 x float> %981, <8 x float> %982, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %983 = load <8 x float>, ptr %132, align 4, !tbaa !42
  %984 = load <8 x float>, ptr %134, align 4, !tbaa !42
  %t2012.us = shufflevector <8 x float> %983, <8 x float> %984, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %985 = load <8 x float>, ptr %136, align 4, !tbaa !42
  %986 = load <8 x float>, ptr %138, align 4, !tbaa !42
  %t2013.us = shufflevector <8 x float> %985, <8 x float> %986, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %t2014.us = shufflevector <8 x float> %985, <8 x float> %986, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %987 = load <8 x float>, ptr %140, align 4, !tbaa !42
  %988 = load <8 x float>, ptr %142, align 4, !tbaa !42
  %t2015.us = shufflevector <8 x float> %987, <8 x float> %988, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %989 = trunc i64 %indvars.iv to i32
  %990 = sitofp i32 %989 to float
  %t2016.s.us = fmul float %47, %990
  %991 = shl nsw i32 %989, 8
  %992 = fmul <8 x float> %49, %t2015.us
  %993 = fmul <8 x float> %992, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a342.us = fptosi <8 x float> %993 to <8 x i32>
  %a341.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a342.us)
  %994 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a341.us, <8 x i32> zeroinitializer)
  %.scalar = add i32 %991, %f0.v3.min_realized.s
  %995 = insertelement <8 x i32> undef, i32 %.scalar, i64 0
  %996 = shufflevector <8 x i32> %995, <8 x i32> poison, <8 x i32> zeroinitializer
  %997 = sub <8 x i32> %994, %996
  %998 = add nsw <8 x i32> %997, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %999 = shufflevector <8 x i32> %998, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1000 = sext <4 x i32> %999 to <4 x i64>
  %1001 = extractelement <4 x i64> %1000, i64 0
  %1002 = getelementptr inbounds float, ptr %f0.host, i64 %1001
  %1003 = load float, ptr %1002, align 4, !tbaa !6
  %1004 = insertelement <8 x float> undef, float %1003, i64 0
  %1005 = extractelement <4 x i64> %1000, i64 1
  %1006 = getelementptr inbounds float, ptr %f0.host, i64 %1005
  %1007 = load float, ptr %1006, align 4, !tbaa !6
  %1008 = insertelement <8 x float> %1004, float %1007, i64 1
  %1009 = extractelement <4 x i64> %1000, i64 2
  %1010 = getelementptr inbounds float, ptr %f0.host, i64 %1009
  %1011 = load float, ptr %1010, align 4, !tbaa !6
  %1012 = insertelement <8 x float> %1008, float %1011, i64 2
  %1013 = extractelement <4 x i64> %1000, i64 3
  %1014 = getelementptr inbounds float, ptr %f0.host, i64 %1013
  %1015 = load float, ptr %1014, align 4, !tbaa !6
  %1016 = insertelement <8 x float> %1012, float %1015, i64 3
  %1017 = shufflevector <8 x i32> %998, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1018 = sext <4 x i32> %1017 to <4 x i64>
  %1019 = extractelement <4 x i64> %1018, i64 0
  %1020 = getelementptr inbounds float, ptr %f0.host, i64 %1019
  %1021 = load float, ptr %1020, align 4, !tbaa !6
  %1022 = insertelement <8 x float> %1016, float %1021, i64 4
  %1023 = extractelement <4 x i64> %1018, i64 1
  %1024 = getelementptr inbounds float, ptr %f0.host, i64 %1023
  %1025 = load float, ptr %1024, align 4, !tbaa !6
  %1026 = insertelement <8 x float> %1022, float %1025, i64 5
  %1027 = extractelement <4 x i64> %1018, i64 2
  %1028 = getelementptr inbounds float, ptr %f0.host, i64 %1027
  %1029 = load float, ptr %1028, align 4, !tbaa !6
  %1030 = insertelement <8 x float> %1026, float %1029, i64 6
  %1031 = extractelement <4 x i64> %1018, i64 3
  %1032 = getelementptr inbounds float, ptr %f0.host, i64 %1031
  %1033 = load float, ptr %1032, align 4, !tbaa !6
  %1034 = insertelement <8 x float> %1030, float %1033, i64 7
  %1035 = insertelement <8 x float> undef, float %t2016.s.us, i64 0
  %1036 = shufflevector <8 x float> %1035, <8 x float> undef, <8 x i32> zeroinitializer
  %1037 = fsub <8 x float> %t2015.us, %1036
  %1038 = fmul <8 x float> %54, %1037
  %1039 = fadd <8 x float> %1036, %1038
  %1040 = fadd <8 x float> %1039, %1034
  %1041 = fmul <8 x float> %49, %t2014.us
  %1042 = fmul <8 x float> %1041, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a344.us = fptosi <8 x float> %1042 to <8 x i32>
  %a343.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a344.us)
  %1043 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a343.us, <8 x i32> zeroinitializer)
  %1044 = sub <8 x i32> %1043, %996
  %1045 = add nsw <8 x i32> %1044, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1046 = shufflevector <8 x i32> %1045, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1047 = sext <4 x i32> %1046 to <4 x i64>
  %1048 = extractelement <4 x i64> %1047, i64 0
  %1049 = getelementptr inbounds float, ptr %f0.host, i64 %1048
  %1050 = load float, ptr %1049, align 4, !tbaa !6
  %1051 = insertelement <8 x float> undef, float %1050, i64 0
  %1052 = extractelement <4 x i64> %1047, i64 1
  %1053 = getelementptr inbounds float, ptr %f0.host, i64 %1052
  %1054 = load float, ptr %1053, align 4, !tbaa !6
  %1055 = insertelement <8 x float> %1051, float %1054, i64 1
  %1056 = extractelement <4 x i64> %1047, i64 2
  %1057 = getelementptr inbounds float, ptr %f0.host, i64 %1056
  %1058 = load float, ptr %1057, align 4, !tbaa !6
  %1059 = insertelement <8 x float> %1055, float %1058, i64 2
  %1060 = extractelement <4 x i64> %1047, i64 3
  %1061 = getelementptr inbounds float, ptr %f0.host, i64 %1060
  %1062 = load float, ptr %1061, align 4, !tbaa !6
  %1063 = insertelement <8 x float> %1059, float %1062, i64 3
  %1064 = shufflevector <8 x i32> %1045, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1065 = sext <4 x i32> %1064 to <4 x i64>
  %1066 = extractelement <4 x i64> %1065, i64 0
  %1067 = getelementptr inbounds float, ptr %f0.host, i64 %1066
  %1068 = load float, ptr %1067, align 4, !tbaa !6
  %1069 = insertelement <8 x float> %1063, float %1068, i64 4
  %1070 = extractelement <4 x i64> %1065, i64 1
  %1071 = getelementptr inbounds float, ptr %f0.host, i64 %1070
  %1072 = load float, ptr %1071, align 4, !tbaa !6
  %1073 = insertelement <8 x float> %1069, float %1072, i64 5
  %1074 = extractelement <4 x i64> %1065, i64 2
  %1075 = getelementptr inbounds float, ptr %f0.host, i64 %1074
  %1076 = load float, ptr %1075, align 4, !tbaa !6
  %1077 = insertelement <8 x float> %1073, float %1076, i64 6
  %1078 = extractelement <4 x i64> %1065, i64 3
  %1079 = getelementptr inbounds float, ptr %f0.host, i64 %1078
  %1080 = load float, ptr %1079, align 4, !tbaa !6
  %1081 = insertelement <8 x float> %1077, float %1080, i64 7
  %1082 = fsub <8 x float> %t2014.us, %1036
  %1083 = fmul <8 x float> %54, %1082
  %1084 = fadd <8 x float> %1036, %1083
  %1085 = fadd <8 x float> %1084, %1081
  %1086 = fmul <8 x float> %49, %t2013.us
  %1087 = fmul <8 x float> %1086, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a346.us = fptosi <8 x float> %1087 to <8 x i32>
  %a345.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a346.us)
  %1088 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a345.us, <8 x i32> zeroinitializer)
  %1089 = sub <8 x i32> %1088, %996
  %1090 = add nsw <8 x i32> %1089, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1091 = shufflevector <8 x i32> %1090, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1092 = sext <4 x i32> %1091 to <4 x i64>
  %1093 = extractelement <4 x i64> %1092, i64 0
  %1094 = getelementptr inbounds float, ptr %f0.host, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !6
  %1096 = insertelement <8 x float> undef, float %1095, i64 0
  %1097 = extractelement <4 x i64> %1092, i64 1
  %1098 = getelementptr inbounds float, ptr %f0.host, i64 %1097
  %1099 = load float, ptr %1098, align 4, !tbaa !6
  %1100 = insertelement <8 x float> %1096, float %1099, i64 1
  %1101 = extractelement <4 x i64> %1092, i64 2
  %1102 = getelementptr inbounds float, ptr %f0.host, i64 %1101
  %1103 = load float, ptr %1102, align 4, !tbaa !6
  %1104 = insertelement <8 x float> %1100, float %1103, i64 2
  %1105 = extractelement <4 x i64> %1092, i64 3
  %1106 = getelementptr inbounds float, ptr %f0.host, i64 %1105
  %1107 = load float, ptr %1106, align 4, !tbaa !6
  %1108 = insertelement <8 x float> %1104, float %1107, i64 3
  %1109 = shufflevector <8 x i32> %1090, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1110 = sext <4 x i32> %1109 to <4 x i64>
  %1111 = extractelement <4 x i64> %1110, i64 0
  %1112 = getelementptr inbounds float, ptr %f0.host, i64 %1111
  %1113 = load float, ptr %1112, align 4, !tbaa !6
  %1114 = insertelement <8 x float> %1108, float %1113, i64 4
  %1115 = extractelement <4 x i64> %1110, i64 1
  %1116 = getelementptr inbounds float, ptr %f0.host, i64 %1115
  %1117 = load float, ptr %1116, align 4, !tbaa !6
  %1118 = insertelement <8 x float> %1114, float %1117, i64 5
  %1119 = extractelement <4 x i64> %1110, i64 2
  %1120 = getelementptr inbounds float, ptr %f0.host, i64 %1119
  %1121 = load float, ptr %1120, align 4, !tbaa !6
  %1122 = insertelement <8 x float> %1118, float %1121, i64 6
  %1123 = extractelement <4 x i64> %1110, i64 3
  %1124 = getelementptr inbounds float, ptr %f0.host, i64 %1123
  %1125 = load float, ptr %1124, align 4, !tbaa !6
  %1126 = insertelement <8 x float> %1122, float %1125, i64 7
  %1127 = fsub <8 x float> %t2013.us, %1036
  %1128 = fmul <8 x float> %54, %1127
  %1129 = fadd <8 x float> %1036, %1128
  %1130 = fadd <8 x float> %1129, %1126
  %1131 = fadd <8 x float> %1085, %1130
  %1132 = fmul <8 x float> %1131, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1133 = fmul <8 x float> %49, %t2012.us
  %1134 = fmul <8 x float> %1133, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a348.us = fptosi <8 x float> %1134 to <8 x i32>
  %a347.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a348.us)
  %1135 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a347.us, <8 x i32> zeroinitializer)
  %1136 = sub <8 x i32> %1135, %996
  %1137 = add nsw <8 x i32> %1136, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1138 = shufflevector <8 x i32> %1137, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1139 = sext <4 x i32> %1138 to <4 x i64>
  %1140 = extractelement <4 x i64> %1139, i64 0
  %1141 = getelementptr inbounds float, ptr %f0.host, i64 %1140
  %1142 = load float, ptr %1141, align 4, !tbaa !6
  %1143 = insertelement <8 x float> undef, float %1142, i64 0
  %1144 = extractelement <4 x i64> %1139, i64 1
  %1145 = getelementptr inbounds float, ptr %f0.host, i64 %1144
  %1146 = load float, ptr %1145, align 4, !tbaa !6
  %1147 = insertelement <8 x float> %1143, float %1146, i64 1
  %1148 = extractelement <4 x i64> %1139, i64 2
  %1149 = getelementptr inbounds float, ptr %f0.host, i64 %1148
  %1150 = load float, ptr %1149, align 4, !tbaa !6
  %1151 = insertelement <8 x float> %1147, float %1150, i64 2
  %1152 = extractelement <4 x i64> %1139, i64 3
  %1153 = getelementptr inbounds float, ptr %f0.host, i64 %1152
  %1154 = load float, ptr %1153, align 4, !tbaa !6
  %1155 = insertelement <8 x float> %1151, float %1154, i64 3
  %1156 = shufflevector <8 x i32> %1137, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1157 = sext <4 x i32> %1156 to <4 x i64>
  %1158 = extractelement <4 x i64> %1157, i64 0
  %1159 = getelementptr inbounds float, ptr %f0.host, i64 %1158
  %1160 = load float, ptr %1159, align 4, !tbaa !6
  %1161 = insertelement <8 x float> %1155, float %1160, i64 4
  %1162 = extractelement <4 x i64> %1157, i64 1
  %1163 = getelementptr inbounds float, ptr %f0.host, i64 %1162
  %1164 = load float, ptr %1163, align 4, !tbaa !6
  %1165 = insertelement <8 x float> %1161, float %1164, i64 5
  %1166 = extractelement <4 x i64> %1157, i64 2
  %1167 = getelementptr inbounds float, ptr %f0.host, i64 %1166
  %1168 = load float, ptr %1167, align 4, !tbaa !6
  %1169 = insertelement <8 x float> %1165, float %1168, i64 6
  %1170 = extractelement <4 x i64> %1157, i64 3
  %1171 = getelementptr inbounds float, ptr %f0.host, i64 %1170
  %1172 = load float, ptr %1171, align 4, !tbaa !6
  %1173 = insertelement <8 x float> %1169, float %1172, i64 7
  %1174 = fsub <8 x float> %t2012.us, %1036
  %1175 = fmul <8 x float> %54, %1174
  %1176 = fadd <8 x float> %1036, %1175
  %1177 = fadd <8 x float> %1176, %1173
  %1178 = fadd <8 x float> %1132, %1177
  %1179 = fadd <8 x float> %1040, %1178
  %1180 = fmul <8 x float> %49, %t2010.us
  %1181 = fmul <8 x float> %1180, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a350.us = fptosi <8 x float> %1181 to <8 x i32>
  %a349.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a350.us)
  %1182 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a349.us, <8 x i32> zeroinitializer)
  %1183 = sub <8 x i32> %1182, %996
  %1184 = add nsw <8 x i32> %1183, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1185 = shufflevector <8 x i32> %1184, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1186 = sext <4 x i32> %1185 to <4 x i64>
  %1187 = extractelement <4 x i64> %1186, i64 0
  %1188 = getelementptr inbounds float, ptr %f0.host, i64 %1187
  %1189 = load float, ptr %1188, align 4, !tbaa !6
  %1190 = extractelement <4 x i64> %1186, i64 1
  %1191 = getelementptr inbounds float, ptr %f0.host, i64 %1190
  %1192 = load float, ptr %1191, align 4, !tbaa !6
  %1193 = extractelement <4 x i64> %1186, i64 2
  %1194 = getelementptr inbounds float, ptr %f0.host, i64 %1193
  %1195 = load float, ptr %1194, align 4, !tbaa !6
  %1196 = extractelement <4 x i64> %1186, i64 3
  %1197 = getelementptr inbounds float, ptr %f0.host, i64 %1196
  %1198 = load float, ptr %1197, align 4, !tbaa !6
  %1199 = shufflevector <8 x i32> %1184, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1200 = sext <4 x i32> %1199 to <4 x i64>
  %1201 = extractelement <4 x i64> %1200, i64 0
  %1202 = getelementptr inbounds float, ptr %f0.host, i64 %1201
  %1203 = load float, ptr %1202, align 4, !tbaa !6
  %1204 = extractelement <4 x i64> %1200, i64 1
  %1205 = getelementptr inbounds float, ptr %f0.host, i64 %1204
  %1206 = load float, ptr %1205, align 4, !tbaa !6
  %1207 = extractelement <4 x i64> %1200, i64 2
  %1208 = getelementptr inbounds float, ptr %f0.host, i64 %1207
  %1209 = load float, ptr %1208, align 4, !tbaa !6
  %1210 = extractelement <4 x i64> %1200, i64 3
  %1211 = getelementptr inbounds float, ptr %f0.host, i64 %1210
  %1212 = load float, ptr %1211, align 4, !tbaa !6
  %1213 = fsub <8 x float> %t2010.us, %1036
  %1214 = fmul <8 x float> %54, %1213
  %1215 = fadd <8 x float> %1036, %1214
  %1216 = fmul <8 x float> %49, %t2009.us
  %1217 = fmul <8 x float> %1216, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a352.us = fptosi <8 x float> %1217 to <8 x i32>
  %a351.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a352.us)
  %1218 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a351.us, <8 x i32> zeroinitializer)
  %1219 = sub <8 x i32> %1218, %996
  %1220 = add nsw <8 x i32> %1219, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1221 = shufflevector <8 x i32> %1220, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1222 = sext <4 x i32> %1221 to <4 x i64>
  %1223 = extractelement <4 x i64> %1222, i64 0
  %1224 = getelementptr inbounds float, ptr %f0.host, i64 %1223
  %1225 = load float, ptr %1224, align 4, !tbaa !6
  %1226 = insertelement <8 x float> undef, float %1225, i64 0
  %1227 = extractelement <4 x i64> %1222, i64 1
  %1228 = getelementptr inbounds float, ptr %f0.host, i64 %1227
  %1229 = load float, ptr %1228, align 4, !tbaa !6
  %1230 = insertelement <8 x float> %1226, float %1229, i64 1
  %1231 = extractelement <4 x i64> %1222, i64 2
  %1232 = getelementptr inbounds float, ptr %f0.host, i64 %1231
  %1233 = load float, ptr %1232, align 4, !tbaa !6
  %1234 = insertelement <8 x float> %1230, float %1233, i64 2
  %1235 = extractelement <4 x i64> %1222, i64 3
  %1236 = getelementptr inbounds float, ptr %f0.host, i64 %1235
  %1237 = load float, ptr %1236, align 4, !tbaa !6
  %1238 = insertelement <8 x float> %1234, float %1237, i64 3
  %1239 = shufflevector <8 x i32> %1220, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1240 = sext <4 x i32> %1239 to <4 x i64>
  %1241 = extractelement <4 x i64> %1240, i64 0
  %1242 = getelementptr inbounds float, ptr %f0.host, i64 %1241
  %1243 = load float, ptr %1242, align 4, !tbaa !6
  %1244 = insertelement <8 x float> %1238, float %1243, i64 4
  %1245 = extractelement <4 x i64> %1240, i64 1
  %1246 = getelementptr inbounds float, ptr %f0.host, i64 %1245
  %1247 = load float, ptr %1246, align 4, !tbaa !6
  %1248 = insertelement <8 x float> %1244, float %1247, i64 5
  %1249 = extractelement <4 x i64> %1240, i64 2
  %1250 = getelementptr inbounds float, ptr %f0.host, i64 %1249
  %1251 = load float, ptr %1250, align 4, !tbaa !6
  %1252 = insertelement <8 x float> %1248, float %1251, i64 6
  %1253 = extractelement <4 x i64> %1240, i64 3
  %1254 = getelementptr inbounds float, ptr %f0.host, i64 %1253
  %1255 = load float, ptr %1254, align 4, !tbaa !6
  %1256 = insertelement <8 x float> %1252, float %1255, i64 7
  %1257 = fsub <8 x float> %t2009.us, %1036
  %1258 = fmul <8 x float> %54, %1257
  %1259 = fadd <8 x float> %1036, %1258
  %1260 = fadd <8 x float> %1259, %1256
  %1261 = fmul <8 x float> %49, %t2008.us
  %1262 = fmul <8 x float> %1261, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a354.us = fptosi <8 x float> %1262 to <8 x i32>
  %a353.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a354.us)
  %1263 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a353.us, <8 x i32> zeroinitializer)
  %1264 = sub <8 x i32> %1263, %996
  %1265 = add nsw <8 x i32> %1264, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1266 = shufflevector <8 x i32> %1265, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1267 = sext <4 x i32> %1266 to <4 x i64>
  %1268 = extractelement <4 x i64> %1267, i64 0
  %1269 = getelementptr inbounds float, ptr %f0.host, i64 %1268
  %1270 = load float, ptr %1269, align 4, !tbaa !6
  %1271 = insertelement <8 x float> undef, float %1270, i64 0
  %1272 = extractelement <4 x i64> %1267, i64 1
  %1273 = getelementptr inbounds float, ptr %f0.host, i64 %1272
  %1274 = load float, ptr %1273, align 4, !tbaa !6
  %1275 = insertelement <8 x float> %1271, float %1274, i64 1
  %1276 = extractelement <4 x i64> %1267, i64 2
  %1277 = getelementptr inbounds float, ptr %f0.host, i64 %1276
  %1278 = load float, ptr %1277, align 4, !tbaa !6
  %1279 = insertelement <8 x float> %1275, float %1278, i64 2
  %1280 = extractelement <4 x i64> %1267, i64 3
  %1281 = getelementptr inbounds float, ptr %f0.host, i64 %1280
  %1282 = load float, ptr %1281, align 4, !tbaa !6
  %1283 = insertelement <8 x float> %1279, float %1282, i64 3
  %1284 = shufflevector <8 x i32> %1265, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1285 = sext <4 x i32> %1284 to <4 x i64>
  %1286 = extractelement <4 x i64> %1285, i64 0
  %1287 = getelementptr inbounds float, ptr %f0.host, i64 %1286
  %1288 = load float, ptr %1287, align 4, !tbaa !6
  %1289 = insertelement <8 x float> %1283, float %1288, i64 4
  %1290 = extractelement <4 x i64> %1285, i64 1
  %1291 = getelementptr inbounds float, ptr %f0.host, i64 %1290
  %1292 = load float, ptr %1291, align 4, !tbaa !6
  %1293 = insertelement <8 x float> %1289, float %1292, i64 5
  %1294 = extractelement <4 x i64> %1285, i64 2
  %1295 = getelementptr inbounds float, ptr %f0.host, i64 %1294
  %1296 = load float, ptr %1295, align 4, !tbaa !6
  %1297 = insertelement <8 x float> %1293, float %1296, i64 6
  %1298 = extractelement <4 x i64> %1285, i64 3
  %1299 = getelementptr inbounds float, ptr %f0.host, i64 %1298
  %1300 = load float, ptr %1299, align 4, !tbaa !6
  %1301 = insertelement <8 x float> %1297, float %1300, i64 7
  %1302 = fsub <8 x float> %t2008.us, %1036
  %1303 = fmul <8 x float> %54, %1302
  %1304 = fadd <8 x float> %1036, %1303
  %1305 = fadd <8 x float> %1304, %1301
  %1306 = fadd <8 x float> %1260, %1305
  %1307 = fmul <8 x float> %1306, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1308 = fmul <8 x float> %49, %t2007.us
  %1309 = fmul <8 x float> %1308, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a356.us = fptosi <8 x float> %1309 to <8 x i32>
  %a355.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a356.us)
  %1310 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a355.us, <8 x i32> zeroinitializer)
  %1311 = sub <8 x i32> %1310, %996
  %1312 = add nsw <8 x i32> %1311, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1313 = shufflevector <8 x i32> %1312, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1314 = sext <4 x i32> %1313 to <4 x i64>
  %1315 = extractelement <4 x i64> %1314, i64 0
  %1316 = getelementptr inbounds float, ptr %f0.host, i64 %1315
  %1317 = load float, ptr %1316, align 4, !tbaa !6
  %1318 = insertelement <8 x float> undef, float %1317, i64 0
  %1319 = extractelement <4 x i64> %1314, i64 1
  %1320 = getelementptr inbounds float, ptr %f0.host, i64 %1319
  %1321 = load float, ptr %1320, align 4, !tbaa !6
  %1322 = insertelement <8 x float> %1318, float %1321, i64 1
  %1323 = extractelement <4 x i64> %1314, i64 2
  %1324 = getelementptr inbounds float, ptr %f0.host, i64 %1323
  %1325 = load float, ptr %1324, align 4, !tbaa !6
  %1326 = insertelement <8 x float> %1322, float %1325, i64 2
  %1327 = extractelement <4 x i64> %1314, i64 3
  %1328 = getelementptr inbounds float, ptr %f0.host, i64 %1327
  %1329 = load float, ptr %1328, align 4, !tbaa !6
  %1330 = insertelement <8 x float> %1326, float %1329, i64 3
  %1331 = shufflevector <8 x i32> %1312, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1332 = sext <4 x i32> %1331 to <4 x i64>
  %1333 = extractelement <4 x i64> %1332, i64 0
  %1334 = getelementptr inbounds float, ptr %f0.host, i64 %1333
  %1335 = load float, ptr %1334, align 4, !tbaa !6
  %1336 = insertelement <8 x float> %1330, float %1335, i64 4
  %1337 = extractelement <4 x i64> %1332, i64 1
  %1338 = getelementptr inbounds float, ptr %f0.host, i64 %1337
  %1339 = load float, ptr %1338, align 4, !tbaa !6
  %1340 = insertelement <8 x float> %1336, float %1339, i64 5
  %1341 = extractelement <4 x i64> %1332, i64 2
  %1342 = getelementptr inbounds float, ptr %f0.host, i64 %1341
  %1343 = load float, ptr %1342, align 4, !tbaa !6
  %1344 = insertelement <8 x float> %1340, float %1343, i64 6
  %1345 = extractelement <4 x i64> %1332, i64 3
  %1346 = getelementptr inbounds float, ptr %f0.host, i64 %1345
  %1347 = load float, ptr %1346, align 4, !tbaa !6
  %1348 = insertelement <8 x float> %1344, float %1347, i64 7
  %1349 = fsub <8 x float> %t2007.us, %1036
  %1350 = fmul <8 x float> %54, %1349
  %1351 = fadd <8 x float> %1036, %1350
  %1352 = fadd <8 x float> %1351, %1348
  %1353 = fadd <8 x float> %1307, %1352
  %1354 = fmul <8 x float> %49, %t2005.us
  %1355 = fmul <8 x float> %1354, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a358.us = fptosi <8 x float> %1355 to <8 x i32>
  %a357.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a358.us)
  %1356 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a357.us, <8 x i32> zeroinitializer)
  %1357 = sub <8 x i32> %1356, %996
  %1358 = add nsw <8 x i32> %1357, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1359 = shufflevector <8 x i32> %1358, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1360 = sext <4 x i32> %1359 to <4 x i64>
  %1361 = extractelement <4 x i64> %1360, i64 0
  %1362 = getelementptr inbounds float, ptr %f0.host, i64 %1361
  %1363 = load float, ptr %1362, align 4, !tbaa !6
  %1364 = extractelement <4 x i64> %1360, i64 1
  %1365 = getelementptr inbounds float, ptr %f0.host, i64 %1364
  %1366 = load float, ptr %1365, align 4, !tbaa !6
  %1367 = extractelement <4 x i64> %1360, i64 2
  %1368 = getelementptr inbounds float, ptr %f0.host, i64 %1367
  %1369 = load float, ptr %1368, align 4, !tbaa !6
  %1370 = extractelement <4 x i64> %1360, i64 3
  %1371 = getelementptr inbounds float, ptr %f0.host, i64 %1370
  %1372 = load float, ptr %1371, align 4, !tbaa !6
  %1373 = shufflevector <8 x i32> %1358, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1374 = sext <4 x i32> %1373 to <4 x i64>
  %1375 = extractelement <4 x i64> %1374, i64 0
  %1376 = getelementptr inbounds float, ptr %f0.host, i64 %1375
  %1377 = load float, ptr %1376, align 4, !tbaa !6
  %1378 = extractelement <4 x i64> %1374, i64 1
  %1379 = getelementptr inbounds float, ptr %f0.host, i64 %1378
  %1380 = load float, ptr %1379, align 4, !tbaa !6
  %1381 = extractelement <4 x i64> %1374, i64 2
  %1382 = getelementptr inbounds float, ptr %f0.host, i64 %1381
  %1383 = load float, ptr %1382, align 4, !tbaa !6
  %1384 = extractelement <4 x i64> %1374, i64 3
  %1385 = getelementptr inbounds float, ptr %f0.host, i64 %1384
  %1386 = load float, ptr %1385, align 4, !tbaa !6
  %1387 = fsub <8 x float> %t2005.us, %1036
  %1388 = fmul <8 x float> %54, %1387
  %1389 = fadd <8 x float> %1036, %1388
  %1390 = fmul <8 x float> %49, %t2004.us
  %1391 = fmul <8 x float> %1390, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a360.us = fptosi <8 x float> %1391 to <8 x i32>
  %a359.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a360.us)
  %1392 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a359.us, <8 x i32> zeroinitializer)
  %1393 = sub <8 x i32> %1392, %996
  %1394 = add nsw <8 x i32> %1393, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1395 = shufflevector <8 x i32> %1394, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1396 = sext <4 x i32> %1395 to <4 x i64>
  %1397 = extractelement <4 x i64> %1396, i64 0
  %1398 = getelementptr inbounds float, ptr %f0.host, i64 %1397
  %1399 = load float, ptr %1398, align 4, !tbaa !6
  %1400 = extractelement <4 x i64> %1396, i64 1
  %1401 = getelementptr inbounds float, ptr %f0.host, i64 %1400
  %1402 = load float, ptr %1401, align 4, !tbaa !6
  %1403 = extractelement <4 x i64> %1396, i64 2
  %1404 = getelementptr inbounds float, ptr %f0.host, i64 %1403
  %1405 = load float, ptr %1404, align 4, !tbaa !6
  %1406 = extractelement <4 x i64> %1396, i64 3
  %1407 = getelementptr inbounds float, ptr %f0.host, i64 %1406
  %1408 = load float, ptr %1407, align 4, !tbaa !6
  %1409 = shufflevector <8 x i32> %1394, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1410 = sext <4 x i32> %1409 to <4 x i64>
  %1411 = fsub <8 x float> %t2004.us, %1036
  %1412 = fmul <8 x float> %54, %1411
  %1413 = fmul <8 x float> %49, %t2003.us
  %1414 = fmul <8 x float> %1413, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a362.us = fptosi <8 x float> %1414 to <8 x i32>
  %a361.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a362.us)
  %1415 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a361.us, <8 x i32> zeroinitializer)
  %1416 = sub <8 x i32> %1415, %996
  %1417 = add nsw <8 x i32> %1416, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1418 = shufflevector <8 x i32> %1417, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1419 = sext <4 x i32> %1418 to <4 x i64>
  %1420 = shufflevector <8 x i32> %1417, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1421 = sext <4 x i32> %1420 to <4 x i64>
  %1422 = fsub <8 x float> %t2003.us, %1036
  %1423 = fmul <8 x float> %54, %1422
  %1424 = fmul <8 x float> %49, %t2002.us
  %1425 = fmul <8 x float> %1424, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a364.us = fptosi <8 x float> %1425 to <8 x i32>
  %a363.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a364.us)
  %1426 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a363.us, <8 x i32> zeroinitializer)
  %1427 = sub <8 x i32> %1426, %996
  %1428 = add nsw <8 x i32> %1427, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1429 = shufflevector <8 x i32> %1428, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1430 = sext <4 x i32> %1429 to <4 x i64>
  %1431 = shufflevector <8 x i32> %1428, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1432 = sext <4 x i32> %1431 to <4 x i64>
  %1433 = fsub <8 x float> %t2002.us, %1036
  %1434 = fmul <8 x float> %54, %1433
  %1435 = fmul <8 x float> %49, %t2000.us
  %1436 = fmul <8 x float> %1435, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a366.us = fptosi <8 x float> %1436 to <8 x i32>
  %a365.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a366.us)
  %1437 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a365.us, <8 x i32> zeroinitializer)
  %1438 = sub <8 x i32> %1437, %996
  %1439 = add nsw <8 x i32> %1438, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1440 = shufflevector <8 x i32> %1439, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1441 = sext <4 x i32> %1440 to <4 x i64>
  %1442 = shufflevector <8 x i32> %1439, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1443 = sext <4 x i32> %1442 to <4 x i64>
  %1444 = fsub <8 x float> %t2000.us, %1036
  %1445 = fmul <8 x float> %54, %1444
  %1446 = fmul <8 x float> %49, %t1999.us
  %1447 = fmul <8 x float> %1446, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a368.us = fptosi <8 x float> %1447 to <8 x i32>
  %a367.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a368.us)
  %1448 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a367.us, <8 x i32> zeroinitializer)
  %1449 = sub <8 x i32> %1448, %996
  %1450 = add nsw <8 x i32> %1449, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1451 = shufflevector <8 x i32> %1450, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1452 = sext <4 x i32> %1451 to <4 x i64>
  %1453 = shufflevector <8 x i32> %1450, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1454 = sext <4 x i32> %1453 to <4 x i64>
  %1455 = fsub <8 x float> %t1999.us, %1036
  %1456 = fmul <8 x float> %54, %1455
  %1457 = fmul <8 x float> %49, %t1998.us
  %1458 = fmul <8 x float> %1457, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a370.us = fptosi <8 x float> %1458 to <8 x i32>
  %a369.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a370.us)
  %1459 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a369.us, <8 x i32> zeroinitializer)
  %1460 = sub <8 x i32> %1459, %996
  %1461 = add nsw <8 x i32> %1460, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1462 = shufflevector <8 x i32> %1461, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1463 = sext <4 x i32> %1462 to <4 x i64>
  %1464 = shufflevector <8 x i32> %1461, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1465 = sext <4 x i32> %1464 to <4 x i64>
  %1466 = fsub <8 x float> %t1998.us, %1036
  %1467 = fmul <8 x float> %54, %1466
  %1468 = fmul <8 x float> %49, %t1997.us
  %1469 = fmul <8 x float> %1468, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a372.us = fptosi <8 x float> %1469 to <8 x i32>
  %a371.us = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b309, <8 x i32> %a372.us)
  %1470 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a371.us, <8 x i32> zeroinitializer)
  %1471 = sub <8 x i32> %1470, %996
  %1472 = add nsw <8 x i32> %1471, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %1473 = shufflevector <8 x i32> %1472, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1474 = sext <4 x i32> %1473 to <4 x i64>
  %1475 = shufflevector <8 x i32> %1472, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1476 = sext <4 x i32> %1475 to <4 x i64>
  %1477 = fsub <8 x float> %t1997.us, %1036
  %1478 = fmul <8 x float> %54, %1477
  %1479 = sub nuw nsw i64 %indvars.iv, %smax
  %1480 = mul nsw i64 %1479, %28
  %1481 = add i64 %145, %1480
  %1482 = fmul <8 x float> %1179, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1483 = insertelement <8 x float> undef, float %1189, i64 0
  %1484 = insertelement <8 x float> %1483, float %1192, i64 1
  %1485 = insertelement <8 x float> %1484, float %1195, i64 2
  %1486 = insertelement <8 x float> %1485, float %1198, i64 3
  %1487 = insertelement <8 x float> %1486, float %1203, i64 4
  %1488 = insertelement <8 x float> %1487, float %1206, i64 5
  %1489 = insertelement <8 x float> %1488, float %1209, i64 6
  %1490 = insertelement <8 x float> %1489, float %1212, i64 7
  %1491 = fadd <8 x float> %1215, %1490
  %1492 = fadd <8 x float> %1491, %1353
  %1493 = insertelement <8 x float> undef, float %1363, i64 0
  %1494 = insertelement <8 x float> %1493, float %1366, i64 1
  %1495 = insertelement <8 x float> %1494, float %1369, i64 2
  %1496 = insertelement <8 x float> %1495, float %1372, i64 3
  %1497 = insertelement <8 x float> %1496, float %1377, i64 4
  %1498 = insertelement <8 x float> %1497, float %1380, i64 5
  %1499 = insertelement <8 x float> %1498, float %1383, i64 6
  %1500 = insertelement <8 x float> %1499, float %1386, i64 7
  %1501 = fadd <8 x float> %1389, %1500
  %1502 = insertelement <8 x float> undef, float %1399, i64 0
  %1503 = insertelement <8 x float> %1502, float %1402, i64 1
  %1504 = insertelement <8 x float> %1503, float %1405, i64 2
  %1505 = insertelement <8 x float> %1504, float %1408, i64 3
  %1506 = extractelement <4 x i64> %1410, i64 0
  %1507 = getelementptr inbounds float, ptr %f0.host, i64 %1506
  %1508 = extractelement <4 x i64> %1410, i64 1
  %1509 = getelementptr inbounds float, ptr %f0.host, i64 %1508
  %1510 = extractelement <4 x i64> %1410, i64 2
  %1511 = getelementptr inbounds float, ptr %f0.host, i64 %1510
  %1512 = extractelement <4 x i64> %1410, i64 3
  %1513 = getelementptr inbounds float, ptr %f0.host, i64 %1512
  %1514 = fadd <8 x float> %1036, %1412
  %1515 = extractelement <4 x i64> %1419, i64 0
  %1516 = getelementptr inbounds float, ptr %f0.host, i64 %1515
  %1517 = extractelement <4 x i64> %1419, i64 1
  %1518 = getelementptr inbounds float, ptr %f0.host, i64 %1517
  %1519 = extractelement <4 x i64> %1419, i64 2
  %1520 = getelementptr inbounds float, ptr %f0.host, i64 %1519
  %1521 = extractelement <4 x i64> %1419, i64 3
  %1522 = getelementptr inbounds float, ptr %f0.host, i64 %1521
  %1523 = extractelement <4 x i64> %1421, i64 0
  %1524 = getelementptr inbounds float, ptr %f0.host, i64 %1523
  %1525 = extractelement <4 x i64> %1421, i64 1
  %1526 = getelementptr inbounds float, ptr %f0.host, i64 %1525
  %1527 = extractelement <4 x i64> %1421, i64 2
  %1528 = getelementptr inbounds float, ptr %f0.host, i64 %1527
  %1529 = extractelement <4 x i64> %1421, i64 3
  %1530 = getelementptr inbounds float, ptr %f0.host, i64 %1529
  %1531 = fadd <8 x float> %1036, %1423
  %1532 = extractelement <4 x i64> %1430, i64 0
  %1533 = getelementptr inbounds float, ptr %f0.host, i64 %1532
  %1534 = extractelement <4 x i64> %1430, i64 1
  %1535 = getelementptr inbounds float, ptr %f0.host, i64 %1534
  %1536 = extractelement <4 x i64> %1430, i64 2
  %1537 = getelementptr inbounds float, ptr %f0.host, i64 %1536
  %1538 = extractelement <4 x i64> %1430, i64 3
  %1539 = getelementptr inbounds float, ptr %f0.host, i64 %1538
  %1540 = extractelement <4 x i64> %1432, i64 0
  %1541 = getelementptr inbounds float, ptr %f0.host, i64 %1540
  %1542 = extractelement <4 x i64> %1432, i64 1
  %1543 = getelementptr inbounds float, ptr %f0.host, i64 %1542
  %1544 = extractelement <4 x i64> %1432, i64 2
  %1545 = getelementptr inbounds float, ptr %f0.host, i64 %1544
  %1546 = extractelement <4 x i64> %1432, i64 3
  %1547 = getelementptr inbounds float, ptr %f0.host, i64 %1546
  %1548 = fadd <8 x float> %1036, %1434
  %1549 = extractelement <4 x i64> %1441, i64 0
  %1550 = getelementptr inbounds float, ptr %f0.host, i64 %1549
  %1551 = extractelement <4 x i64> %1441, i64 1
  %1552 = getelementptr inbounds float, ptr %f0.host, i64 %1551
  %1553 = extractelement <4 x i64> %1441, i64 2
  %1554 = getelementptr inbounds float, ptr %f0.host, i64 %1553
  %1555 = extractelement <4 x i64> %1441, i64 3
  %1556 = getelementptr inbounds float, ptr %f0.host, i64 %1555
  %1557 = extractelement <4 x i64> %1443, i64 0
  %1558 = getelementptr inbounds float, ptr %f0.host, i64 %1557
  %1559 = extractelement <4 x i64> %1443, i64 1
  %1560 = getelementptr inbounds float, ptr %f0.host, i64 %1559
  %1561 = extractelement <4 x i64> %1443, i64 2
  %1562 = getelementptr inbounds float, ptr %f0.host, i64 %1561
  %1563 = extractelement <4 x i64> %1443, i64 3
  %1564 = getelementptr inbounds float, ptr %f0.host, i64 %1563
  %1565 = fadd <8 x float> %1036, %1445
  %1566 = extractelement <4 x i64> %1452, i64 0
  %1567 = getelementptr inbounds float, ptr %f0.host, i64 %1566
  %1568 = extractelement <4 x i64> %1452, i64 1
  %1569 = getelementptr inbounds float, ptr %f0.host, i64 %1568
  %1570 = extractelement <4 x i64> %1452, i64 2
  %1571 = getelementptr inbounds float, ptr %f0.host, i64 %1570
  %1572 = extractelement <4 x i64> %1452, i64 3
  %1573 = getelementptr inbounds float, ptr %f0.host, i64 %1572
  %1574 = extractelement <4 x i64> %1454, i64 0
  %1575 = getelementptr inbounds float, ptr %f0.host, i64 %1574
  %1576 = extractelement <4 x i64> %1454, i64 1
  %1577 = getelementptr inbounds float, ptr %f0.host, i64 %1576
  %1578 = extractelement <4 x i64> %1454, i64 2
  %1579 = getelementptr inbounds float, ptr %f0.host, i64 %1578
  %1580 = extractelement <4 x i64> %1454, i64 3
  %1581 = getelementptr inbounds float, ptr %f0.host, i64 %1580
  %1582 = fadd <8 x float> %1036, %1456
  %1583 = extractelement <4 x i64> %1463, i64 0
  %1584 = getelementptr inbounds float, ptr %f0.host, i64 %1583
  %1585 = extractelement <4 x i64> %1463, i64 1
  %1586 = getelementptr inbounds float, ptr %f0.host, i64 %1585
  %1587 = extractelement <4 x i64> %1463, i64 2
  %1588 = getelementptr inbounds float, ptr %f0.host, i64 %1587
  %1589 = extractelement <4 x i64> %1463, i64 3
  %1590 = getelementptr inbounds float, ptr %f0.host, i64 %1589
  %1591 = extractelement <4 x i64> %1465, i64 0
  %1592 = getelementptr inbounds float, ptr %f0.host, i64 %1591
  %1593 = extractelement <4 x i64> %1465, i64 1
  %1594 = getelementptr inbounds float, ptr %f0.host, i64 %1593
  %1595 = extractelement <4 x i64> %1465, i64 2
  %1596 = getelementptr inbounds float, ptr %f0.host, i64 %1595
  %1597 = extractelement <4 x i64> %1465, i64 3
  %1598 = getelementptr inbounds float, ptr %f0.host, i64 %1597
  %1599 = fadd <8 x float> %1036, %1467
  %1600 = extractelement <4 x i64> %1474, i64 0
  %1601 = getelementptr inbounds float, ptr %f0.host, i64 %1600
  %1602 = extractelement <4 x i64> %1474, i64 1
  %1603 = getelementptr inbounds float, ptr %f0.host, i64 %1602
  %1604 = extractelement <4 x i64> %1474, i64 2
  %1605 = getelementptr inbounds float, ptr %f0.host, i64 %1604
  %1606 = extractelement <4 x i64> %1474, i64 3
  %1607 = getelementptr inbounds float, ptr %f0.host, i64 %1606
  %1608 = extractelement <4 x i64> %1476, i64 0
  %1609 = getelementptr inbounds float, ptr %f0.host, i64 %1608
  %1610 = extractelement <4 x i64> %1476, i64 1
  %1611 = getelementptr inbounds float, ptr %f0.host, i64 %1610
  %1612 = extractelement <4 x i64> %1476, i64 2
  %1613 = getelementptr inbounds float, ptr %f0.host, i64 %1612
  %1614 = extractelement <4 x i64> %1476, i64 3
  %1615 = getelementptr inbounds float, ptr %f0.host, i64 %1614
  %1616 = fadd <8 x float> %1036, %1478
  %1617 = getelementptr inbounds float, ptr %f4.host, i64 %1481
  %1618 = load float, ptr %1507, align 4, !tbaa !6
  %1619 = insertelement <8 x float> %1505, float %1618, i64 4
  %1620 = load float, ptr %1509, align 4, !tbaa !6
  %1621 = insertelement <8 x float> %1619, float %1620, i64 5
  %1622 = load float, ptr %1511, align 4, !tbaa !6
  %1623 = insertelement <8 x float> %1621, float %1622, i64 6
  %1624 = load float, ptr %1513, align 4, !tbaa !6
  %1625 = insertelement <8 x float> %1623, float %1624, i64 7
  %1626 = fadd <8 x float> %1514, %1625
  %1627 = load float, ptr %1516, align 4, !tbaa !6
  %1628 = insertelement <8 x float> undef, float %1627, i64 0
  %1629 = load float, ptr %1518, align 4, !tbaa !6
  %1630 = insertelement <8 x float> %1628, float %1629, i64 1
  %1631 = load float, ptr %1520, align 4, !tbaa !6
  %1632 = insertelement <8 x float> %1630, float %1631, i64 2
  %1633 = load float, ptr %1522, align 4, !tbaa !6
  %1634 = insertelement <8 x float> %1632, float %1633, i64 3
  %1635 = load float, ptr %1524, align 4, !tbaa !6
  %1636 = insertelement <8 x float> %1634, float %1635, i64 4
  %1637 = load float, ptr %1526, align 4, !tbaa !6
  %1638 = insertelement <8 x float> %1636, float %1637, i64 5
  %1639 = load float, ptr %1528, align 4, !tbaa !6
  %1640 = insertelement <8 x float> %1638, float %1639, i64 6
  %1641 = load float, ptr %1530, align 4, !tbaa !6
  %1642 = insertelement <8 x float> %1640, float %1641, i64 7
  %1643 = fadd <8 x float> %1531, %1642
  %1644 = fadd <8 x float> %1626, %1643
  %1645 = fmul <8 x float> %1644, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1646 = load float, ptr %1533, align 4, !tbaa !6
  %1647 = insertelement <8 x float> undef, float %1646, i64 0
  %1648 = load float, ptr %1535, align 4, !tbaa !6
  %1649 = insertelement <8 x float> %1647, float %1648, i64 1
  %1650 = load float, ptr %1537, align 4, !tbaa !6
  %1651 = insertelement <8 x float> %1649, float %1650, i64 2
  %1652 = load float, ptr %1539, align 4, !tbaa !6
  %1653 = insertelement <8 x float> %1651, float %1652, i64 3
  %1654 = load float, ptr %1541, align 4, !tbaa !6
  %1655 = insertelement <8 x float> %1653, float %1654, i64 4
  %1656 = load float, ptr %1543, align 4, !tbaa !6
  %1657 = insertelement <8 x float> %1655, float %1656, i64 5
  %1658 = load float, ptr %1545, align 4, !tbaa !6
  %1659 = insertelement <8 x float> %1657, float %1658, i64 6
  %1660 = load float, ptr %1547, align 4, !tbaa !6
  %1661 = insertelement <8 x float> %1659, float %1660, i64 7
  %1662 = fadd <8 x float> %1548, %1661
  %1663 = fadd <8 x float> %1645, %1662
  %1664 = fadd <8 x float> %1501, %1663
  %1665 = fadd <8 x float> %1492, %1664
  %1666 = fmul <8 x float> %1665, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %1667 = load float, ptr %1550, align 4, !tbaa !6
  %1668 = insertelement <8 x float> undef, float %1667, i64 0
  %1669 = load float, ptr %1552, align 4, !tbaa !6
  %1670 = insertelement <8 x float> %1668, float %1669, i64 1
  %1671 = load float, ptr %1554, align 4, !tbaa !6
  %1672 = insertelement <8 x float> %1670, float %1671, i64 2
  %1673 = load float, ptr %1556, align 4, !tbaa !6
  %1674 = insertelement <8 x float> %1672, float %1673, i64 3
  %1675 = load float, ptr %1558, align 4, !tbaa !6
  %1676 = insertelement <8 x float> %1674, float %1675, i64 4
  %1677 = load float, ptr %1560, align 4, !tbaa !6
  %1678 = insertelement <8 x float> %1676, float %1677, i64 5
  %1679 = load float, ptr %1562, align 4, !tbaa !6
  %1680 = insertelement <8 x float> %1678, float %1679, i64 6
  %1681 = load float, ptr %1564, align 4, !tbaa !6
  %1682 = insertelement <8 x float> %1680, float %1681, i64 7
  %1683 = fadd <8 x float> %1565, %1682
  %1684 = load float, ptr %1567, align 4, !tbaa !6
  %1685 = insertelement <8 x float> undef, float %1684, i64 0
  %1686 = load float, ptr %1569, align 4, !tbaa !6
  %1687 = insertelement <8 x float> %1685, float %1686, i64 1
  %1688 = load float, ptr %1571, align 4, !tbaa !6
  %1689 = insertelement <8 x float> %1687, float %1688, i64 2
  %1690 = load float, ptr %1573, align 4, !tbaa !6
  %1691 = insertelement <8 x float> %1689, float %1690, i64 3
  %1692 = load float, ptr %1575, align 4, !tbaa !6
  %1693 = insertelement <8 x float> %1691, float %1692, i64 4
  %1694 = load float, ptr %1577, align 4, !tbaa !6
  %1695 = insertelement <8 x float> %1693, float %1694, i64 5
  %1696 = load float, ptr %1579, align 4, !tbaa !6
  %1697 = insertelement <8 x float> %1695, float %1696, i64 6
  %1698 = load float, ptr %1581, align 4, !tbaa !6
  %1699 = insertelement <8 x float> %1697, float %1698, i64 7
  %1700 = fadd <8 x float> %1582, %1699
  %1701 = load float, ptr %1584, align 4, !tbaa !6
  %1702 = insertelement <8 x float> undef, float %1701, i64 0
  %1703 = load float, ptr %1586, align 4, !tbaa !6
  %1704 = insertelement <8 x float> %1702, float %1703, i64 1
  %1705 = load float, ptr %1588, align 4, !tbaa !6
  %1706 = insertelement <8 x float> %1704, float %1705, i64 2
  %1707 = load float, ptr %1590, align 4, !tbaa !6
  %1708 = insertelement <8 x float> %1706, float %1707, i64 3
  %1709 = load float, ptr %1592, align 4, !tbaa !6
  %1710 = insertelement <8 x float> %1708, float %1709, i64 4
  %1711 = load float, ptr %1594, align 4, !tbaa !6
  %1712 = insertelement <8 x float> %1710, float %1711, i64 5
  %1713 = load float, ptr %1596, align 4, !tbaa !6
  %1714 = insertelement <8 x float> %1712, float %1713, i64 6
  %1715 = load float, ptr %1598, align 4, !tbaa !6
  %1716 = insertelement <8 x float> %1714, float %1715, i64 7
  %1717 = fadd <8 x float> %1599, %1716
  %1718 = fadd <8 x float> %1700, %1717
  %1719 = fmul <8 x float> %1718, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1720 = load float, ptr %1601, align 4, !tbaa !6
  %1721 = insertelement <8 x float> undef, float %1720, i64 0
  %1722 = load float, ptr %1603, align 4, !tbaa !6
  %1723 = insertelement <8 x float> %1721, float %1722, i64 1
  %1724 = load float, ptr %1605, align 4, !tbaa !6
  %1725 = insertelement <8 x float> %1723, float %1724, i64 2
  %1726 = load float, ptr %1607, align 4, !tbaa !6
  %1727 = insertelement <8 x float> %1725, float %1726, i64 3
  %1728 = load float, ptr %1609, align 4, !tbaa !6
  %1729 = insertelement <8 x float> %1727, float %1728, i64 4
  %1730 = load float, ptr %1611, align 4, !tbaa !6
  %1731 = insertelement <8 x float> %1729, float %1730, i64 5
  %1732 = load float, ptr %1613, align 4, !tbaa !6
  %1733 = insertelement <8 x float> %1731, float %1732, i64 6
  %1734 = load float, ptr %1615, align 4, !tbaa !6
  %1735 = insertelement <8 x float> %1733, float %1734, i64 7
  %1736 = fadd <8 x float> %1616, %1735
  %1737 = fadd <8 x float> %1719, %1736
  %1738 = fadd <8 x float> %1683, %1737
  %1739 = fmul <8 x float> %1738, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %1740 = fadd <8 x float> %1666, %1739
  %1741 = fadd <8 x float> %1482, %1740
  %1742 = fmul <8 x float> %1741, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %1742, ptr %1617, align 4, !tbaa !44
  br label %"end for f4.s0.v3.v32.us"

"for f4.s0.v3.v3.preheader.us":                   ; preds = %"for f4.s0.v6.us"
  %1743 = trunc i64 %indvars.iv to i32
  %1744 = sitofp i32 %1743 to float
  %t1992.s.us = fmul float %47, %1744
  %1745 = shl nsw i32 %1743, 8
  %.scalar112 = add i32 %1745, %f0.v3.min_realized.s
  %1746 = insertelement <8 x i32> undef, i32 %.scalar112, i64 0
  %1747 = shufflevector <8 x i32> %1746, <8 x i32> poison, <8 x i32> zeroinitializer
  %1748 = insertelement <8 x float> undef, float %t1992.s.us, i64 0
  %1749 = shufflevector <8 x float> %1748, <8 x float> undef, <8 x i32> zeroinitializer
  br label %"for f4.s0.v3.v3.us"

"end for f4.s0.v6.loopexit.us":                   ; preds = %"end for f4.s0.v3.v32.us"
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %27
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %35
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %35
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %35
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %35
  %.not.us = icmp eq i64 %indvars.iv.next110, 8
  br i1 %.not.us, label %destructor_block, label %"for f4.s0.v4.v296.us"

destructor_block:                                 ; preds = %"end for f4.s0.v6.loopexit.us", %"for f4.s0.v4.v296.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f5.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f5.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f5.s0.v4.v316.preheader":
  %a433 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 1
  %f4.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 3
  %f4.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 4
  %f4.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 5
  %f5.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f5.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 6
  %f5.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 7
  %f5.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 8
  %f5.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 9
  %f5.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 10
  %f5.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f5.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 11
  %f5.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f5.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 12
  %f5.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f5.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 13
  %f5.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f5.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 14
  %f4.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 16
  %f5.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f5.s0.v4.v4, 3
  %a426 = add nsw i32 %f5.s0.v4.min, %19
  %b428 = add nsw i32 %f5.s0.v4.max, -7
  %f5.s0.v4.v316.base = tail call i32 @llvm.smin.i32(i32 %b428, i32 %a426)
  %20 = sext i32 %f5.s0.v4.v316.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a433, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f5.s0.v3.min, 1
  %28 = shl i32 %f4.stride.1, 1
  %29 = icmp sgt i32 %f5.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f5.s0.v3.max, %f5.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a428 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a428, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f5.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f4.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f5.s0.v4.v316.us.preheader", label %destructor_block, !prof !5

"for f5.s0.v4.v316.us.preheader":                 ; preds = %"for f5.s0.v4.v316.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f5.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.1, ptr %closure, i64 0, i32 2
  %f4.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f4.v3.extent_realized.s, 1
  %44 = shl i32 %f5.s0.v4.v316.base, 1
  %45 = xor i32 %f4.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f4.stride.1
  %48 = sub i32 %47, %f4.v3.min_realized
  %reass.sub = sub i32 %44, %f4.v4.min_realized
  %49 = mul i32 %reass.sub, %f4.stride.1
  %50 = sub i32 %49, %f4.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f4.stride.1
  %53 = sub i32 %52, %f4.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f4.stride.1
  %56 = sub i32 %55, %f4.v3.min_realized
  %57 = sext i32 %f5.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f5.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f5.s0.v4.v316.us"

"for f5.s0.v4.v316.us":                           ; preds = %"for f5.s0.v4.v316.us.preheader", %"end for f5.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f5.s0.v4.v316.us.preheader" ], [ %indvars.iv.next18, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next27.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next23.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next19.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f5.s0.v4.v316.us.preheader" ], [ %lsr.iv.next15.us, %"end for f5.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f5.s0.v4.v316.us.preheader" ], [ %scevgep6.us, %"end for f5.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f5.s0.v4.v316.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f4.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f4.stride.1
  %t2036.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f4.stride.1
  %t2037.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f4.stride.1
  %t2038.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f4.stride.1
  %t2039.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2039.s.us to i64
  %75 = sext i32 %t2038.s.us to i64
  %76 = sext i32 %t2037.s.us to i64
  %77 = sext i32 %t2036.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f5.s0.v6.us"

"for f5.s0.v6.us":                                ; preds = %"for f5.s0.v4.v316.us", %"end for f5.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f5.s0.v4.v316.us" ], [ %indvars.iv.next, %"end for f5.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f5.s0.v4.v316.us" ], [ %scevgep10.us, %"end for f5.s0.v3.v32.us" ]
  br i1 %34, label %"for f5.s0.v3.v3.preheader.us", label %"end for f5.s0.v3.v3.us", !prof !5

"for f5.s0.v3.v3.us":                             ; preds = %"for f5.s0.v3.v3.preheader.us", %"for f5.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f5.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f5.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f5.s0.v3.v3.us" ], [ %a428, %"for f5.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f4.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !44
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f4.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !44
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f4.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !44
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f4.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !44
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f4.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !44
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f4.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !44
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f4.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !44
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f4.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !44
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f4.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !44
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f4.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !44
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f4.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !44
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f4.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !44
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f4.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !44
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f4.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !44
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f4.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !44
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f4.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !44
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f4.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !44
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f4.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !44
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f4.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !44
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f4.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !44
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f4.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !44
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f4.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !44
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f4.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !44
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f4.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !44
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !46
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f5.s0.v3.v3.us", label %"for f5.s0.v3.v3.us"

"end for f5.s0.v3.v3.us":                         ; preds = %"for f5.s0.v3.v3.us", %"for f5.s0.v6.us"
  br i1 %.not5, label %"end for f5.s0.v3.v32.us", label %"for f5.s0.v3.v31.preheader.us", !prof !4

"end for f5.s0.v3.v32.us":                        ; preds = %"for f5.s0.v3.v31.preheader.us", %"end for f5.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f5.s0.v6.loopexit.us", label %"for f5.s0.v6.us"

"for f5.s0.v3.v31.preheader.us":                  ; preds = %"end for f5.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f4.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !44
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f4.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !44
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f4.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !44
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f4.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !44
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f4.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !44
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f4.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !44
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f4.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !44
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f4.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !44
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f4.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !44
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f4.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !44
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f4.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !44
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f4.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !44
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f4.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !44
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f4.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !44
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f4.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !44
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f4.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !44
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f4.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !44
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f4.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !44
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f4.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !44
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f4.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !44
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f4.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !44
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f4.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !44
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f4.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !44
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f4.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !44
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f5.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !46
  br label %"end for f5.s0.v3.v32.us"

"for f5.s0.v3.v3.preheader.us":                   ; preds = %"for f5.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f5.s0.v3.v3.us"

"end for f5.s0.v6.loopexit.us":                   ; preds = %"end for f5.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f5.s0.v4.v316.us"

destructor_block:                                 ; preds = %"end for f5.s0.v6.loopexit.us", %"for f5.s0.v4.v316.preheader"
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f72.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f72.s0.v4.v4, ptr noalias nocapture readonly %closure) #3 {
"for f72.s0.v4.v286.preheader":
  %f2.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 1
  %f2.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 2
  %f2.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 3
  %f72.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f72.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 4
  %f72.s0.v3.min.s = load i32, ptr %4, align 4
  %5 = sext i32 %f72.s0.v3.min.s to i64
  %6 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 5
  %f72.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 6
  %f72.s0.v4.min.s = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 7
  %f72.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f72.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 8
  %f72.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f72.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 9
  %f72.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f72.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 10
  %f2.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.2, ptr %closure, i64 0, i32 12
  %f72.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f72.s0.v4.v4, 5
  %17 = add nsw i32 %f72.s0.v4.min.s, %16
  %a467 = add nsw i32 %17, -1
  %b469 = add nsw i32 %f72.s0.v4.max, -31
  %.not4 = icmp slt i32 %b469, %17
  %f72.s0.v4.v286.base = select i1 %.not4, i32 %b469, i32 %a467
  %18 = sext i32 %f72.s0.v4.v286.base to i64
  %19 = sub nsw i64 %18, %13
  %20 = add nsw i64 %9, 1
  %21 = mul nsw i64 %19, %20
  %22 = xor i64 %11, -1
  %23 = add nsw i64 %22, %5
  %24 = add i64 %23, %21
  %scevgep = getelementptr float, ptr %f72.host, i64 %24
  %25 = shl nsw i64 %9, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f72.s0.v3.min.s, 1
  %28 = shl i32 %f72.s0.v4.v286.base, 1
  %reass.sub = sub i32 %28, %f2.v4.min_realized
  %29 = add i32 %reass.sub, 2
  %30 = add i32 %f2.v3.extent_realized.s, 1
  %31 = mul i32 %29, %30
  %32 = sub i32 %31, %f2.v3.min_realized
  %33 = shl i32 %f2.v3.extent_realized.s, 1
  %34 = add i32 %33, 2
  %35 = add i32 %reass.sub, 1
  %36 = mul i32 %35, %30
  %37 = sub i32 %36, %f2.v3.min_realized
  %38 = mul i32 %reass.sub, %30
  %39 = sub i32 %38, %f2.v3.min_realized
  %40 = xor i32 %f2.v4.min_realized, -1
  %41 = add i32 %28, %40
  %42 = mul i32 %41, %30
  %43 = sub i32 %42, %f2.v3.min_realized
  %44 = sub nsw i32 %f72.s0.v3.max, %f72.s0.v3.min.s
  %45 = add nsw i32 %44, 2
  %a468 = ashr i32 %45, 3
  %46 = icmp sgt i32 %44, 5
  %47 = select i1 %46, i32 %a468, i32 0
  %48 = icmp sgt i32 %47, 0
  %49 = add nsw i32 %44, 9
  %50 = ashr i32 %49, 3
  %51 = icmp sgt i32 %50, %47
  %52 = shl nsw i32 %f72.s0.v3.max, 1
  %53 = sub nsw i32 %52, %f2.v3.min_realized
  %54 = add nsw i64 %3, -7
  %55 = sub nsw i64 %54, %11
  br label %"for f72.s0.v4.v286"

"for f72.s0.v4.v286":                             ; preds = %"end for f72.s0.v3.v32", %"for f72.s0.v4.v286.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f72.s0.v3.v32" ], [ 0, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f72.s0.v3.v32" ], [ %43, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f72.s0.v3.v32" ], [ %39, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f72.s0.v3.v32" ], [ %37, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f72.s0.v3.v32" ], [ %32, %"for f72.s0.v4.v286.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f72.s0.v3.v32" ], [ %scevgep, %"for f72.s0.v4.v286.preheader" ]
  br i1 %48, label %"for f72.s0.v3.v3", label %"end for f72.s0.v3.v3", !prof !5

"for f72.s0.v3.v3":                               ; preds = %"for f72.s0.v4.v286", %"for f72.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f72.s0.v3.v3" ], [ %lsr.iv22, %"for f72.s0.v4.v286" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f72.s0.v3.v3" ], [ %lsr.iv18, %"for f72.s0.v4.v286" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f72.s0.v3.v3" ], [ %lsr.iv14, %"for f72.s0.v4.v286" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f72.s0.v3.v3" ], [ %lsr.iv10, %"for f72.s0.v4.v286" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f72.s0.v3.v3" ], [ %lsr.iv4, %"for f72.s0.v4.v286" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f72.s0.v3.v3" ], [ %a468, %"for f72.s0.v4.v286" ]
  %56 = add i32 %lsr.iv24, %27
  %57 = add i32 %lsr.iv20, %27
  %58 = add i32 %lsr.iv16, %27
  %59 = add i32 %lsr.iv12, %27
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds float, ptr %f2.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !42
  %63 = add nsw i64 %60, 8
  %64 = getelementptr inbounds float, ptr %f2.host, i64 %63
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !42
  %66 = shufflevector <8 x float> %62, <8 x float> %65, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %67 = add nsw i64 %60, -2
  %68 = getelementptr inbounds float, ptr %f2.host, i64 %67
  %69 = load <8 x float>, ptr %68, align 4, !tbaa !42
  %70 = add nsw i64 %60, 6
  %71 = getelementptr inbounds float, ptr %f2.host, i64 %70
  %72 = load <8 x float>, ptr %71, align 4, !tbaa !42
  %73 = shufflevector <8 x float> %69, <8 x float> %72, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %74 = shufflevector <8 x float> %69, <8 x float> %72, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %75 = fadd <8 x float> %74, %73
  %76 = fmul <8 x float> %75, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %77 = add nsw i64 %60, -4
  %78 = getelementptr inbounds float, ptr %f2.host, i64 %77
  %79 = load <8 x float>, ptr %78, align 4, !tbaa !42
  %80 = add nsw i64 %60, 4
  %81 = getelementptr inbounds float, ptr %f2.host, i64 %80
  %82 = load <8 x float>, ptr %81, align 4, !tbaa !42
  %83 = shufflevector <8 x float> %79, <8 x float> %82, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %84 = fadd <8 x float> %83, %76
  %85 = fadd <8 x float> %66, %84
  %86 = fmul <8 x float> %85, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %87 = sext i32 %58 to i64
  %88 = getelementptr inbounds float, ptr %f2.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !42
  %90 = add nsw i64 %87, 8
  %91 = getelementptr inbounds float, ptr %f2.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !42
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = add nsw i64 %87, -2
  %95 = getelementptr inbounds float, ptr %f2.host, i64 %94
  %96 = load <8 x float>, ptr %95, align 4, !tbaa !42
  %97 = add nsw i64 %87, 6
  %98 = getelementptr inbounds float, ptr %f2.host, i64 %97
  %99 = load <8 x float>, ptr %98, align 4, !tbaa !42
  %100 = shufflevector <8 x float> %96, <8 x float> %99, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %101 = shufflevector <8 x float> %96, <8 x float> %99, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %102 = fadd <8 x float> %101, %100
  %103 = fmul <8 x float> %102, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %104 = add nsw i64 %87, -4
  %105 = getelementptr inbounds float, ptr %f2.host, i64 %104
  %106 = load <8 x float>, ptr %105, align 4, !tbaa !42
  %107 = add nsw i64 %87, 4
  %108 = getelementptr inbounds float, ptr %f2.host, i64 %107
  %109 = load <8 x float>, ptr %108, align 4, !tbaa !42
  %110 = shufflevector <8 x float> %106, <8 x float> %109, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %111 = fadd <8 x float> %110, %103
  %112 = fadd <8 x float> %93, %111
  %113 = sext i32 %57 to i64
  %114 = getelementptr inbounds float, ptr %f2.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !42
  %116 = add nsw i64 %113, 8
  %117 = getelementptr inbounds float, ptr %f2.host, i64 %116
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !42
  %119 = shufflevector <8 x float> %115, <8 x float> %118, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %120 = add nsw i64 %113, -2
  %121 = getelementptr inbounds float, ptr %f2.host, i64 %120
  %122 = load <8 x float>, ptr %121, align 4, !tbaa !42
  %123 = add nsw i64 %113, 6
  %124 = getelementptr inbounds float, ptr %f2.host, i64 %123
  %125 = load <8 x float>, ptr %124, align 4, !tbaa !42
  %126 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %127 = shufflevector <8 x float> %122, <8 x float> %125, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %128 = fadd <8 x float> %127, %126
  %129 = fmul <8 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = add nsw i64 %113, -4
  %131 = getelementptr inbounds float, ptr %f2.host, i64 %130
  %132 = load <8 x float>, ptr %131, align 4, !tbaa !42
  %133 = add nsw i64 %113, 4
  %134 = getelementptr inbounds float, ptr %f2.host, i64 %133
  %135 = load <8 x float>, ptr %134, align 4, !tbaa !42
  %136 = shufflevector <8 x float> %132, <8 x float> %135, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %137 = fadd <8 x float> %136, %129
  %138 = fadd <8 x float> %119, %137
  %139 = fadd <8 x float> %112, %138
  %140 = fmul <8 x float> %139, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %141 = sext i32 %56 to i64
  %142 = getelementptr inbounds float, ptr %f2.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !42
  %144 = add nsw i64 %141, 8
  %145 = getelementptr inbounds float, ptr %f2.host, i64 %144
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !42
  %147 = shufflevector <8 x float> %143, <8 x float> %146, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %148 = add nsw i64 %141, -2
  %149 = getelementptr inbounds float, ptr %f2.host, i64 %148
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !42
  %151 = add nsw i64 %141, 6
  %152 = getelementptr inbounds float, ptr %f2.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !42
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -4
  %159 = getelementptr inbounds float, ptr %f2.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !42
  %161 = add nsw i64 %141, 4
  %162 = getelementptr inbounds float, ptr %f2.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !42
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %147, %165
  %167 = fmul <8 x float> %166, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %168 = fadd <8 x float> %140, %167
  %169 = fadd <8 x float> %86, %168
  %170 = fmul <8 x float> %169, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %170, ptr %lsr.iv7, align 4, !tbaa !48
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not3 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not3, label %"end for f72.s0.v3.v3", label %"for f72.s0.v3.v3"

"end for f72.s0.v3.v3":                           ; preds = %"for f72.s0.v3.v3", %"for f72.s0.v4.v286"
  br i1 %51, label %"for f72.s0.v3.v31.preheader", label %"end for f72.s0.v3.v32", !prof !5

"for f72.s0.v3.v31.preheader":                    ; preds = %"end for f72.s0.v3.v3"
  %171 = trunc i64 %indvars.iv to i32
  %172 = add i32 %f72.s0.v4.v286.base, %171
  %173 = shl nsw i32 %172, 1
  %174 = sub nsw i32 %173, %f2.v4.min_realized
  %175 = add nsw i32 %174, -1
  %176 = mul nsw i32 %175, %30
  %t2050 = add nsw i32 %176, %53
  %177 = mul nsw i32 %174, %30
  %t2051 = add nsw i32 %177, %53
  %178 = add nsw i32 %174, 1
  %179 = mul nsw i32 %178, %30
  %t2052 = add nsw i32 %179, %53
  %180 = add nsw i32 %174, 2
  %181 = mul nsw i32 %180, %30
  %t2053 = add nsw i32 %181, %53
  %182 = sext i32 %t2053 to i64
  %183 = add nsw i64 %182, -12
  %184 = getelementptr inbounds float, ptr %f2.host, i64 %183
  %185 = load <8 x float>, ptr %184, align 4, !tbaa !42
  %186 = add nsw i64 %182, -4
  %187 = getelementptr inbounds float, ptr %f2.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !42
  %189 = shufflevector <8 x float> %185, <8 x float> %188, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %190 = add nsw i64 %182, -14
  %191 = getelementptr inbounds float, ptr %f2.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !42
  %193 = add nsw i64 %182, -6
  %194 = getelementptr inbounds float, ptr %f2.host, i64 %193
  %195 = load <8 x float>, ptr %194, align 4, !tbaa !42
  %196 = shufflevector <8 x float> %192, <8 x float> %195, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %197 = shufflevector <8 x float> %192, <8 x float> %195, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %198 = fadd <8 x float> %197, %196
  %199 = fmul <8 x float> %198, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %200 = add nsw i64 %182, -16
  %201 = getelementptr inbounds float, ptr %f2.host, i64 %200
  %202 = load <8 x float>, ptr %201, align 4, !tbaa !42
  %203 = add nsw i64 %182, -8
  %204 = getelementptr inbounds float, ptr %f2.host, i64 %203
  %205 = load <8 x float>, ptr %204, align 4, !tbaa !42
  %206 = shufflevector <8 x float> %202, <8 x float> %205, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %207 = fadd <8 x float> %206, %199
  %208 = fadd <8 x float> %189, %207
  %209 = fmul <8 x float> %208, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %210 = sext i32 %t2052 to i64
  %211 = add nsw i64 %210, -12
  %212 = getelementptr inbounds float, ptr %f2.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !42
  %214 = add nsw i64 %210, -4
  %215 = getelementptr inbounds float, ptr %f2.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !42
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %218 = add nsw i64 %210, -14
  %219 = getelementptr inbounds float, ptr %f2.host, i64 %218
  %220 = load <8 x float>, ptr %219, align 4, !tbaa !42
  %221 = add nsw i64 %210, -6
  %222 = getelementptr inbounds float, ptr %f2.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !42
  %224 = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %225 = shufflevector <8 x float> %220, <8 x float> %223, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %226 = fadd <8 x float> %225, %224
  %227 = fmul <8 x float> %226, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %228 = add nsw i64 %210, -16
  %229 = getelementptr inbounds float, ptr %f2.host, i64 %228
  %230 = load <8 x float>, ptr %229, align 4, !tbaa !42
  %231 = add nsw i64 %210, -8
  %232 = getelementptr inbounds float, ptr %f2.host, i64 %231
  %233 = load <8 x float>, ptr %232, align 4, !tbaa !42
  %234 = shufflevector <8 x float> %230, <8 x float> %233, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %235 = fadd <8 x float> %234, %227
  %236 = fadd <8 x float> %217, %235
  %237 = sext i32 %t2051 to i64
  %238 = add nsw i64 %237, -12
  %239 = getelementptr inbounds float, ptr %f2.host, i64 %238
  %240 = load <8 x float>, ptr %239, align 4, !tbaa !42
  %241 = add nsw i64 %237, -4
  %242 = getelementptr inbounds float, ptr %f2.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !42
  %244 = shufflevector <8 x float> %240, <8 x float> %243, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %245 = add nsw i64 %237, -14
  %246 = getelementptr inbounds float, ptr %f2.host, i64 %245
  %247 = load <8 x float>, ptr %246, align 4, !tbaa !42
  %248 = add nsw i64 %237, -6
  %249 = getelementptr inbounds float, ptr %f2.host, i64 %248
  %250 = load <8 x float>, ptr %249, align 4, !tbaa !42
  %251 = shufflevector <8 x float> %247, <8 x float> %250, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %252 = shufflevector <8 x float> %247, <8 x float> %250, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %253 = fadd <8 x float> %252, %251
  %254 = fmul <8 x float> %253, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %255 = add nsw i64 %237, -16
  %256 = getelementptr inbounds float, ptr %f2.host, i64 %255
  %257 = load <8 x float>, ptr %256, align 4, !tbaa !42
  %258 = add nsw i64 %237, -8
  %259 = getelementptr inbounds float, ptr %f2.host, i64 %258
  %260 = load <8 x float>, ptr %259, align 4, !tbaa !42
  %261 = shufflevector <8 x float> %257, <8 x float> %260, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %262 = fadd <8 x float> %261, %254
  %263 = fadd <8 x float> %244, %262
  %264 = fadd <8 x float> %236, %263
  %265 = fmul <8 x float> %264, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %266 = sext i32 %t2050 to i64
  %267 = add nsw i64 %266, -12
  %268 = getelementptr inbounds float, ptr %f2.host, i64 %267
  %269 = load <8 x float>, ptr %268, align 4, !tbaa !42
  %270 = add nsw i64 %266, -4
  %271 = getelementptr inbounds float, ptr %f2.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !42
  %273 = shufflevector <8 x float> %269, <8 x float> %272, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = add nsw i64 %266, -14
  %275 = getelementptr inbounds float, ptr %f2.host, i64 %274
  %276 = load <8 x float>, ptr %275, align 4, !tbaa !42
  %277 = add nsw i64 %266, -6
  %278 = getelementptr inbounds float, ptr %f2.host, i64 %277
  %279 = load <8 x float>, ptr %278, align 4, !tbaa !42
  %280 = shufflevector <8 x float> %276, <8 x float> %279, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %281 = shufflevector <8 x float> %276, <8 x float> %279, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %282 = fadd <8 x float> %281, %280
  %283 = fmul <8 x float> %282, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %284 = add nsw i64 %266, -16
  %285 = getelementptr inbounds float, ptr %f2.host, i64 %284
  %286 = load <8 x float>, ptr %285, align 4, !tbaa !42
  %287 = add nsw i64 %266, -8
  %288 = getelementptr inbounds float, ptr %f2.host, i64 %287
  %289 = load <8 x float>, ptr %288, align 4, !tbaa !42
  %290 = shufflevector <8 x float> %286, <8 x float> %289, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %291 = fadd <8 x float> %290, %283
  %292 = fadd <8 x float> %273, %291
  %293 = fmul <8 x float> %292, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %294 = fadd <8 x float> %265, %293
  %295 = fadd <8 x float> %209, %294
  %296 = fmul <8 x float> %295, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %297 = add nsw i64 %19, %indvars.iv
  %298 = mul nsw i64 %297, %20
  %299 = add i64 %55, %298
  %300 = getelementptr inbounds float, ptr %f72.host, i64 %299
  store <8 x float> %296, ptr %300, align 4, !tbaa !48
  br label %"end for f72.s0.v3.v32"

"end for f72.s0.v3.v32":                          ; preds = %"for f72.s0.v3.v31.preheader", %"end for f72.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %26
  %lsr.iv.next11 = add i32 %lsr.iv10, %34
  %lsr.iv.next15 = add i32 %lsr.iv14, %34
  %lsr.iv.next19 = add i32 %lsr.iv18, %34
  %lsr.iv.next23 = add i32 %lsr.iv22, %34
  %.not = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not, label %destructor_block, label %"for f72.s0.v4.v286"

destructor_block:                                 ; preds = %"end for f72.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f6.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f6.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f6.s0.v4.v336.preheader":
  %a526 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 1
  %f5.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 3
  %f5.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 4
  %f5.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 5
  %f6.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f6.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 6
  %f6.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 7
  %f6.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 8
  %f6.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 9
  %f6.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 10
  %f6.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f6.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 11
  %f6.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f6.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 12
  %f6.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f6.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 13
  %f6.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f6.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 14
  %f5.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 16
  %f6.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f6.s0.v4.v4, 3
  %a519 = add nsw i32 %f6.s0.v4.min, %19
  %b521 = add nsw i32 %f6.s0.v4.max, -7
  %f6.s0.v4.v336.base = tail call i32 @llvm.smin.i32(i32 %b521, i32 %a519)
  %20 = sext i32 %f6.s0.v4.v336.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a526, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f6.s0.v3.min, 1
  %28 = shl i32 %f5.stride.1, 1
  %29 = icmp sgt i32 %f6.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f6.s0.v3.max, %f6.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a521 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a521, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f6.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f5.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f6.s0.v4.v336.us.preheader", label %destructor_block, !prof !5

"for f6.s0.v4.v336.us.preheader":                 ; preds = %"for f6.s0.v4.v336.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f6.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.3, ptr %closure, i64 0, i32 2
  %f5.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f5.v3.extent_realized.s, 1
  %44 = shl i32 %f6.s0.v4.v336.base, 1
  %45 = xor i32 %f5.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f5.stride.1
  %48 = sub i32 %47, %f5.v3.min_realized
  %reass.sub = sub i32 %44, %f5.v4.min_realized
  %49 = mul i32 %reass.sub, %f5.stride.1
  %50 = sub i32 %49, %f5.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f5.stride.1
  %53 = sub i32 %52, %f5.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f5.stride.1
  %56 = sub i32 %55, %f5.v3.min_realized
  %57 = sext i32 %f6.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f6.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f6.s0.v4.v336.us"

"for f6.s0.v4.v336.us":                           ; preds = %"for f6.s0.v4.v336.us.preheader", %"end for f6.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f6.s0.v4.v336.us.preheader" ], [ %indvars.iv.next18, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next27.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next23.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next19.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f6.s0.v4.v336.us.preheader" ], [ %lsr.iv.next15.us, %"end for f6.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f6.s0.v4.v336.us.preheader" ], [ %scevgep6.us, %"end for f6.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f6.s0.v4.v336.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f5.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f5.stride.1
  %t2071.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f5.stride.1
  %t2072.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f5.stride.1
  %t2073.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f5.stride.1
  %t2074.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2074.s.us to i64
  %75 = sext i32 %t2073.s.us to i64
  %76 = sext i32 %t2072.s.us to i64
  %77 = sext i32 %t2071.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f6.s0.v6.us"

"for f6.s0.v6.us":                                ; preds = %"for f6.s0.v4.v336.us", %"end for f6.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f6.s0.v4.v336.us" ], [ %indvars.iv.next, %"end for f6.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f6.s0.v4.v336.us" ], [ %scevgep10.us, %"end for f6.s0.v3.v32.us" ]
  br i1 %34, label %"for f6.s0.v3.v3.preheader.us", label %"end for f6.s0.v3.v3.us", !prof !5

"for f6.s0.v3.v3.us":                             ; preds = %"for f6.s0.v3.v3.preheader.us", %"for f6.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f6.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f6.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f6.s0.v3.v3.us" ], [ %a521, %"for f6.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f5.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !46
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f5.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !46
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f5.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !46
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f5.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !46
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f5.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !46
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f5.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !46
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f5.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !46
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f5.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !46
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f5.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !46
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f5.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !46
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f5.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !46
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f5.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !46
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f5.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !46
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f5.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !46
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f5.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !46
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f5.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !46
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f5.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !46
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f5.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !46
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f5.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !46
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f5.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !46
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f5.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !46
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f5.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !46
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f5.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !46
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f5.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !46
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !50
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f6.s0.v3.v3.us", label %"for f6.s0.v3.v3.us"

"end for f6.s0.v3.v3.us":                         ; preds = %"for f6.s0.v3.v3.us", %"for f6.s0.v6.us"
  br i1 %.not5, label %"end for f6.s0.v3.v32.us", label %"for f6.s0.v3.v31.preheader.us", !prof !4

"end for f6.s0.v3.v32.us":                        ; preds = %"for f6.s0.v3.v31.preheader.us", %"end for f6.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f6.s0.v6.loopexit.us", label %"for f6.s0.v6.us"

"for f6.s0.v3.v31.preheader.us":                  ; preds = %"end for f6.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f5.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !46
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f5.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !46
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f5.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !46
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f5.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !46
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f5.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !46
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f5.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !46
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f5.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !46
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f5.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !46
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f5.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !46
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f5.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !46
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f5.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !46
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f5.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !46
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f5.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !46
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f5.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !46
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f5.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !46
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f5.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !46
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f5.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !46
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f5.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !46
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f5.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !46
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f5.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !46
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f5.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !46
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f5.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !46
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f5.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !46
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f5.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !46
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f6.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !50
  br label %"end for f6.s0.v3.v32.us"

"for f6.s0.v3.v3.preheader.us":                   ; preds = %"for f6.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f6.s0.v3.v3.us"

"end for f6.s0.v6.loopexit.us":                   ; preds = %"end for f6.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f6.s0.v4.v336.us"

destructor_block:                                 ; preds = %"end for f6.s0.v6.loopexit.us", %"for f6.s0.v4.v336.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f73.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f73.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f73.s0.v4.v306.preheader":
  %f72.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 1
  %f72.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 2
  %f72.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 3
  %f73.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f73.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 4
  %f73.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f73.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 5
  %f73.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 6
  %f73.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 7
  %f73.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f73.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 8
  %f73.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f73.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 9
  %f73.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f73.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 10
  %f72.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.4, ptr %closure, i64 0, i32 12
  %f73.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f73.s0.v4.v4, 5
  %a558 = add nsw i32 %f73.s0.v4.min, %16
  %b560 = add nsw i32 %f73.s0.v4.max, -31
  %f73.s0.v4.v306.base = tail call i32 @llvm.smin.i32(i32 %b560, i32 %a558)
  %17 = sext i32 %f73.s0.v4.v306.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f73.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f73.s0.v3.min, 1
  %26 = shl i32 %f73.s0.v4.v306.base, 1
  %reass.sub = sub i32 %26, %f72.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f72.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f72.v3.min_realized
  %31 = shl i32 %f72.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f72.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f72.v3.min_realized
  %38 = xor i32 %f72.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f72.v3.min_realized
  %42 = sub nsw i32 %f73.s0.v3.max, %f73.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a559 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a559, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f73.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f72.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f73.s0.v4.v306"

"for f73.s0.v4.v306":                             ; preds = %"end for f73.s0.v3.v32", %"for f73.s0.v4.v306.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f73.s0.v3.v32" ], [ 0, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f73.s0.v3.v32" ], [ %41, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f73.s0.v3.v32" ], [ %37, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f73.s0.v3.v32" ], [ %35, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f73.s0.v3.v32" ], [ %30, %"for f73.s0.v4.v306.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f73.s0.v3.v32" ], [ %scevgep, %"for f73.s0.v4.v306.preheader" ]
  br i1 %46, label %"for f73.s0.v3.v3", label %"end for f73.s0.v3.v3", !prof !5

"for f73.s0.v3.v3":                               ; preds = %"for f73.s0.v4.v306", %"for f73.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f73.s0.v3.v3" ], [ %lsr.iv22, %"for f73.s0.v4.v306" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f73.s0.v3.v3" ], [ %lsr.iv18, %"for f73.s0.v4.v306" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f73.s0.v3.v3" ], [ %lsr.iv14, %"for f73.s0.v4.v306" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f73.s0.v3.v3" ], [ %lsr.iv10, %"for f73.s0.v4.v306" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f73.s0.v3.v3" ], [ %lsr.iv4, %"for f73.s0.v4.v306" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f73.s0.v3.v3" ], [ %a559, %"for f73.s0.v4.v306" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f72.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !48
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f72.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !48
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f72.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !48
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f72.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !48
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f72.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !48
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f72.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !48
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f72.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !48
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f72.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !48
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f72.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !48
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f72.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !48
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f72.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !48
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f72.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !48
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f72.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !48
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f72.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !48
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f72.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !48
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f72.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !48
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f72.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !48
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f72.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !48
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f72.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !48
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f72.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !48
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f72.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !48
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f72.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !48
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f72.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !48
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f72.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !48
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !52
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f73.s0.v3.v3", label %"for f73.s0.v3.v3"

"end for f73.s0.v3.v3":                           ; preds = %"for f73.s0.v3.v3", %"for f73.s0.v4.v306"
  br i1 %.not, label %"end for f73.s0.v3.v32", label %"for f73.s0.v3.v31.preheader", !prof !4

"for f73.s0.v3.v31.preheader":                    ; preds = %"end for f73.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f73.s0.v4.v306.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f72.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2085 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2086 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2087 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2088 = add nsw i32 %177, %49
  %178 = sext i32 %t2088 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f72.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !48
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f72.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !48
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f72.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !48
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f72.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !48
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f72.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !48
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f72.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !48
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2087 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f72.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !48
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f72.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !48
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f72.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !48
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f72.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !48
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f72.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !48
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f72.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !48
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2086 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f72.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !48
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f72.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !48
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f72.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !48
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f72.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !48
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f72.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !48
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f72.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !48
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2085 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f72.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !48
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f72.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !48
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f72.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !48
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f72.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !48
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f72.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !48
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f72.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !48
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f73.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !52
  br label %"end for f73.s0.v3.v32"

"end for f73.s0.v3.v32":                          ; preds = %"for f73.s0.v3.v31.preheader", %"end for f73.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f73.s0.v4.v306"

destructor_block:                                 ; preds = %"end for f73.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f7.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f7.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f7.s0.v4.v356.preheader":
  %a611 = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 1
  %f6.stride.1 = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 3
  %f6.v3.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 4
  %f6.v4.min_realized = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 5
  %f7.s0.v3.max = load i32, ptr %3, align 4
  %4 = sext i32 %f7.s0.v3.max to i64
  %5 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 6
  %f7.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 7
  %f7.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 8
  %f7.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 9
  %f7.s0.v6.loop_extent.s = load i32, ptr %8, align 4
  %9 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 10
  %f7.stride.1 = load i32, ptr %9, align 4
  %10 = sext i32 %f7.stride.1 to i64
  %11 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 11
  %f7.v3.extent_realized.s = load i32, ptr %11, align 4
  %12 = sext i32 %f7.v3.extent_realized.s to i64
  %13 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 12
  %f7.v3.min_realized = load i32, ptr %13, align 4
  %14 = sext i32 %f7.v3.min_realized to i64
  %15 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 13
  %f7.v4.min_realized = load i32, ptr %15, align 4
  %16 = sext i32 %f7.v4.min_realized to i64
  %17 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 14
  %f6.host = load ptr, ptr %17, align 8
  %18 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 16
  %f7.host = load ptr, ptr %18, align 8
  %19 = shl nsw i32 %f7.s0.v4.v4, 3
  %a604 = add nsw i32 %f7.s0.v4.min, %19
  %b606 = add nsw i32 %f7.s0.v4.max, -7
  %f7.s0.v4.v356.base = tail call i32 @llvm.smin.i32(i32 %b606, i32 %a604)
  %20 = sext i32 %f7.s0.v4.v356.base to i64
  %21 = sub nsw i64 %20, %16
  %22 = shl nsw i64 %10, 2
  %23 = add nsw i64 %12, 1
  %24 = tail call i32 @llvm.smax.i32(i32 %a611, i32 0)
  %smax = zext i32 %24 to i64
  %25 = shl nsw i64 %12, 2
  %26 = add nsw i64 %25, 4
  %27 = shl i32 %f7.s0.v3.min, 1
  %28 = shl i32 %f6.stride.1, 1
  %29 = icmp sgt i32 %f7.s0.v6.loop_extent.s, -2
  %30 = sub nsw i32 %f7.s0.v3.max, %f7.s0.v3.min
  %31 = add nsw i32 %30, 1
  %a606 = ashr i32 %31, 3
  %32 = icmp sgt i32 %30, 6
  %33 = select i1 %32, i32 %a606, i32 0
  %34 = icmp sgt i32 %33, 0
  %35 = ashr i32 %30, 3
  %.not5 = icmp slt i32 %35, %33
  %36 = shl nsw i32 %f7.s0.v3.max, 1
  %37 = sub nsw i32 %36, %f6.v3.min_realized
  %38 = add nsw i64 %4, -7
  %39 = sub nsw i64 %38, %14
  br i1 %29, label %"for f7.s0.v4.v356.us.preheader", label %destructor_block, !prof !5

"for f7.s0.v4.v356.us.preheader":                 ; preds = %"for f7.s0.v4.v356.preheader"
  %40 = add nuw i32 %24, 2
  %41 = add i32 %40, %f7.s0.v6.loop_extent.s
  %42 = getelementptr inbounds %closure_t.5, ptr %closure, i64 0, i32 2
  %f6.v3.extent_realized.s = load i32, ptr %42, align 4
  %43 = add nsw i32 %f6.v3.extent_realized.s, 1
  %44 = shl i32 %f7.s0.v4.v356.base, 1
  %45 = xor i32 %f6.v4.min_realized, -1
  %46 = add i32 %44, %45
  %47 = mul i32 %46, %f6.stride.1
  %48 = sub i32 %47, %f6.v3.min_realized
  %reass.sub = sub i32 %44, %f6.v4.min_realized
  %49 = mul i32 %reass.sub, %f6.stride.1
  %50 = sub i32 %49, %f6.v3.min_realized
  %51 = add i32 %reass.sub, 1
  %52 = mul i32 %51, %f6.stride.1
  %53 = sub i32 %52, %f6.v3.min_realized
  %54 = add i32 %reass.sub, 2
  %55 = mul i32 %54, %f6.stride.1
  %56 = sub i32 %55, %f6.v3.min_realized
  %57 = sext i32 %f7.s0.v3.min to i64
  %58 = sub nsw i64 %57, %14
  %59 = mul nsw i64 %21, %10
  %60 = add i64 %58, %59
  %scevgep = getelementptr float, ptr %f7.host, i64 %60
  %61 = zext i32 %24 to i64
  %62 = sext i32 %43 to i64
  %zext = zext i32 %41 to i64
  br label %"for f7.s0.v4.v356.us"

"for f7.s0.v4.v356.us":                           ; preds = %"for f7.s0.v4.v356.us.preheader", %"end for f7.s0.v6.loopexit.us"
  %indvars.iv17 = phi i64 [ 0, %"for f7.s0.v4.v356.us.preheader" ], [ %indvars.iv.next18, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv26.us = phi i32 [ %48, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next27.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv22.us = phi i32 [ %50, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next23.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv18.us = phi i32 [ %53, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next19.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv14.us = phi i32 [ %56, %"for f7.s0.v4.v356.us.preheader" ], [ %lsr.iv.next15.us, %"end for f7.s0.v6.loopexit.us" ]
  %lsr.iv4.us = phi ptr [ %scevgep, %"for f7.s0.v4.v356.us.preheader" ], [ %scevgep6.us, %"end for f7.s0.v6.loopexit.us" ]
  %63 = trunc i64 %indvars.iv17 to i32
  %64 = add i32 %f7.s0.v4.v356.base, %63
  %65 = shl nsw i32 %64, 1
  %66 = sub nsw i32 %65, %f6.v4.min_realized
  %67 = add nsw i32 %66, -1
  %68 = mul nsw i32 %67, %f6.stride.1
  %t2106.s.us = add nsw i32 %68, %37
  %69 = mul nsw i32 %66, %f6.stride.1
  %t2107.s.us = add nsw i32 %69, %37
  %70 = add nsw i32 %66, 1
  %71 = mul nsw i32 %70, %f6.stride.1
  %t2108.s.us = add nsw i32 %71, %37
  %72 = add nsw i32 %66, 2
  %73 = mul nsw i32 %72, %f6.stride.1
  %t2109.s.us = add nsw i32 %73, %37
  %74 = sext i32 %t2109.s.us to i64
  %75 = sext i32 %t2108.s.us to i64
  %76 = sext i32 %t2107.s.us to i64
  %77 = sext i32 %t2106.s.us to i64
  %78 = add nsw i64 %21, %indvars.iv17
  %79 = mul nsw i64 %78, %10
  %80 = add i64 %39, %79
  br label %"for f7.s0.v6.us"

"for f7.s0.v6.us":                                ; preds = %"for f7.s0.v4.v356.us", %"end for f7.s0.v3.v32.us"
  %indvars.iv = phi i64 [ %smax, %"for f7.s0.v4.v356.us" ], [ %indvars.iv.next, %"end for f7.s0.v3.v32.us" ]
  %lsr.iv8.us = phi ptr [ %lsr.iv4.us, %"for f7.s0.v4.v356.us" ], [ %scevgep10.us, %"end for f7.s0.v3.v32.us" ]
  br i1 %34, label %"for f7.s0.v3.v3.preheader.us", label %"end for f7.s0.v3.v3.us", !prof !5

"for f7.s0.v3.v3.us":                             ; preds = %"for f7.s0.v3.v3.preheader.us", %"for f7.s0.v3.v3.us"
  %lsr.iv28.us = phi i32 [ %lsr.iv.next29.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv26.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv24.us = phi i32 [ %lsr.iv.next25.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv22.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv20.us = phi i32 [ %lsr.iv.next21.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv18.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv16.us = phi i32 [ %lsr.iv.next17.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv14.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv11.us = phi ptr [ %scevgep12.us, %"for f7.s0.v3.v3.us" ], [ %lsr.iv8.us, %"for f7.s0.v3.v3.preheader.us" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f7.s0.v3.v3.us" ], [ %a606, %"for f7.s0.v3.v3.preheader.us" ]
  %81 = add i32 %lsr.iv28.us, %27
  %82 = add i32 %lsr.iv24.us, %27
  %83 = add i32 %lsr.iv20.us, %27
  %84 = add i32 %lsr.iv16.us, %27
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %323, %85
  %87 = add nsw i64 %86, 2
  %88 = getelementptr inbounds float, ptr %f6.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !50
  %90 = add nsw i64 %86, 10
  %91 = getelementptr inbounds float, ptr %f6.host, i64 %90
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !50
  %93 = shufflevector <8 x float> %89, <8 x float> %92, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = getelementptr inbounds float, ptr %f6.host, i64 %86
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !50
  %96 = add nsw i64 %86, 8
  %97 = getelementptr inbounds float, ptr %f6.host, i64 %96
  %98 = load <8 x float>, ptr %97, align 4, !tbaa !50
  %99 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = shufflevector <8 x float> %95, <8 x float> %98, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %101, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %103 = add nsw i64 %86, -2
  %104 = getelementptr inbounds float, ptr %f6.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !50
  %106 = add nsw i64 %86, 6
  %107 = getelementptr inbounds float, ptr %f6.host, i64 %106
  %108 = load <8 x float>, ptr %107, align 4, !tbaa !50
  %109 = shufflevector <8 x float> %105, <8 x float> %108, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %110 = fadd <8 x float> %109, %102
  %111 = fadd <8 x float> %93, %110
  %112 = fmul <8 x float> %111, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %113 = sext i32 %83 to i64
  %114 = add nsw i64 %323, %113
  %115 = add nsw i64 %114, 2
  %116 = getelementptr inbounds float, ptr %f6.host, i64 %115
  %117 = load <8 x float>, ptr %116, align 4, !tbaa !50
  %118 = add nsw i64 %114, 10
  %119 = getelementptr inbounds float, ptr %f6.host, i64 %118
  %120 = load <8 x float>, ptr %119, align 4, !tbaa !50
  %121 = shufflevector <8 x float> %117, <8 x float> %120, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %122 = getelementptr inbounds float, ptr %f6.host, i64 %114
  %123 = load <8 x float>, ptr %122, align 4, !tbaa !50
  %124 = add nsw i64 %114, 8
  %125 = getelementptr inbounds float, ptr %f6.host, i64 %124
  %126 = load <8 x float>, ptr %125, align 4, !tbaa !50
  %127 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %128 = shufflevector <8 x float> %123, <8 x float> %126, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %129, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %131 = add nsw i64 %114, -2
  %132 = getelementptr inbounds float, ptr %f6.host, i64 %131
  %133 = load <8 x float>, ptr %132, align 4, !tbaa !50
  %134 = add nsw i64 %114, 6
  %135 = getelementptr inbounds float, ptr %f6.host, i64 %134
  %136 = load <8 x float>, ptr %135, align 4, !tbaa !50
  %137 = shufflevector <8 x float> %133, <8 x float> %136, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %138 = fadd <8 x float> %137, %130
  %139 = fadd <8 x float> %121, %138
  %140 = sext i32 %82 to i64
  %141 = add nsw i64 %323, %140
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f6.host, i64 %142
  %144 = load <8 x float>, ptr %143, align 4, !tbaa !50
  %145 = add nsw i64 %141, 10
  %146 = getelementptr inbounds float, ptr %f6.host, i64 %145
  %147 = load <8 x float>, ptr %146, align 4, !tbaa !50
  %148 = shufflevector <8 x float> %144, <8 x float> %147, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = getelementptr inbounds float, ptr %f6.host, i64 %141
  %150 = load <8 x float>, ptr %149, align 4, !tbaa !50
  %151 = add nsw i64 %141, 8
  %152 = getelementptr inbounds float, ptr %f6.host, i64 %151
  %153 = load <8 x float>, ptr %152, align 4, !tbaa !50
  %154 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %155 = shufflevector <8 x float> %150, <8 x float> %153, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %156 = fadd <8 x float> %155, %154
  %157 = fmul <8 x float> %156, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %158 = add nsw i64 %141, -2
  %159 = getelementptr inbounds float, ptr %f6.host, i64 %158
  %160 = load <8 x float>, ptr %159, align 4, !tbaa !50
  %161 = add nsw i64 %141, 6
  %162 = getelementptr inbounds float, ptr %f6.host, i64 %161
  %163 = load <8 x float>, ptr %162, align 4, !tbaa !50
  %164 = shufflevector <8 x float> %160, <8 x float> %163, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %165 = fadd <8 x float> %164, %157
  %166 = fadd <8 x float> %148, %165
  %167 = fadd <8 x float> %139, %166
  %168 = fmul <8 x float> %167, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %169 = sext i32 %81 to i64
  %170 = add nsw i64 %323, %169
  %171 = add nsw i64 %170, 2
  %172 = getelementptr inbounds float, ptr %f6.host, i64 %171
  %173 = load <8 x float>, ptr %172, align 4, !tbaa !50
  %174 = add nsw i64 %170, 10
  %175 = getelementptr inbounds float, ptr %f6.host, i64 %174
  %176 = load <8 x float>, ptr %175, align 4, !tbaa !50
  %177 = shufflevector <8 x float> %173, <8 x float> %176, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %178 = getelementptr inbounds float, ptr %f6.host, i64 %170
  %179 = load <8 x float>, ptr %178, align 4, !tbaa !50
  %180 = add nsw i64 %170, 8
  %181 = getelementptr inbounds float, ptr %f6.host, i64 %180
  %182 = load <8 x float>, ptr %181, align 4, !tbaa !50
  %183 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %184 = shufflevector <8 x float> %179, <8 x float> %182, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %185 = fadd <8 x float> %184, %183
  %186 = fmul <8 x float> %185, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %187 = add nsw i64 %170, -2
  %188 = getelementptr inbounds float, ptr %f6.host, i64 %187
  %189 = load <8 x float>, ptr %188, align 4, !tbaa !50
  %190 = add nsw i64 %170, 6
  %191 = getelementptr inbounds float, ptr %f6.host, i64 %190
  %192 = load <8 x float>, ptr %191, align 4, !tbaa !50
  %193 = shufflevector <8 x float> %189, <8 x float> %192, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %194 = fadd <8 x float> %193, %186
  %195 = fadd <8 x float> %177, %194
  %196 = fmul <8 x float> %195, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %197 = fadd <8 x float> %168, %196
  %198 = fadd <8 x float> %112, %197
  %199 = fmul <8 x float> %198, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %199, ptr %lsr.iv11.us, align 4, !tbaa !54
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep12.us = getelementptr float, ptr %lsr.iv11.us, i64 8
  %lsr.iv.next17.us = add i32 %lsr.iv16.us, 16
  %lsr.iv.next21.us = add i32 %lsr.iv20.us, 16
  %lsr.iv.next25.us = add i32 %lsr.iv24.us, 16
  %lsr.iv.next29.us = add i32 %lsr.iv28.us, 16
  %.not8.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not8.us, label %"end for f7.s0.v3.v3.us", label %"for f7.s0.v3.v3.us"

"end for f7.s0.v3.v3.us":                         ; preds = %"for f7.s0.v3.v3.us", %"for f7.s0.v6.us"
  br i1 %.not5, label %"end for f7.s0.v3.v32.us", label %"for f7.s0.v3.v31.preheader.us", !prof !4

"end for f7.s0.v3.v32.us":                        ; preds = %"for f7.s0.v3.v31.preheader.us", %"end for f7.s0.v3.v3.us"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep10.us = getelementptr i1, ptr %lsr.iv8.us, i64 %26
  %200 = icmp eq i64 %indvars.iv.next, %zext
  br i1 %200, label %"end for f7.s0.v6.loopexit.us", label %"for f7.s0.v6.us"

"for f7.s0.v3.v31.preheader.us":                  ; preds = %"end for f7.s0.v3.v3.us"
  %201 = sub nuw nsw i64 %indvars.iv, %61
  %202 = mul nsw i64 %201, %62
  %203 = add nsw i64 %202, %74
  %204 = add nsw i64 %203, -12
  %205 = getelementptr inbounds float, ptr %f6.host, i64 %204
  %206 = load <8 x float>, ptr %205, align 4, !tbaa !50
  %207 = add nsw i64 %203, -4
  %208 = getelementptr inbounds float, ptr %f6.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !50
  %210 = shufflevector <8 x float> %206, <8 x float> %209, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = add nsw i64 %203, -14
  %212 = getelementptr inbounds float, ptr %f6.host, i64 %211
  %213 = load <8 x float>, ptr %212, align 4, !tbaa !50
  %214 = add nsw i64 %203, -6
  %215 = getelementptr inbounds float, ptr %f6.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !50
  %217 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %218 = shufflevector <8 x float> %213, <8 x float> %216, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %219 = fadd <8 x float> %218, %217
  %220 = fmul <8 x float> %219, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %221 = add nsw i64 %203, -16
  %222 = getelementptr inbounds float, ptr %f6.host, i64 %221
  %223 = load <8 x float>, ptr %222, align 4, !tbaa !50
  %224 = add nsw i64 %203, -8
  %225 = getelementptr inbounds float, ptr %f6.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !50
  %227 = shufflevector <8 x float> %223, <8 x float> %226, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %228 = fadd <8 x float> %227, %220
  %229 = fadd <8 x float> %210, %228
  %230 = fmul <8 x float> %229, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %231 = add nsw i64 %202, %75
  %232 = add nsw i64 %231, -12
  %233 = getelementptr inbounds float, ptr %f6.host, i64 %232
  %234 = load <8 x float>, ptr %233, align 4, !tbaa !50
  %235 = add nsw i64 %231, -4
  %236 = getelementptr inbounds float, ptr %f6.host, i64 %235
  %237 = load <8 x float>, ptr %236, align 4, !tbaa !50
  %238 = shufflevector <8 x float> %234, <8 x float> %237, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %239 = add nsw i64 %231, -14
  %240 = getelementptr inbounds float, ptr %f6.host, i64 %239
  %241 = load <8 x float>, ptr %240, align 4, !tbaa !50
  %242 = add nsw i64 %231, -6
  %243 = getelementptr inbounds float, ptr %f6.host, i64 %242
  %244 = load <8 x float>, ptr %243, align 4, !tbaa !50
  %245 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %246 = shufflevector <8 x float> %241, <8 x float> %244, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %247, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %249 = add nsw i64 %231, -16
  %250 = getelementptr inbounds float, ptr %f6.host, i64 %249
  %251 = load <8 x float>, ptr %250, align 4, !tbaa !50
  %252 = add nsw i64 %231, -8
  %253 = getelementptr inbounds float, ptr %f6.host, i64 %252
  %254 = load <8 x float>, ptr %253, align 4, !tbaa !50
  %255 = shufflevector <8 x float> %251, <8 x float> %254, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %256 = fadd <8 x float> %255, %248
  %257 = fadd <8 x float> %238, %256
  %258 = add nsw i64 %202, %76
  %259 = add nsw i64 %258, -12
  %260 = getelementptr inbounds float, ptr %f6.host, i64 %259
  %261 = load <8 x float>, ptr %260, align 4, !tbaa !50
  %262 = add nsw i64 %258, -4
  %263 = getelementptr inbounds float, ptr %f6.host, i64 %262
  %264 = load <8 x float>, ptr %263, align 4, !tbaa !50
  %265 = shufflevector <8 x float> %261, <8 x float> %264, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %266 = add nsw i64 %258, -14
  %267 = getelementptr inbounds float, ptr %f6.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !50
  %269 = add nsw i64 %258, -6
  %270 = getelementptr inbounds float, ptr %f6.host, i64 %269
  %271 = load <8 x float>, ptr %270, align 4, !tbaa !50
  %272 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %273 = shufflevector <8 x float> %268, <8 x float> %271, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %274, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %276 = add nsw i64 %258, -16
  %277 = getelementptr inbounds float, ptr %f6.host, i64 %276
  %278 = load <8 x float>, ptr %277, align 4, !tbaa !50
  %279 = add nsw i64 %258, -8
  %280 = getelementptr inbounds float, ptr %f6.host, i64 %279
  %281 = load <8 x float>, ptr %280, align 4, !tbaa !50
  %282 = shufflevector <8 x float> %278, <8 x float> %281, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = fadd <8 x float> %282, %275
  %284 = fadd <8 x float> %265, %283
  %285 = fadd <8 x float> %257, %284
  %286 = fmul <8 x float> %285, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %287 = add nsw i64 %202, %77
  %288 = add nsw i64 %287, -12
  %289 = getelementptr inbounds float, ptr %f6.host, i64 %288
  %290 = load <8 x float>, ptr %289, align 4, !tbaa !50
  %291 = add nsw i64 %287, -4
  %292 = getelementptr inbounds float, ptr %f6.host, i64 %291
  %293 = load <8 x float>, ptr %292, align 4, !tbaa !50
  %294 = shufflevector <8 x float> %290, <8 x float> %293, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %295 = add nsw i64 %287, -14
  %296 = getelementptr inbounds float, ptr %f6.host, i64 %295
  %297 = load <8 x float>, ptr %296, align 4, !tbaa !50
  %298 = add nsw i64 %287, -6
  %299 = getelementptr inbounds float, ptr %f6.host, i64 %298
  %300 = load <8 x float>, ptr %299, align 4, !tbaa !50
  %301 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %302 = shufflevector <8 x float> %297, <8 x float> %300, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %303, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %305 = add nsw i64 %287, -16
  %306 = getelementptr inbounds float, ptr %f6.host, i64 %305
  %307 = load <8 x float>, ptr %306, align 4, !tbaa !50
  %308 = add nsw i64 %287, -8
  %309 = getelementptr inbounds float, ptr %f6.host, i64 %308
  %310 = load <8 x float>, ptr %309, align 4, !tbaa !50
  %311 = shufflevector <8 x float> %307, <8 x float> %310, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %312 = fadd <8 x float> %311, %304
  %313 = fadd <8 x float> %294, %312
  %314 = fmul <8 x float> %313, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %315 = fadd <8 x float> %286, %314
  %316 = fadd <8 x float> %230, %315
  %317 = fmul <8 x float> %316, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %318 = sub nuw nsw i64 %indvars.iv, %smax
  %319 = mul nsw i64 %318, %23
  %320 = add i64 %80, %319
  %321 = getelementptr inbounds float, ptr %f7.host, i64 %320
  store <8 x float> %317, ptr %321, align 4, !tbaa !54
  br label %"end for f7.s0.v3.v32.us"

"for f7.s0.v3.v3.preheader.us":                   ; preds = %"for f7.s0.v6.us"
  %322 = sub nuw nsw i64 %indvars.iv, %61
  %323 = mul nsw i64 %322, %62
  br label %"for f7.s0.v3.v3.us"

"end for f7.s0.v6.loopexit.us":                   ; preds = %"end for f7.s0.v3.v32.us"
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %scevgep6.us = getelementptr i1, ptr %lsr.iv4.us, i64 %22
  %lsr.iv.next15.us = add i32 %lsr.iv14.us, %28
  %lsr.iv.next19.us = add i32 %lsr.iv18.us, %28
  %lsr.iv.next23.us = add i32 %lsr.iv22.us, %28
  %lsr.iv.next27.us = add i32 %lsr.iv26.us, %28
  %.not.us = icmp eq i64 %indvars.iv.next18, 8
  br i1 %.not.us, label %destructor_block, label %"for f7.s0.v4.v356.us"

destructor_block:                                 ; preds = %"end for f7.s0.v6.loopexit.us", %"for f7.s0.v4.v356.preheader"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f74.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f74.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f74.s0.v4.v326.preheader":
  %f73.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 1
  %f73.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 2
  %f73.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 3
  %f74.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f74.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 4
  %f74.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f74.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 5
  %f74.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 6
  %f74.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 7
  %f74.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f74.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 8
  %f74.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f74.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 9
  %f74.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f74.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 10
  %f73.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.6, ptr %closure, i64 0, i32 12
  %f74.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f74.s0.v4.v4, 5
  %a643 = add nsw i32 %f74.s0.v4.min, %16
  %b645 = add nsw i32 %f74.s0.v4.max, -31
  %f74.s0.v4.v326.base = tail call i32 @llvm.smin.i32(i32 %b645, i32 %a643)
  %17 = sext i32 %f74.s0.v4.v326.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f74.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f74.s0.v3.min, 1
  %26 = shl i32 %f74.s0.v4.v326.base, 1
  %reass.sub = sub i32 %26, %f73.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f73.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f73.v3.min_realized
  %31 = shl i32 %f73.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f73.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f73.v3.min_realized
  %38 = xor i32 %f73.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f73.v3.min_realized
  %42 = sub nsw i32 %f74.s0.v3.max, %f74.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a644 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a644, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f74.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f73.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f74.s0.v4.v326"

"for f74.s0.v4.v326":                             ; preds = %"end for f74.s0.v3.v32", %"for f74.s0.v4.v326.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f74.s0.v3.v32" ], [ 0, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f74.s0.v3.v32" ], [ %41, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f74.s0.v3.v32" ], [ %37, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f74.s0.v3.v32" ], [ %35, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f74.s0.v3.v32" ], [ %30, %"for f74.s0.v4.v326.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f74.s0.v3.v32" ], [ %scevgep, %"for f74.s0.v4.v326.preheader" ]
  br i1 %46, label %"for f74.s0.v3.v3", label %"end for f74.s0.v3.v3", !prof !5

"for f74.s0.v3.v3":                               ; preds = %"for f74.s0.v4.v326", %"for f74.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f74.s0.v3.v3" ], [ %lsr.iv22, %"for f74.s0.v4.v326" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f74.s0.v3.v3" ], [ %lsr.iv18, %"for f74.s0.v4.v326" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f74.s0.v3.v3" ], [ %lsr.iv14, %"for f74.s0.v4.v326" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f74.s0.v3.v3" ], [ %lsr.iv10, %"for f74.s0.v4.v326" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f74.s0.v3.v3" ], [ %lsr.iv4, %"for f74.s0.v4.v326" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f74.s0.v3.v3" ], [ %a644, %"for f74.s0.v4.v326" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f73.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !52
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f73.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !52
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f73.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !52
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f73.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !52
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f73.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !52
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f73.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !52
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f73.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !52
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f73.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !52
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f73.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !52
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f73.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !52
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f73.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !52
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f73.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !52
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f73.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !52
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f73.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !52
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f73.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !52
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f73.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !52
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f73.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !52
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f73.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !52
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f73.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !52
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f73.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !52
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f73.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !52
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f73.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !52
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f73.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !52
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f73.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !52
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !56
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f74.s0.v3.v3", label %"for f74.s0.v3.v3"

"end for f74.s0.v3.v3":                           ; preds = %"for f74.s0.v3.v3", %"for f74.s0.v4.v326"
  br i1 %.not, label %"end for f74.s0.v3.v32", label %"for f74.s0.v3.v31.preheader", !prof !4

"for f74.s0.v3.v31.preheader":                    ; preds = %"end for f74.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f74.s0.v4.v326.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f73.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2120 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2121 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2122 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2123 = add nsw i32 %177, %49
  %178 = sext i32 %t2123 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f73.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !52
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f73.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !52
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f73.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !52
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f73.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !52
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f73.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !52
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f73.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !52
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2122 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f73.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !52
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f73.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !52
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f73.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !52
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f73.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !52
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f73.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !52
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f73.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !52
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2121 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f73.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !52
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f73.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !52
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f73.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !52
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f73.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !52
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f73.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !52
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f73.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !52
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2120 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f73.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !52
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f73.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !52
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f73.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !52
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f73.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !52
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f73.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !52
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f73.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !52
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f74.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !56
  br label %"end for f74.s0.v3.v32"

"end for f74.s0.v3.v32":                          ; preds = %"for f74.s0.v3.v31.preheader", %"end for f74.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f74.s0.v4.v326"

destructor_block:                                 ; preds = %"end for f74.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f8.s0.v6(ptr nocapture readnone %__user_context, i32 %f8.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 7
  %f8.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 8
  %f8.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 13
  %f7.host = load ptr, ptr %2, align 8
  %3 = add i32 %f8.s0.v4.max, 1
  %4 = icmp slt i32 %f8.s0.v4.min, %3
  br i1 %4, label %"for f8.s0.v4.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 6
  %f8.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 5
  %f8.s0.v3.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 2
  %f7.v3.extent_realized.s = load i32, ptr %7, align 4
  %promoted23 = sext i32 %f7.v3.extent_realized.s to i64
  %a684 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 10
  %f8.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f8.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 1
  %f7.stride.1 = load i32, ptr %10, align 4
  %11 = add i32 %f8.s0.v3.max, 1
  %12 = sub i32 %11, %f8.s0.v3.min
  %13 = tail call i32 @llvm.smax.i32(i32 %a684, i32 0)
  %14 = shl nsw i64 %9, 2
  %15 = add nsw i64 %14, 4
  %16 = shl i32 %f8.s0.v3.min, 1
  %17 = shl i32 %f7.stride.1, 1
  %18 = icmp sgt i32 %11, %f8.s0.v3.min
  %19 = add nsw i64 %promoted23, 1
  %20 = sub nsw i32 %f8.s0.v6, %13
  %21 = sext i32 %20 to i64
  %t2133 = mul nsw i64 %19, %21
  %22 = add nsw i64 %t2133, 2
  %sext = shl i64 %t2133, 32
  %23 = ashr exact i64 %sext, 32
  br i1 %18, label %"for f8.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f8.s0.v4.us.preheader":                      ; preds = %"for f8.s0.v4.preheader"
  %24 = shl i32 %f8.s0.v4.min, 1
  %25 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 4
  %f7.v4.min_realized = load i32, ptr %25, align 4
  %26 = xor i32 %f7.v4.min_realized, -1
  %27 = add i32 %24, %26
  %28 = mul i32 %f7.stride.1, %27
  %29 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 3
  %f7.v3.min_realized = load i32, ptr %29, align 4
  %30 = sub i32 %28, %f7.v3.min_realized
  %31 = sub i32 %24, %f7.v4.min_realized
  %32 = mul i32 %f7.stride.1, %31
  %33 = sub i32 %32, %f7.v3.min_realized
  %34 = or i32 %24, 1
  %35 = sub i32 %34, %f7.v4.min_realized
  %36 = mul i32 %f7.stride.1, %35
  %37 = sub i32 %36, %f7.v3.min_realized
  %38 = add i32 %24, 2
  %39 = sub i32 %38, %f7.v4.min_realized
  %40 = mul i32 %f7.stride.1, %39
  %41 = sub i32 %40, %f7.v3.min_realized
  %42 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 15
  %f8.host = load ptr, ptr %42, align 8
  %43 = sext i32 %f8.s0.v3.min to i64
  %44 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 11
  %f8.v3.min_realized = load i32, ptr %44, align 4
  %45 = sext i32 %f8.v3.min_realized to i64
  %46 = sub nsw i64 %43, %45
  %47 = sext i32 %f8.s0.v6 to i64
  %smax = zext i32 %13 to i64
  %48 = sub nsw i64 %47, %smax
  %49 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 9
  %f8.stride.2 = load i32, ptr %49, align 4
  %50 = sext i32 %f8.stride.2 to i64
  %51 = mul nsw i64 %48, %50
  %52 = add i64 %46, %51
  %53 = add nsw i64 %9, 1
  %54 = sext i32 %f8.s0.v4.min to i64
  %55 = getelementptr inbounds %closure_t.7, ptr %closure, i64 0, i32 12
  %f8.v4.min_realized = load i32, ptr %55, align 4
  %56 = sext i32 %f8.v4.min_realized to i64
  %57 = sub nsw i64 %54, %56
  %58 = mul nsw i64 %53, %57
  %59 = add i64 %52, %58
  %scevgep = getelementptr float, ptr %f8.host, i64 %59
  %60 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %61 = add i32 %40, %16
  %62 = sub i32 %61, %f7.v3.min_realized
  %63 = shl i32 %f7.stride.1, 1
  %64 = add i32 %36, %16
  %65 = sub i32 %64, %f7.v3.min_realized
  %66 = add i32 %32, %16
  %67 = sub i32 %66, %f7.v3.min_realized
  %68 = add i32 %28, %16
  %69 = sub i32 %68, %f7.v3.min_realized
  %70 = sub i32 %f8.s0.v3.max, %f8.s0.v3.min
  %71 = zext i32 %70 to i64
  %72 = add nuw nsw i64 %71, 1
  %min.iters.check = icmp ult i32 %70, 3
  %mul.result = shl i32 %60, 1
  %mul.result6 = shl i32 %60, 1
  %mul.overflow7 = icmp slt i32 %60, 0
  %mul.result9 = shl i32 %60, 1
  %mul.result12 = shl i32 %60, 1
  %n.vec = and i64 %72, -4
  %.cast = trunc i64 %n.vec to i32
  %73 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast20, 1
  %77 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %12, %.cast25
  %invariant.gep = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep54 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep56 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep58 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep60 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep62 = getelementptr float, ptr %f7.host, i64 -1
  %invariant.gep64 = getelementptr float, ptr %f7.host, i64 -1
  %cmp.n = icmp eq i64 %72, %n.vec
  br label %"for f8.s0.v4.us"

"for f8.s0.v4.us":                                ; preds = %"for f8.s0.v4.us.preheader", %"end for f8.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f8.s0.v4.us.preheader" ], [ %indvar.next, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %30, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %33, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %37, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %41, %"for f8.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f8.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f8.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f8.s0.v3.loopexit.us" ]
  %f8.s0.v4.us = phi i32 [ %f8.s0.v4.min, %"for f8.s0.v4.us.preheader" ], [ %267, %"end for f8.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f8.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f8.s0.v4.us"
  %78 = mul i32 %63, %indvar
  %79 = add i32 %69, %78
  %80 = add i32 %67, %78
  %81 = add i32 %65, %78
  %82 = add i32 %62, %78
  %83 = add i32 %82, %mul.result
  %84 = icmp slt i32 %83, %82
  %85 = add i32 %81, %mul.result6
  %86 = icmp slt i32 %85, %81
  %87 = or i1 %86, %mul.overflow7
  %88 = add i32 %80, %mul.result9
  %89 = icmp slt i32 %88, %80
  %90 = add i32 %79, %mul.result12
  %91 = icmp slt i32 %90, %79
  %92 = or i1 %84, %87
  %93 = or i1 %89, %92
  %94 = or i1 %91, %93
  br i1 %94, label %"for f8.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %73
  %ind.end15 = add i32 %lsr.iv15.us, %74
  %ind.end18 = add i32 %lsr.iv10.us, %75
  %ind.end21 = add i32 %lsr.iv6.us, %76
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %77
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %95 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %95
  %.cast28 = trunc i64 %index to i32
  %96 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %96
  %97 = add i32 %offset.idx, 2
  %98 = add i32 %offset.idx, 4
  %99 = add i32 %offset.idx, 6
  %.cast29 = trunc i64 %index to i32
  %100 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %100
  %.cast31 = trunc i64 %index to i32
  %101 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %101
  %.cast33 = trunc i64 %index to i32
  %102 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %102
  %103 = add i32 %offset.idx34, %16
  %104 = add i32 %offset.idx32, %16
  %105 = add i32 %offset.idx30, %16
  %106 = add i32 %offset.idx, %16
  %107 = add i32 %97, %16
  %108 = add i32 %98, %16
  %109 = add i32 %99, %16
  %110 = sext i32 %106 to i64
  %111 = sext i32 %107 to i64
  %112 = sext i32 %108 to i64
  %113 = sext i32 %109 to i64
  %114 = add nsw i64 %22, %110
  %115 = add nsw i64 %22, %111
  %116 = add nsw i64 %22, %112
  %117 = add nsw i64 %22, %113
  %118 = getelementptr inbounds float, ptr %f7.host, i64 %114
  %119 = getelementptr inbounds float, ptr %f7.host, i64 %115
  %120 = getelementptr inbounds float, ptr %f7.host, i64 %116
  %121 = getelementptr inbounds float, ptr %f7.host, i64 %117
  %122 = load float, ptr %118, align 4, !tbaa !54
  %123 = load float, ptr %119, align 4, !tbaa !54
  %124 = load float, ptr %120, align 4, !tbaa !54
  %125 = load float, ptr %121, align 4, !tbaa !54
  %126 = insertelement <4 x float> poison, float %122, i64 0
  %127 = insertelement <4 x float> %126, float %123, i64 1
  %128 = insertelement <4 x float> %127, float %124, i64 2
  %129 = insertelement <4 x float> %128, float %125, i64 3
  %130 = add nsw i64 %23, %110
  %131 = add nsw i64 %23, %111
  %132 = add nsw i64 %23, %112
  %133 = add nsw i64 %23, %113
  %134 = add nsw i64 %130, 1
  %135 = add nsw i64 %131, 1
  %136 = add nsw i64 %132, 1
  %137 = add nsw i64 %133, 1
  %138 = getelementptr inbounds float, ptr %f7.host, i64 %134
  %139 = getelementptr inbounds float, ptr %f7.host, i64 %135
  %140 = getelementptr inbounds float, ptr %f7.host, i64 %136
  %141 = getelementptr inbounds float, ptr %f7.host, i64 %137
  %142 = load float, ptr %138, align 4, !tbaa !54
  %143 = load float, ptr %139, align 4, !tbaa !54
  %144 = load float, ptr %140, align 4, !tbaa !54
  %145 = load float, ptr %141, align 4, !tbaa !54
  %146 = insertelement <4 x float> poison, float %142, i64 0
  %147 = insertelement <4 x float> %146, float %143, i64 1
  %148 = insertelement <4 x float> %147, float %144, i64 2
  %149 = insertelement <4 x float> %148, float %145, i64 3
  %gep = getelementptr float, ptr %invariant.gep, i64 %130
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !54
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %150 = fadd <4 x float> %149, %strided.vec35
  %151 = fmul <4 x float> %150, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %152 = fadd <4 x float> %strided.vec, %151
  %153 = fadd <4 x float> %129, %152
  %154 = fmul <4 x float> %153, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %155 = sext i32 %105 to i64
  %156 = add nsw i64 %23, %155
  %157 = add nsw i64 %156, 2
  %gep55 = getelementptr float, ptr %invariant.gep54, i64 %157
  %wide.vec36 = load <8 x float>, ptr %gep55, align 4, !tbaa !54
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep57 = getelementptr float, ptr %invariant.gep56, i64 %156
  %wide.vec39 = load <8 x float>, ptr %gep57, align 4, !tbaa !54
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %158 = fadd <4 x float> %strided.vec37, %strided.vec41
  %159 = fmul <4 x float> %158, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %160 = fadd <4 x float> %strided.vec40, %159
  %161 = fadd <4 x float> %strided.vec38, %160
  %162 = sext i32 %104 to i64
  %163 = add nsw i64 %23, %162
  %164 = add nsw i64 %163, 2
  %gep59 = getelementptr float, ptr %invariant.gep58, i64 %164
  %wide.vec42 = load <8 x float>, ptr %gep59, align 4, !tbaa !54
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep61 = getelementptr float, ptr %invariant.gep60, i64 %163
  %wide.vec45 = load <8 x float>, ptr %gep61, align 4, !tbaa !54
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %165 = fadd <4 x float> %strided.vec43, %strided.vec47
  %166 = fmul <4 x float> %165, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %167 = fadd <4 x float> %strided.vec46, %166
  %168 = fadd <4 x float> %strided.vec44, %167
  %169 = fadd <4 x float> %161, %168
  %170 = fmul <4 x float> %169, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %171 = sext i32 %103 to i64
  %172 = add nsw i64 %23, %171
  %173 = add nsw i64 %172, 2
  %gep63 = getelementptr float, ptr %invariant.gep62, i64 %173
  %wide.vec48 = load <8 x float>, ptr %gep63, align 4, !tbaa !54
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep65 = getelementptr float, ptr %invariant.gep64, i64 %172
  %wide.vec51 = load <8 x float>, ptr %gep65, align 4, !tbaa !54
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %174 = fadd <4 x float> %strided.vec49, %strided.vec53
  %175 = fmul <4 x float> %174, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %176 = fadd <4 x float> %strided.vec52, %175
  %177 = fadd <4 x float> %strided.vec50, %176
  %178 = fmul <4 x float> %177, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %179 = fadd <4 x float> %170, %178
  %180 = fadd <4 x float> %154, %179
  %181 = fmul <4 x float> %180, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %181, ptr %next.gep, align 4, !tbaa !36
  %index.next = add nuw i64 %index, 4
  %182 = icmp eq i64 %index.next, %n.vec
  br i1 %182, label %middle.block, label %vector.body, !llvm.loop !58

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us.preheader"

"for f8.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f8.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f8.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f8.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f8.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f8.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f8.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %12, %vector.scevcheck ], [ %12, %"for f8.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f8.s0.v3.us"

"for f8.s0.v3.us":                                ; preds = %"for f8.s0.v3.us.preheader", %"for f8.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f8.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f8.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f8.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f8.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f8.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f8.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f8.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f8.s0.v3.us.preheader" ]
  %183 = add i32 %lsr.iv21.us, %16
  %184 = add i32 %lsr.iv17.us, %16
  %185 = add i32 %lsr.iv13.us, %16
  %186 = add i32 %lsr.iv8.us, %16
  %187 = sext i32 %186 to i64
  %188 = add nsw i64 %22, %187
  %189 = getelementptr inbounds float, ptr %f7.host, i64 %188
  %190 = load float, ptr %189, align 4, !tbaa !54
  %191 = add nsw i64 %23, %187
  %192 = add nsw i64 %191, 1
  %193 = getelementptr inbounds float, ptr %f7.host, i64 %192
  %194 = load float, ptr %193, align 4, !tbaa !54
  %195 = getelementptr inbounds float, ptr %f7.host, i64 %191
  %196 = load float, ptr %195, align 4, !tbaa !54
  %197 = fadd float %194, %196
  %198 = fmul float %197, 3.000000e+00
  %199 = add nsw i64 %191, -1
  %200 = getelementptr inbounds float, ptr %f7.host, i64 %199
  %201 = sext i32 %185 to i64
  %202 = add nsw i64 %23, %201
  %203 = add nsw i64 %202, 2
  %204 = getelementptr inbounds float, ptr %f7.host, i64 %203
  %205 = add nsw i64 %202, 1
  %206 = getelementptr inbounds float, ptr %f7.host, i64 %205
  %207 = load float, ptr %206, align 4, !tbaa !54
  %208 = getelementptr inbounds float, ptr %f7.host, i64 %202
  %209 = load float, ptr %208, align 4, !tbaa !54
  %210 = fadd float %207, %209
  %211 = fmul float %210, 3.000000e+00
  %212 = add nsw i64 %202, -1
  %213 = getelementptr inbounds float, ptr %f7.host, i64 %212
  %214 = load float, ptr %213, align 4, !tbaa !54
  %215 = fadd float %214, %211
  %216 = sext i32 %184 to i64
  %217 = add nsw i64 %23, %216
  %218 = add nsw i64 %217, 2
  %219 = getelementptr inbounds float, ptr %f7.host, i64 %218
  %220 = load float, ptr %219, align 4, !tbaa !54
  %221 = add nsw i64 %217, 1
  %222 = getelementptr inbounds float, ptr %f7.host, i64 %221
  %223 = load float, ptr %222, align 4, !tbaa !54
  %224 = getelementptr inbounds float, ptr %f7.host, i64 %217
  %225 = load float, ptr %224, align 4, !tbaa !54
  %226 = fadd float %223, %225
  %227 = fmul float %226, 3.000000e+00
  %228 = add nsw i64 %217, -1
  %229 = getelementptr inbounds float, ptr %f7.host, i64 %228
  %230 = load float, ptr %229, align 4, !tbaa !54
  %231 = fadd float %230, %227
  %232 = fadd float %220, %231
  %233 = load float, ptr %200, align 4, !tbaa !54
  %234 = load float, ptr %204, align 4, !tbaa !54
  %235 = insertelement <2 x float> poison, float %233, i64 0
  %236 = insertelement <2 x float> %235, float %234, i64 1
  %237 = insertelement <2 x float> poison, float %198, i64 0
  %238 = insertelement <2 x float> %237, float %215, i64 1
  %239 = fadd <2 x float> %236, %238
  %240 = insertelement <2 x float> poison, float %190, i64 0
  %241 = insertelement <2 x float> %240, float %232, i64 1
  %242 = fadd <2 x float> %241, %239
  %243 = fmul <2 x float> %242, <float 1.250000e-01, float 3.750000e-01>
  %244 = sext i32 %183 to i64
  %245 = add nsw i64 %23, %244
  %246 = add nsw i64 %245, 2
  %247 = getelementptr inbounds float, ptr %f7.host, i64 %246
  %248 = load float, ptr %247, align 4, !tbaa !54
  %249 = add nsw i64 %245, 1
  %250 = getelementptr inbounds float, ptr %f7.host, i64 %249
  %251 = load float, ptr %250, align 4, !tbaa !54
  %252 = getelementptr inbounds float, ptr %f7.host, i64 %245
  %253 = load float, ptr %252, align 4, !tbaa !54
  %254 = fadd float %251, %253
  %255 = fmul float %254, 3.000000e+00
  %256 = add nsw i64 %245, -1
  %257 = getelementptr inbounds float, ptr %f7.host, i64 %256
  %258 = load float, ptr %257, align 4, !tbaa !54
  %259 = fadd float %258, %255
  %260 = fadd float %248, %259
  %261 = fmul float %260, 1.250000e-01
  %262 = extractelement <2 x float> %243, i64 1
  %263 = fadd float %262, %261
  %264 = extractelement <2 x float> %243, i64 0
  %265 = fadd float %264, %263
  %266 = fmul float %265, 1.250000e-01
  store float %266, ptr %lsr.iv4.us, align 4, !tbaa !36
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f8.s0.v3.loopexit.us", label %"for f8.s0.v3.us", !llvm.loop !59

"end for f8.s0.v3.loopexit.us":                   ; preds = %"for f8.s0.v3.us", %middle.block
  %267 = add nsw i32 %f8.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %15
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %17
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %17
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %17
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %17
  %.not.us = icmp eq i32 %f8.s0.v4.us, %f8.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f8.s0.v4.us"

destructor_block:                                 ; preds = %"end for f8.s0.v3.loopexit.us", %"for f8.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f75.s0.v4.v4(ptr nocapture readnone %__user_context, i32 %f75.s0.v4.v4, ptr noalias nocapture readonly %closure) #2 {
"for f75.s0.v4.v346.preheader":
  %f74.v3.extent_realized.s = load i32, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 1
  %f74.v3.min_realized = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 2
  %f74.v4.min_realized = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 3
  %f75.s0.v3.max = load i32, ptr %2, align 4
  %3 = sext i32 %f75.s0.v3.max to i64
  %4 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 4
  %f75.s0.v3.min = load i32, ptr %4, align 4
  %5 = sext i32 %f75.s0.v3.min to i64
  %6 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 5
  %f75.s0.v4.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 6
  %f75.s0.v4.min = load i32, ptr %7, align 4
  %8 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 7
  %f75.v3.extent_realized.s = load i32, ptr %8, align 4
  %9 = sext i32 %f75.v3.extent_realized.s to i64
  %10 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 8
  %f75.v3.min_realized = load i32, ptr %10, align 4
  %11 = sext i32 %f75.v3.min_realized to i64
  %12 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 9
  %f75.v4.min_realized = load i32, ptr %12, align 4
  %13 = sext i32 %f75.v4.min_realized to i64
  %14 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 10
  %f74.host = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds %closure_t.8, ptr %closure, i64 0, i32 12
  %f75.host = load ptr, ptr %15, align 8
  %16 = shl nsw i32 %f75.s0.v4.v4, 5
  %a710 = add nsw i32 %f75.s0.v4.min, %16
  %b712 = add nsw i32 %f75.s0.v4.max, -31
  %f75.s0.v4.v346.base = tail call i32 @llvm.smin.i32(i32 %b712, i32 %a710)
  %17 = sext i32 %f75.s0.v4.v346.base to i64
  %18 = sub nsw i64 %17, %13
  %19 = add nsw i64 %9, 1
  %20 = mul nsw i64 %18, %19
  %21 = sub nsw i64 %5, %11
  %22 = add i64 %21, %20
  %scevgep = getelementptr float, ptr %f75.host, i64 %22
  %23 = shl nsw i64 %9, 2
  %24 = add nsw i64 %23, 4
  %25 = shl i32 %f75.s0.v3.min, 1
  %26 = shl i32 %f75.s0.v4.v346.base, 1
  %reass.sub = sub i32 %26, %f74.v4.min_realized
  %27 = add i32 %reass.sub, 2
  %28 = add i32 %f74.v3.extent_realized.s, 1
  %29 = mul i32 %27, %28
  %30 = sub i32 %29, %f74.v3.min_realized
  %31 = shl i32 %f74.v3.extent_realized.s, 1
  %32 = add i32 %31, 2
  %33 = add i32 %reass.sub, 1
  %34 = mul i32 %33, %28
  %35 = sub i32 %34, %f74.v3.min_realized
  %36 = mul i32 %reass.sub, %28
  %37 = sub i32 %36, %f74.v3.min_realized
  %38 = xor i32 %f74.v4.min_realized, -1
  %39 = add i32 %26, %38
  %40 = mul i32 %39, %28
  %41 = sub i32 %40, %f74.v3.min_realized
  %42 = sub nsw i32 %f75.s0.v3.max, %f75.s0.v3.min
  %43 = add nsw i32 %42, 1
  %a711 = ashr i32 %43, 3
  %44 = icmp sgt i32 %42, 6
  %45 = select i1 %44, i32 %a711, i32 0
  %46 = icmp sgt i32 %45, 0
  %47 = ashr i32 %42, 3
  %.not = icmp slt i32 %47, %45
  %48 = shl nsw i32 %f75.s0.v3.max, 1
  %49 = sub nsw i32 %48, %f74.v3.min_realized
  %50 = add nsw i64 %3, -7
  %51 = sub nsw i64 %50, %11
  br label %"for f75.s0.v4.v346"

"for f75.s0.v4.v346":                             ; preds = %"end for f75.s0.v3.v32", %"for f75.s0.v4.v346.preheader"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"end for f75.s0.v3.v32" ], [ 0, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv22 = phi i32 [ %lsr.iv.next23, %"end for f75.s0.v3.v32" ], [ %41, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv18 = phi i32 [ %lsr.iv.next19, %"end for f75.s0.v3.v32" ], [ %37, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv14 = phi i32 [ %lsr.iv.next15, %"end for f75.s0.v3.v32" ], [ %35, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv10 = phi i32 [ %lsr.iv.next11, %"end for f75.s0.v3.v32" ], [ %30, %"for f75.s0.v4.v346.preheader" ]
  %lsr.iv4 = phi ptr [ %scevgep6, %"end for f75.s0.v3.v32" ], [ %scevgep, %"for f75.s0.v4.v346.preheader" ]
  br i1 %46, label %"for f75.s0.v3.v3", label %"end for f75.s0.v3.v3", !prof !5

"for f75.s0.v3.v3":                               ; preds = %"for f75.s0.v4.v346", %"for f75.s0.v3.v3"
  %lsr.iv24 = phi i32 [ %lsr.iv.next25, %"for f75.s0.v3.v3" ], [ %lsr.iv22, %"for f75.s0.v4.v346" ]
  %lsr.iv20 = phi i32 [ %lsr.iv.next21, %"for f75.s0.v3.v3" ], [ %lsr.iv18, %"for f75.s0.v4.v346" ]
  %lsr.iv16 = phi i32 [ %lsr.iv.next17, %"for f75.s0.v3.v3" ], [ %lsr.iv14, %"for f75.s0.v4.v346" ]
  %lsr.iv12 = phi i32 [ %lsr.iv.next13, %"for f75.s0.v3.v3" ], [ %lsr.iv10, %"for f75.s0.v4.v346" ]
  %lsr.iv7 = phi ptr [ %scevgep8, %"for f75.s0.v3.v3" ], [ %lsr.iv4, %"for f75.s0.v4.v346" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f75.s0.v3.v3" ], [ %a711, %"for f75.s0.v4.v346" ]
  %52 = add i32 %lsr.iv24, %25
  %53 = add i32 %lsr.iv20, %25
  %54 = add i32 %lsr.iv16, %25
  %55 = add i32 %lsr.iv12, %25
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, 2
  %58 = getelementptr inbounds float, ptr %f74.host, i64 %57
  %59 = load <8 x float>, ptr %58, align 4, !tbaa !56
  %60 = add nsw i64 %56, 10
  %61 = getelementptr inbounds float, ptr %f74.host, i64 %60
  %62 = load <8 x float>, ptr %61, align 4, !tbaa !56
  %63 = shufflevector <8 x float> %59, <8 x float> %62, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %64 = getelementptr inbounds float, ptr %f74.host, i64 %56
  %65 = load <8 x float>, ptr %64, align 4, !tbaa !56
  %66 = add nsw i64 %56, 8
  %67 = getelementptr inbounds float, ptr %f74.host, i64 %66
  %68 = load <8 x float>, ptr %67, align 4, !tbaa !56
  %69 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %70 = shufflevector <8 x float> %65, <8 x float> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = add nsw i64 %56, -2
  %74 = getelementptr inbounds float, ptr %f74.host, i64 %73
  %75 = load <8 x float>, ptr %74, align 4, !tbaa !56
  %76 = add nsw i64 %56, 6
  %77 = getelementptr inbounds float, ptr %f74.host, i64 %76
  %78 = load <8 x float>, ptr %77, align 4, !tbaa !56
  %79 = shufflevector <8 x float> %75, <8 x float> %78, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = fadd <8 x float> %79, %72
  %81 = fadd <8 x float> %63, %80
  %82 = fmul <8 x float> %81, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %83 = sext i32 %54 to i64
  %84 = add nsw i64 %83, 2
  %85 = getelementptr inbounds float, ptr %f74.host, i64 %84
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !56
  %87 = add nsw i64 %83, 10
  %88 = getelementptr inbounds float, ptr %f74.host, i64 %87
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !56
  %90 = shufflevector <8 x float> %86, <8 x float> %89, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %91 = getelementptr inbounds float, ptr %f74.host, i64 %83
  %92 = load <8 x float>, ptr %91, align 4, !tbaa !56
  %93 = add nsw i64 %83, 8
  %94 = getelementptr inbounds float, ptr %f74.host, i64 %93
  %95 = load <8 x float>, ptr %94, align 4, !tbaa !56
  %96 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %97 = shufflevector <8 x float> %92, <8 x float> %95, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = add nsw i64 %83, -2
  %101 = getelementptr inbounds float, ptr %f74.host, i64 %100
  %102 = load <8 x float>, ptr %101, align 4, !tbaa !56
  %103 = add nsw i64 %83, 6
  %104 = getelementptr inbounds float, ptr %f74.host, i64 %103
  %105 = load <8 x float>, ptr %104, align 4, !tbaa !56
  %106 = shufflevector <8 x float> %102, <8 x float> %105, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %107 = fadd <8 x float> %106, %99
  %108 = fadd <8 x float> %90, %107
  %109 = sext i32 %53 to i64
  %110 = add nsw i64 %109, 2
  %111 = getelementptr inbounds float, ptr %f74.host, i64 %110
  %112 = load <8 x float>, ptr %111, align 4, !tbaa !56
  %113 = add nsw i64 %109, 10
  %114 = getelementptr inbounds float, ptr %f74.host, i64 %113
  %115 = load <8 x float>, ptr %114, align 4, !tbaa !56
  %116 = shufflevector <8 x float> %112, <8 x float> %115, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %117 = getelementptr inbounds float, ptr %f74.host, i64 %109
  %118 = load <8 x float>, ptr %117, align 4, !tbaa !56
  %119 = add nsw i64 %109, 8
  %120 = getelementptr inbounds float, ptr %f74.host, i64 %119
  %121 = load <8 x float>, ptr %120, align 4, !tbaa !56
  %122 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %123 = shufflevector <8 x float> %118, <8 x float> %121, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %124 = fadd <8 x float> %123, %122
  %125 = fmul <8 x float> %124, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %126 = add nsw i64 %109, -2
  %127 = getelementptr inbounds float, ptr %f74.host, i64 %126
  %128 = load <8 x float>, ptr %127, align 4, !tbaa !56
  %129 = add nsw i64 %109, 6
  %130 = getelementptr inbounds float, ptr %f74.host, i64 %129
  %131 = load <8 x float>, ptr %130, align 4, !tbaa !56
  %132 = shufflevector <8 x float> %128, <8 x float> %131, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %133 = fadd <8 x float> %132, %125
  %134 = fadd <8 x float> %116, %133
  %135 = fadd <8 x float> %108, %134
  %136 = fmul <8 x float> %135, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %137 = sext i32 %52 to i64
  %138 = add nsw i64 %137, 2
  %139 = getelementptr inbounds float, ptr %f74.host, i64 %138
  %140 = load <8 x float>, ptr %139, align 4, !tbaa !56
  %141 = add nsw i64 %137, 10
  %142 = getelementptr inbounds float, ptr %f74.host, i64 %141
  %143 = load <8 x float>, ptr %142, align 4, !tbaa !56
  %144 = shufflevector <8 x float> %140, <8 x float> %143, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %145 = getelementptr inbounds float, ptr %f74.host, i64 %137
  %146 = load <8 x float>, ptr %145, align 4, !tbaa !56
  %147 = add nsw i64 %137, 8
  %148 = getelementptr inbounds float, ptr %f74.host, i64 %147
  %149 = load <8 x float>, ptr %148, align 4, !tbaa !56
  %150 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %151 = shufflevector <8 x float> %146, <8 x float> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %152, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %154 = add nsw i64 %137, -2
  %155 = getelementptr inbounds float, ptr %f74.host, i64 %154
  %156 = load <8 x float>, ptr %155, align 4, !tbaa !56
  %157 = add nsw i64 %137, 6
  %158 = getelementptr inbounds float, ptr %f74.host, i64 %157
  %159 = load <8 x float>, ptr %158, align 4, !tbaa !56
  %160 = shufflevector <8 x float> %156, <8 x float> %159, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %161 = fadd <8 x float> %160, %153
  %162 = fadd <8 x float> %144, %161
  %163 = fmul <8 x float> %162, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %164 = fadd <8 x float> %136, %163
  %165 = fadd <8 x float> %82, %164
  %166 = fmul <8 x float> %165, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <8 x float> %166, ptr %lsr.iv7, align 4, !tbaa !13
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep8 = getelementptr float, ptr %lsr.iv7, i64 8
  %lsr.iv.next13 = add i32 %lsr.iv12, 16
  %lsr.iv.next17 = add i32 %lsr.iv16, 16
  %lsr.iv.next21 = add i32 %lsr.iv20, 16
  %lsr.iv.next25 = add i32 %lsr.iv24, 16
  %.not4 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not4, label %"end for f75.s0.v3.v3", label %"for f75.s0.v3.v3"

"end for f75.s0.v3.v3":                           ; preds = %"for f75.s0.v3.v3", %"for f75.s0.v4.v346"
  br i1 %.not, label %"end for f75.s0.v3.v32", label %"for f75.s0.v3.v31.preheader", !prof !4

"for f75.s0.v3.v31.preheader":                    ; preds = %"end for f75.s0.v3.v3"
  %167 = trunc i64 %indvars.iv to i32
  %168 = add i32 %f75.s0.v4.v346.base, %167
  %169 = shl nsw i32 %168, 1
  %170 = sub nsw i32 %169, %f74.v4.min_realized
  %171 = add nsw i32 %170, -1
  %172 = mul nsw i32 %171, %28
  %t2148 = add nsw i32 %172, %49
  %173 = mul nsw i32 %170, %28
  %t2149 = add nsw i32 %173, %49
  %174 = add nsw i32 %170, 1
  %175 = mul nsw i32 %174, %28
  %t2150 = add nsw i32 %175, %49
  %176 = add nsw i32 %170, 2
  %177 = mul nsw i32 %176, %28
  %t2151 = add nsw i32 %177, %49
  %178 = sext i32 %t2151 to i64
  %179 = add nsw i64 %178, -12
  %180 = getelementptr inbounds float, ptr %f74.host, i64 %179
  %181 = load <8 x float>, ptr %180, align 4, !tbaa !56
  %182 = add nsw i64 %178, -4
  %183 = getelementptr inbounds float, ptr %f74.host, i64 %182
  %184 = load <8 x float>, ptr %183, align 4, !tbaa !56
  %185 = shufflevector <8 x float> %181, <8 x float> %184, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %186 = add nsw i64 %178, -14
  %187 = getelementptr inbounds float, ptr %f74.host, i64 %186
  %188 = load <8 x float>, ptr %187, align 4, !tbaa !56
  %189 = add nsw i64 %178, -6
  %190 = getelementptr inbounds float, ptr %f74.host, i64 %189
  %191 = load <8 x float>, ptr %190, align 4, !tbaa !56
  %192 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %193 = shufflevector <8 x float> %188, <8 x float> %191, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %194, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %196 = add nsw i64 %178, -16
  %197 = getelementptr inbounds float, ptr %f74.host, i64 %196
  %198 = load <8 x float>, ptr %197, align 4, !tbaa !56
  %199 = add nsw i64 %178, -8
  %200 = getelementptr inbounds float, ptr %f74.host, i64 %199
  %201 = load <8 x float>, ptr %200, align 4, !tbaa !56
  %202 = shufflevector <8 x float> %198, <8 x float> %201, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %203 = fadd <8 x float> %202, %195
  %204 = fadd <8 x float> %185, %203
  %205 = fmul <8 x float> %204, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %206 = sext i32 %t2150 to i64
  %207 = add nsw i64 %206, -12
  %208 = getelementptr inbounds float, ptr %f74.host, i64 %207
  %209 = load <8 x float>, ptr %208, align 4, !tbaa !56
  %210 = add nsw i64 %206, -4
  %211 = getelementptr inbounds float, ptr %f74.host, i64 %210
  %212 = load <8 x float>, ptr %211, align 4, !tbaa !56
  %213 = shufflevector <8 x float> %209, <8 x float> %212, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %214 = add nsw i64 %206, -14
  %215 = getelementptr inbounds float, ptr %f74.host, i64 %214
  %216 = load <8 x float>, ptr %215, align 4, !tbaa !56
  %217 = add nsw i64 %206, -6
  %218 = getelementptr inbounds float, ptr %f74.host, i64 %217
  %219 = load <8 x float>, ptr %218, align 4, !tbaa !56
  %220 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %221 = shufflevector <8 x float> %216, <8 x float> %219, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = fadd <8 x float> %221, %220
  %223 = fmul <8 x float> %222, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %224 = add nsw i64 %206, -16
  %225 = getelementptr inbounds float, ptr %f74.host, i64 %224
  %226 = load <8 x float>, ptr %225, align 4, !tbaa !56
  %227 = add nsw i64 %206, -8
  %228 = getelementptr inbounds float, ptr %f74.host, i64 %227
  %229 = load <8 x float>, ptr %228, align 4, !tbaa !56
  %230 = shufflevector <8 x float> %226, <8 x float> %229, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %231 = fadd <8 x float> %230, %223
  %232 = fadd <8 x float> %213, %231
  %233 = sext i32 %t2149 to i64
  %234 = add nsw i64 %233, -12
  %235 = getelementptr inbounds float, ptr %f74.host, i64 %234
  %236 = load <8 x float>, ptr %235, align 4, !tbaa !56
  %237 = add nsw i64 %233, -4
  %238 = getelementptr inbounds float, ptr %f74.host, i64 %237
  %239 = load <8 x float>, ptr %238, align 4, !tbaa !56
  %240 = shufflevector <8 x float> %236, <8 x float> %239, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = add nsw i64 %233, -14
  %242 = getelementptr inbounds float, ptr %f74.host, i64 %241
  %243 = load <8 x float>, ptr %242, align 4, !tbaa !56
  %244 = add nsw i64 %233, -6
  %245 = getelementptr inbounds float, ptr %f74.host, i64 %244
  %246 = load <8 x float>, ptr %245, align 4, !tbaa !56
  %247 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %248 = shufflevector <8 x float> %243, <8 x float> %246, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %249 = fadd <8 x float> %248, %247
  %250 = fmul <8 x float> %249, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %251 = add nsw i64 %233, -16
  %252 = getelementptr inbounds float, ptr %f74.host, i64 %251
  %253 = load <8 x float>, ptr %252, align 4, !tbaa !56
  %254 = add nsw i64 %233, -8
  %255 = getelementptr inbounds float, ptr %f74.host, i64 %254
  %256 = load <8 x float>, ptr %255, align 4, !tbaa !56
  %257 = shufflevector <8 x float> %253, <8 x float> %256, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %258 = fadd <8 x float> %257, %250
  %259 = fadd <8 x float> %240, %258
  %260 = fadd <8 x float> %232, %259
  %261 = fmul <8 x float> %260, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %262 = sext i32 %t2148 to i64
  %263 = add nsw i64 %262, -12
  %264 = getelementptr inbounds float, ptr %f74.host, i64 %263
  %265 = load <8 x float>, ptr %264, align 4, !tbaa !56
  %266 = add nsw i64 %262, -4
  %267 = getelementptr inbounds float, ptr %f74.host, i64 %266
  %268 = load <8 x float>, ptr %267, align 4, !tbaa !56
  %269 = shufflevector <8 x float> %265, <8 x float> %268, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %270 = add nsw i64 %262, -14
  %271 = getelementptr inbounds float, ptr %f74.host, i64 %270
  %272 = load <8 x float>, ptr %271, align 4, !tbaa !56
  %273 = add nsw i64 %262, -6
  %274 = getelementptr inbounds float, ptr %f74.host, i64 %273
  %275 = load <8 x float>, ptr %274, align 4, !tbaa !56
  %276 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %277 = shufflevector <8 x float> %272, <8 x float> %275, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %278, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %280 = add nsw i64 %262, -16
  %281 = getelementptr inbounds float, ptr %f74.host, i64 %280
  %282 = load <8 x float>, ptr %281, align 4, !tbaa !56
  %283 = add nsw i64 %262, -8
  %284 = getelementptr inbounds float, ptr %f74.host, i64 %283
  %285 = load <8 x float>, ptr %284, align 4, !tbaa !56
  %286 = shufflevector <8 x float> %282, <8 x float> %285, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %287 = fadd <8 x float> %286, %279
  %288 = fadd <8 x float> %269, %287
  %289 = fmul <8 x float> %288, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %290 = fadd <8 x float> %261, %289
  %291 = fadd <8 x float> %205, %290
  %292 = fmul <8 x float> %291, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %293 = add nsw i64 %18, %indvars.iv
  %294 = mul nsw i64 %293, %19
  %295 = add i64 %51, %294
  %296 = getelementptr inbounds float, ptr %f75.host, i64 %295
  store <8 x float> %292, ptr %296, align 4, !tbaa !13
  br label %"end for f75.s0.v3.v32"

"end for f75.s0.v3.v32":                          ; preds = %"for f75.s0.v3.v31.preheader", %"end for f75.s0.v3.v3"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep6 = getelementptr i1, ptr %lsr.iv4, i64 %24
  %lsr.iv.next11 = add i32 %lsr.iv10, %32
  %lsr.iv.next15 = add i32 %lsr.iv14, %32
  %lsr.iv.next19 = add i32 %lsr.iv18, %32
  %lsr.iv.next23 = add i32 %lsr.iv22, %32
  %.not2 = icmp eq i64 %indvars.iv.next, 32
  br i1 %.not2, label %destructor_block, label %"for f75.s0.v4.v346"

destructor_block:                                 ; preds = %"end for f75.s0.v3.v32"
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f9.s0.v6(ptr nocapture readnone %__user_context, i32 %f9.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 7
  %f9.s0.v4.max = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 8
  %f9.s0.v4.min = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 13
  %f8.host = load ptr, ptr %2, align 8
  %3 = add i32 %f9.s0.v4.max, 1
  %4 = icmp slt i32 %f9.s0.v4.min, %3
  br i1 %4, label %"for f9.s0.v4.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.preheader":                         ; preds = %entry
  %5 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 6
  %f9.s0.v3.min = load i32, ptr %5, align 4
  %6 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 5
  %f9.s0.v3.max = load i32, ptr %6, align 4
  %7 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 1
  %f8.stride.2 = load i32, ptr %7, align 4
  %a729 = load i32, ptr %closure, align 4
  %8 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 11
  %f9.v3.min_realized = load i32, ptr %8, align 4
  %9 = sext i32 %f9.v3.min_realized to i64
  %10 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 10
  %f9.v3.extent_realized.s.s = load i32, ptr %10, align 4
  %11 = sext i32 %f9.v3.extent_realized.s.s to i64
  %12 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 2
  %f8.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = add i32 %f9.s0.v3.max, 1
  %14 = sub i32 %13, %f9.s0.v3.min
  %reass.sub = sub nsw i64 %11, %9
  %15 = add nsw i64 %reass.sub, 1
  %16 = tail call i32 @llvm.smax.i32(i32 %a729, i32 0)
  %17 = shl nsw i64 %15, 2
  %18 = shl i32 %f8.v3.extent_realized.s, 1
  %19 = add i32 %18, 2
  %20 = icmp sgt i32 %13, %f9.s0.v3.min
  %t2154.s = sub nsw i32 %f9.s0.v6, %16
  %21 = mul i32 %t2154.s, %f8.stride.2
  br i1 %20, label %"for f9.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f9.s0.v4.us.preheader":                      ; preds = %"for f9.s0.v4.preheader"
  %22 = shl i32 %f9.s0.v3.min, 1
  %23 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 3
  %f8.v3.min_realized = load i32, ptr %23, align 4
  %24 = sub i32 %22, %f8.v3.min_realized
  %25 = add i32 %f8.v3.extent_realized.s, 1
  %26 = shl i32 %f9.s0.v4.min, 1
  %27 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 4
  %f8.v4.min_realized = load i32, ptr %27, align 4
  %28 = xor i32 %f8.v4.min_realized, -1
  %29 = add i32 %26, %28
  %30 = mul i32 %25, %29
  %31 = add i32 %24, %30
  %32 = sub i32 %26, %f8.v4.min_realized
  %33 = mul i32 %25, %32
  %34 = add i32 %24, %33
  %35 = or i32 %26, 1
  %36 = sub i32 %35, %f8.v4.min_realized
  %37 = mul i32 %25, %36
  %38 = add i32 %24, %37
  %39 = add i32 %26, 2
  %40 = sub i32 %39, %f8.v4.min_realized
  %41 = mul i32 %25, %40
  %42 = add i32 %24, %41
  %43 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 15
  %f9.host = load ptr, ptr %43, align 8
  %44 = sext i32 %f9.s0.v3.min to i64
  %45 = sub nsw i64 %44, %9
  %46 = sext i32 %f9.s0.v6 to i64
  %smax = zext i32 %16 to i64
  %47 = sub nsw i64 %46, %smax
  %48 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 9
  %f9.stride.2 = load i32, ptr %48, align 4
  %49 = sext i32 %f9.stride.2 to i64
  %50 = mul nsw i64 %47, %49
  %51 = add i64 %45, %50
  %52 = sext i32 %f9.s0.v4.min to i64
  %53 = getelementptr inbounds %closure_t.9, ptr %closure, i64 0, i32 12
  %f9.v4.min_realized = load i32, ptr %53, align 4
  %54 = sext i32 %f9.v4.min_realized to i64
  %55 = sub nsw i64 %52, %54
  %56 = mul i64 %15, %55
  %57 = add i64 %51, %56
  %scevgep = getelementptr float, ptr %f9.host, i64 %57
  %58 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %59 = add i32 %21, %41
  %60 = add i32 %59, %22
  %61 = sub i32 %60, %f8.v3.min_realized
  %62 = add i32 %21, %37
  %63 = add i32 %62, %22
  %64 = sub i32 %63, %f8.v3.min_realized
  %65 = add i32 %21, %33
  %66 = add i32 %65, %22
  %67 = sub i32 %66, %f8.v3.min_realized
  %68 = add i32 %21, %30
  %69 = add i32 %68, %22
  %70 = sub i32 %69, %f8.v3.min_realized
  %71 = sub i32 %f9.s0.v3.max, %f9.s0.v3.min
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %min.iters.check = icmp ult i32 %71, 3
  %mul.result = shl i32 %58, 1
  %mul.result6 = shl i32 %58, 1
  %mul.overflow7 = icmp slt i32 %58, 0
  %mul.result9 = shl i32 %58, 1
  %mul.result12 = shl i32 %58, 1
  %n.vec = and i64 %73, -4
  %.cast = trunc i64 %n.vec to i32
  %74 = shl i32 %.cast, 1
  %.cast14 = trunc i64 %n.vec to i32
  %75 = shl i32 %.cast14, 1
  %.cast17 = trunc i64 %n.vec to i32
  %76 = shl i32 %.cast17, 1
  %.cast20 = trunc i64 %n.vec to i32
  %77 = shl i32 %.cast20, 1
  %78 = shl nuw nsw i64 %n.vec, 2
  %.cast25 = trunc i64 %n.vec to i32
  %ind.end26 = sub i32 %14, %.cast25
  %invariant.gep = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep57 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep59 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep61 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep63 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep65 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep67 = getelementptr float, ptr %f8.host, i64 -1
  %invariant.gep69 = getelementptr float, ptr %f8.host, i64 -1
  %cmp.n = icmp eq i64 %73, %n.vec
  br label %"for f9.s0.v4.us"

"for f9.s0.v4.us":                                ; preds = %"for f9.s0.v4.us.preheader", %"end for f9.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f9.s0.v4.us.preheader" ], [ %indvar.next, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv19.us = phi i32 [ %31, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next20.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv15.us = phi i32 [ %34, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next16.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv10.us = phi i32 [ %38, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next11.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv6.us = phi i32 [ %42, %"for f9.s0.v4.us.preheader" ], [ %lsr.iv.next7.us, %"end for f9.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi ptr [ %scevgep, %"for f9.s0.v4.us.preheader" ], [ %scevgep3.us, %"end for f9.s0.v3.loopexit.us" ]
  %f9.s0.v4.us = phi i32 [ %f9.s0.v4.min, %"for f9.s0.v4.us.preheader" ], [ %217, %"end for f9.s0.v3.loopexit.us" ]
  br i1 %min.iters.check, label %"for f9.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f9.s0.v4.us"
  %79 = mul i32 %19, %indvar
  %80 = add i32 %70, %79
  %81 = add i32 %67, %79
  %82 = add i32 %64, %79
  %83 = add i32 %61, %79
  %84 = add i32 %83, %mul.result
  %85 = icmp slt i32 %84, %83
  %86 = add i32 %82, %mul.result6
  %87 = icmp slt i32 %86, %82
  %88 = or i1 %87, %mul.overflow7
  %89 = add i32 %81, %mul.result9
  %90 = icmp slt i32 %89, %81
  %91 = add i32 %80, %mul.result12
  %92 = icmp slt i32 %91, %80
  %93 = or i1 %85, %88
  %94 = or i1 %90, %93
  %95 = or i1 %92, %94
  br i1 %95, label %"for f9.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv19.us, %74
  %ind.end15 = add i32 %lsr.iv15.us, %75
  %ind.end18 = add i32 %lsr.iv10.us, %76
  %ind.end21 = add i32 %lsr.iv6.us, %77
  %ind.end23 = getelementptr i8, ptr %lsr.iv1.us, i64 %78
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %96 = shl i64 %index, 2
  %next.gep = getelementptr i8, ptr %lsr.iv1.us, i64 %96
  %.cast28 = trunc i64 %index to i32
  %97 = shl i32 %.cast28, 1
  %offset.idx = add i32 %lsr.iv6.us, %97
  %.cast29 = trunc i64 %index to i32
  %98 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv10.us, %98
  %.cast31 = trunc i64 %index to i32
  %99 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv15.us, %99
  %.cast33 = trunc i64 %index to i32
  %100 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv19.us, %100
  %101 = add i32 %offset.idx34, %21
  %102 = add i32 %offset.idx32, %21
  %103 = add i32 %offset.idx30, %21
  %104 = add i32 %offset.idx, %21
  %105 = sext i32 %104 to i64
  %106 = add nsw i64 %105, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %106
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !36
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec35 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep58 = getelementptr float, ptr %invariant.gep57, i64 %105
  %wide.vec36 = load <8 x float>, ptr %gep58, align 4, !tbaa !36
  %strided.vec37 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec38 = shufflevector <8 x float> %wide.vec36, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = fadd <4 x float> %strided.vec, %strided.vec38
  %108 = fmul <4 x float> %107, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %109 = fadd <4 x float> %strided.vec37, %108
  %110 = fadd <4 x float> %strided.vec35, %109
  %111 = fmul <4 x float> %110, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %112 = sext i32 %103 to i64
  %113 = add nsw i64 %112, 2
  %gep60 = getelementptr float, ptr %invariant.gep59, i64 %113
  %wide.vec39 = load <8 x float>, ptr %gep60, align 4, !tbaa !36
  %strided.vec40 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec41 = shufflevector <8 x float> %wide.vec39, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep62 = getelementptr float, ptr %invariant.gep61, i64 %112
  %wide.vec42 = load <8 x float>, ptr %gep62, align 4, !tbaa !36
  %strided.vec43 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec44 = shufflevector <8 x float> %wide.vec42, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %114 = fadd <4 x float> %strided.vec40, %strided.vec44
  %115 = fmul <4 x float> %114, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %116 = fadd <4 x float> %strided.vec43, %115
  %117 = fadd <4 x float> %strided.vec41, %116
  %118 = sext i32 %102 to i64
  %119 = add nsw i64 %118, 2
  %gep64 = getelementptr float, ptr %invariant.gep63, i64 %119
  %wide.vec45 = load <8 x float>, ptr %gep64, align 4, !tbaa !36
  %strided.vec46 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec47 = shufflevector <8 x float> %wide.vec45, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep66 = getelementptr float, ptr %invariant.gep65, i64 %118
  %wide.vec48 = load <8 x float>, ptr %gep66, align 4, !tbaa !36
  %strided.vec49 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec50 = shufflevector <8 x float> %wide.vec48, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %120 = fadd <4 x float> %strided.vec46, %strided.vec50
  %121 = fmul <4 x float> %120, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %122 = fadd <4 x float> %strided.vec49, %121
  %123 = fadd <4 x float> %strided.vec47, %122
  %124 = fadd <4 x float> %117, %123
  %125 = fmul <4 x float> %124, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %126 = sext i32 %101 to i64
  %127 = add nsw i64 %126, 2
  %gep68 = getelementptr float, ptr %invariant.gep67, i64 %127
  %wide.vec51 = load <8 x float>, ptr %gep68, align 4, !tbaa !36
  %strided.vec52 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec53 = shufflevector <8 x float> %wide.vec51, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep70 = getelementptr float, ptr %invariant.gep69, i64 %126
  %wide.vec54 = load <8 x float>, ptr %gep70, align 4, !tbaa !36
  %strided.vec55 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec56 = shufflevector <8 x float> %wide.vec54, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %128 = fadd <4 x float> %strided.vec52, %strided.vec56
  %129 = fmul <4 x float> %128, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %130 = fadd <4 x float> %strided.vec55, %129
  %131 = fadd <4 x float> %strided.vec53, %130
  %132 = fmul <4 x float> %131, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %133 = fadd <4 x float> %125, %132
  %134 = fadd <4 x float> %111, %133
  %135 = fmul <4 x float> %134, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  store <4 x float> %135, ptr %next.gep, align 4, !tbaa !32
  %index.next = add nuw i64 %index, 4
  %136 = icmp eq i64 %index.next, %n.vec
  br i1 %136, label %middle.block, label %vector.body, !llvm.loop !60

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us.preheader"

"for f9.s0.v3.us.preheader":                      ; preds = %vector.scevcheck, %"for f9.s0.v4.us", %middle.block
  %lsr.iv21.us.ph = phi i32 [ %lsr.iv19.us, %vector.scevcheck ], [ %lsr.iv19.us, %"for f9.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv17.us.ph = phi i32 [ %lsr.iv15.us, %vector.scevcheck ], [ %lsr.iv15.us, %"for f9.s0.v4.us" ], [ %ind.end15, %middle.block ]
  %lsr.iv13.us.ph = phi i32 [ %lsr.iv10.us, %vector.scevcheck ], [ %lsr.iv10.us, %"for f9.s0.v4.us" ], [ %ind.end18, %middle.block ]
  %lsr.iv8.us.ph = phi i32 [ %lsr.iv6.us, %vector.scevcheck ], [ %lsr.iv6.us, %"for f9.s0.v4.us" ], [ %ind.end21, %middle.block ]
  %lsr.iv4.us.ph = phi ptr [ %lsr.iv1.us, %vector.scevcheck ], [ %lsr.iv1.us, %"for f9.s0.v4.us" ], [ %ind.end23, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %14, %vector.scevcheck ], [ %14, %"for f9.s0.v4.us" ], [ %ind.end26, %middle.block ]
  br label %"for f9.s0.v3.us"

"for f9.s0.v3.us":                                ; preds = %"for f9.s0.v3.us.preheader", %"for f9.s0.v3.us"
  %lsr.iv21.us = phi i32 [ %lsr.iv.next22.us, %"for f9.s0.v3.us" ], [ %lsr.iv21.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv17.us = phi i32 [ %lsr.iv.next18.us, %"for f9.s0.v3.us" ], [ %lsr.iv17.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv13.us = phi i32 [ %lsr.iv.next14.us, %"for f9.s0.v3.us" ], [ %lsr.iv13.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv8.us = phi i32 [ %lsr.iv.next9.us, %"for f9.s0.v3.us" ], [ %lsr.iv8.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv4.us = phi ptr [ %scevgep5.us, %"for f9.s0.v3.us" ], [ %lsr.iv4.us.ph, %"for f9.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f9.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f9.s0.v3.us.preheader" ]
  %137 = add i32 %lsr.iv21.us, %21
  %138 = add i32 %lsr.iv17.us, %21
  %139 = add i32 %lsr.iv13.us, %21
  %140 = add i32 %lsr.iv8.us, %21
  %141 = sext i32 %140 to i64
  %142 = add nsw i64 %141, 2
  %143 = getelementptr inbounds float, ptr %f8.host, i64 %142
  %144 = load float, ptr %143, align 4, !tbaa !36
  %145 = add nsw i64 %141, 1
  %146 = getelementptr inbounds float, ptr %f8.host, i64 %145
  %147 = load float, ptr %146, align 4, !tbaa !36
  %148 = getelementptr inbounds float, ptr %f8.host, i64 %141
  %149 = load float, ptr %148, align 4, !tbaa !36
  %150 = fadd float %147, %149
  %151 = fmul float %150, 3.000000e+00
  %152 = add nsw i64 %141, -1
  %153 = getelementptr inbounds float, ptr %f8.host, i64 %152
  %154 = sext i32 %139 to i64
  %155 = add nsw i64 %154, 2
  %156 = getelementptr inbounds float, ptr %f8.host, i64 %155
  %157 = add nsw i64 %154, 1
  %158 = getelementptr inbounds float, ptr %f8.host, i64 %157
  %159 = load float, ptr %158, align 4, !tbaa !36
  %160 = getelementptr inbounds float, ptr %f8.host, i64 %154
  %161 = load float, ptr %160, align 4, !tbaa !36
  %162 = fadd float %159, %161
  %163 = fmul float %162, 3.000000e+00
  %164 = add nsw i64 %154, -1
  %165 = getelementptr inbounds float, ptr %f8.host, i64 %164
  %166 = load float, ptr %165, align 4, !tbaa !36
  %167 = fadd float %166, %163
  %168 = sext i32 %138 to i64
  %169 = add nsw i64 %168, 2
  %170 = getelementptr inbounds float, ptr %f8.host, i64 %169
  %171 = load float, ptr %170, align 4, !tbaa !36
  %172 = add nsw i64 %168, 1
  %173 = getelementptr inbounds float, ptr %f8.host, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !36
  %175 = getelementptr inbounds float, ptr %f8.host, i64 %168
  %176 = load float, ptr %175, align 4, !tbaa !36
  %177 = fadd float %174, %176
  %178 = fmul float %177, 3.000000e+00
  %179 = add nsw i64 %168, -1
  %180 = getelementptr inbounds float, ptr %f8.host, i64 %179
  %181 = load float, ptr %180, align 4, !tbaa !36
  %182 = fadd float %181, %178
  %183 = fadd float %171, %182
  %184 = load float, ptr %153, align 4, !tbaa !36
  %185 = load float, ptr %156, align 4, !tbaa !36
  %186 = insertelement <2 x float> poison, float %184, i64 0
  %187 = insertelement <2 x float> %186, float %185, i64 1
  %188 = insertelement <2 x float> poison, float %151, i64 0
  %189 = insertelement <2 x float> %188, float %167, i64 1
  %190 = fadd <2 x float> %187, %189
  %191 = insertelement <2 x float> poison, float %144, i64 0
  %192 = insertelement <2 x float> %191, float %183, i64 1
  %193 = fadd <2 x float> %192, %190
  %194 = fmul <2 x float> %193, <float 1.250000e-01, float 3.750000e-01>
  %195 = sext i32 %137 to i64
  %196 = add nsw i64 %195, 2
  %197 = getelementptr inbounds float, ptr %f8.host, i64 %196
  %198 = load float, ptr %197, align 4, !tbaa !36
  %199 = add nsw i64 %195, 1
  %200 = getelementptr inbounds float, ptr %f8.host, i64 %199
  %201 = load float, ptr %200, align 4, !tbaa !36
  %202 = getelementptr inbounds float, ptr %f8.host, i64 %195
  %203 = load float, ptr %202, align 4, !tbaa !36
  %204 = fadd float %201, %203
  %205 = fmul float %204, 3.000000e+00
  %206 = add nsw i64 %195, -1
  %207 = getelementptr inbounds float, ptr %f8.host, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !36
  %209 = fadd float %208, %205
  %210 = fadd float %198, %209
  %211 = fmul float %210, 1.250000e-01
  %212 = extractelement <2 x float> %194, i64 1
  %213 = fadd float %212, %211
  %214 = extractelement <2 x float> %194, i64 0
  %215 = fadd float %214, %213
  %216 = fmul float %215, 1.250000e-01
  store float %216, ptr %lsr.iv4.us, align 4, !tbaa !32
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %scevgep5.us = getelementptr float, ptr %lsr.iv4.us, i64 1
  %lsr.iv.next9.us = add i32 %lsr.iv8.us, 2
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, 2
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, 2
  %lsr.iv.next22.us = add i32 %lsr.iv21.us, 2
  %.not2.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not2.us, label %"end for f9.s0.v3.loopexit.us", label %"for f9.s0.v3.us", !llvm.loop !61

"end for f9.s0.v3.loopexit.us":                   ; preds = %"for f9.s0.v3.us", %middle.block
  %217 = add nsw i32 %f9.s0.v4.us, 1
  %scevgep3.us = getelementptr i1, ptr %lsr.iv1.us, i64 %17
  %lsr.iv.next7.us = add i32 %lsr.iv6.us, %19
  %lsr.iv.next11.us = add i32 %lsr.iv10.us, %19
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, %19
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, %19
  %.not.us = icmp eq i32 %f9.s0.v4.us, %f9.s0.v4.max
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f9.s0.v4.us"

destructor_block:                                 ; preds = %"end for f9.s0.v3.loopexit.us", %"for f9.s0.v4.preheader", %entry
  ret i32 0
}

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i32 @par_for___local_laplacian_f10.s0.v6(ptr nocapture readnone %__user_context, i32 %f10.s0.v6, ptr noalias nocapture readonly %closure) #2 {
entry:
  %0 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 3
  %f10.v4.extent_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 9
  %local_laplacian.min.1 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 10
  %f10.host = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 12
  %f9.host = load ptr, ptr %3, align 8
  %4 = add nsw i32 %local_laplacian.min.1, -254
  %5 = ashr i32 %4, 7
  %6 = add nsw i32 %f10.v4.extent_realized.s, 1
  %7 = add nsw i32 %6, %5
  %8 = icmp sgt i32 %f10.v4.extent_realized.s, -1
  br i1 %8, label %"for f10.s0.v4.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.preheader":                        ; preds = %entry
  %9 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 8
  %local_laplacian.min.0 = load i32, ptr %9, align 4
  %10 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 4
  %f9.stride.2 = load i32, ptr %10, align 4
  %a744 = load i32, ptr %closure, align 4
  %11 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 6
  %f9.v3.min_realized = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 5
  %f9.v3.extent_realized.s.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 2
  %f10.v3.extent_realized.s = load i32, ptr %13, align 4
  %14 = sext i32 %f10.v3.extent_realized.s to i64
  %15 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 1
  %f10.stride.2 = load i32, ptr %15, align 4
  %16 = sext i32 %f10.stride.2 to i64
  %17 = add i32 %f10.v3.extent_realized.s, 1
  %18 = add nsw i64 %14, 1
  %19 = sext i32 %5 to i64
  %20 = sext i32 %f10.s0.v6 to i64
  %21 = tail call i32 @llvm.smax.i32(i32 %a744, i32 0)
  %smax = zext i32 %21 to i64
  %22 = sub nsw i64 %20, %smax
  %23 = mul nsw i64 %22, %16
  %reass.sub = sub i32 %f9.v3.extent_realized.s.s, %f9.v3.min_realized
  %24 = add i32 %reass.sub, 1
  %25 = shl i32 %24, 1
  %26 = icmp ult i32 %f10.v3.extent_realized.s, 2147483647
  %27 = add nsw i32 %local_laplacian.min.0, -254
  %28 = ashr i32 %27, 7
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %23, %29
  %31 = shl nsw i32 %28, 1
  %t2168.s = sub nsw i32 %f10.s0.v6, %21
  %32 = mul i32 %t2168.s, %f9.stride.2
  %33 = add i32 %31, %32
  br i1 %26, label %"for f10.s0.v4.us.preheader", label %destructor_block, !prof !5

"for f10.s0.v4.us.preheader":                     ; preds = %"for f10.s0.v4.preheader"
  %34 = shl nsw i32 %5, 1
  %35 = getelementptr inbounds %closure_t.10, ptr %closure, i64 0, i32 7
  %f9.v4.min_realized = load i32, ptr %35, align 4
  %36 = xor i32 %f9.v4.min_realized, -1
  %37 = add i32 %34, %36
  %38 = mul i32 %24, %37
  %39 = sub i32 %38, %f9.v3.min_realized
  %40 = sub i32 %34, %f9.v4.min_realized
  %41 = mul i32 %24, %40
  %42 = sub i32 %41, %f9.v3.min_realized
  %43 = or i32 %34, 1
  %44 = sub i32 %43, %f9.v4.min_realized
  %45 = mul i32 %24, %44
  %46 = sub i32 %45, %f9.v3.min_realized
  %47 = add nsw i32 %34, 2
  %48 = sub i32 %47, %f9.v4.min_realized
  %49 = mul i32 %24, %48
  %50 = sub i32 %49, %f9.v3.min_realized
  %51 = add i32 %49, %32
  %52 = add i32 %51, %31
  %53 = sub i32 %52, %f9.v3.min_realized
  %54 = shl i32 %24, 1
  %55 = add i32 %45, %32
  %56 = add i32 %55, %31
  %57 = sub i32 %56, %f9.v3.min_realized
  %58 = add i32 %32, %41
  %59 = add i32 %58, %31
  %60 = sub i32 %59, %f9.v3.min_realized
  %61 = add i32 %38, %32
  %62 = add i32 %61, %31
  %63 = sub i32 %62, %f9.v3.min_realized
  %64 = zext i32 %17 to i64
  %min.iters.check = icmp ult i32 %17, 4
  %mul.result = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result7 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result10 = shl i32 %f10.v3.extent_realized.s, 1
  %mul.result13 = shl i32 %f10.v3.extent_realized.s, 1
  %n.vec = and i64 %64, 4294967292
  %.cast = trunc i64 %n.vec to i32
  %65 = shl i32 %.cast, 1
  %.cast15 = trunc i64 %n.vec to i32
  %66 = shl i32 %.cast15, 1
  %.cast18 = trunc i64 %n.vec to i32
  %67 = shl i32 %.cast18, 1
  %.cast21 = trunc i64 %n.vec to i32
  %68 = shl i32 %.cast21, 1
  %ind.end24 = add i64 %30, %n.vec
  %.cast26 = trunc i64 %n.vec to i32
  %ind.end27 = sub i32 %17, %.cast26
  %invariant.gep = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep59 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep61 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep63 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep65 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep67 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep69 = getelementptr float, ptr %f9.host, i64 -1
  %invariant.gep71 = getelementptr float, ptr %f9.host, i64 -1
  %cmp.n = icmp eq i64 %n.vec, %64
  br label %"for f10.s0.v4.us"

"for f10.s0.v4.us":                               ; preds = %"for f10.s0.v4.us.preheader", %"end for f10.s0.v3.loopexit.us"
  %indvar = phi i32 [ 0, %"for f10.s0.v4.us.preheader" ], [ %indvar.next, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv17.us = phi i32 [ %39, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next18.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv13.us = phi i32 [ %42, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next14.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv9.us = phi i32 [ %46, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next10.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv5.us = phi i32 [ %50, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next6.us, %"end for f10.s0.v3.loopexit.us" ]
  %lsr.iv1.us = phi i64 [ %19, %"for f10.s0.v4.us.preheader" ], [ %lsr.iv.next2.us, %"end for f10.s0.v3.loopexit.us" ]
  %69 = sub nsw i64 %lsr.iv1.us, %19
  %70 = mul i64 %69, %18
  %71 = sub i64 %70, %29
  br i1 %min.iters.check, label %"for f10.s0.v3.us.preheader", label %vector.scevcheck

vector.scevcheck:                                 ; preds = %"for f10.s0.v4.us"
  %72 = mul i32 %54, %indvar
  %73 = add i32 %63, %72
  %74 = add i32 %60, %72
  %75 = add i32 %57, %72
  %76 = add i32 %53, %72
  %77 = add i32 %76, %mul.result
  %78 = icmp slt i32 %77, %76
  %79 = add i32 %75, %mul.result7
  %80 = icmp slt i32 %79, %75
  %81 = add i32 %74, %mul.result10
  %82 = icmp slt i32 %81, %74
  %83 = add i32 %73, %mul.result13
  %84 = icmp slt i32 %83, %73
  %85 = or i1 %78, %80
  %86 = or i1 %82, %85
  %87 = or i1 %84, %86
  br i1 %87, label %"for f10.s0.v3.us.preheader", label %vector.ph

vector.ph:                                        ; preds = %vector.scevcheck
  %ind.end = add i32 %lsr.iv17.us, %65
  %ind.end16 = add i32 %lsr.iv13.us, %66
  %ind.end19 = add i32 %lsr.iv9.us, %67
  %ind.end22 = add i32 %lsr.iv5.us, %68
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %30, %index
  %.cast29 = trunc i64 %index to i32
  %88 = shl i32 %.cast29, 1
  %offset.idx30 = add i32 %lsr.iv5.us, %88
  %.cast31 = trunc i64 %index to i32
  %89 = shl i32 %.cast31, 1
  %offset.idx32 = add i32 %lsr.iv9.us, %89
  %.cast33 = trunc i64 %index to i32
  %90 = shl i32 %.cast33, 1
  %offset.idx34 = add i32 %lsr.iv13.us, %90
  %.cast35 = trunc i64 %index to i32
  %91 = shl i32 %.cast35, 1
  %offset.idx36 = add i32 %lsr.iv17.us, %91
  %92 = add i32 %33, %offset.idx36
  %93 = add i32 %33, %offset.idx34
  %94 = add i32 %33, %offset.idx32
  %95 = add i32 %33, %offset.idx30
  %96 = sext i32 %95 to i64
  %97 = add nsw i64 %96, 2
  %gep = getelementptr float, ptr %invariant.gep, i64 %97
  %wide.vec = load <8 x float>, ptr %gep, align 4, !tbaa !32
  %strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec37 = shufflevector <8 x float> %wide.vec, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep60 = getelementptr float, ptr %invariant.gep59, i64 %96
  %wide.vec38 = load <8 x float>, ptr %gep60, align 4, !tbaa !32
  %strided.vec39 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec40 = shufflevector <8 x float> %wide.vec38, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %98 = fadd <4 x float> %strided.vec, %strided.vec40
  %99 = fmul <4 x float> %98, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = fadd <4 x float> %strided.vec39, %99
  %101 = fadd <4 x float> %strided.vec37, %100
  %102 = fmul <4 x float> %101, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %103 = sext i32 %94 to i64
  %104 = add nsw i64 %103, 2
  %gep62 = getelementptr float, ptr %invariant.gep61, i64 %104
  %wide.vec41 = load <8 x float>, ptr %gep62, align 4, !tbaa !32
  %strided.vec42 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec43 = shufflevector <8 x float> %wide.vec41, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep64 = getelementptr float, ptr %invariant.gep63, i64 %103
  %wide.vec44 = load <8 x float>, ptr %gep64, align 4, !tbaa !32
  %strided.vec45 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec46 = shufflevector <8 x float> %wide.vec44, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %105 = fadd <4 x float> %strided.vec42, %strided.vec46
  %106 = fmul <4 x float> %105, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %107 = fadd <4 x float> %strided.vec45, %106
  %108 = fadd <4 x float> %strided.vec43, %107
  %109 = sext i32 %93 to i64
  %110 = add nsw i64 %109, 2
  %gep66 = getelementptr float, ptr %invariant.gep65, i64 %110
  %wide.vec47 = load <8 x float>, ptr %gep66, align 4, !tbaa !32
  %strided.vec48 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec49 = shufflevector <8 x float> %wide.vec47, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep68 = getelementptr float, ptr %invariant.gep67, i64 %109
  %wide.vec50 = load <8 x float>, ptr %gep68, align 4, !tbaa !32
  %strided.vec51 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec52 = shufflevector <8 x float> %wide.vec50, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %111 = fadd <4 x float> %strided.vec48, %strided.vec52
  %112 = fmul <4 x float> %111, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %113 = fadd <4 x float> %strided.vec51, %112
  %114 = fadd <4 x float> %strided.vec49, %113
  %115 = fadd <4 x float> %108, %114
  %116 = fmul <4 x float> %115, <float 3.750000e-01, float 3.750000e-01, float 3.750000e-01, float 3.750000e-01>
  %117 = sext i32 %92 to i64
  %118 = add nsw i64 %117, 2
  %gep70 = getelementptr float, ptr %invariant.gep69, i64 %118
  %wide.vec53 = load <8 x float>, ptr %gep70, align 4, !tbaa !32
  %strided.vec54 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec55 = shufflevector <8 x float> %wide.vec53, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %gep72 = getelementptr float, ptr %invariant.gep71, i64 %117
  %wide.vec56 = load <8 x float>, ptr %gep72, align 4, !tbaa !32
  %strided.vec57 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %strided.vec58 = shufflevector <8 x float> %wide.vec56, <8 x float> poison, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %119 = fadd <4 x float> %strided.vec54, %strided.vec58
  %120 = fmul <4 x float> %119, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %121 = fadd <4 x float> %strided.vec57, %120
  %122 = fadd <4 x float> %strided.vec55, %121
  %123 = fmul <4 x float> %122, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %124 = fadd <4 x float> %116, %123
  %125 = fadd <4 x float> %102, %124
  %126 = fmul <4 x float> %125, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %127 = add i64 %71, %offset.idx
  %128 = getelementptr inbounds float, ptr %f10.host, i64 %127
  store <4 x float> %126, ptr %128, align 4, !tbaa !28
  %index.next = add nuw i64 %index, 4
  %129 = icmp eq i64 %index.next, %n.vec
  br i1 %129, label %middle.block, label %vector.body, !llvm.loop !62

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us.preheader"

"for f10.s0.v3.us.preheader":                     ; preds = %vector.scevcheck, %"for f10.s0.v4.us", %middle.block
  %lsr.iv19.us.ph = phi i32 [ %lsr.iv17.us, %vector.scevcheck ], [ %lsr.iv17.us, %"for f10.s0.v4.us" ], [ %ind.end, %middle.block ]
  %lsr.iv15.us.ph = phi i32 [ %lsr.iv13.us, %vector.scevcheck ], [ %lsr.iv13.us, %"for f10.s0.v4.us" ], [ %ind.end16, %middle.block ]
  %lsr.iv11.us.ph = phi i32 [ %lsr.iv9.us, %vector.scevcheck ], [ %lsr.iv9.us, %"for f10.s0.v4.us" ], [ %ind.end19, %middle.block ]
  %lsr.iv7.us.ph = phi i32 [ %lsr.iv5.us, %vector.scevcheck ], [ %lsr.iv5.us, %"for f10.s0.v4.us" ], [ %ind.end22, %middle.block ]
  %lsr.iv3.us.ph = phi i64 [ %30, %vector.scevcheck ], [ %30, %"for f10.s0.v4.us" ], [ %ind.end24, %middle.block ]
  %lsr.iv.us.ph = phi i32 [ %17, %vector.scevcheck ], [ %17, %"for f10.s0.v4.us" ], [ %ind.end27, %middle.block ]
  br label %"for f10.s0.v3.us"

"for f10.s0.v3.us":                               ; preds = %"for f10.s0.v3.us.preheader", %"for f10.s0.v3.us"
  %lsr.iv19.us = phi i32 [ %lsr.iv.next20.us, %"for f10.s0.v3.us" ], [ %lsr.iv19.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv15.us = phi i32 [ %lsr.iv.next16.us, %"for f10.s0.v3.us" ], [ %lsr.iv15.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv11.us = phi i32 [ %lsr.iv.next12.us, %"for f10.s0.v3.us" ], [ %lsr.iv11.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv7.us = phi i32 [ %lsr.iv.next8.us, %"for f10.s0.v3.us" ], [ %lsr.iv7.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv3.us = phi i64 [ %lsr.iv.next4.us, %"for f10.s0.v3.us" ], [ %lsr.iv3.us.ph, %"for f10.s0.v3.us.preheader" ]
  %lsr.iv.us = phi i32 [ %lsr.iv.next.us, %"for f10.s0.v3.us" ], [ %lsr.iv.us.ph, %"for f10.s0.v3.us.preheader" ]
  %130 = add i32 %33, %lsr.iv19.us
  %131 = add i32 %33, %lsr.iv15.us
  %132 = add i32 %33, %lsr.iv11.us
  %133 = add i32 %33, %lsr.iv7.us
  %134 = sext i32 %133 to i64
  %135 = add nsw i64 %134, 2
  %136 = getelementptr inbounds float, ptr %f9.host, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !32
  %138 = add nsw i64 %134, 1
  %139 = getelementptr inbounds float, ptr %f9.host, i64 %138
  %140 = load float, ptr %139, align 4, !tbaa !32
  %141 = getelementptr inbounds float, ptr %f9.host, i64 %134
  %142 = load float, ptr %141, align 4, !tbaa !32
  %143 = fadd float %140, %142
  %144 = fmul float %143, 3.000000e+00
  %145 = add nsw i64 %134, -1
  %146 = getelementptr inbounds float, ptr %f9.host, i64 %145
  %147 = sext i32 %132 to i64
  %148 = add nsw i64 %147, 2
  %149 = getelementptr inbounds float, ptr %f9.host, i64 %148
  %150 = add nsw i64 %147, 1
  %151 = getelementptr inbounds float, ptr %f9.host, i64 %150
  %152 = load float, ptr %151, align 4, !tbaa !32
  %153 = getelementptr inbounds float, ptr %f9.host, i64 %147
  %154 = load float, ptr %153, align 4, !tbaa !32
  %155 = fadd float %152, %154
  %156 = fmul float %155, 3.000000e+00
  %157 = add nsw i64 %147, -1
  %158 = getelementptr inbounds float, ptr %f9.host, i64 %157
  %159 = load float, ptr %158, align 4, !tbaa !32
  %160 = fadd float %159, %156
  %161 = sext i32 %131 to i64
  %162 = add nsw i64 %161, 2
  %163 = getelementptr inbounds float, ptr %f9.host, i64 %162
  %164 = load float, ptr %163, align 4, !tbaa !32
  %165 = add nsw i64 %161, 1
  %166 = getelementptr inbounds float, ptr %f9.host, i64 %165
  %167 = load float, ptr %166, align 4, !tbaa !32
  %168 = getelementptr inbounds float, ptr %f9.host, i64 %161
  %169 = load float, ptr %168, align 4, !tbaa !32
  %170 = fadd float %167, %169
  %171 = fmul float %170, 3.000000e+00
  %172 = add nsw i64 %161, -1
  %173 = getelementptr inbounds float, ptr %f9.host, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !32
  %175 = fadd float %174, %171
  %176 = fadd float %164, %175
  %177 = load float, ptr %146, align 4, !tbaa !32
  %178 = load float, ptr %149, align 4, !tbaa !32
  %179 = insertelement <2 x float> poison, float %177, i64 0
  %180 = insertelement <2 x float> %179, float %178, i64 1
  %181 = insertelement <2 x float> poison, float %144, i64 0
  %182 = insertelement <2 x float> %181, float %160, i64 1
  %183 = fadd <2 x float> %180, %182
  %184 = insertelement <2 x float> poison, float %137, i64 0
  %185 = insertelement <2 x float> %184, float %176, i64 1
  %186 = fadd <2 x float> %185, %183
  %187 = fmul <2 x float> %186, <float 1.250000e-01, float 3.750000e-01>
  %188 = sext i32 %130 to i64
  %189 = add nsw i64 %188, 2
  %190 = getelementptr inbounds float, ptr %f9.host, i64 %189
  %191 = load float, ptr %190, align 4, !tbaa !32
  %192 = add nsw i64 %188, 1
  %193 = getelementptr inbounds float, ptr %f9.host, i64 %192
  %194 = load float, ptr %193, align 4, !tbaa !32
  %195 = getelementptr inbounds float, ptr %f9.host, i64 %188
  %196 = load float, ptr %195, align 4, !tbaa !32
  %197 = fadd float %194, %196
  %198 = fmul float %197, 3.000000e+00
  %199 = add nsw i64 %188, -1
  %200 = getelementptr inbounds float, ptr %f9.host, i64 %199
  %201 = load float, ptr %200, align 4, !tbaa !32
  %202 = fadd float %201, %198
  %203 = fadd float %191, %202
  %204 = fmul float %203, 1.250000e-01
  %205 = extractelement <2 x float> %187, i64 1
  %206 = fadd float %205, %204
  %207 = extractelement <2 x float> %187, i64 0
  %208 = fadd float %207, %206
  %209 = fmul float %208, 1.250000e-01
  %210 = add i64 %71, %lsr.iv3.us
  %211 = getelementptr inbounds float, ptr %f10.host, i64 %210
  store float %209, ptr %211, align 4, !tbaa !28
  %lsr.iv.next.us = add i32 %lsr.iv.us, -1
  %lsr.iv.next4.us = add i64 %lsr.iv3.us, 1
  %lsr.iv.next8.us = add i32 %lsr.iv7.us, 2
  %lsr.iv.next12.us = add i32 %lsr.iv11.us, 2
  %lsr.iv.next16.us = add i32 %lsr.iv15.us, 2
  %lsr.iv.next20.us = add i32 %lsr.iv19.us, 2
  %.not3.us = icmp eq i32 %lsr.iv.next.us, 0
  br i1 %.not3.us, label %"end for f10.s0.v3.loopexit.us", label %"for f10.s0.v3.us", !llvm.loop !63

"end for f10.s0.v3.loopexit.us":                  ; preds = %"for f10.s0.v3.us", %middle.block
  %lsr.iv.next2.us = add nsw i64 %lsr.iv1.us, 1
  %lsr.us = trunc i64 %lsr.iv.next2.us to i32
  %lsr.iv.next6.us = add i32 %lsr.iv5.us, %25
  %lsr.iv.next10.us = add i32 %lsr.iv9.us, %25
  %lsr.iv.next14.us = add i32 %lsr.iv13.us, %25
  %lsr.iv.next18.us = add i32 %lsr.iv17.us, %25
  %.not.us = icmp eq i32 %7, %lsr.us
  %indvar.next = add i32 %indvar, 1
  br i1 %.not.us, label %destructor_block, label %"for f10.s0.v4.us"

destructor_block:                                 ; preds = %"end for f10.s0.v3.loopexit.us", %"for f10.s0.v4.preheader", %entry
  ret i32 0
}

define internal i32 @par_for___local_laplacian_local_laplacian.s0.v4.v264(ptr %__user_context, i32 %local_laplacian.s0.v4.v264, ptr noalias readonly %closure) {
entry:
  %beta = load float, ptr %closure, align 4
  %0 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 1
  %f0.v3.min_realized.s = load i32, ptr %0, align 4
  %1 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 2
  %a1139 = load i32, ptr %1, align 4
  %2 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 3
  %f130.v3.extent_realized.s = load i32, ptr %2, align 4
  %3 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 4
  %f130.v3.min_realized = load i32, ptr %3, align 4
  %4 = sext i32 %f130.v3.min_realized to i64
  %5 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 5
  %f2.v3.extent_realized.s = load i32, ptr %5, align 4
  %6 = sext i32 %f2.v3.extent_realized.s to i64
  %7 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 6
  %f2.v3.min_realized = load i32, ptr %7, align 4
  %8 = sext i32 %f2.v3.min_realized to i64
  %9 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 7
  %f2.v4.min_realized = load i32, ptr %9, align 4
  %10 = sext i32 %f2.v4.min_realized to i64
  %11 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 8
  %f4.stride.1 = load i32, ptr %11, align 4
  %12 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 9
  %f4.v3.extent_realized.s = load i32, ptr %12, align 4
  %13 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 10
  %f4.v3.min_realized = load i32, ptr %13, align 4
  %14 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 11
  %f4.v4.min_realized = load i32, ptr %14, align 4
  %15 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 12
  %f5.stride.1 = load i32, ptr %15, align 4
  %16 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 13
  %f5.v3.extent_realized.s = load i32, ptr %16, align 4
  %17 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 14
  %f5.v3.min_realized = load i32, ptr %17, align 4
  %18 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 15
  %f5.v4.min_realized = load i32, ptr %18, align 4
  %19 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 16
  %f6.stride.1 = load i32, ptr %19, align 4
  %20 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 17
  %f6.v3.extent_realized.s = load i32, ptr %20, align 4
  %21 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 18
  %f6.v3.min_realized = load i32, ptr %21, align 4
  %22 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 19
  %f6.v4.min_realized = load i32, ptr %22, align 4
  %23 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 20
  %f7.stride.1 = load i32, ptr %23, align 4
  %24 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 21
  %f7.v3.extent_realized.s = load i32, ptr %24, align 4
  %25 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 22
  %f7.v3.min_realized = load i32, ptr %25, align 4
  %26 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 23
  %f7.v4.min_realized = load i32, ptr %26, align 4
  %27 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 24
  %f72.v3.extent_realized.s = load i32, ptr %27, align 4
  %28 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 25
  %f72.v3.min_realized = load i32, ptr %28, align 4
  %29 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 26
  %f72.v4.min_realized = load i32, ptr %29, align 4
  %30 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 27
  %f73.v3.extent_realized.s = load i32, ptr %30, align 4
  %31 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 28
  %f73.v3.min_realized = load i32, ptr %31, align 4
  %32 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 29
  %f73.v4.min_realized = load i32, ptr %32, align 4
  %33 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 30
  %f74.v3.extent_realized.s = load i32, ptr %33, align 4
  %34 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 31
  %f74.v3.min_realized = load i32, ptr %34, align 4
  %35 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 32
  %f74.v4.min_realized = load i32, ptr %35, align 4
  %36 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 33
  %f75.v3.extent_realized.s = load i32, ptr %36, align 4
  %37 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 34
  %f75.v3.min_realized = load i32, ptr %37, align 4
  %38 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 35
  %f75.v4.min_realized = load i32, ptr %38, align 4
  %39 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 36
  %f8.stride.2 = load i32, ptr %39, align 4
  %40 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 37
  %f8.v3.extent_realized.s = load i32, ptr %40, align 4
  %41 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 38
  %f8.v3.min_realized = load i32, ptr %41, align 4
  %42 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 39
  %f8.v4.min_realized = load i32, ptr %42, align 4
  %43 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 40
  %input.extent.0 = load i32, ptr %43, align 4
  %44 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 41
  %input.extent.1 = load i32, ptr %44, align 4
  %45 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 42
  %input.extent.2 = load i32, ptr %45, align 4
  %46 = sext i32 %input.extent.2 to i64
  %47 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 43
  %input.min.0 = load i32, ptr %47, align 4
  %48 = sext i32 %input.min.0 to i64
  %49 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 44
  %b1148 = load i32, ptr %49, align 4
  %50 = sext i32 %b1148 to i64
  %51 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 45
  %b1146 = load i32, ptr %51, align 4
  %b1037 = sext i32 %b1146 to i64
  %52 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 46
  %input.stride.1 = load i32, ptr %52, align 4
  %53 = sext i32 %input.stride.1 to i64
  %54 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 47
  %input.stride.2 = load i32, ptr %54, align 4
  %55 = sext i32 %input.stride.2 to i64
  %56 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 48
  %levels = load i32, ptr %56, align 4
  %57 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 49
  %local_laplacian.extent.0 = load i32, ptr %57, align 4
  %58 = sext i32 %local_laplacian.extent.0 to i64
  %59 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 50
  %local_laplacian.extent.1 = load i32, ptr %59, align 4
  %60 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 51
  %local_laplacian.extent.2 = load i32, ptr %60, align 4
  %61 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 52
  %local_laplacian.min.0 = load i32, ptr %61, align 4
  %62 = sext i32 %local_laplacian.min.0 to i64
  %63 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 53
  %a1120 = load i32, ptr %63, align 4
  %64 = sext i32 %a1120 to i64
  %65 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 54
  %local_laplacian.min.1 = load i32, ptr %65, align 4
  %66 = sext i32 %local_laplacian.min.1 to i64
  %67 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 55
  %local_laplacian.min.1.required = load i32, ptr %67, align 4
  %68 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 56
  %b1028 = load i32, ptr %68, align 4
  %69 = sext i32 %b1028 to i64
  %70 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 57
  %local_laplacian.s0.v4.v264.epilogue = load i32, ptr %70, align 4
  %71 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 58
  %local_laplacian.s0.v4.v264.prologue = load i32, ptr %71, align 4
  %72 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 59
  %local_laplacian.stride.1 = load i32, ptr %72, align 4
  %73 = sext i32 %local_laplacian.stride.1 to i64
  %74 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 60
  %local_laplacian.stride.2 = load i32, ptr %74, align 4
  %75 = sext i32 %local_laplacian.stride.2 to i64
  %76 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 61
  %f0.host = load ptr, ptr %76, align 8
  %77 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 63
  %f130.host = load ptr, ptr %77, align 8
  %78 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 65
  %f2.host = load ptr, ptr %78, align 8
  %79 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 67
  %f4.host = load ptr, ptr %79, align 8
  %80 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 69
  %f5.host = load ptr, ptr %80, align 8
  %81 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 71
  %f6.host = load ptr, ptr %81, align 8
  %82 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 73
  %f7.host = load ptr, ptr %82, align 8
  %83 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 75
  %f72.host = load ptr, ptr %83, align 8
  %84 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 77
  %f73.host = load ptr, ptr %84, align 8
  %85 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 79
  %f74.host = load ptr, ptr %85, align 8
  %86 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 81
  %f75.host = load ptr, ptr %86, align 8
  %87 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 83
  %f8.host = load ptr, ptr %87, align 8
  %88 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 85
  %input.host = load ptr, ptr %88, align 8
  %89 = getelementptr inbounds %closure_t.11, ptr %closure, i64 0, i32 87
  %local_laplacian.host = load ptr, ptr %89, align 8
  %90 = icmp sgt i32 %local_laplacian.s0.v4.v264.epilogue, %local_laplacian.s0.v4.v264
  %91 = icmp sle i32 %local_laplacian.s0.v4.v264.prologue, %local_laplacian.s0.v4.v264
  %92 = and i1 %90, %91
  %93 = shl nsw i32 %local_laplacian.s0.v4.v264, 6
  %a782 = add nsw i32 %local_laplacian.min.1, %93
  %94 = add i32 %local_laplacian.extent.1, -64
  %b784 = add i32 %94, %local_laplacian.min.1
  %local_laplacian.s0.v4.v4.base = tail call i32 @llvm.smin.i32(i32 %b784, i32 %a782)
  %a784 = add nsw i32 %a1120, -14
  %95 = add nsw i32 %local_laplacian.min.0, %local_laplacian.extent.0
  %b786 = add nsw i32 %95, -43
  %96 = tail call i32 @llvm.smin.i32(i32 %b786, i32 %a784)
  %97 = ashr i32 %96, 4
  %a783 = add nsw i32 %97, -1
  %a785 = add nsw i32 %a1120, -30
  %b787 = add nsw i32 %95, -83
  %98 = tail call i32 @llvm.smin.i32(i32 %b787, i32 %a785)
  %b785 = ashr i32 %98, 4
  %.not167 = icmp slt i32 %b785, %97
  %f129.v3.min_realized = select i1 %.not167, i32 %b785, i32 %a783
  %99 = ashr i32 %a784, 3
  %100 = add nsw i32 %95, 13
  %101 = ashr i32 %100, 3
  %102 = sub nsw i32 %101, %99
  %103 = and i32 %102, -8
  %a790 = add nsw i32 %103, %99
  %b792 = ashr i32 %b786, 3
  %104 = tail call i32 @llvm.smin.i32(i32 %b792, i32 %a790)
  %105 = add nsw i32 %104, 9
  %a789 = ashr i32 %105, 1
  %106 = ashr i32 %a785, 4
  %107 = add nsw i32 %95, 29
  %108 = ashr i32 %107, 4
  %109 = sub nsw i32 %108, %106
  %110 = and i32 %109, -8
  %a791 = add nsw i32 %110, %106
  %b793 = ashr i32 %b787, 4
  %111 = tail call i32 @llvm.smin.i32(i32 %b793, i32 %a791)
  %b791 = add nsw i32 %111, 7
  %112 = tail call i32 @llvm.smax.i32(i32 %a789, i32 %b791)
  %f129.v3.extent_realized.s = sub nsw i32 %112, %f129.v3.min_realized
  %113 = add nsw i32 %local_laplacian.s0.v4.v4.base, 2
  %t3087 = and i32 %113, 15
  %114 = add nuw nsw i32 %t3087, 139
  %115 = lshr i32 %114, 4
  %116 = zext i32 %115 to i64
  %117 = add nsw i32 %f129.v3.extent_realized.s, 1
  %118 = zext i32 %117 to i64
  %119 = shl nuw nsw i64 %118, 2
  %120 = mul nuw nsw i64 %119, %116
  %121 = icmp ult i64 %120, 2147483648
  br i1 %92, label %true_bb, label %false_bb

true_bb:                                          ; preds = %entry
  %122 = ashr i32 %102, 3
  %123 = ashr i32 %109, 3
  br i1 %121, label %"assert succeeded", label %"assert failed", !prof !5

false_bb:                                         ; preds = %entry
  %124 = lshr i32 %102, 3
  %125 = lshr i32 %109, 3
  br i1 %121, label %"assert succeeded113", label %"assert failed112", !prof !5

"assert failed":                                  ; preds = %true_bb
  %126 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded":                               ; preds = %true_bb
  %127 = add nuw nsw i64 %120, 4
  %128 = tail call ptr @halide_malloc(ptr %__user_context, i64 %127)
  %.not97 = icmp eq ptr %128, null
  br i1 %.not97, label %"assert failed1", label %"assert succeeded2", !prof !4

destructor_block.thread:                          ; preds = %if.then.i265, %"assert failed73", %"assert failed17", %"assert failed15", %"assert failed13", %"assert failed11", %"assert failed9", %"assert failed7", %"assert failed5", %"assert failed3", %"assert failed1", %"assert failed", %if.then.i280, %"assert failed137", %"assert failed135", %"assert failed129", %"assert failed127", %"assert failed121", %"assert failed119", %"assert failed114", %"assert failed112"
  %.029.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ %9113, %"assert failed135" ], [ %9113, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.028.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ %9074, %"assert failed127" ], [ %9074, %"assert failed129" ], [ %9074, %"assert failed135" ], [ %9074, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.027.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ %9051, %"assert failed119" ], [ %9051, %"assert failed121" ], [ %9051, %"assert failed127" ], [ %9051, %"assert failed129" ], [ %9051, %"assert failed135" ], [ %9051, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ null, %"assert failed15" ], [ null, %"assert failed17" ], [ null, %"assert failed73" ], [ null, %if.then.i265 ]
  %.024.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ null, %"assert failed11" ], [ null, %"assert failed13" ], [ %222, %"assert failed15" ], [ %222, %"assert failed17" ], [ %222, %"assert failed73" ], [ null, %if.then.i265 ]
  %.023.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ null, %"assert failed7" ], [ null, %"assert failed9" ], [ %193, %"assert failed11" ], [ %193, %"assert failed13" ], [ %193, %"assert failed15" ], [ %193, %"assert failed17" ], [ %193, %"assert failed73" ], [ null, %if.then.i265 ]
  %.022.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ null, %"assert failed3" ], [ null, %"assert failed5" ], [ %154, %"assert failed7" ], [ %154, %"assert failed9" ], [ %154, %"assert failed11" ], [ %154, %"assert failed13" ], [ %154, %"assert failed15" ], [ %154, %"assert failed17" ], [ %154, %"assert failed73" ], [ null, %if.then.i265 ]
  %.0.ph = phi ptr [ null, %"assert failed112" ], [ null, %"assert failed114" ], [ null, %"assert failed119" ], [ null, %"assert failed121" ], [ null, %"assert failed127" ], [ null, %"assert failed129" ], [ null, %"assert failed135" ], [ null, %"assert failed137" ], [ null, %if.then.i280 ], [ null, %"assert failed" ], [ null, %"assert failed1" ], [ %128, %"assert failed3" ], [ %128, %"assert failed5" ], [ %128, %"assert failed7" ], [ %128, %"assert failed9" ], [ %128, %"assert failed11" ], [ %128, %"assert failed13" ], [ %128, %"assert failed15" ], [ %128, %"assert failed17" ], [ %128, %"assert failed73" ], [ null, %if.then.i265 ]
  %.ph = phi i32 [ %9049, %"assert failed112" ], [ %9052, %"assert failed114" ], [ %9072, %"assert failed119" ], [ %9075, %"assert failed121" ], [ %9111, %"assert failed127" ], [ %9114, %"assert failed129" ], [ %9140, %"assert failed135" ], [ %9143, %"assert failed137" ], [ 0, %if.then.i280 ], [ %126, %"assert failed" ], [ %132, %"assert failed1" ], [ %152, %"assert failed3" ], [ %155, %"assert failed5" ], [ %191, %"assert failed7" ], [ %194, %"assert failed9" ], [ %220, %"assert failed11" ], [ %223, %"assert failed13" ], [ %2524, %"assert failed15" ], [ %2527, %"assert failed17" ], [ %7747, %"assert failed73" ], [ 0, %if.then.i265 ]
  %.not185 = icmp eq i32 %.ph, 0
  br label %call_destructor.exit206

destructor_block:                                 ; preds = %"assert failed186", %"assert failed184"
  %129 = phi i32 [ %11516, %"assert failed186" ], [ %11514, %"assert failed184" ]
  %.not = icmp eq i32 %129, 0
  br i1 %.not, label %call_destructor.exit251, label %if.then.i205

if.then.i205:                                     ; preds = %destructor_block
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9142) #7
  br label %call_destructor.exit206

call_destructor.exit206:                          ; preds = %destructor_block.thread, %if.then.i205
  %.not195 = phi i1 [ %.not185, %destructor_block.thread ], [ false, %if.then.i205 ]
  %130 = phi i32 [ %.ph, %destructor_block.thread ], [ %129, %if.then.i205 ]
  %.0194 = phi ptr [ %.0.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.022193 = phi ptr [ %.022.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.023192 = phi ptr [ %.023.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.024191 = phi ptr [ %.024.ph, %destructor_block.thread ], [ null, %if.then.i205 ]
  %.027190 = phi ptr [ %.027.ph, %destructor_block.thread ], [ %9051, %if.then.i205 ]
  %.028189 = phi ptr [ %.028.ph, %destructor_block.thread ], [ %9074, %if.then.i205 ]
  %.029188 = phi ptr [ %.029.ph, %destructor_block.thread ], [ %9113, %if.then.i205 ]
  %tobool.i207 = icmp eq ptr %.029188, null
  %brmerge.i209 = or i1 %.not195, %tobool.i207
  br i1 %brmerge.i209, label %call_destructor.exit211, label %if.then.i210

if.then.i210:                                     ; preds = %call_destructor.exit206
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.029188) #7
  br label %call_destructor.exit211

call_destructor.exit211:                          ; preds = %if.then.i210, %call_destructor.exit206
  %tobool.i212 = icmp eq ptr %.028189, null
  %brmerge.i214 = or i1 %.not195, %tobool.i212
  br i1 %brmerge.i214, label %call_destructor.exit216, label %if.then.i215

if.then.i215:                                     ; preds = %call_destructor.exit211
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.028189) #7
  br label %call_destructor.exit216

call_destructor.exit216:                          ; preds = %if.then.i215, %call_destructor.exit211
  %tobool.i217 = icmp eq ptr %.027190, null
  %brmerge.i219 = or i1 %.not195, %tobool.i217
  br i1 %brmerge.i219, label %call_destructor.exit231, label %if.then.i220

if.then.i220:                                     ; preds = %call_destructor.exit216
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.027190) #7
  br label %call_destructor.exit231

call_destructor.exit231:                          ; preds = %if.then.i220, %call_destructor.exit216
  %tobool.i232 = icmp eq ptr %.024191, null
  %brmerge.i234 = or i1 %.not195, %tobool.i232
  br i1 %brmerge.i234, label %call_destructor.exit236, label %if.then.i235

if.then.i235:                                     ; preds = %call_destructor.exit231
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.024191) #7
  br label %call_destructor.exit236

call_destructor.exit236:                          ; preds = %if.then.i235, %call_destructor.exit231
  %tobool.i237 = icmp eq ptr %.023192, null
  %brmerge.i239 = or i1 %.not195, %tobool.i237
  br i1 %brmerge.i239, label %call_destructor.exit241, label %if.then.i240

if.then.i240:                                     ; preds = %call_destructor.exit236
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.023192) #7
  br label %call_destructor.exit241

call_destructor.exit241:                          ; preds = %if.then.i240, %call_destructor.exit236
  %tobool.i242 = icmp eq ptr %.022193, null
  %brmerge.i244 = or i1 %.not195, %tobool.i242
  br i1 %brmerge.i244, label %call_destructor.exit246, label %if.then.i245

if.then.i245:                                     ; preds = %call_destructor.exit241
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.022193) #7
  br label %call_destructor.exit246

call_destructor.exit246:                          ; preds = %if.then.i245, %call_destructor.exit241
  %tobool.i247 = icmp eq ptr %.0194, null
  %brmerge.i249 = or i1 %.not195, %tobool.i247
  br i1 %brmerge.i249, label %call_destructor.exit251, label %if.then.i250

if.then.i250:                                     ; preds = %call_destructor.exit246
  tail call void @halide_free(ptr %__user_context, ptr nonnull %.0194) #7
  br label %call_destructor.exit251

call_destructor.exit251:                          ; preds = %destructor_block, %if.then.i250, %call_destructor.exit246
  %131 = phi i32 [ %130, %if.then.i250 ], [ %130, %call_destructor.exit246 ], [ 0, %destructor_block ]
  ret i32 %131

"assert failed1":                                 ; preds = %"assert succeeded"
  %132 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded2":                              ; preds = %"assert succeeded"
  %a793 = add nsw i32 %a1120, -6
  %b795 = add nsw i32 %95, -23
  %133 = tail call i32 @llvm.smin.i32(i32 %b795, i32 %a793)
  %134 = ashr i32 %133, 3
  %a792 = add nsw i32 %134, -1
  %b794 = ashr i32 %96, 3
  %.not168 = icmp slt i32 %b794, %134
  %f128.v3.min_realized = select i1 %.not168, i32 %b794, i32 %a792
  %135 = ashr i32 %a793, 2
  %136 = add nsw i32 %95, 5
  %137 = ashr i32 %136, 2
  %138 = sub nsw i32 %137, %135
  %139 = ashr i32 %138, 3
  %140 = and i32 %138, -8
  %a799 = add nsw i32 %140, %135
  %b801 = ashr i32 %b795, 2
  %141 = tail call i32 @llvm.smin.i32(i32 %b801, i32 %a799)
  %142 = add nsw i32 %141, 9
  %a798 = ashr i32 %142, 1
  %b800 = add nsw i32 %104, 7
  %143 = tail call i32 @llvm.smax.i32(i32 %a798, i32 %b800)
  %f128.v3.extent_realized.s = sub nsw i32 %143, %f128.v3.min_realized
  %t3088 = and i32 %113, 7
  %144 = add nuw nsw i32 %t3088, 99
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = add nsw i32 %f128.v3.extent_realized.s, 1
  %148 = zext i32 %147 to i64
  %149 = shl nuw nsw i64 %148, 2
  %150 = mul nuw nsw i64 %149, %146
  %151 = icmp ult i64 %150, 2147483648
  br i1 %151, label %"assert succeeded4", label %"assert failed3", !prof !5

"assert failed3":                                 ; preds = %"assert succeeded2"
  %152 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %150, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded4":                              ; preds = %"assert succeeded2"
  %153 = add nuw nsw i64 %150, 4
  %154 = tail call ptr @halide_malloc(ptr %__user_context, i64 %153)
  %.not98 = icmp eq ptr %154, null
  br i1 %.not98, label %"assert failed5", label %"assert succeeded6", !prof !4

"assert failed5":                                 ; preds = %"assert succeeded4"
  %155 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded6":                              ; preds = %"assert succeeded4"
  %156 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a802 = add nsw i32 %156, -1
  %157 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b804 = ashr i32 %157, 1
  %.not169 = icmp slt i32 %b804, %156
  %158 = select i1 %.not169, i32 %b804, i32 %a802
  %159 = ashr i32 %158, 1
  %a801 = add nsw i32 %159, -1
  %160 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b803 = ashr i32 %160, 2
  %.not170 = icmp slt i32 %b803, %159
  %f127.v4.min_realized = select i1 %.not170, i32 %b803, i32 %a801
  %161 = ashr i32 %a1120, 1
  %a804 = add nsw i32 %161, -1
  %162 = add nsw i32 %95, -13
  %b806 = ashr i32 %162, 1
  %.not171 = icmp slt i32 %b806, %161
  %163 = select i1 %.not171, i32 %b806, i32 %a804
  %164 = ashr i32 %163, 1
  %a803 = add nsw i32 %164, -1
  %b805 = ashr i32 %133, 2
  %.not172 = icmp slt i32 %b805, %164
  %f127.v3.min_realized = select i1 %.not172, i32 %b805, i32 %a803
  %165 = add nsw i32 %95, 1
  %166 = ashr i32 %165, 1
  %167 = sub nsw i32 %166, %161
  %168 = add nsw i32 %167, 1
  %169 = and i32 %168, -8
  %170 = add nsw i32 %169, %161
  %a810 = add nsw i32 %170, -1
  %.not173 = icmp slt i32 %b806, %170
  %171 = select i1 %.not173, i32 %b806, i32 %a810
  %172 = add nsw i32 %171, 9
  %a809 = ashr i32 %172, 1
  %b811 = add nsw i32 %141, 7
  %173 = tail call i32 @llvm.smax.i32(i32 %a809, i32 %b811)
  %f127.v3.extent_realized.s = sub nsw i32 %173, %f127.v3.min_realized
  %174 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %175 = ashr i32 %174, 2
  %t3089 = add nsw i32 %175, 1
  %176 = sub nsw i32 %t3089, %f127.v4.min_realized
  %177 = zext i32 %176 to i64
  %178 = add nsw i32 %f127.v3.extent_realized.s, 1
  %179 = zext i32 %178 to i64
  %180 = shl nuw nsw i64 %179, 2
  %181 = mul i64 %180, %177
  %182 = icmp ult i64 %181, 2147483648
  %183 = and i64 %180, 4294967292
  %184 = mul nuw i64 %183, %177
  %185 = lshr i64 %184, 32
  %186 = lshr i64 %179, 30
  %187 = mul nuw nsw i64 %186, %177
  %188 = add nuw nsw i64 %185, %187
  %189 = icmp ult i64 %188, 4294967296
  %190 = and i1 %182, %189
  br i1 %190, label %"assert succeeded8", label %"assert failed7", !prof !5

"assert failed7":                                 ; preds = %"assert succeeded6"
  %191 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %181, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded8":                              ; preds = %"assert succeeded6"
  %192 = add nuw nsw i64 %181, 4
  %193 = tail call ptr @halide_malloc(ptr %__user_context, i64 %192)
  %.not271 = icmp eq ptr %193, null
  br i1 %.not271, label %"assert failed9", label %"assert succeeded10", !prof !4

"assert failed9":                                 ; preds = %"assert succeeded8"
  %194 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded10":                             ; preds = %"assert succeeded8"
  %b816 = add nsw i32 %95, -8
  %195 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1120)
  %196 = ashr i32 %195, 1
  %a813 = add nsw i32 %196, -1
  %.not174 = icmp slt i32 %163, %196
  %f126.v3.min_realized = select i1 %.not174, i32 %163, i32 %a813
  %197 = sub nsw i32 %95, %a1120
  %198 = add nsw i32 %197, -1
  %199 = and i32 %198, -8
  %a820 = add nsw i32 %199, %a1120
  %200 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a820)
  %201 = add nsw i32 %200, 9
  %a819 = ashr i32 %201, 1
  %b821 = add nsw i32 %171, 7
  %202 = tail call i32 @llvm.smax.i32(i32 %a819, i32 %b821)
  %f126.v3.extent_realized.s = sub nsw i32 %202, %f126.v3.min_realized
  %203 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %204 = ashr i32 %203, 1
  %t3090 = add nsw i32 %204, 1
  %205 = sub i32 %t3090, %158
  %206 = zext i32 %205 to i64
  %207 = add nsw i32 %f126.v3.extent_realized.s, 1
  %208 = zext i32 %207 to i64
  %209 = shl nuw nsw i64 %208, 2
  %210 = mul i64 %209, %206
  %211 = icmp ult i64 %210, 2147483648
  %212 = and i64 %209, 4294967292
  %213 = mul nuw i64 %212, %206
  %214 = lshr i64 %213, 32
  %215 = lshr i64 %208, 30
  %216 = mul nuw nsw i64 %215, %206
  %217 = add nuw nsw i64 %214, %216
  %218 = icmp ult i64 %217, 4294967296
  %219 = and i1 %211, %218
  br i1 %219, label %"assert succeeded12", label %"assert failed11", !prof !5

"assert failed11":                                ; preds = %"assert succeeded10"
  %220 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %210, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded12":                             ; preds = %"assert succeeded10"
  %221 = add nuw nsw i64 %210, 4
  %222 = tail call ptr @halide_malloc(ptr %__user_context, i64 %221)
  %.not272 = icmp eq ptr %222, null
  br i1 %.not272, label %"assert failed13", label %"produce f129", !prof !4

"assert failed13":                                ; preds = %"assert succeeded12"
  %223 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f129":                                   ; preds = %"assert succeeded12"
  %224 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %225 = ashr i32 %224, 4
  %226 = add nsw i32 %123, 1
  %227 = icmp sgt i32 %109, -1
  %228 = add i32 %f75.v3.extent_realized.s, 1
  %229 = add nsw i32 %levels, -1
  %230 = sitofp i32 %229 to float
  %231 = insertelement <4 x float> undef, float %230, i64 0
  %232 = shufflevector <4 x float> %231, <4 x float> undef, <4 x i32> zeroinitializer
  %233 = add nsw i32 %levels, -2
  %234 = insertelement <4 x i32> undef, i32 %233, i64 0
  %b825 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %235 = add nsw i32 %f130.v3.extent_realized.s, 1
  %236 = add nsw i32 %local_laplacian.min.1.required, -62
  %237 = ashr i32 %236, 5
  %238 = xor i32 %237, -1
  %239 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %240 = insertelement <4 x i32> undef, i32 %239, i64 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = add nsw i32 %f8.v3.extent_realized.s, 1
  %243 = xor i32 %f8.v4.min_realized, -1
  %244 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> zeroinitializer
  %246 = add nsw i32 %f7.v3.extent_realized.s, 1
  %247 = insertelement <4 x i32> undef, i32 %246, i64 0
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = sext i32 %f129.v3.extent_realized.s to i64
  %250 = add nsw i64 %249, 1
  %251 = sext i32 %225 to i64
  %narrow273 = sub nsw i32 0, %f129.v3.min_realized
  %.neg212 = sext i32 %narrow273 to i64
  br i1 %227, label %"for f129.s0.v4.us.preheader", label %"produce f128", !prof !5

"for f129.s0.v4.us.preheader":                    ; preds = %"produce f129"
  %252 = add nuw nsw i32 %t3087, 76
  %253 = lshr i32 %252, 4
  %254 = add nsw i32 %253, %225
  %sext309 = sext i32 %254 to i64
  br label %"for f129.s0.v4.us"

"for f129.s0.v4.us":                              ; preds = %"for f129.s0.v4.us.preheader", %"end for f129.s0.v3.v3.loopexit.us"
  %indvars.iv307 = phi i64 [ %251, %"for f129.s0.v4.us.preheader" ], [ %indvars.iv.next308, %"end for f129.s0.v3.v3.loopexit.us" ]
  %indvars310 = trunc i64 %indvars.iv307 to i32
  %255 = shl i32 %indvars310, 1
  %256 = and i32 %255, 2
  %257 = ashr i32 %indvars310, 1
  %t2241.us = add nsw i32 %256, %257
  %258 = trunc i64 %indvars.iv307 to i32
  %259 = sub i32 %258, %f75.v4.min_realized
  %260 = mul i32 %259, %228
  %261 = sub i32 %260, %f75.v3.min_realized
  %262 = add nsw i32 %t2241.us, %238
  %t2248.us = mul nsw i32 %262, %235
  %263 = sub nsw i32 %257, %237
  %t2250.us = mul nsw i32 %263, %235
  %264 = add i32 %t2241.us, %243
  %t2255.us = mul nsw i32 %264, %242
  %265 = sub nsw i32 %257, %f8.v4.min_realized
  %t2260.us = mul nsw i32 %265, %242
  %266 = sext i32 %t2250.us to i64
  %267 = add nsw i64 %266, -1
  %268 = sext i32 %t2248.us to i64
  %269 = add nsw i64 %268, -1
  %270 = sub nsw i64 %indvars.iv307, %251
  %271 = mul nsw i64 %270, %250
  %272 = add i64 %271, %.neg212
  %273 = trunc i64 %indvars.iv307 to i32
  %274 = sub i32 %273, %f7.v4.min_realized
  %275 = mul i32 %274, %f7.stride.1
  br label %"for f129.s0.v3.v3.us"

"for f129.s0.v3.v3.us":                           ; preds = %"for f129.s0.v4.us", %"for f129.s0.v3.v3.us"
  %lsr.iv422.us = phi i32 [ %lsr.iv.next423.us, %"for f129.s0.v3.v3.us" ], [ 0, %"for f129.s0.v4.us" ]
  %lsr.iv420.us = phi i32 [ %lsr.iv.next421.us, %"for f129.s0.v3.v3.us" ], [ %226, %"for f129.s0.v4.us" ]
  %276 = add i32 %lsr.iv422.us, %106
  %f129.s0.v3.v363.base.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %276)
  %277 = shl i32 %f129.s0.v3.v363.base.us, 1
  %278 = and i32 %277, 2
  %279 = ashr i32 %f129.s0.v3.v363.base.us, 1
  %t2242.us = add nsw i32 %278, %279
  %t2243.us = add i32 %261, %f129.s0.v3.v363.base.us
  %280 = sext i32 %t2243.us to i64
  %281 = getelementptr inbounds float, ptr %f75.host, i64 %280
  %282 = load <4 x float>, ptr %281, align 4, !tbaa !13
  %283 = add nsw i64 %280, 4
  %284 = getelementptr inbounds float, ptr %f75.host, i64 %283
  %285 = load <4 x float>, ptr %284, align 4, !tbaa !13
  %286 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2244.us = fmul <4 x float> %232, %286
  %a823.us = fptosi <4 x float> %t2244.us to <4 x i32>
  %a826.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a823.us)
  %287 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a826.us, <4 x i32> zeroinitializer)
  %288 = sitofp <4 x i32> %287 to <4 x float>
  %t2246.us = fsub <4 x float> %t2244.us, %288
  %289 = sub nsw i32 %f129.s0.v3.v363.base.us, %f7.v3.min_realized
  %t2251.us = add nsw i32 %289, %275
  %t2253.us = sub nsw <4 x i32> %287, %241
  %t2257.us = mul nsw <4 x i32> %t2253.us, %245
  %290 = add nsw <4 x i32> %t2253.us, <i32 1, i32 1, i32 1, i32 1>
  %t2263.us = mul nsw <4 x i32> %290, %245
  %291 = add nsw i32 %f129.s0.v3.v363.base.us, 1
  %292 = shl i32 %291, 1
  %293 = and i32 %292, 2
  %294 = ashr i32 %291, 1
  %t2264.us = add nsw i32 %293, %294
  %295 = shufflevector <4 x float> %282, <4 x float> %285, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2265.us = fmul <4 x float> %232, %295
  %a827.us = fptosi <4 x float> %t2265.us to <4 x i32>
  %a830.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a827.us)
  %296 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a830.us, <4 x i32> zeroinitializer)
  %297 = sitofp <4 x i32> %296 to <4 x float>
  %t2267.us = fsub <4 x float> %t2265.us, %297
  %t2270.us = sub nsw <4 x i32> %296, %241
  %t2273.us = mul nsw <4 x i32> %t2270.us, %245
  %298 = add nsw <4 x i32> %t2270.us, <i32 1, i32 1, i32 1, i32 1>
  %t2278.us = mul nsw <4 x i32> %298, %245
  %299 = sub nsw i32 %279, %f8.v3.min_realized
  %300 = add nsw i32 %299, %t2260.us
  %301 = insertelement <4 x i32> undef, i32 %300, i64 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = add nsw <4 x i32> %302, <i32 0, i32 1, i32 2, i32 3>
  %304 = add nsw <4 x i32> %t2263.us, %303
  %305 = sext <4 x i32> %304 to <4 x i64>
  %306 = extractelement <4 x i64> %305, i64 0
  %307 = getelementptr inbounds float, ptr %f8.host, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !36
  %309 = insertelement <4 x float> undef, float %308, i64 0
  %310 = extractelement <4 x i64> %305, i64 1
  %311 = getelementptr inbounds float, ptr %f8.host, i64 %310
  %312 = load float, ptr %311, align 4, !tbaa !36
  %313 = insertelement <4 x float> %309, float %312, i64 1
  %314 = extractelement <4 x i64> %305, i64 2
  %315 = getelementptr inbounds float, ptr %f8.host, i64 %314
  %316 = load float, ptr %315, align 4, !tbaa !36
  %317 = insertelement <4 x float> %313, float %316, i64 2
  %318 = extractelement <4 x i64> %305, i64 3
  %319 = getelementptr inbounds float, ptr %f8.host, i64 %318
  %320 = load float, ptr %319, align 4, !tbaa !36
  %321 = insertelement <4 x float> %317, float %320, i64 3
  %322 = fmul <4 x float> %321, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %323 = sub nsw i32 %t2242.us, %f8.v3.min_realized
  %324 = add nsw i32 %323, %t2260.us
  %325 = insertelement <4 x i32> undef, i32 %324, i64 0
  %326 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> zeroinitializer
  %327 = add <4 x i32> %326, <i32 -1, i32 0, i32 1, i32 2>
  %328 = add <4 x i32> %327, %t2263.us
  %329 = sext <4 x i32> %328 to <4 x i64>
  %330 = extractelement <4 x i64> %329, i64 0
  %331 = getelementptr inbounds float, ptr %f8.host, i64 %330
  %332 = load float, ptr %331, align 4, !tbaa !36
  %333 = insertelement <4 x float> undef, float %332, i64 0
  %334 = extractelement <4 x i64> %329, i64 1
  %335 = getelementptr inbounds float, ptr %f8.host, i64 %334
  %336 = load float, ptr %335, align 4, !tbaa !36
  %337 = insertelement <4 x float> %333, float %336, i64 1
  %338 = extractelement <4 x i64> %329, i64 2
  %339 = getelementptr inbounds float, ptr %f8.host, i64 %338
  %340 = load float, ptr %339, align 4, !tbaa !36
  %341 = insertelement <4 x float> %337, float %340, i64 2
  %342 = extractelement <4 x i64> %329, i64 3
  %343 = getelementptr inbounds float, ptr %f8.host, i64 %342
  %344 = load float, ptr %343, align 4, !tbaa !36
  %345 = insertelement <4 x float> %341, float %344, i64 3
  %346 = fmul <4 x float> %345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %347 = fadd <4 x float> %322, %346
  %348 = fmul <4 x float> %347, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %349 = add nsw i32 %299, %t2255.us
  %350 = insertelement <4 x i32> undef, i32 %349, i64 0
  %351 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> zeroinitializer
  %352 = add nsw <4 x i32> %351, <i32 0, i32 1, i32 2, i32 3>
  %353 = add nsw <4 x i32> %t2263.us, %352
  %354 = sext <4 x i32> %353 to <4 x i64>
  %355 = extractelement <4 x i64> %354, i64 0
  %356 = getelementptr inbounds float, ptr %f8.host, i64 %355
  %357 = load float, ptr %356, align 4, !tbaa !36
  %358 = insertelement <4 x float> undef, float %357, i64 0
  %359 = extractelement <4 x i64> %354, i64 1
  %360 = getelementptr inbounds float, ptr %f8.host, i64 %359
  %361 = load float, ptr %360, align 4, !tbaa !36
  %362 = insertelement <4 x float> %358, float %361, i64 1
  %363 = extractelement <4 x i64> %354, i64 2
  %364 = getelementptr inbounds float, ptr %f8.host, i64 %363
  %365 = load float, ptr %364, align 4, !tbaa !36
  %366 = insertelement <4 x float> %362, float %365, i64 2
  %367 = extractelement <4 x i64> %354, i64 3
  %368 = getelementptr inbounds float, ptr %f8.host, i64 %367
  %369 = load float, ptr %368, align 4, !tbaa !36
  %370 = insertelement <4 x float> %366, float %369, i64 3
  %371 = fmul <4 x float> %370, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %372 = add nsw i32 %323, %t2255.us
  %373 = insertelement <4 x i32> undef, i32 %372, i64 0
  %374 = shufflevector <4 x i32> %373, <4 x i32> undef, <4 x i32> zeroinitializer
  %375 = add <4 x i32> %374, <i32 -1, i32 0, i32 1, i32 2>
  %376 = add <4 x i32> %375, %t2263.us
  %377 = sext <4 x i32> %376 to <4 x i64>
  %378 = extractelement <4 x i64> %377, i64 0
  %379 = getelementptr inbounds float, ptr %f8.host, i64 %378
  %380 = load float, ptr %379, align 4, !tbaa !36
  %381 = insertelement <4 x float> undef, float %380, i64 0
  %382 = extractelement <4 x i64> %377, i64 1
  %383 = getelementptr inbounds float, ptr %f8.host, i64 %382
  %384 = load float, ptr %383, align 4, !tbaa !36
  %385 = insertelement <4 x float> %381, float %384, i64 1
  %386 = extractelement <4 x i64> %377, i64 2
  %387 = getelementptr inbounds float, ptr %f8.host, i64 %386
  %388 = load float, ptr %387, align 4, !tbaa !36
  %389 = insertelement <4 x float> %385, float %388, i64 2
  %390 = extractelement <4 x i64> %377, i64 3
  %391 = getelementptr inbounds float, ptr %f8.host, i64 %390
  %392 = load float, ptr %391, align 4, !tbaa !36
  %393 = insertelement <4 x float> %389, float %392, i64 3
  %394 = fmul <4 x float> %393, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %395 = fadd <4 x float> %371, %394
  %396 = fmul <4 x float> %395, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %397 = fadd <4 x float> %348, %396
  %398 = mul nsw <4 x i32> %290, %248
  %399 = insertelement <4 x i32> undef, i32 %t2251.us, i64 0
  %400 = shufflevector <4 x i32> %399, <4 x i32> undef, <4 x i32> zeroinitializer
  %401 = add nsw <4 x i32> %400, <i32 0, i32 2, i32 4, i32 6>
  %402 = add nsw <4 x i32> %398, %401
  %403 = sext <4 x i32> %402 to <4 x i64>
  %404 = extractelement <4 x i64> %403, i64 0
  %405 = getelementptr inbounds float, ptr %f7.host, i64 %404
  %406 = load float, ptr %405, align 4, !tbaa !54
  %407 = insertelement <4 x float> undef, float %406, i64 0
  %408 = extractelement <4 x i64> %403, i64 1
  %409 = getelementptr inbounds float, ptr %f7.host, i64 %408
  %410 = load float, ptr %409, align 4, !tbaa !54
  %411 = insertelement <4 x float> %407, float %410, i64 1
  %412 = extractelement <4 x i64> %403, i64 2
  %413 = getelementptr inbounds float, ptr %f7.host, i64 %412
  %414 = load float, ptr %413, align 4, !tbaa !54
  %415 = insertelement <4 x float> %411, float %414, i64 2
  %416 = extractelement <4 x i64> %403, i64 3
  %417 = getelementptr inbounds float, ptr %f7.host, i64 %416
  %418 = load float, ptr %417, align 4, !tbaa !54
  %419 = insertelement <4 x float> %415, float %418, i64 3
  %420 = fsub <4 x float> %419, %397
  %421 = fmul <4 x float> %t2246.us, %420
  %422 = add nsw <4 x i32> %t2257.us, %303
  %423 = sext <4 x i32> %422 to <4 x i64>
  %424 = extractelement <4 x i64> %423, i64 0
  %425 = getelementptr inbounds float, ptr %f8.host, i64 %424
  %426 = load float, ptr %425, align 4, !tbaa !36
  %427 = insertelement <4 x float> undef, float %426, i64 0
  %428 = extractelement <4 x i64> %423, i64 1
  %429 = getelementptr inbounds float, ptr %f8.host, i64 %428
  %430 = load float, ptr %429, align 4, !tbaa !36
  %431 = insertelement <4 x float> %427, float %430, i64 1
  %432 = extractelement <4 x i64> %423, i64 2
  %433 = getelementptr inbounds float, ptr %f8.host, i64 %432
  %434 = load float, ptr %433, align 4, !tbaa !36
  %435 = insertelement <4 x float> %431, float %434, i64 2
  %436 = extractelement <4 x i64> %423, i64 3
  %437 = getelementptr inbounds float, ptr %f8.host, i64 %436
  %438 = load float, ptr %437, align 4, !tbaa !36
  %439 = insertelement <4 x float> %435, float %438, i64 3
  %440 = fmul <4 x float> %439, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %441 = add <4 x i32> %t2257.us, %326
  %442 = add <4 x i32> %441, <i32 -1, i32 0, i32 1, i32 2>
  %443 = sext <4 x i32> %442 to <4 x i64>
  %444 = extractelement <4 x i64> %443, i64 0
  %445 = getelementptr inbounds float, ptr %f8.host, i64 %444
  %446 = load float, ptr %445, align 4, !tbaa !36
  %447 = insertelement <4 x float> undef, float %446, i64 0
  %448 = extractelement <4 x i64> %443, i64 1
  %449 = getelementptr inbounds float, ptr %f8.host, i64 %448
  %450 = load float, ptr %449, align 4, !tbaa !36
  %451 = insertelement <4 x float> %447, float %450, i64 1
  %452 = extractelement <4 x i64> %443, i64 2
  %453 = getelementptr inbounds float, ptr %f8.host, i64 %452
  %454 = load float, ptr %453, align 4, !tbaa !36
  %455 = insertelement <4 x float> %451, float %454, i64 2
  %456 = extractelement <4 x i64> %443, i64 3
  %457 = getelementptr inbounds float, ptr %f8.host, i64 %456
  %458 = load float, ptr %457, align 4, !tbaa !36
  %459 = insertelement <4 x float> %455, float %458, i64 3
  %460 = fmul <4 x float> %459, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %461 = fadd <4 x float> %440, %460
  %462 = fmul <4 x float> %461, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %463 = add nsw <4 x i32> %t2257.us, %352
  %464 = sext <4 x i32> %463 to <4 x i64>
  %465 = extractelement <4 x i64> %464, i64 0
  %466 = getelementptr inbounds float, ptr %f8.host, i64 %465
  %467 = load float, ptr %466, align 4, !tbaa !36
  %468 = insertelement <4 x float> undef, float %467, i64 0
  %469 = extractelement <4 x i64> %464, i64 1
  %470 = getelementptr inbounds float, ptr %f8.host, i64 %469
  %471 = load float, ptr %470, align 4, !tbaa !36
  %472 = insertelement <4 x float> %468, float %471, i64 1
  %473 = extractelement <4 x i64> %464, i64 2
  %474 = getelementptr inbounds float, ptr %f8.host, i64 %473
  %475 = load float, ptr %474, align 4, !tbaa !36
  %476 = insertelement <4 x float> %472, float %475, i64 2
  %477 = extractelement <4 x i64> %464, i64 3
  %478 = getelementptr inbounds float, ptr %f8.host, i64 %477
  %479 = load float, ptr %478, align 4, !tbaa !36
  %480 = insertelement <4 x float> %476, float %479, i64 3
  %481 = fmul <4 x float> %480, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %482 = add <4 x i32> %t2257.us, %374
  %483 = add <4 x i32> %482, <i32 -1, i32 0, i32 1, i32 2>
  %484 = sext <4 x i32> %483 to <4 x i64>
  %485 = extractelement <4 x i64> %484, i64 0
  %486 = getelementptr inbounds float, ptr %f8.host, i64 %485
  %487 = load float, ptr %486, align 4, !tbaa !36
  %488 = insertelement <4 x float> undef, float %487, i64 0
  %489 = extractelement <4 x i64> %484, i64 1
  %490 = getelementptr inbounds float, ptr %f8.host, i64 %489
  %491 = load float, ptr %490, align 4, !tbaa !36
  %492 = insertelement <4 x float> %488, float %491, i64 1
  %493 = extractelement <4 x i64> %484, i64 2
  %494 = getelementptr inbounds float, ptr %f8.host, i64 %493
  %495 = load float, ptr %494, align 4, !tbaa !36
  %496 = insertelement <4 x float> %492, float %495, i64 2
  %497 = extractelement <4 x i64> %484, i64 3
  %498 = getelementptr inbounds float, ptr %f8.host, i64 %497
  %499 = load float, ptr %498, align 4, !tbaa !36
  %500 = insertelement <4 x float> %496, float %499, i64 3
  %501 = fmul <4 x float> %500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %502 = fadd <4 x float> %481, %501
  %503 = fmul <4 x float> %502, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %504 = fadd <4 x float> %462, %503
  %505 = mul nsw <4 x i32> %t2253.us, %248
  %506 = add nsw <4 x i32> %505, %401
  %507 = sext <4 x i32> %506 to <4 x i64>
  %508 = extractelement <4 x i64> %507, i64 0
  %509 = getelementptr inbounds float, ptr %f7.host, i64 %508
  %510 = load float, ptr %509, align 4, !tbaa !54
  %511 = insertelement <4 x float> undef, float %510, i64 0
  %512 = extractelement <4 x i64> %507, i64 1
  %513 = getelementptr inbounds float, ptr %f7.host, i64 %512
  %514 = load float, ptr %513, align 4, !tbaa !54
  %515 = insertelement <4 x float> %511, float %514, i64 1
  %516 = extractelement <4 x i64> %507, i64 2
  %517 = getelementptr inbounds float, ptr %f7.host, i64 %516
  %518 = load float, ptr %517, align 4, !tbaa !54
  %519 = insertelement <4 x float> %515, float %518, i64 2
  %520 = extractelement <4 x i64> %507, i64 3
  %521 = getelementptr inbounds float, ptr %f7.host, i64 %520
  %522 = load float, ptr %521, align 4, !tbaa !54
  %523 = insertelement <4 x float> %519, float %522, i64 3
  %524 = fsub <4 x float> %523, %504
  %525 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2246.us
  %526 = fmul <4 x float> %525, %524
  %527 = fadd <4 x float> %421, %526
  %528 = sext i32 %279 to i64
  %529 = sub nsw i64 %528, %4
  %530 = add nsw i64 %529, %266
  %531 = getelementptr inbounds float, ptr %f130.host, i64 %530
  %532 = load <4 x float>, ptr %531, align 4, !tbaa !38
  %533 = fmul <4 x float> %532, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %534 = sext i32 %t2242.us to i64
  %535 = sub nsw i64 %534, %4
  %536 = add nsw i64 %267, %535
  %537 = getelementptr inbounds float, ptr %f130.host, i64 %536
  %538 = load <4 x float>, ptr %537, align 4, !tbaa !38
  %539 = fmul <4 x float> %538, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %540 = fadd <4 x float> %533, %539
  %541 = fmul <4 x float> %540, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %542 = add nsw i64 %529, %268
  %543 = getelementptr inbounds float, ptr %f130.host, i64 %542
  %544 = load <4 x float>, ptr %543, align 4, !tbaa !38
  %545 = fmul <4 x float> %544, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %546 = add nsw i64 %269, %535
  %547 = getelementptr inbounds float, ptr %f130.host, i64 %546
  %548 = load <4 x float>, ptr %547, align 4, !tbaa !38
  %549 = fmul <4 x float> %548, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %550 = fadd <4 x float> %545, %549
  %551 = fmul <4 x float> %550, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %552 = fadd <4 x float> %541, %551
  %553 = fadd <4 x float> %527, %552
  %554 = sub nsw i32 %294, %f8.v3.min_realized
  %555 = add nsw i32 %554, %t2260.us
  %556 = insertelement <4 x i32> undef, i32 %555, i64 0
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> zeroinitializer
  %558 = add nsw <4 x i32> %557, <i32 0, i32 1, i32 2, i32 3>
  %559 = add nsw <4 x i32> %t2278.us, %558
  %560 = sext <4 x i32> %559 to <4 x i64>
  %561 = extractelement <4 x i64> %560, i64 0
  %562 = getelementptr inbounds float, ptr %f8.host, i64 %561
  %563 = load float, ptr %562, align 4, !tbaa !36
  %564 = insertelement <4 x float> undef, float %563, i64 0
  %565 = extractelement <4 x i64> %560, i64 1
  %566 = getelementptr inbounds float, ptr %f8.host, i64 %565
  %567 = load float, ptr %566, align 4, !tbaa !36
  %568 = insertelement <4 x float> %564, float %567, i64 1
  %569 = extractelement <4 x i64> %560, i64 2
  %570 = getelementptr inbounds float, ptr %f8.host, i64 %569
  %571 = load float, ptr %570, align 4, !tbaa !36
  %572 = insertelement <4 x float> %568, float %571, i64 2
  %573 = extractelement <4 x i64> %560, i64 3
  %574 = getelementptr inbounds float, ptr %f8.host, i64 %573
  %575 = load float, ptr %574, align 4, !tbaa !36
  %576 = insertelement <4 x float> %572, float %575, i64 3
  %577 = fmul <4 x float> %576, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %578 = sub nsw i32 %t2264.us, %f8.v3.min_realized
  %579 = add nsw i32 %578, %t2260.us
  %580 = insertelement <4 x i32> undef, i32 %579, i64 0
  %581 = shufflevector <4 x i32> %580, <4 x i32> undef, <4 x i32> zeroinitializer
  %582 = add nsw <4 x i32> %581, <i32 0, i32 1, i32 2, i32 3>
  %583 = add <4 x i32> %t2278.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %584 = add <4 x i32> %583, %582
  %585 = sext <4 x i32> %584 to <4 x i64>
  %586 = extractelement <4 x i64> %585, i64 0
  %587 = getelementptr inbounds float, ptr %f8.host, i64 %586
  %588 = load float, ptr %587, align 4, !tbaa !36
  %589 = insertelement <4 x float> undef, float %588, i64 0
  %590 = extractelement <4 x i64> %585, i64 1
  %591 = getelementptr inbounds float, ptr %f8.host, i64 %590
  %592 = load float, ptr %591, align 4, !tbaa !36
  %593 = insertelement <4 x float> %589, float %592, i64 1
  %594 = extractelement <4 x i64> %585, i64 2
  %595 = getelementptr inbounds float, ptr %f8.host, i64 %594
  %596 = load float, ptr %595, align 4, !tbaa !36
  %597 = insertelement <4 x float> %593, float %596, i64 2
  %598 = extractelement <4 x i64> %585, i64 3
  %599 = getelementptr inbounds float, ptr %f8.host, i64 %598
  %600 = load float, ptr %599, align 4, !tbaa !36
  %601 = insertelement <4 x float> %597, float %600, i64 3
  %602 = fmul <4 x float> %601, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %603 = fadd <4 x float> %577, %602
  %604 = fmul <4 x float> %603, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %605 = add nsw i32 %554, %t2255.us
  %606 = insertelement <4 x i32> undef, i32 %605, i64 0
  %607 = shufflevector <4 x i32> %606, <4 x i32> undef, <4 x i32> zeroinitializer
  %608 = add nsw <4 x i32> %607, <i32 0, i32 1, i32 2, i32 3>
  %609 = add nsw <4 x i32> %t2278.us, %608
  %610 = sext <4 x i32> %609 to <4 x i64>
  %611 = extractelement <4 x i64> %610, i64 0
  %612 = getelementptr inbounds float, ptr %f8.host, i64 %611
  %613 = load float, ptr %612, align 4, !tbaa !36
  %614 = insertelement <4 x float> undef, float %613, i64 0
  %615 = extractelement <4 x i64> %610, i64 1
  %616 = getelementptr inbounds float, ptr %f8.host, i64 %615
  %617 = load float, ptr %616, align 4, !tbaa !36
  %618 = insertelement <4 x float> %614, float %617, i64 1
  %619 = extractelement <4 x i64> %610, i64 2
  %620 = getelementptr inbounds float, ptr %f8.host, i64 %619
  %621 = load float, ptr %620, align 4, !tbaa !36
  %622 = insertelement <4 x float> %618, float %621, i64 2
  %623 = extractelement <4 x i64> %610, i64 3
  %624 = getelementptr inbounds float, ptr %f8.host, i64 %623
  %625 = load float, ptr %624, align 4, !tbaa !36
  %626 = insertelement <4 x float> %622, float %625, i64 3
  %627 = fmul <4 x float> %626, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %628 = add nsw i32 %578, %t2255.us
  %629 = insertelement <4 x i32> undef, i32 %628, i64 0
  %630 = shufflevector <4 x i32> %629, <4 x i32> undef, <4 x i32> zeroinitializer
  %631 = add nsw <4 x i32> %630, <i32 0, i32 1, i32 2, i32 3>
  %632 = add <4 x i32> %583, %631
  %633 = sext <4 x i32> %632 to <4 x i64>
  %634 = extractelement <4 x i64> %633, i64 0
  %635 = getelementptr inbounds float, ptr %f8.host, i64 %634
  %636 = load float, ptr %635, align 4, !tbaa !36
  %637 = insertelement <4 x float> undef, float %636, i64 0
  %638 = extractelement <4 x i64> %633, i64 1
  %639 = getelementptr inbounds float, ptr %f8.host, i64 %638
  %640 = load float, ptr %639, align 4, !tbaa !36
  %641 = insertelement <4 x float> %637, float %640, i64 1
  %642 = extractelement <4 x i64> %633, i64 2
  %643 = getelementptr inbounds float, ptr %f8.host, i64 %642
  %644 = load float, ptr %643, align 4, !tbaa !36
  %645 = insertelement <4 x float> %641, float %644, i64 2
  %646 = extractelement <4 x i64> %633, i64 3
  %647 = getelementptr inbounds float, ptr %f8.host, i64 %646
  %648 = load float, ptr %647, align 4, !tbaa !36
  %649 = insertelement <4 x float> %645, float %648, i64 3
  %650 = fmul <4 x float> %649, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %651 = fadd <4 x float> %627, %650
  %652 = fmul <4 x float> %651, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %653 = fadd <4 x float> %604, %652
  %654 = mul nsw <4 x i32> %298, %248
  %655 = add nsw i32 %t2251.us, 1
  %656 = insertelement <4 x i32> undef, i32 %655, i64 0
  %657 = shufflevector <4 x i32> %656, <4 x i32> undef, <4 x i32> zeroinitializer
  %658 = add nsw <4 x i32> %657, <i32 0, i32 2, i32 4, i32 6>
  %659 = add nsw <4 x i32> %654, %658
  %660 = sext <4 x i32> %659 to <4 x i64>
  %661 = extractelement <4 x i64> %660, i64 0
  %662 = getelementptr inbounds float, ptr %f7.host, i64 %661
  %663 = load float, ptr %662, align 4, !tbaa !54
  %664 = insertelement <4 x float> undef, float %663, i64 0
  %665 = extractelement <4 x i64> %660, i64 1
  %666 = getelementptr inbounds float, ptr %f7.host, i64 %665
  %667 = load float, ptr %666, align 4, !tbaa !54
  %668 = insertelement <4 x float> %664, float %667, i64 1
  %669 = extractelement <4 x i64> %660, i64 2
  %670 = getelementptr inbounds float, ptr %f7.host, i64 %669
  %671 = load float, ptr %670, align 4, !tbaa !54
  %672 = insertelement <4 x float> %668, float %671, i64 2
  %673 = extractelement <4 x i64> %660, i64 3
  %674 = getelementptr inbounds float, ptr %f7.host, i64 %673
  %675 = load float, ptr %674, align 4, !tbaa !54
  %676 = insertelement <4 x float> %672, float %675, i64 3
  %677 = fsub <4 x float> %676, %653
  %678 = fmul <4 x float> %t2267.us, %677
  %679 = add nsw <4 x i32> %t2273.us, %558
  %680 = sext <4 x i32> %679 to <4 x i64>
  %681 = extractelement <4 x i64> %680, i64 0
  %682 = getelementptr inbounds float, ptr %f8.host, i64 %681
  %683 = load float, ptr %682, align 4, !tbaa !36
  %684 = insertelement <4 x float> undef, float %683, i64 0
  %685 = extractelement <4 x i64> %680, i64 1
  %686 = getelementptr inbounds float, ptr %f8.host, i64 %685
  %687 = load float, ptr %686, align 4, !tbaa !36
  %688 = insertelement <4 x float> %684, float %687, i64 1
  %689 = extractelement <4 x i64> %680, i64 2
  %690 = getelementptr inbounds float, ptr %f8.host, i64 %689
  %691 = load float, ptr %690, align 4, !tbaa !36
  %692 = insertelement <4 x float> %688, float %691, i64 2
  %693 = extractelement <4 x i64> %680, i64 3
  %694 = getelementptr inbounds float, ptr %f8.host, i64 %693
  %695 = load float, ptr %694, align 4, !tbaa !36
  %696 = insertelement <4 x float> %692, float %695, i64 3
  %697 = fmul <4 x float> %696, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %698 = add <4 x i32> %t2273.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %699 = add <4 x i32> %698, %582
  %700 = sext <4 x i32> %699 to <4 x i64>
  %701 = extractelement <4 x i64> %700, i64 0
  %702 = getelementptr inbounds float, ptr %f8.host, i64 %701
  %703 = load float, ptr %702, align 4, !tbaa !36
  %704 = insertelement <4 x float> undef, float %703, i64 0
  %705 = extractelement <4 x i64> %700, i64 1
  %706 = getelementptr inbounds float, ptr %f8.host, i64 %705
  %707 = load float, ptr %706, align 4, !tbaa !36
  %708 = insertelement <4 x float> %704, float %707, i64 1
  %709 = extractelement <4 x i64> %700, i64 2
  %710 = getelementptr inbounds float, ptr %f8.host, i64 %709
  %711 = load float, ptr %710, align 4, !tbaa !36
  %712 = insertelement <4 x float> %708, float %711, i64 2
  %713 = extractelement <4 x i64> %700, i64 3
  %714 = getelementptr inbounds float, ptr %f8.host, i64 %713
  %715 = load float, ptr %714, align 4, !tbaa !36
  %716 = insertelement <4 x float> %712, float %715, i64 3
  %717 = fmul <4 x float> %716, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %718 = fadd <4 x float> %697, %717
  %719 = fmul <4 x float> %718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %720 = add nsw <4 x i32> %t2273.us, %608
  %721 = sext <4 x i32> %720 to <4 x i64>
  %722 = extractelement <4 x i64> %721, i64 0
  %723 = getelementptr inbounds float, ptr %f8.host, i64 %722
  %724 = load float, ptr %723, align 4, !tbaa !36
  %725 = insertelement <4 x float> undef, float %724, i64 0
  %726 = extractelement <4 x i64> %721, i64 1
  %727 = getelementptr inbounds float, ptr %f8.host, i64 %726
  %728 = load float, ptr %727, align 4, !tbaa !36
  %729 = insertelement <4 x float> %725, float %728, i64 1
  %730 = extractelement <4 x i64> %721, i64 2
  %731 = getelementptr inbounds float, ptr %f8.host, i64 %730
  %732 = load float, ptr %731, align 4, !tbaa !36
  %733 = insertelement <4 x float> %729, float %732, i64 2
  %734 = extractelement <4 x i64> %721, i64 3
  %735 = getelementptr inbounds float, ptr %f8.host, i64 %734
  %736 = load float, ptr %735, align 4, !tbaa !36
  %737 = insertelement <4 x float> %733, float %736, i64 3
  %738 = fmul <4 x float> %737, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %739 = add <4 x i32> %698, %631
  %740 = sext <4 x i32> %739 to <4 x i64>
  %741 = extractelement <4 x i64> %740, i64 0
  %742 = getelementptr inbounds float, ptr %f8.host, i64 %741
  %743 = load float, ptr %742, align 4, !tbaa !36
  %744 = insertelement <4 x float> undef, float %743, i64 0
  %745 = extractelement <4 x i64> %740, i64 1
  %746 = getelementptr inbounds float, ptr %f8.host, i64 %745
  %747 = load float, ptr %746, align 4, !tbaa !36
  %748 = insertelement <4 x float> %744, float %747, i64 1
  %749 = extractelement <4 x i64> %740, i64 2
  %750 = getelementptr inbounds float, ptr %f8.host, i64 %749
  %751 = load float, ptr %750, align 4, !tbaa !36
  %752 = insertelement <4 x float> %748, float %751, i64 2
  %753 = extractelement <4 x i64> %740, i64 3
  %754 = getelementptr inbounds float, ptr %f8.host, i64 %753
  %755 = load float, ptr %754, align 4, !tbaa !36
  %756 = insertelement <4 x float> %752, float %755, i64 3
  %757 = fmul <4 x float> %756, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %758 = fadd <4 x float> %738, %757
  %759 = fmul <4 x float> %758, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %760 = fadd <4 x float> %719, %759
  %761 = mul nsw <4 x i32> %t2270.us, %248
  %762 = add nsw <4 x i32> %761, %658
  %763 = sext <4 x i32> %762 to <4 x i64>
  %764 = extractelement <4 x i64> %763, i64 0
  %765 = getelementptr inbounds float, ptr %f7.host, i64 %764
  %766 = load float, ptr %765, align 4, !tbaa !54
  %767 = insertelement <4 x float> undef, float %766, i64 0
  %768 = extractelement <4 x i64> %763, i64 1
  %769 = getelementptr inbounds float, ptr %f7.host, i64 %768
  %770 = load float, ptr %769, align 4, !tbaa !54
  %771 = insertelement <4 x float> %767, float %770, i64 1
  %772 = extractelement <4 x i64> %763, i64 2
  %773 = getelementptr inbounds float, ptr %f7.host, i64 %772
  %774 = load float, ptr %773, align 4, !tbaa !54
  %775 = insertelement <4 x float> %771, float %774, i64 2
  %776 = extractelement <4 x i64> %763, i64 3
  %777 = getelementptr inbounds float, ptr %f7.host, i64 %776
  %778 = load float, ptr %777, align 4, !tbaa !54
  %779 = insertelement <4 x float> %775, float %778, i64 3
  %780 = fsub <4 x float> %779, %760
  %781 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2267.us
  %782 = fmul <4 x float> %781, %780
  %783 = fadd <4 x float> %678, %782
  %784 = sext i32 %294 to i64
  %785 = sub nsw i64 %784, %4
  %786 = add nsw i64 %785, %266
  %787 = getelementptr inbounds float, ptr %f130.host, i64 %786
  %788 = load <4 x float>, ptr %787, align 4, !tbaa !38
  %789 = fmul <4 x float> %788, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %790 = sext i32 %t2264.us to i64
  %791 = sub nsw i64 %790, %4
  %792 = add nsw i64 %267, %791
  %793 = getelementptr inbounds float, ptr %f130.host, i64 %792
  %794 = load <4 x float>, ptr %793, align 4, !tbaa !38
  %795 = fmul <4 x float> %794, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %796 = fadd <4 x float> %789, %795
  %797 = fmul <4 x float> %796, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %798 = add nsw i64 %785, %268
  %799 = getelementptr inbounds float, ptr %f130.host, i64 %798
  %800 = load <4 x float>, ptr %799, align 4, !tbaa !38
  %801 = fmul <4 x float> %800, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %802 = add nsw i64 %269, %791
  %803 = getelementptr inbounds float, ptr %f130.host, i64 %802
  %804 = load <4 x float>, ptr %803, align 4, !tbaa !38
  %805 = fmul <4 x float> %804, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %806 = fadd <4 x float> %801, %805
  %807 = fmul <4 x float> %806, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %808 = fadd <4 x float> %797, %807
  %809 = fadd <4 x float> %783, %808
  %810 = shufflevector <4 x float> %553, <4 x float> %809, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %811 = sext i32 %f129.s0.v3.v363.base.us to i64
  %812 = add i64 %272, %811
  %813 = getelementptr inbounds float, ptr %128, i64 %812
  store <8 x float> %810, ptr %813, align 4, !tbaa !64
  %lsr.iv.next421.us = add i32 %lsr.iv420.us, -1
  %lsr.iv.next423.us = add i32 %lsr.iv422.us, 8
  %.not158.us = icmp eq i32 %lsr.iv.next421.us, 0
  br i1 %.not158.us, label %"end for f129.s0.v3.v3.loopexit.us", label %"for f129.s0.v3.v3.us"

"end for f129.s0.v3.v3.loopexit.us":              ; preds = %"for f129.s0.v3.v3.us"
  %indvars.iv.next308 = add nsw i64 %indvars.iv307, 1
  %814 = icmp eq i64 %indvars.iv.next308, %sext309
  br i1 %814, label %"produce f128", label %"for f129.s0.v4.us"

"produce f128":                                   ; preds = %"end for f129.s0.v3.v3.loopexit.us", %"produce f129"
  %815 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %816 = ashr i32 %815, 3
  %817 = add nsw i32 %122, 1
  %818 = icmp sgt i32 %102, -1
  %819 = add nsw i32 %f74.v3.extent_realized.s, 1
  %820 = xor i32 %225, -1
  %821 = xor i32 %f7.v4.min_realized, -1
  %822 = add nsw i32 %f6.v3.extent_realized.s, 1
  %823 = insertelement <4 x i32> undef, i32 %822, i64 0
  %824 = shufflevector <4 x i32> %823, <4 x i32> undef, <4 x i32> zeroinitializer
  %825 = sext i32 %f129.v3.min_realized to i64
  %826 = sext i32 %f128.v3.extent_realized.s to i64
  %827 = add nsw i64 %826, 1
  %828 = sext i32 %816 to i64
  %narrow274 = sub nsw i32 0, %f128.v3.min_realized
  %.neg213 = sext i32 %narrow274 to i64
  br i1 %818, label %"for f128.s0.v4.us.preheader", label %"for f127.s0.v4.preheader", !prof !5

"for f128.s0.v4.us.preheader":                    ; preds = %"produce f128"
  %829 = add nuw nsw i32 %t3088, 36
  %830 = lshr i32 %829, 3
  %831 = add nsw i32 %830, %816
  %sext313 = sext i32 %831 to i64
  br label %"for f128.s0.v4.us"

"for f128.s0.v4.us":                              ; preds = %"for f128.s0.v4.us.preheader", %"end for f128.s0.v3.v3.loopexit.us"
  %indvars.iv311 = phi i64 [ %828, %"for f128.s0.v4.us.preheader" ], [ %indvars.iv.next312, %"end for f128.s0.v3.v3.loopexit.us" ]
  %indvars314 = trunc i64 %indvars.iv311 to i32
  %832 = shl i32 %indvars314, 1
  %833 = and i32 %832, 2
  %834 = ashr i32 %indvars314, 1
  %t2279.us = add nsw i32 %833, %834
  %835 = trunc i64 %indvars.iv311 to i32
  %836 = sub i32 %835, %f74.v4.min_realized
  %837 = mul i32 %836, %819
  %838 = sub i32 %837, %f74.v3.min_realized
  %839 = add nsw i32 %t2279.us, %820
  %t2286.us = mul nsw i32 %839, %117
  %840 = sub nsw i32 %834, %225
  %t2288.us = mul nsw i32 %840, %117
  %841 = add i32 %t2279.us, %821
  %842 = mul nsw i32 %841, %f7.stride.1
  %843 = sub nsw i32 %834, %f7.v4.min_realized
  %844 = mul nsw i32 %843, %f7.stride.1
  %845 = sext i32 %t2288.us to i64
  %846 = add nsw i64 %845, -1
  %847 = sext i32 %t2286.us to i64
  %848 = add nsw i64 %847, -1
  %849 = sub nsw i64 %indvars.iv311, %828
  %850 = mul nsw i64 %849, %827
  %851 = add i64 %850, %.neg213
  %852 = trunc i64 %indvars.iv311 to i32
  %853 = sub i32 %852, %f6.v4.min_realized
  %854 = mul i32 %853, %f6.stride.1
  br label %"for f128.s0.v3.v3.us"

"for f128.s0.v3.v3.us":                           ; preds = %"for f128.s0.v4.us", %"for f128.s0.v3.v3.us"
  %lsr.iv418.us = phi i32 [ %lsr.iv.next419.us, %"for f128.s0.v3.v3.us" ], [ 0, %"for f128.s0.v4.us" ]
  %lsr.iv416.us = phi i32 [ %lsr.iv.next417.us, %"for f128.s0.v3.v3.us" ], [ %817, %"for f128.s0.v4.us" ]
  %855 = add i32 %lsr.iv418.us, %99
  %f128.s0.v3.v343.base.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %855)
  %856 = shl i32 %f128.s0.v3.v343.base.us, 1
  %857 = and i32 %856, 2
  %858 = ashr i32 %f128.s0.v3.v343.base.us, 1
  %t2280.us = add nsw i32 %857, %858
  %t2281.us = add i32 %838, %f128.s0.v3.v343.base.us
  %859 = sext i32 %t2281.us to i64
  %860 = getelementptr inbounds float, ptr %f74.host, i64 %859
  %861 = load <4 x float>, ptr %860, align 4, !tbaa !56
  %862 = add nsw i64 %859, 4
  %863 = getelementptr inbounds float, ptr %f74.host, i64 %862
  %864 = load <4 x float>, ptr %863, align 4, !tbaa !56
  %865 = shufflevector <4 x float> %861, <4 x float> %864, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2282.us = fmul <4 x float> %232, %865
  %a832.us = fptosi <4 x float> %t2282.us to <4 x i32>
  %a835.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a832.us)
  %866 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a835.us, <4 x i32> zeroinitializer)
  %867 = sitofp <4 x i32> %866 to <4 x float>
  %t2284.us = fsub <4 x float> %t2282.us, %867
  %868 = sub nsw i32 %f128.s0.v3.v343.base.us, %f6.v3.min_realized
  %t2289.us = add nsw i32 %868, %854
  %t2291.us = sub nsw <4 x i32> %866, %241
  %869 = sub nsw i32 %t2280.us, %f7.v3.min_realized
  %t2294.us = add nsw i32 %869, %842
  %t2295.us = mul nsw <4 x i32> %t2291.us, %248
  %870 = sub nsw i32 %858, %f7.v3.min_realized
  %t2297.us = add nsw i32 %870, %842
  %t2299.us = add nsw i32 %869, %844
  %t2300.us = add nsw i32 %870, %844
  %871 = add nsw <4 x i32> %t2291.us, <i32 1, i32 1, i32 1, i32 1>
  %t2301.us = mul nsw <4 x i32> %871, %248
  %872 = add nsw i32 %f128.s0.v3.v343.base.us, 1
  %873 = shl i32 %872, 1
  %874 = and i32 %873, 2
  %875 = ashr i32 %872, 1
  %t2302.us = add nsw i32 %874, %875
  %876 = shufflevector <4 x float> %861, <4 x float> %864, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2303.us = fmul <4 x float> %232, %876
  %a836.us = fptosi <4 x float> %t2303.us to <4 x i32>
  %a839.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a836.us)
  %877 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a839.us, <4 x i32> zeroinitializer)
  %878 = sitofp <4 x i32> %877 to <4 x float>
  %t2305.us = fsub <4 x float> %t2303.us, %878
  %t2308.us = sub nsw <4 x i32> %877, %241
  %879 = sub nsw i32 %t2302.us, %f7.v3.min_realized
  %t2310.us = add nsw i32 %879, %842
  %t2311.us = mul nsw <4 x i32> %t2308.us, %248
  %880 = sub nsw i32 %875, %f7.v3.min_realized
  %t2313.us = add nsw i32 %880, %842
  %t2314.us = add nsw i32 %879, %844
  %t2315.us = add nsw i32 %880, %844
  %881 = add nsw <4 x i32> %t2308.us, <i32 1, i32 1, i32 1, i32 1>
  %t2316.us = mul nsw <4 x i32> %881, %248
  %882 = insertelement <4 x i32> undef, i32 %t2300.us, i64 0
  %883 = shufflevector <4 x i32> %882, <4 x i32> undef, <4 x i32> zeroinitializer
  %884 = add nsw <4 x i32> %883, <i32 0, i32 1, i32 2, i32 3>
  %885 = add nsw <4 x i32> %t2301.us, %884
  %886 = sext <4 x i32> %885 to <4 x i64>
  %887 = extractelement <4 x i64> %886, i64 0
  %888 = getelementptr inbounds float, ptr %f7.host, i64 %887
  %889 = load float, ptr %888, align 4, !tbaa !54
  %890 = insertelement <4 x float> undef, float %889, i64 0
  %891 = extractelement <4 x i64> %886, i64 1
  %892 = getelementptr inbounds float, ptr %f7.host, i64 %891
  %893 = load float, ptr %892, align 4, !tbaa !54
  %894 = insertelement <4 x float> %890, float %893, i64 1
  %895 = extractelement <4 x i64> %886, i64 2
  %896 = getelementptr inbounds float, ptr %f7.host, i64 %895
  %897 = load float, ptr %896, align 4, !tbaa !54
  %898 = insertelement <4 x float> %894, float %897, i64 2
  %899 = extractelement <4 x i64> %886, i64 3
  %900 = getelementptr inbounds float, ptr %f7.host, i64 %899
  %901 = load float, ptr %900, align 4, !tbaa !54
  %902 = insertelement <4 x float> %898, float %901, i64 3
  %903 = fmul <4 x float> %902, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %904 = insertelement <4 x i32> undef, i32 %t2299.us, i64 0
  %905 = shufflevector <4 x i32> %904, <4 x i32> undef, <4 x i32> zeroinitializer
  %906 = add <4 x i32> %905, <i32 -1, i32 0, i32 1, i32 2>
  %907 = add <4 x i32> %906, %t2301.us
  %908 = sext <4 x i32> %907 to <4 x i64>
  %909 = extractelement <4 x i64> %908, i64 0
  %910 = getelementptr inbounds float, ptr %f7.host, i64 %909
  %911 = load float, ptr %910, align 4, !tbaa !54
  %912 = insertelement <4 x float> undef, float %911, i64 0
  %913 = extractelement <4 x i64> %908, i64 1
  %914 = getelementptr inbounds float, ptr %f7.host, i64 %913
  %915 = load float, ptr %914, align 4, !tbaa !54
  %916 = insertelement <4 x float> %912, float %915, i64 1
  %917 = extractelement <4 x i64> %908, i64 2
  %918 = getelementptr inbounds float, ptr %f7.host, i64 %917
  %919 = load float, ptr %918, align 4, !tbaa !54
  %920 = insertelement <4 x float> %916, float %919, i64 2
  %921 = extractelement <4 x i64> %908, i64 3
  %922 = getelementptr inbounds float, ptr %f7.host, i64 %921
  %923 = load float, ptr %922, align 4, !tbaa !54
  %924 = insertelement <4 x float> %920, float %923, i64 3
  %925 = fmul <4 x float> %924, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %926 = fadd <4 x float> %903, %925
  %927 = fmul <4 x float> %926, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %928 = insertelement <4 x i32> undef, i32 %t2297.us, i64 0
  %929 = shufflevector <4 x i32> %928, <4 x i32> undef, <4 x i32> zeroinitializer
  %930 = add nsw <4 x i32> %929, <i32 0, i32 1, i32 2, i32 3>
  %931 = add nsw <4 x i32> %t2301.us, %930
  %932 = sext <4 x i32> %931 to <4 x i64>
  %933 = extractelement <4 x i64> %932, i64 0
  %934 = getelementptr inbounds float, ptr %f7.host, i64 %933
  %935 = load float, ptr %934, align 4, !tbaa !54
  %936 = insertelement <4 x float> undef, float %935, i64 0
  %937 = extractelement <4 x i64> %932, i64 1
  %938 = getelementptr inbounds float, ptr %f7.host, i64 %937
  %939 = load float, ptr %938, align 4, !tbaa !54
  %940 = insertelement <4 x float> %936, float %939, i64 1
  %941 = extractelement <4 x i64> %932, i64 2
  %942 = getelementptr inbounds float, ptr %f7.host, i64 %941
  %943 = load float, ptr %942, align 4, !tbaa !54
  %944 = insertelement <4 x float> %940, float %943, i64 2
  %945 = extractelement <4 x i64> %932, i64 3
  %946 = getelementptr inbounds float, ptr %f7.host, i64 %945
  %947 = load float, ptr %946, align 4, !tbaa !54
  %948 = insertelement <4 x float> %944, float %947, i64 3
  %949 = fmul <4 x float> %948, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %950 = insertelement <4 x i32> undef, i32 %t2294.us, i64 0
  %951 = shufflevector <4 x i32> %950, <4 x i32> undef, <4 x i32> zeroinitializer
  %952 = add <4 x i32> %951, <i32 -1, i32 0, i32 1, i32 2>
  %953 = add <4 x i32> %952, %t2301.us
  %954 = sext <4 x i32> %953 to <4 x i64>
  %955 = extractelement <4 x i64> %954, i64 0
  %956 = getelementptr inbounds float, ptr %f7.host, i64 %955
  %957 = load float, ptr %956, align 4, !tbaa !54
  %958 = insertelement <4 x float> undef, float %957, i64 0
  %959 = extractelement <4 x i64> %954, i64 1
  %960 = getelementptr inbounds float, ptr %f7.host, i64 %959
  %961 = load float, ptr %960, align 4, !tbaa !54
  %962 = insertelement <4 x float> %958, float %961, i64 1
  %963 = extractelement <4 x i64> %954, i64 2
  %964 = getelementptr inbounds float, ptr %f7.host, i64 %963
  %965 = load float, ptr %964, align 4, !tbaa !54
  %966 = insertelement <4 x float> %962, float %965, i64 2
  %967 = extractelement <4 x i64> %954, i64 3
  %968 = getelementptr inbounds float, ptr %f7.host, i64 %967
  %969 = load float, ptr %968, align 4, !tbaa !54
  %970 = insertelement <4 x float> %966, float %969, i64 3
  %971 = fmul <4 x float> %970, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %972 = fadd <4 x float> %949, %971
  %973 = fmul <4 x float> %972, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %974 = fadd <4 x float> %927, %973
  %975 = mul nsw <4 x i32> %871, %824
  %976 = insertelement <4 x i32> undef, i32 %t2289.us, i64 0
  %977 = shufflevector <4 x i32> %976, <4 x i32> undef, <4 x i32> zeroinitializer
  %978 = add nsw <4 x i32> %977, <i32 0, i32 2, i32 4, i32 6>
  %979 = add nsw <4 x i32> %975, %978
  %980 = sext <4 x i32> %979 to <4 x i64>
  %981 = extractelement <4 x i64> %980, i64 0
  %982 = getelementptr inbounds float, ptr %f6.host, i64 %981
  %983 = load float, ptr %982, align 4, !tbaa !50
  %984 = insertelement <4 x float> undef, float %983, i64 0
  %985 = extractelement <4 x i64> %980, i64 1
  %986 = getelementptr inbounds float, ptr %f6.host, i64 %985
  %987 = load float, ptr %986, align 4, !tbaa !50
  %988 = insertelement <4 x float> %984, float %987, i64 1
  %989 = extractelement <4 x i64> %980, i64 2
  %990 = getelementptr inbounds float, ptr %f6.host, i64 %989
  %991 = load float, ptr %990, align 4, !tbaa !50
  %992 = insertelement <4 x float> %988, float %991, i64 2
  %993 = extractelement <4 x i64> %980, i64 3
  %994 = getelementptr inbounds float, ptr %f6.host, i64 %993
  %995 = load float, ptr %994, align 4, !tbaa !50
  %996 = insertelement <4 x float> %992, float %995, i64 3
  %997 = fsub <4 x float> %996, %974
  %998 = fmul <4 x float> %t2284.us, %997
  %999 = add nsw <4 x i32> %t2295.us, %884
  %1000 = sext <4 x i32> %999 to <4 x i64>
  %1001 = extractelement <4 x i64> %1000, i64 0
  %1002 = getelementptr inbounds float, ptr %f7.host, i64 %1001
  %1003 = load float, ptr %1002, align 4, !tbaa !54
  %1004 = insertelement <4 x float> undef, float %1003, i64 0
  %1005 = extractelement <4 x i64> %1000, i64 1
  %1006 = getelementptr inbounds float, ptr %f7.host, i64 %1005
  %1007 = load float, ptr %1006, align 4, !tbaa !54
  %1008 = insertelement <4 x float> %1004, float %1007, i64 1
  %1009 = extractelement <4 x i64> %1000, i64 2
  %1010 = getelementptr inbounds float, ptr %f7.host, i64 %1009
  %1011 = load float, ptr %1010, align 4, !tbaa !54
  %1012 = insertelement <4 x float> %1008, float %1011, i64 2
  %1013 = extractelement <4 x i64> %1000, i64 3
  %1014 = getelementptr inbounds float, ptr %f7.host, i64 %1013
  %1015 = load float, ptr %1014, align 4, !tbaa !54
  %1016 = insertelement <4 x float> %1012, float %1015, i64 3
  %1017 = fmul <4 x float> %1016, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1018 = add <4 x i32> %t2295.us, %905
  %1019 = add <4 x i32> %1018, <i32 -1, i32 0, i32 1, i32 2>
  %1020 = sext <4 x i32> %1019 to <4 x i64>
  %1021 = extractelement <4 x i64> %1020, i64 0
  %1022 = getelementptr inbounds float, ptr %f7.host, i64 %1021
  %1023 = load float, ptr %1022, align 4, !tbaa !54
  %1024 = insertelement <4 x float> undef, float %1023, i64 0
  %1025 = extractelement <4 x i64> %1020, i64 1
  %1026 = getelementptr inbounds float, ptr %f7.host, i64 %1025
  %1027 = load float, ptr %1026, align 4, !tbaa !54
  %1028 = insertelement <4 x float> %1024, float %1027, i64 1
  %1029 = extractelement <4 x i64> %1020, i64 2
  %1030 = getelementptr inbounds float, ptr %f7.host, i64 %1029
  %1031 = load float, ptr %1030, align 4, !tbaa !54
  %1032 = insertelement <4 x float> %1028, float %1031, i64 2
  %1033 = extractelement <4 x i64> %1020, i64 3
  %1034 = getelementptr inbounds float, ptr %f7.host, i64 %1033
  %1035 = load float, ptr %1034, align 4, !tbaa !54
  %1036 = insertelement <4 x float> %1032, float %1035, i64 3
  %1037 = fmul <4 x float> %1036, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1038 = fadd <4 x float> %1017, %1037
  %1039 = fmul <4 x float> %1038, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1040 = add nsw <4 x i32> %t2295.us, %930
  %1041 = sext <4 x i32> %1040 to <4 x i64>
  %1042 = extractelement <4 x i64> %1041, i64 0
  %1043 = getelementptr inbounds float, ptr %f7.host, i64 %1042
  %1044 = load float, ptr %1043, align 4, !tbaa !54
  %1045 = insertelement <4 x float> undef, float %1044, i64 0
  %1046 = extractelement <4 x i64> %1041, i64 1
  %1047 = getelementptr inbounds float, ptr %f7.host, i64 %1046
  %1048 = load float, ptr %1047, align 4, !tbaa !54
  %1049 = insertelement <4 x float> %1045, float %1048, i64 1
  %1050 = extractelement <4 x i64> %1041, i64 2
  %1051 = getelementptr inbounds float, ptr %f7.host, i64 %1050
  %1052 = load float, ptr %1051, align 4, !tbaa !54
  %1053 = insertelement <4 x float> %1049, float %1052, i64 2
  %1054 = extractelement <4 x i64> %1041, i64 3
  %1055 = getelementptr inbounds float, ptr %f7.host, i64 %1054
  %1056 = load float, ptr %1055, align 4, !tbaa !54
  %1057 = insertelement <4 x float> %1053, float %1056, i64 3
  %1058 = fmul <4 x float> %1057, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1059 = add <4 x i32> %t2295.us, %951
  %1060 = add <4 x i32> %1059, <i32 -1, i32 0, i32 1, i32 2>
  %1061 = sext <4 x i32> %1060 to <4 x i64>
  %1062 = extractelement <4 x i64> %1061, i64 0
  %1063 = getelementptr inbounds float, ptr %f7.host, i64 %1062
  %1064 = load float, ptr %1063, align 4, !tbaa !54
  %1065 = insertelement <4 x float> undef, float %1064, i64 0
  %1066 = extractelement <4 x i64> %1061, i64 1
  %1067 = getelementptr inbounds float, ptr %f7.host, i64 %1066
  %1068 = load float, ptr %1067, align 4, !tbaa !54
  %1069 = insertelement <4 x float> %1065, float %1068, i64 1
  %1070 = extractelement <4 x i64> %1061, i64 2
  %1071 = getelementptr inbounds float, ptr %f7.host, i64 %1070
  %1072 = load float, ptr %1071, align 4, !tbaa !54
  %1073 = insertelement <4 x float> %1069, float %1072, i64 2
  %1074 = extractelement <4 x i64> %1061, i64 3
  %1075 = getelementptr inbounds float, ptr %f7.host, i64 %1074
  %1076 = load float, ptr %1075, align 4, !tbaa !54
  %1077 = insertelement <4 x float> %1073, float %1076, i64 3
  %1078 = fmul <4 x float> %1077, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1079 = fadd <4 x float> %1058, %1078
  %1080 = fmul <4 x float> %1079, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1081 = fadd <4 x float> %1039, %1080
  %1082 = mul nsw <4 x i32> %t2291.us, %824
  %1083 = add nsw <4 x i32> %1082, %978
  %1084 = sext <4 x i32> %1083 to <4 x i64>
  %1085 = extractelement <4 x i64> %1084, i64 0
  %1086 = getelementptr inbounds float, ptr %f6.host, i64 %1085
  %1087 = load float, ptr %1086, align 4, !tbaa !50
  %1088 = insertelement <4 x float> undef, float %1087, i64 0
  %1089 = extractelement <4 x i64> %1084, i64 1
  %1090 = getelementptr inbounds float, ptr %f6.host, i64 %1089
  %1091 = load float, ptr %1090, align 4, !tbaa !50
  %1092 = insertelement <4 x float> %1088, float %1091, i64 1
  %1093 = extractelement <4 x i64> %1084, i64 2
  %1094 = getelementptr inbounds float, ptr %f6.host, i64 %1093
  %1095 = load float, ptr %1094, align 4, !tbaa !50
  %1096 = insertelement <4 x float> %1092, float %1095, i64 2
  %1097 = extractelement <4 x i64> %1084, i64 3
  %1098 = getelementptr inbounds float, ptr %f6.host, i64 %1097
  %1099 = load float, ptr %1098, align 4, !tbaa !50
  %1100 = insertelement <4 x float> %1096, float %1099, i64 3
  %1101 = fsub <4 x float> %1100, %1081
  %1102 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2284.us
  %1103 = fmul <4 x float> %1102, %1101
  %1104 = fadd <4 x float> %998, %1103
  %narrow155.us = sub nsw i32 %858, %f129.v3.min_realized
  %1105 = sext i32 %narrow155.us to i64
  %1106 = add nsw i64 %1105, %845
  %1107 = getelementptr inbounds float, ptr %128, i64 %1106
  %1108 = load <4 x float>, ptr %1107, align 4, !tbaa !64
  %1109 = fmul <4 x float> %1108, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1110 = sext i32 %t2280.us to i64
  %1111 = sub nsw i64 %1110, %825
  %1112 = add nsw i64 %846, %1111
  %1113 = getelementptr inbounds float, ptr %128, i64 %1112
  %1114 = load <4 x float>, ptr %1113, align 4, !tbaa !64
  %1115 = fmul <4 x float> %1114, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1116 = fadd <4 x float> %1109, %1115
  %1117 = fmul <4 x float> %1116, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1118 = add nsw i64 %1105, %847
  %1119 = getelementptr inbounds float, ptr %128, i64 %1118
  %1120 = load <4 x float>, ptr %1119, align 4, !tbaa !64
  %1121 = fmul <4 x float> %1120, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1122 = add nsw i64 %848, %1111
  %1123 = getelementptr inbounds float, ptr %128, i64 %1122
  %1124 = load <4 x float>, ptr %1123, align 4, !tbaa !64
  %1125 = fmul <4 x float> %1124, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1126 = fadd <4 x float> %1121, %1125
  %1127 = fmul <4 x float> %1126, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1128 = fadd <4 x float> %1117, %1127
  %1129 = fadd <4 x float> %1104, %1128
  %1130 = insertelement <4 x i32> undef, i32 %t2315.us, i64 0
  %1131 = shufflevector <4 x i32> %1130, <4 x i32> undef, <4 x i32> zeroinitializer
  %1132 = add nsw <4 x i32> %1131, <i32 0, i32 1, i32 2, i32 3>
  %1133 = add nsw <4 x i32> %t2316.us, %1132
  %1134 = sext <4 x i32> %1133 to <4 x i64>
  %1135 = extractelement <4 x i64> %1134, i64 0
  %1136 = getelementptr inbounds float, ptr %f7.host, i64 %1135
  %1137 = load float, ptr %1136, align 4, !tbaa !54
  %1138 = insertelement <4 x float> undef, float %1137, i64 0
  %1139 = extractelement <4 x i64> %1134, i64 1
  %1140 = getelementptr inbounds float, ptr %f7.host, i64 %1139
  %1141 = load float, ptr %1140, align 4, !tbaa !54
  %1142 = insertelement <4 x float> %1138, float %1141, i64 1
  %1143 = extractelement <4 x i64> %1134, i64 2
  %1144 = getelementptr inbounds float, ptr %f7.host, i64 %1143
  %1145 = load float, ptr %1144, align 4, !tbaa !54
  %1146 = insertelement <4 x float> %1142, float %1145, i64 2
  %1147 = extractelement <4 x i64> %1134, i64 3
  %1148 = getelementptr inbounds float, ptr %f7.host, i64 %1147
  %1149 = load float, ptr %1148, align 4, !tbaa !54
  %1150 = insertelement <4 x float> %1146, float %1149, i64 3
  %1151 = fmul <4 x float> %1150, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1152 = insertelement <4 x i32> undef, i32 %t2314.us, i64 0
  %1153 = shufflevector <4 x i32> %1152, <4 x i32> undef, <4 x i32> zeroinitializer
  %1154 = add nsw <4 x i32> %1153, <i32 0, i32 1, i32 2, i32 3>
  %1155 = add <4 x i32> %t2316.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1156 = add <4 x i32> %1155, %1154
  %1157 = sext <4 x i32> %1156 to <4 x i64>
  %1158 = extractelement <4 x i64> %1157, i64 0
  %1159 = getelementptr inbounds float, ptr %f7.host, i64 %1158
  %1160 = load float, ptr %1159, align 4, !tbaa !54
  %1161 = insertelement <4 x float> undef, float %1160, i64 0
  %1162 = extractelement <4 x i64> %1157, i64 1
  %1163 = getelementptr inbounds float, ptr %f7.host, i64 %1162
  %1164 = load float, ptr %1163, align 4, !tbaa !54
  %1165 = insertelement <4 x float> %1161, float %1164, i64 1
  %1166 = extractelement <4 x i64> %1157, i64 2
  %1167 = getelementptr inbounds float, ptr %f7.host, i64 %1166
  %1168 = load float, ptr %1167, align 4, !tbaa !54
  %1169 = insertelement <4 x float> %1165, float %1168, i64 2
  %1170 = extractelement <4 x i64> %1157, i64 3
  %1171 = getelementptr inbounds float, ptr %f7.host, i64 %1170
  %1172 = load float, ptr %1171, align 4, !tbaa !54
  %1173 = insertelement <4 x float> %1169, float %1172, i64 3
  %1174 = fmul <4 x float> %1173, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1175 = fadd <4 x float> %1151, %1174
  %1176 = fmul <4 x float> %1175, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1177 = insertelement <4 x i32> undef, i32 %t2313.us, i64 0
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> zeroinitializer
  %1179 = add nsw <4 x i32> %1178, <i32 0, i32 1, i32 2, i32 3>
  %1180 = add nsw <4 x i32> %t2316.us, %1179
  %1181 = sext <4 x i32> %1180 to <4 x i64>
  %1182 = extractelement <4 x i64> %1181, i64 0
  %1183 = getelementptr inbounds float, ptr %f7.host, i64 %1182
  %1184 = load float, ptr %1183, align 4, !tbaa !54
  %1185 = insertelement <4 x float> undef, float %1184, i64 0
  %1186 = extractelement <4 x i64> %1181, i64 1
  %1187 = getelementptr inbounds float, ptr %f7.host, i64 %1186
  %1188 = load float, ptr %1187, align 4, !tbaa !54
  %1189 = insertelement <4 x float> %1185, float %1188, i64 1
  %1190 = extractelement <4 x i64> %1181, i64 2
  %1191 = getelementptr inbounds float, ptr %f7.host, i64 %1190
  %1192 = load float, ptr %1191, align 4, !tbaa !54
  %1193 = insertelement <4 x float> %1189, float %1192, i64 2
  %1194 = extractelement <4 x i64> %1181, i64 3
  %1195 = getelementptr inbounds float, ptr %f7.host, i64 %1194
  %1196 = load float, ptr %1195, align 4, !tbaa !54
  %1197 = insertelement <4 x float> %1193, float %1196, i64 3
  %1198 = fmul <4 x float> %1197, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1199 = insertelement <4 x i32> undef, i32 %t2310.us, i64 0
  %1200 = shufflevector <4 x i32> %1199, <4 x i32> undef, <4 x i32> zeroinitializer
  %1201 = add nsw <4 x i32> %1200, <i32 0, i32 1, i32 2, i32 3>
  %1202 = add <4 x i32> %1155, %1201
  %1203 = sext <4 x i32> %1202 to <4 x i64>
  %1204 = extractelement <4 x i64> %1203, i64 0
  %1205 = getelementptr inbounds float, ptr %f7.host, i64 %1204
  %1206 = load float, ptr %1205, align 4, !tbaa !54
  %1207 = insertelement <4 x float> undef, float %1206, i64 0
  %1208 = extractelement <4 x i64> %1203, i64 1
  %1209 = getelementptr inbounds float, ptr %f7.host, i64 %1208
  %1210 = load float, ptr %1209, align 4, !tbaa !54
  %1211 = insertelement <4 x float> %1207, float %1210, i64 1
  %1212 = extractelement <4 x i64> %1203, i64 2
  %1213 = getelementptr inbounds float, ptr %f7.host, i64 %1212
  %1214 = load float, ptr %1213, align 4, !tbaa !54
  %1215 = insertelement <4 x float> %1211, float %1214, i64 2
  %1216 = extractelement <4 x i64> %1203, i64 3
  %1217 = getelementptr inbounds float, ptr %f7.host, i64 %1216
  %1218 = load float, ptr %1217, align 4, !tbaa !54
  %1219 = insertelement <4 x float> %1215, float %1218, i64 3
  %1220 = fmul <4 x float> %1219, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1221 = fadd <4 x float> %1198, %1220
  %1222 = fmul <4 x float> %1221, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1223 = fadd <4 x float> %1176, %1222
  %1224 = mul nsw <4 x i32> %881, %824
  %1225 = add nsw i32 %t2289.us, 1
  %1226 = insertelement <4 x i32> undef, i32 %1225, i64 0
  %1227 = shufflevector <4 x i32> %1226, <4 x i32> undef, <4 x i32> zeroinitializer
  %1228 = add nsw <4 x i32> %1227, <i32 0, i32 2, i32 4, i32 6>
  %1229 = add nsw <4 x i32> %1224, %1228
  %1230 = sext <4 x i32> %1229 to <4 x i64>
  %1231 = extractelement <4 x i64> %1230, i64 0
  %1232 = getelementptr inbounds float, ptr %f6.host, i64 %1231
  %1233 = load float, ptr %1232, align 4, !tbaa !50
  %1234 = insertelement <4 x float> undef, float %1233, i64 0
  %1235 = extractelement <4 x i64> %1230, i64 1
  %1236 = getelementptr inbounds float, ptr %f6.host, i64 %1235
  %1237 = load float, ptr %1236, align 4, !tbaa !50
  %1238 = insertelement <4 x float> %1234, float %1237, i64 1
  %1239 = extractelement <4 x i64> %1230, i64 2
  %1240 = getelementptr inbounds float, ptr %f6.host, i64 %1239
  %1241 = load float, ptr %1240, align 4, !tbaa !50
  %1242 = insertelement <4 x float> %1238, float %1241, i64 2
  %1243 = extractelement <4 x i64> %1230, i64 3
  %1244 = getelementptr inbounds float, ptr %f6.host, i64 %1243
  %1245 = load float, ptr %1244, align 4, !tbaa !50
  %1246 = insertelement <4 x float> %1242, float %1245, i64 3
  %1247 = fsub <4 x float> %1246, %1223
  %1248 = fmul <4 x float> %t2305.us, %1247
  %1249 = add nsw <4 x i32> %t2311.us, %1132
  %1250 = sext <4 x i32> %1249 to <4 x i64>
  %1251 = extractelement <4 x i64> %1250, i64 0
  %1252 = getelementptr inbounds float, ptr %f7.host, i64 %1251
  %1253 = load float, ptr %1252, align 4, !tbaa !54
  %1254 = insertelement <4 x float> undef, float %1253, i64 0
  %1255 = extractelement <4 x i64> %1250, i64 1
  %1256 = getelementptr inbounds float, ptr %f7.host, i64 %1255
  %1257 = load float, ptr %1256, align 4, !tbaa !54
  %1258 = insertelement <4 x float> %1254, float %1257, i64 1
  %1259 = extractelement <4 x i64> %1250, i64 2
  %1260 = getelementptr inbounds float, ptr %f7.host, i64 %1259
  %1261 = load float, ptr %1260, align 4, !tbaa !54
  %1262 = insertelement <4 x float> %1258, float %1261, i64 2
  %1263 = extractelement <4 x i64> %1250, i64 3
  %1264 = getelementptr inbounds float, ptr %f7.host, i64 %1263
  %1265 = load float, ptr %1264, align 4, !tbaa !54
  %1266 = insertelement <4 x float> %1262, float %1265, i64 3
  %1267 = fmul <4 x float> %1266, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1268 = add <4 x i32> %t2311.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1269 = add <4 x i32> %1268, %1154
  %1270 = sext <4 x i32> %1269 to <4 x i64>
  %1271 = extractelement <4 x i64> %1270, i64 0
  %1272 = getelementptr inbounds float, ptr %f7.host, i64 %1271
  %1273 = load float, ptr %1272, align 4, !tbaa !54
  %1274 = insertelement <4 x float> undef, float %1273, i64 0
  %1275 = extractelement <4 x i64> %1270, i64 1
  %1276 = getelementptr inbounds float, ptr %f7.host, i64 %1275
  %1277 = load float, ptr %1276, align 4, !tbaa !54
  %1278 = insertelement <4 x float> %1274, float %1277, i64 1
  %1279 = extractelement <4 x i64> %1270, i64 2
  %1280 = getelementptr inbounds float, ptr %f7.host, i64 %1279
  %1281 = load float, ptr %1280, align 4, !tbaa !54
  %1282 = insertelement <4 x float> %1278, float %1281, i64 2
  %1283 = extractelement <4 x i64> %1270, i64 3
  %1284 = getelementptr inbounds float, ptr %f7.host, i64 %1283
  %1285 = load float, ptr %1284, align 4, !tbaa !54
  %1286 = insertelement <4 x float> %1282, float %1285, i64 3
  %1287 = fmul <4 x float> %1286, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1288 = fadd <4 x float> %1267, %1287
  %1289 = fmul <4 x float> %1288, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1290 = add nsw <4 x i32> %t2311.us, %1179
  %1291 = sext <4 x i32> %1290 to <4 x i64>
  %1292 = extractelement <4 x i64> %1291, i64 0
  %1293 = getelementptr inbounds float, ptr %f7.host, i64 %1292
  %1294 = load float, ptr %1293, align 4, !tbaa !54
  %1295 = insertelement <4 x float> undef, float %1294, i64 0
  %1296 = extractelement <4 x i64> %1291, i64 1
  %1297 = getelementptr inbounds float, ptr %f7.host, i64 %1296
  %1298 = load float, ptr %1297, align 4, !tbaa !54
  %1299 = insertelement <4 x float> %1295, float %1298, i64 1
  %1300 = extractelement <4 x i64> %1291, i64 2
  %1301 = getelementptr inbounds float, ptr %f7.host, i64 %1300
  %1302 = load float, ptr %1301, align 4, !tbaa !54
  %1303 = insertelement <4 x float> %1299, float %1302, i64 2
  %1304 = extractelement <4 x i64> %1291, i64 3
  %1305 = getelementptr inbounds float, ptr %f7.host, i64 %1304
  %1306 = load float, ptr %1305, align 4, !tbaa !54
  %1307 = insertelement <4 x float> %1303, float %1306, i64 3
  %1308 = fmul <4 x float> %1307, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1309 = add <4 x i32> %1268, %1201
  %1310 = sext <4 x i32> %1309 to <4 x i64>
  %1311 = extractelement <4 x i64> %1310, i64 0
  %1312 = getelementptr inbounds float, ptr %f7.host, i64 %1311
  %1313 = load float, ptr %1312, align 4, !tbaa !54
  %1314 = insertelement <4 x float> undef, float %1313, i64 0
  %1315 = extractelement <4 x i64> %1310, i64 1
  %1316 = getelementptr inbounds float, ptr %f7.host, i64 %1315
  %1317 = load float, ptr %1316, align 4, !tbaa !54
  %1318 = insertelement <4 x float> %1314, float %1317, i64 1
  %1319 = extractelement <4 x i64> %1310, i64 2
  %1320 = getelementptr inbounds float, ptr %f7.host, i64 %1319
  %1321 = load float, ptr %1320, align 4, !tbaa !54
  %1322 = insertelement <4 x float> %1318, float %1321, i64 2
  %1323 = extractelement <4 x i64> %1310, i64 3
  %1324 = getelementptr inbounds float, ptr %f7.host, i64 %1323
  %1325 = load float, ptr %1324, align 4, !tbaa !54
  %1326 = insertelement <4 x float> %1322, float %1325, i64 3
  %1327 = fmul <4 x float> %1326, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1328 = fadd <4 x float> %1308, %1327
  %1329 = fmul <4 x float> %1328, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1330 = fadd <4 x float> %1289, %1329
  %1331 = mul nsw <4 x i32> %t2308.us, %824
  %1332 = add nsw <4 x i32> %1331, %1228
  %1333 = sext <4 x i32> %1332 to <4 x i64>
  %1334 = extractelement <4 x i64> %1333, i64 0
  %1335 = getelementptr inbounds float, ptr %f6.host, i64 %1334
  %1336 = load float, ptr %1335, align 4, !tbaa !50
  %1337 = insertelement <4 x float> undef, float %1336, i64 0
  %1338 = extractelement <4 x i64> %1333, i64 1
  %1339 = getelementptr inbounds float, ptr %f6.host, i64 %1338
  %1340 = load float, ptr %1339, align 4, !tbaa !50
  %1341 = insertelement <4 x float> %1337, float %1340, i64 1
  %1342 = extractelement <4 x i64> %1333, i64 2
  %1343 = getelementptr inbounds float, ptr %f6.host, i64 %1342
  %1344 = load float, ptr %1343, align 4, !tbaa !50
  %1345 = insertelement <4 x float> %1341, float %1344, i64 2
  %1346 = extractelement <4 x i64> %1333, i64 3
  %1347 = getelementptr inbounds float, ptr %f6.host, i64 %1346
  %1348 = load float, ptr %1347, align 4, !tbaa !50
  %1349 = insertelement <4 x float> %1345, float %1348, i64 3
  %1350 = fsub <4 x float> %1349, %1330
  %1351 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2305.us
  %1352 = fmul <4 x float> %1351, %1350
  %1353 = fadd <4 x float> %1248, %1352
  %narrow156.us = sub nsw i32 %875, %f129.v3.min_realized
  %1354 = sext i32 %narrow156.us to i64
  %1355 = add nsw i64 %1354, %845
  %1356 = getelementptr inbounds float, ptr %128, i64 %1355
  %1357 = load <4 x float>, ptr %1356, align 4, !tbaa !64
  %1358 = fmul <4 x float> %1357, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1359 = sext i32 %t2302.us to i64
  %1360 = sub nsw i64 %1359, %825
  %1361 = add nsw i64 %846, %1360
  %1362 = getelementptr inbounds float, ptr %128, i64 %1361
  %1363 = load <4 x float>, ptr %1362, align 4, !tbaa !64
  %1364 = fmul <4 x float> %1363, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1365 = fadd <4 x float> %1358, %1364
  %1366 = fmul <4 x float> %1365, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1367 = add nsw i64 %1354, %847
  %1368 = getelementptr inbounds float, ptr %128, i64 %1367
  %1369 = load <4 x float>, ptr %1368, align 4, !tbaa !64
  %1370 = fmul <4 x float> %1369, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1371 = add nsw i64 %848, %1360
  %1372 = getelementptr inbounds float, ptr %128, i64 %1371
  %1373 = load <4 x float>, ptr %1372, align 4, !tbaa !64
  %1374 = fmul <4 x float> %1373, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1375 = fadd <4 x float> %1370, %1374
  %1376 = fmul <4 x float> %1375, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1377 = fadd <4 x float> %1366, %1376
  %1378 = fadd <4 x float> %1353, %1377
  %1379 = shufflevector <4 x float> %1129, <4 x float> %1378, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1380 = sext i32 %f128.s0.v3.v343.base.us to i64
  %1381 = add i64 %851, %1380
  %1382 = getelementptr inbounds float, ptr %154, i64 %1381
  store <8 x float> %1379, ptr %1382, align 4, !tbaa !66
  %lsr.iv.next417.us = add i32 %lsr.iv416.us, -1
  %lsr.iv.next419.us = add i32 %lsr.iv418.us, 8
  %.not157.us = icmp eq i32 %lsr.iv.next417.us, 0
  br i1 %.not157.us, label %"end for f128.s0.v3.v3.loopexit.us", label %"for f128.s0.v3.v3.us"

"end for f128.s0.v3.v3.loopexit.us":              ; preds = %"for f128.s0.v3.v3.us"
  %indvars.iv.next312 = add nsw i64 %indvars.iv311, 1
  %1383 = icmp eq i64 %indvars.iv.next312, %sext313
  br i1 %1383, label %"for f127.s0.v4.preheader", label %"for f128.s0.v4.us"

"for f127.s0.v4.preheader":                       ; preds = %"end for f128.s0.v3.v3.loopexit.us", %"produce f128"
  %1384 = add nsw i32 %139, 1
  %1385 = icmp sgt i32 %138, -1
  %1386 = add nsw i32 %f73.v3.extent_realized.s, 1
  %1387 = xor i32 %816, -1
  %1388 = xor i32 %f6.v4.min_realized, -1
  %1389 = add nsw i32 %f5.v3.extent_realized.s, 1
  %1390 = insertelement <4 x i32> undef, i32 %1389, i64 0
  %1391 = shufflevector <4 x i32> %1390, <4 x i32> undef, <4 x i32> zeroinitializer
  %1392 = sext i32 %f128.v3.min_realized to i64
  %1393 = sext i32 %f127.v3.extent_realized.s to i64
  %1394 = add nsw i64 %1393, 1
  %1395 = sext i32 %f127.v4.min_realized to i64
  %1396 = sext i32 %f127.v3.min_realized to i64
  br i1 %1385, label %"for f127.s0.v4.us.preheader", label %"for f126.s0.v4.preheader", !prof !5

"for f127.s0.v4.us.preheader":                    ; preds = %"for f127.s0.v4.preheader"
  %1397 = add nsw i32 %b803, 3
  %1398 = sext i32 %b803 to i64
  %sext317 = sext i32 %1397 to i64
  br label %"for f127.s0.v4.us"

"for f127.s0.v4.us":                              ; preds = %"for f127.s0.v4.us.preheader", %"end for f127.s0.v3.v3.loopexit.us"
  %indvars.iv315 = phi i64 [ %1398, %"for f127.s0.v4.us.preheader" ], [ %indvars.iv.next316, %"end for f127.s0.v3.v3.loopexit.us" ]
  %indvars318 = trunc i64 %indvars.iv315 to i32
  %1399 = shl i32 %indvars318, 1
  %1400 = and i32 %1399, 2
  %1401 = ashr i32 %indvars318, 1
  %t2317.us = add nsw i32 %1400, %1401
  %1402 = trunc i64 %indvars.iv315 to i32
  %1403 = sub i32 %1402, %f73.v4.min_realized
  %1404 = mul i32 %1403, %1386
  %1405 = sub i32 %1404, %f73.v3.min_realized
  %1406 = add nsw i32 %t2317.us, %1387
  %t2324.us = mul nsw i32 %1406, %147
  %1407 = sub nsw i32 %1401, %816
  %t2326.us = mul nsw i32 %1407, %147
  %1408 = add i32 %t2317.us, %1388
  %1409 = mul nsw i32 %1408, %f6.stride.1
  %1410 = sub nsw i32 %1401, %f6.v4.min_realized
  %1411 = mul nsw i32 %1410, %f6.stride.1
  %1412 = sext i32 %t2326.us to i64
  %1413 = add nsw i64 %1412, -1
  %1414 = sext i32 %t2324.us to i64
  %1415 = add nsw i64 %1414, -1
  %1416 = sub nsw i64 %indvars.iv315, %1395
  %1417 = mul nsw i64 %1416, %1394
  %1418 = sub i64 %1417, %1396
  %1419 = trunc i64 %indvars.iv315 to i32
  %1420 = sub i32 %1419, %f5.v4.min_realized
  %1421 = mul i32 %1420, %f5.stride.1
  br label %"for f127.s0.v3.v3.us"

"for f127.s0.v3.v3.us":                           ; preds = %"for f127.s0.v4.us", %"for f127.s0.v3.v3.us"
  %lsr.iv414.us = phi i32 [ %lsr.iv.next415.us, %"for f127.s0.v3.v3.us" ], [ 0, %"for f127.s0.v4.us" ]
  %lsr.iv412.us = phi i32 [ %lsr.iv.next413.us, %"for f127.s0.v3.v3.us" ], [ %1384, %"for f127.s0.v4.us" ]
  %1422 = add i32 %lsr.iv414.us, %135
  %f127.s0.v3.v323.base.us = tail call i32 @llvm.smin.i32(i32 %b801, i32 %1422)
  %1423 = shl i32 %f127.s0.v3.v323.base.us, 1
  %1424 = and i32 %1423, 2
  %1425 = ashr i32 %f127.s0.v3.v323.base.us, 1
  %t2318.us = add nsw i32 %1424, %1425
  %t2319.us = add i32 %1405, %f127.s0.v3.v323.base.us
  %1426 = sext i32 %t2319.us to i64
  %1427 = getelementptr inbounds float, ptr %f73.host, i64 %1426
  %1428 = load <4 x float>, ptr %1427, align 4, !tbaa !52
  %1429 = add nsw i64 %1426, 4
  %1430 = getelementptr inbounds float, ptr %f73.host, i64 %1429
  %1431 = load <4 x float>, ptr %1430, align 4, !tbaa !52
  %1432 = shufflevector <4 x float> %1428, <4 x float> %1431, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2320.us = fmul <4 x float> %232, %1432
  %a841.us = fptosi <4 x float> %t2320.us to <4 x i32>
  %a844.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a841.us)
  %1433 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a844.us, <4 x i32> zeroinitializer)
  %1434 = sitofp <4 x i32> %1433 to <4 x float>
  %t2322.us = fsub <4 x float> %t2320.us, %1434
  %1435 = sub nsw i32 %f127.s0.v3.v323.base.us, %f5.v3.min_realized
  %t2327.us = add nsw i32 %1435, %1421
  %t2329.us = sub nsw <4 x i32> %1433, %241
  %1436 = sub nsw i32 %t2318.us, %f6.v3.min_realized
  %t2332.us = add nsw i32 %1436, %1409
  %t2333.us = mul nsw <4 x i32> %t2329.us, %824
  %1437 = sub nsw i32 %1425, %f6.v3.min_realized
  %t2335.us = add nsw i32 %1437, %1409
  %t2337.us = add nsw i32 %1436, %1411
  %t2338.us = add nsw i32 %1437, %1411
  %1438 = add nsw <4 x i32> %t2329.us, <i32 1, i32 1, i32 1, i32 1>
  %t2339.us = mul nsw <4 x i32> %1438, %824
  %1439 = add nsw i32 %f127.s0.v3.v323.base.us, 1
  %1440 = shl i32 %1439, 1
  %1441 = and i32 %1440, 2
  %1442 = ashr i32 %1439, 1
  %t2340.us = add nsw i32 %1441, %1442
  %1443 = shufflevector <4 x float> %1428, <4 x float> %1431, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2341.us = fmul <4 x float> %232, %1443
  %a845.us = fptosi <4 x float> %t2341.us to <4 x i32>
  %a848.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a845.us)
  %1444 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a848.us, <4 x i32> zeroinitializer)
  %1445 = sitofp <4 x i32> %1444 to <4 x float>
  %t2343.us = fsub <4 x float> %t2341.us, %1445
  %t2346.us = sub nsw <4 x i32> %1444, %241
  %1446 = sub nsw i32 %t2340.us, %f6.v3.min_realized
  %t2348.us = add nsw i32 %1446, %1409
  %t2349.us = mul nsw <4 x i32> %t2346.us, %824
  %1447 = sub nsw i32 %1442, %f6.v3.min_realized
  %t2351.us = add nsw i32 %1447, %1409
  %t2352.us = add nsw i32 %1446, %1411
  %t2353.us = add nsw i32 %1447, %1411
  %1448 = add nsw <4 x i32> %t2346.us, <i32 1, i32 1, i32 1, i32 1>
  %t2354.us = mul nsw <4 x i32> %1448, %824
  %1449 = insertelement <4 x i32> undef, i32 %t2338.us, i64 0
  %1450 = shufflevector <4 x i32> %1449, <4 x i32> undef, <4 x i32> zeroinitializer
  %1451 = add nsw <4 x i32> %1450, <i32 0, i32 1, i32 2, i32 3>
  %1452 = add nsw <4 x i32> %t2339.us, %1451
  %1453 = sext <4 x i32> %1452 to <4 x i64>
  %1454 = extractelement <4 x i64> %1453, i64 0
  %1455 = getelementptr inbounds float, ptr %f6.host, i64 %1454
  %1456 = load float, ptr %1455, align 4, !tbaa !50
  %1457 = insertelement <4 x float> undef, float %1456, i64 0
  %1458 = extractelement <4 x i64> %1453, i64 1
  %1459 = getelementptr inbounds float, ptr %f6.host, i64 %1458
  %1460 = load float, ptr %1459, align 4, !tbaa !50
  %1461 = insertelement <4 x float> %1457, float %1460, i64 1
  %1462 = extractelement <4 x i64> %1453, i64 2
  %1463 = getelementptr inbounds float, ptr %f6.host, i64 %1462
  %1464 = load float, ptr %1463, align 4, !tbaa !50
  %1465 = insertelement <4 x float> %1461, float %1464, i64 2
  %1466 = extractelement <4 x i64> %1453, i64 3
  %1467 = getelementptr inbounds float, ptr %f6.host, i64 %1466
  %1468 = load float, ptr %1467, align 4, !tbaa !50
  %1469 = insertelement <4 x float> %1465, float %1468, i64 3
  %1470 = fmul <4 x float> %1469, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1471 = insertelement <4 x i32> undef, i32 %t2337.us, i64 0
  %1472 = shufflevector <4 x i32> %1471, <4 x i32> undef, <4 x i32> zeroinitializer
  %1473 = add <4 x i32> %1472, <i32 -1, i32 0, i32 1, i32 2>
  %1474 = add <4 x i32> %1473, %t2339.us
  %1475 = sext <4 x i32> %1474 to <4 x i64>
  %1476 = extractelement <4 x i64> %1475, i64 0
  %1477 = getelementptr inbounds float, ptr %f6.host, i64 %1476
  %1478 = load float, ptr %1477, align 4, !tbaa !50
  %1479 = insertelement <4 x float> undef, float %1478, i64 0
  %1480 = extractelement <4 x i64> %1475, i64 1
  %1481 = getelementptr inbounds float, ptr %f6.host, i64 %1480
  %1482 = load float, ptr %1481, align 4, !tbaa !50
  %1483 = insertelement <4 x float> %1479, float %1482, i64 1
  %1484 = extractelement <4 x i64> %1475, i64 2
  %1485 = getelementptr inbounds float, ptr %f6.host, i64 %1484
  %1486 = load float, ptr %1485, align 4, !tbaa !50
  %1487 = insertelement <4 x float> %1483, float %1486, i64 2
  %1488 = extractelement <4 x i64> %1475, i64 3
  %1489 = getelementptr inbounds float, ptr %f6.host, i64 %1488
  %1490 = load float, ptr %1489, align 4, !tbaa !50
  %1491 = insertelement <4 x float> %1487, float %1490, i64 3
  %1492 = fmul <4 x float> %1491, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1493 = fadd <4 x float> %1470, %1492
  %1494 = fmul <4 x float> %1493, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1495 = insertelement <4 x i32> undef, i32 %t2335.us, i64 0
  %1496 = shufflevector <4 x i32> %1495, <4 x i32> undef, <4 x i32> zeroinitializer
  %1497 = add nsw <4 x i32> %1496, <i32 0, i32 1, i32 2, i32 3>
  %1498 = add nsw <4 x i32> %t2339.us, %1497
  %1499 = sext <4 x i32> %1498 to <4 x i64>
  %1500 = extractelement <4 x i64> %1499, i64 0
  %1501 = getelementptr inbounds float, ptr %f6.host, i64 %1500
  %1502 = load float, ptr %1501, align 4, !tbaa !50
  %1503 = insertelement <4 x float> undef, float %1502, i64 0
  %1504 = extractelement <4 x i64> %1499, i64 1
  %1505 = getelementptr inbounds float, ptr %f6.host, i64 %1504
  %1506 = load float, ptr %1505, align 4, !tbaa !50
  %1507 = insertelement <4 x float> %1503, float %1506, i64 1
  %1508 = extractelement <4 x i64> %1499, i64 2
  %1509 = getelementptr inbounds float, ptr %f6.host, i64 %1508
  %1510 = load float, ptr %1509, align 4, !tbaa !50
  %1511 = insertelement <4 x float> %1507, float %1510, i64 2
  %1512 = extractelement <4 x i64> %1499, i64 3
  %1513 = getelementptr inbounds float, ptr %f6.host, i64 %1512
  %1514 = load float, ptr %1513, align 4, !tbaa !50
  %1515 = insertelement <4 x float> %1511, float %1514, i64 3
  %1516 = fmul <4 x float> %1515, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1517 = insertelement <4 x i32> undef, i32 %t2332.us, i64 0
  %1518 = shufflevector <4 x i32> %1517, <4 x i32> undef, <4 x i32> zeroinitializer
  %1519 = add <4 x i32> %1518, <i32 -1, i32 0, i32 1, i32 2>
  %1520 = add <4 x i32> %1519, %t2339.us
  %1521 = sext <4 x i32> %1520 to <4 x i64>
  %1522 = extractelement <4 x i64> %1521, i64 0
  %1523 = getelementptr inbounds float, ptr %f6.host, i64 %1522
  %1524 = load float, ptr %1523, align 4, !tbaa !50
  %1525 = insertelement <4 x float> undef, float %1524, i64 0
  %1526 = extractelement <4 x i64> %1521, i64 1
  %1527 = getelementptr inbounds float, ptr %f6.host, i64 %1526
  %1528 = load float, ptr %1527, align 4, !tbaa !50
  %1529 = insertelement <4 x float> %1525, float %1528, i64 1
  %1530 = extractelement <4 x i64> %1521, i64 2
  %1531 = getelementptr inbounds float, ptr %f6.host, i64 %1530
  %1532 = load float, ptr %1531, align 4, !tbaa !50
  %1533 = insertelement <4 x float> %1529, float %1532, i64 2
  %1534 = extractelement <4 x i64> %1521, i64 3
  %1535 = getelementptr inbounds float, ptr %f6.host, i64 %1534
  %1536 = load float, ptr %1535, align 4, !tbaa !50
  %1537 = insertelement <4 x float> %1533, float %1536, i64 3
  %1538 = fmul <4 x float> %1537, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1539 = fadd <4 x float> %1516, %1538
  %1540 = fmul <4 x float> %1539, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1541 = fadd <4 x float> %1494, %1540
  %1542 = mul nsw <4 x i32> %1438, %1391
  %1543 = insertelement <4 x i32> undef, i32 %t2327.us, i64 0
  %1544 = shufflevector <4 x i32> %1543, <4 x i32> undef, <4 x i32> zeroinitializer
  %1545 = add nsw <4 x i32> %1544, <i32 0, i32 2, i32 4, i32 6>
  %1546 = add nsw <4 x i32> %1542, %1545
  %1547 = sext <4 x i32> %1546 to <4 x i64>
  %1548 = extractelement <4 x i64> %1547, i64 0
  %1549 = getelementptr inbounds float, ptr %f5.host, i64 %1548
  %1550 = load float, ptr %1549, align 4, !tbaa !46
  %1551 = insertelement <4 x float> undef, float %1550, i64 0
  %1552 = extractelement <4 x i64> %1547, i64 1
  %1553 = getelementptr inbounds float, ptr %f5.host, i64 %1552
  %1554 = load float, ptr %1553, align 4, !tbaa !46
  %1555 = insertelement <4 x float> %1551, float %1554, i64 1
  %1556 = extractelement <4 x i64> %1547, i64 2
  %1557 = getelementptr inbounds float, ptr %f5.host, i64 %1556
  %1558 = load float, ptr %1557, align 4, !tbaa !46
  %1559 = insertelement <4 x float> %1555, float %1558, i64 2
  %1560 = extractelement <4 x i64> %1547, i64 3
  %1561 = getelementptr inbounds float, ptr %f5.host, i64 %1560
  %1562 = load float, ptr %1561, align 4, !tbaa !46
  %1563 = insertelement <4 x float> %1559, float %1562, i64 3
  %1564 = fsub <4 x float> %1563, %1541
  %1565 = fmul <4 x float> %t2322.us, %1564
  %1566 = add nsw <4 x i32> %t2333.us, %1451
  %1567 = sext <4 x i32> %1566 to <4 x i64>
  %1568 = extractelement <4 x i64> %1567, i64 0
  %1569 = getelementptr inbounds float, ptr %f6.host, i64 %1568
  %1570 = load float, ptr %1569, align 4, !tbaa !50
  %1571 = insertelement <4 x float> undef, float %1570, i64 0
  %1572 = extractelement <4 x i64> %1567, i64 1
  %1573 = getelementptr inbounds float, ptr %f6.host, i64 %1572
  %1574 = load float, ptr %1573, align 4, !tbaa !50
  %1575 = insertelement <4 x float> %1571, float %1574, i64 1
  %1576 = extractelement <4 x i64> %1567, i64 2
  %1577 = getelementptr inbounds float, ptr %f6.host, i64 %1576
  %1578 = load float, ptr %1577, align 4, !tbaa !50
  %1579 = insertelement <4 x float> %1575, float %1578, i64 2
  %1580 = extractelement <4 x i64> %1567, i64 3
  %1581 = getelementptr inbounds float, ptr %f6.host, i64 %1580
  %1582 = load float, ptr %1581, align 4, !tbaa !50
  %1583 = insertelement <4 x float> %1579, float %1582, i64 3
  %1584 = fmul <4 x float> %1583, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1585 = add <4 x i32> %t2333.us, %1472
  %1586 = add <4 x i32> %1585, <i32 -1, i32 0, i32 1, i32 2>
  %1587 = sext <4 x i32> %1586 to <4 x i64>
  %1588 = extractelement <4 x i64> %1587, i64 0
  %1589 = getelementptr inbounds float, ptr %f6.host, i64 %1588
  %1590 = load float, ptr %1589, align 4, !tbaa !50
  %1591 = insertelement <4 x float> undef, float %1590, i64 0
  %1592 = extractelement <4 x i64> %1587, i64 1
  %1593 = getelementptr inbounds float, ptr %f6.host, i64 %1592
  %1594 = load float, ptr %1593, align 4, !tbaa !50
  %1595 = insertelement <4 x float> %1591, float %1594, i64 1
  %1596 = extractelement <4 x i64> %1587, i64 2
  %1597 = getelementptr inbounds float, ptr %f6.host, i64 %1596
  %1598 = load float, ptr %1597, align 4, !tbaa !50
  %1599 = insertelement <4 x float> %1595, float %1598, i64 2
  %1600 = extractelement <4 x i64> %1587, i64 3
  %1601 = getelementptr inbounds float, ptr %f6.host, i64 %1600
  %1602 = load float, ptr %1601, align 4, !tbaa !50
  %1603 = insertelement <4 x float> %1599, float %1602, i64 3
  %1604 = fmul <4 x float> %1603, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1605 = fadd <4 x float> %1584, %1604
  %1606 = fmul <4 x float> %1605, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1607 = add nsw <4 x i32> %t2333.us, %1497
  %1608 = sext <4 x i32> %1607 to <4 x i64>
  %1609 = extractelement <4 x i64> %1608, i64 0
  %1610 = getelementptr inbounds float, ptr %f6.host, i64 %1609
  %1611 = load float, ptr %1610, align 4, !tbaa !50
  %1612 = insertelement <4 x float> undef, float %1611, i64 0
  %1613 = extractelement <4 x i64> %1608, i64 1
  %1614 = getelementptr inbounds float, ptr %f6.host, i64 %1613
  %1615 = load float, ptr %1614, align 4, !tbaa !50
  %1616 = insertelement <4 x float> %1612, float %1615, i64 1
  %1617 = extractelement <4 x i64> %1608, i64 2
  %1618 = getelementptr inbounds float, ptr %f6.host, i64 %1617
  %1619 = load float, ptr %1618, align 4, !tbaa !50
  %1620 = insertelement <4 x float> %1616, float %1619, i64 2
  %1621 = extractelement <4 x i64> %1608, i64 3
  %1622 = getelementptr inbounds float, ptr %f6.host, i64 %1621
  %1623 = load float, ptr %1622, align 4, !tbaa !50
  %1624 = insertelement <4 x float> %1620, float %1623, i64 3
  %1625 = fmul <4 x float> %1624, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1626 = add <4 x i32> %t2333.us, %1518
  %1627 = add <4 x i32> %1626, <i32 -1, i32 0, i32 1, i32 2>
  %1628 = sext <4 x i32> %1627 to <4 x i64>
  %1629 = extractelement <4 x i64> %1628, i64 0
  %1630 = getelementptr inbounds float, ptr %f6.host, i64 %1629
  %1631 = load float, ptr %1630, align 4, !tbaa !50
  %1632 = insertelement <4 x float> undef, float %1631, i64 0
  %1633 = extractelement <4 x i64> %1628, i64 1
  %1634 = getelementptr inbounds float, ptr %f6.host, i64 %1633
  %1635 = load float, ptr %1634, align 4, !tbaa !50
  %1636 = insertelement <4 x float> %1632, float %1635, i64 1
  %1637 = extractelement <4 x i64> %1628, i64 2
  %1638 = getelementptr inbounds float, ptr %f6.host, i64 %1637
  %1639 = load float, ptr %1638, align 4, !tbaa !50
  %1640 = insertelement <4 x float> %1636, float %1639, i64 2
  %1641 = extractelement <4 x i64> %1628, i64 3
  %1642 = getelementptr inbounds float, ptr %f6.host, i64 %1641
  %1643 = load float, ptr %1642, align 4, !tbaa !50
  %1644 = insertelement <4 x float> %1640, float %1643, i64 3
  %1645 = fmul <4 x float> %1644, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1646 = fadd <4 x float> %1625, %1645
  %1647 = fmul <4 x float> %1646, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1648 = fadd <4 x float> %1606, %1647
  %1649 = mul nsw <4 x i32> %t2329.us, %1391
  %1650 = add nsw <4 x i32> %1649, %1545
  %1651 = sext <4 x i32> %1650 to <4 x i64>
  %1652 = extractelement <4 x i64> %1651, i64 0
  %1653 = getelementptr inbounds float, ptr %f5.host, i64 %1652
  %1654 = load float, ptr %1653, align 4, !tbaa !46
  %1655 = insertelement <4 x float> undef, float %1654, i64 0
  %1656 = extractelement <4 x i64> %1651, i64 1
  %1657 = getelementptr inbounds float, ptr %f5.host, i64 %1656
  %1658 = load float, ptr %1657, align 4, !tbaa !46
  %1659 = insertelement <4 x float> %1655, float %1658, i64 1
  %1660 = extractelement <4 x i64> %1651, i64 2
  %1661 = getelementptr inbounds float, ptr %f5.host, i64 %1660
  %1662 = load float, ptr %1661, align 4, !tbaa !46
  %1663 = insertelement <4 x float> %1659, float %1662, i64 2
  %1664 = extractelement <4 x i64> %1651, i64 3
  %1665 = getelementptr inbounds float, ptr %f5.host, i64 %1664
  %1666 = load float, ptr %1665, align 4, !tbaa !46
  %1667 = insertelement <4 x float> %1663, float %1666, i64 3
  %1668 = fsub <4 x float> %1667, %1648
  %1669 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2322.us
  %1670 = fmul <4 x float> %1669, %1668
  %1671 = fadd <4 x float> %1565, %1670
  %narrow152.us = sub nsw i32 %1425, %f128.v3.min_realized
  %1672 = sext i32 %narrow152.us to i64
  %1673 = add nsw i64 %1672, %1412
  %1674 = getelementptr inbounds float, ptr %154, i64 %1673
  %1675 = load <4 x float>, ptr %1674, align 4, !tbaa !66
  %1676 = fmul <4 x float> %1675, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1677 = sext i32 %t2318.us to i64
  %1678 = sub nsw i64 %1677, %1392
  %1679 = add nsw i64 %1413, %1678
  %1680 = getelementptr inbounds float, ptr %154, i64 %1679
  %1681 = load <4 x float>, ptr %1680, align 4, !tbaa !66
  %1682 = fmul <4 x float> %1681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1683 = fadd <4 x float> %1676, %1682
  %1684 = fmul <4 x float> %1683, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1685 = add nsw i64 %1672, %1414
  %1686 = getelementptr inbounds float, ptr %154, i64 %1685
  %1687 = load <4 x float>, ptr %1686, align 4, !tbaa !66
  %1688 = fmul <4 x float> %1687, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1689 = add nsw i64 %1415, %1678
  %1690 = getelementptr inbounds float, ptr %154, i64 %1689
  %1691 = load <4 x float>, ptr %1690, align 4, !tbaa !66
  %1692 = fmul <4 x float> %1691, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1693 = fadd <4 x float> %1688, %1692
  %1694 = fmul <4 x float> %1693, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1695 = fadd <4 x float> %1684, %1694
  %1696 = fadd <4 x float> %1671, %1695
  %1697 = insertelement <4 x i32> undef, i32 %t2353.us, i64 0
  %1698 = shufflevector <4 x i32> %1697, <4 x i32> undef, <4 x i32> zeroinitializer
  %1699 = add nsw <4 x i32> %1698, <i32 0, i32 1, i32 2, i32 3>
  %1700 = add nsw <4 x i32> %t2354.us, %1699
  %1701 = sext <4 x i32> %1700 to <4 x i64>
  %1702 = extractelement <4 x i64> %1701, i64 0
  %1703 = getelementptr inbounds float, ptr %f6.host, i64 %1702
  %1704 = load float, ptr %1703, align 4, !tbaa !50
  %1705 = insertelement <4 x float> undef, float %1704, i64 0
  %1706 = extractelement <4 x i64> %1701, i64 1
  %1707 = getelementptr inbounds float, ptr %f6.host, i64 %1706
  %1708 = load float, ptr %1707, align 4, !tbaa !50
  %1709 = insertelement <4 x float> %1705, float %1708, i64 1
  %1710 = extractelement <4 x i64> %1701, i64 2
  %1711 = getelementptr inbounds float, ptr %f6.host, i64 %1710
  %1712 = load float, ptr %1711, align 4, !tbaa !50
  %1713 = insertelement <4 x float> %1709, float %1712, i64 2
  %1714 = extractelement <4 x i64> %1701, i64 3
  %1715 = getelementptr inbounds float, ptr %f6.host, i64 %1714
  %1716 = load float, ptr %1715, align 4, !tbaa !50
  %1717 = insertelement <4 x float> %1713, float %1716, i64 3
  %1718 = fmul <4 x float> %1717, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1719 = insertelement <4 x i32> undef, i32 %t2352.us, i64 0
  %1720 = shufflevector <4 x i32> %1719, <4 x i32> undef, <4 x i32> zeroinitializer
  %1721 = add nsw <4 x i32> %1720, <i32 0, i32 1, i32 2, i32 3>
  %1722 = add <4 x i32> %t2354.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1723 = add <4 x i32> %1722, %1721
  %1724 = sext <4 x i32> %1723 to <4 x i64>
  %1725 = extractelement <4 x i64> %1724, i64 0
  %1726 = getelementptr inbounds float, ptr %f6.host, i64 %1725
  %1727 = load float, ptr %1726, align 4, !tbaa !50
  %1728 = insertelement <4 x float> undef, float %1727, i64 0
  %1729 = extractelement <4 x i64> %1724, i64 1
  %1730 = getelementptr inbounds float, ptr %f6.host, i64 %1729
  %1731 = load float, ptr %1730, align 4, !tbaa !50
  %1732 = insertelement <4 x float> %1728, float %1731, i64 1
  %1733 = extractelement <4 x i64> %1724, i64 2
  %1734 = getelementptr inbounds float, ptr %f6.host, i64 %1733
  %1735 = load float, ptr %1734, align 4, !tbaa !50
  %1736 = insertelement <4 x float> %1732, float %1735, i64 2
  %1737 = extractelement <4 x i64> %1724, i64 3
  %1738 = getelementptr inbounds float, ptr %f6.host, i64 %1737
  %1739 = load float, ptr %1738, align 4, !tbaa !50
  %1740 = insertelement <4 x float> %1736, float %1739, i64 3
  %1741 = fmul <4 x float> %1740, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1742 = fadd <4 x float> %1718, %1741
  %1743 = fmul <4 x float> %1742, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1744 = insertelement <4 x i32> undef, i32 %t2351.us, i64 0
  %1745 = shufflevector <4 x i32> %1744, <4 x i32> undef, <4 x i32> zeroinitializer
  %1746 = add nsw <4 x i32> %1745, <i32 0, i32 1, i32 2, i32 3>
  %1747 = add nsw <4 x i32> %t2354.us, %1746
  %1748 = sext <4 x i32> %1747 to <4 x i64>
  %1749 = extractelement <4 x i64> %1748, i64 0
  %1750 = getelementptr inbounds float, ptr %f6.host, i64 %1749
  %1751 = load float, ptr %1750, align 4, !tbaa !50
  %1752 = insertelement <4 x float> undef, float %1751, i64 0
  %1753 = extractelement <4 x i64> %1748, i64 1
  %1754 = getelementptr inbounds float, ptr %f6.host, i64 %1753
  %1755 = load float, ptr %1754, align 4, !tbaa !50
  %1756 = insertelement <4 x float> %1752, float %1755, i64 1
  %1757 = extractelement <4 x i64> %1748, i64 2
  %1758 = getelementptr inbounds float, ptr %f6.host, i64 %1757
  %1759 = load float, ptr %1758, align 4, !tbaa !50
  %1760 = insertelement <4 x float> %1756, float %1759, i64 2
  %1761 = extractelement <4 x i64> %1748, i64 3
  %1762 = getelementptr inbounds float, ptr %f6.host, i64 %1761
  %1763 = load float, ptr %1762, align 4, !tbaa !50
  %1764 = insertelement <4 x float> %1760, float %1763, i64 3
  %1765 = fmul <4 x float> %1764, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1766 = insertelement <4 x i32> undef, i32 %t2348.us, i64 0
  %1767 = shufflevector <4 x i32> %1766, <4 x i32> undef, <4 x i32> zeroinitializer
  %1768 = add nsw <4 x i32> %1767, <i32 0, i32 1, i32 2, i32 3>
  %1769 = add <4 x i32> %1722, %1768
  %1770 = sext <4 x i32> %1769 to <4 x i64>
  %1771 = extractelement <4 x i64> %1770, i64 0
  %1772 = getelementptr inbounds float, ptr %f6.host, i64 %1771
  %1773 = load float, ptr %1772, align 4, !tbaa !50
  %1774 = insertelement <4 x float> undef, float %1773, i64 0
  %1775 = extractelement <4 x i64> %1770, i64 1
  %1776 = getelementptr inbounds float, ptr %f6.host, i64 %1775
  %1777 = load float, ptr %1776, align 4, !tbaa !50
  %1778 = insertelement <4 x float> %1774, float %1777, i64 1
  %1779 = extractelement <4 x i64> %1770, i64 2
  %1780 = getelementptr inbounds float, ptr %f6.host, i64 %1779
  %1781 = load float, ptr %1780, align 4, !tbaa !50
  %1782 = insertelement <4 x float> %1778, float %1781, i64 2
  %1783 = extractelement <4 x i64> %1770, i64 3
  %1784 = getelementptr inbounds float, ptr %f6.host, i64 %1783
  %1785 = load float, ptr %1784, align 4, !tbaa !50
  %1786 = insertelement <4 x float> %1782, float %1785, i64 3
  %1787 = fmul <4 x float> %1786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1788 = fadd <4 x float> %1765, %1787
  %1789 = fmul <4 x float> %1788, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1790 = fadd <4 x float> %1743, %1789
  %1791 = mul nsw <4 x i32> %1448, %1391
  %1792 = add nsw i32 %t2327.us, 1
  %1793 = insertelement <4 x i32> undef, i32 %1792, i64 0
  %1794 = shufflevector <4 x i32> %1793, <4 x i32> undef, <4 x i32> zeroinitializer
  %1795 = add nsw <4 x i32> %1794, <i32 0, i32 2, i32 4, i32 6>
  %1796 = add nsw <4 x i32> %1791, %1795
  %1797 = sext <4 x i32> %1796 to <4 x i64>
  %1798 = extractelement <4 x i64> %1797, i64 0
  %1799 = getelementptr inbounds float, ptr %f5.host, i64 %1798
  %1800 = load float, ptr %1799, align 4, !tbaa !46
  %1801 = insertelement <4 x float> undef, float %1800, i64 0
  %1802 = extractelement <4 x i64> %1797, i64 1
  %1803 = getelementptr inbounds float, ptr %f5.host, i64 %1802
  %1804 = load float, ptr %1803, align 4, !tbaa !46
  %1805 = insertelement <4 x float> %1801, float %1804, i64 1
  %1806 = extractelement <4 x i64> %1797, i64 2
  %1807 = getelementptr inbounds float, ptr %f5.host, i64 %1806
  %1808 = load float, ptr %1807, align 4, !tbaa !46
  %1809 = insertelement <4 x float> %1805, float %1808, i64 2
  %1810 = extractelement <4 x i64> %1797, i64 3
  %1811 = getelementptr inbounds float, ptr %f5.host, i64 %1810
  %1812 = load float, ptr %1811, align 4, !tbaa !46
  %1813 = insertelement <4 x float> %1809, float %1812, i64 3
  %1814 = fsub <4 x float> %1813, %1790
  %1815 = fmul <4 x float> %t2343.us, %1814
  %1816 = add nsw <4 x i32> %t2349.us, %1699
  %1817 = sext <4 x i32> %1816 to <4 x i64>
  %1818 = extractelement <4 x i64> %1817, i64 0
  %1819 = getelementptr inbounds float, ptr %f6.host, i64 %1818
  %1820 = load float, ptr %1819, align 4, !tbaa !50
  %1821 = insertelement <4 x float> undef, float %1820, i64 0
  %1822 = extractelement <4 x i64> %1817, i64 1
  %1823 = getelementptr inbounds float, ptr %f6.host, i64 %1822
  %1824 = load float, ptr %1823, align 4, !tbaa !50
  %1825 = insertelement <4 x float> %1821, float %1824, i64 1
  %1826 = extractelement <4 x i64> %1817, i64 2
  %1827 = getelementptr inbounds float, ptr %f6.host, i64 %1826
  %1828 = load float, ptr %1827, align 4, !tbaa !50
  %1829 = insertelement <4 x float> %1825, float %1828, i64 2
  %1830 = extractelement <4 x i64> %1817, i64 3
  %1831 = getelementptr inbounds float, ptr %f6.host, i64 %1830
  %1832 = load float, ptr %1831, align 4, !tbaa !50
  %1833 = insertelement <4 x float> %1829, float %1832, i64 3
  %1834 = fmul <4 x float> %1833, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1835 = add <4 x i32> %t2349.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1836 = add <4 x i32> %1835, %1721
  %1837 = sext <4 x i32> %1836 to <4 x i64>
  %1838 = extractelement <4 x i64> %1837, i64 0
  %1839 = getelementptr inbounds float, ptr %f6.host, i64 %1838
  %1840 = load float, ptr %1839, align 4, !tbaa !50
  %1841 = insertelement <4 x float> undef, float %1840, i64 0
  %1842 = extractelement <4 x i64> %1837, i64 1
  %1843 = getelementptr inbounds float, ptr %f6.host, i64 %1842
  %1844 = load float, ptr %1843, align 4, !tbaa !50
  %1845 = insertelement <4 x float> %1841, float %1844, i64 1
  %1846 = extractelement <4 x i64> %1837, i64 2
  %1847 = getelementptr inbounds float, ptr %f6.host, i64 %1846
  %1848 = load float, ptr %1847, align 4, !tbaa !50
  %1849 = insertelement <4 x float> %1845, float %1848, i64 2
  %1850 = extractelement <4 x i64> %1837, i64 3
  %1851 = getelementptr inbounds float, ptr %f6.host, i64 %1850
  %1852 = load float, ptr %1851, align 4, !tbaa !50
  %1853 = insertelement <4 x float> %1849, float %1852, i64 3
  %1854 = fmul <4 x float> %1853, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1855 = fadd <4 x float> %1834, %1854
  %1856 = fmul <4 x float> %1855, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1857 = add nsw <4 x i32> %t2349.us, %1746
  %1858 = sext <4 x i32> %1857 to <4 x i64>
  %1859 = extractelement <4 x i64> %1858, i64 0
  %1860 = getelementptr inbounds float, ptr %f6.host, i64 %1859
  %1861 = load float, ptr %1860, align 4, !tbaa !50
  %1862 = insertelement <4 x float> undef, float %1861, i64 0
  %1863 = extractelement <4 x i64> %1858, i64 1
  %1864 = getelementptr inbounds float, ptr %f6.host, i64 %1863
  %1865 = load float, ptr %1864, align 4, !tbaa !50
  %1866 = insertelement <4 x float> %1862, float %1865, i64 1
  %1867 = extractelement <4 x i64> %1858, i64 2
  %1868 = getelementptr inbounds float, ptr %f6.host, i64 %1867
  %1869 = load float, ptr %1868, align 4, !tbaa !50
  %1870 = insertelement <4 x float> %1866, float %1869, i64 2
  %1871 = extractelement <4 x i64> %1858, i64 3
  %1872 = getelementptr inbounds float, ptr %f6.host, i64 %1871
  %1873 = load float, ptr %1872, align 4, !tbaa !50
  %1874 = insertelement <4 x float> %1870, float %1873, i64 3
  %1875 = fmul <4 x float> %1874, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1876 = add <4 x i32> %1835, %1768
  %1877 = sext <4 x i32> %1876 to <4 x i64>
  %1878 = extractelement <4 x i64> %1877, i64 0
  %1879 = getelementptr inbounds float, ptr %f6.host, i64 %1878
  %1880 = load float, ptr %1879, align 4, !tbaa !50
  %1881 = insertelement <4 x float> undef, float %1880, i64 0
  %1882 = extractelement <4 x i64> %1877, i64 1
  %1883 = getelementptr inbounds float, ptr %f6.host, i64 %1882
  %1884 = load float, ptr %1883, align 4, !tbaa !50
  %1885 = insertelement <4 x float> %1881, float %1884, i64 1
  %1886 = extractelement <4 x i64> %1877, i64 2
  %1887 = getelementptr inbounds float, ptr %f6.host, i64 %1886
  %1888 = load float, ptr %1887, align 4, !tbaa !50
  %1889 = insertelement <4 x float> %1885, float %1888, i64 2
  %1890 = extractelement <4 x i64> %1877, i64 3
  %1891 = getelementptr inbounds float, ptr %f6.host, i64 %1890
  %1892 = load float, ptr %1891, align 4, !tbaa !50
  %1893 = insertelement <4 x float> %1889, float %1892, i64 3
  %1894 = fmul <4 x float> %1893, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1895 = fadd <4 x float> %1875, %1894
  %1896 = fmul <4 x float> %1895, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1897 = fadd <4 x float> %1856, %1896
  %1898 = mul nsw <4 x i32> %t2346.us, %1391
  %1899 = add nsw <4 x i32> %1898, %1795
  %1900 = sext <4 x i32> %1899 to <4 x i64>
  %1901 = extractelement <4 x i64> %1900, i64 0
  %1902 = getelementptr inbounds float, ptr %f5.host, i64 %1901
  %1903 = load float, ptr %1902, align 4, !tbaa !46
  %1904 = insertelement <4 x float> undef, float %1903, i64 0
  %1905 = extractelement <4 x i64> %1900, i64 1
  %1906 = getelementptr inbounds float, ptr %f5.host, i64 %1905
  %1907 = load float, ptr %1906, align 4, !tbaa !46
  %1908 = insertelement <4 x float> %1904, float %1907, i64 1
  %1909 = extractelement <4 x i64> %1900, i64 2
  %1910 = getelementptr inbounds float, ptr %f5.host, i64 %1909
  %1911 = load float, ptr %1910, align 4, !tbaa !46
  %1912 = insertelement <4 x float> %1908, float %1911, i64 2
  %1913 = extractelement <4 x i64> %1900, i64 3
  %1914 = getelementptr inbounds float, ptr %f5.host, i64 %1913
  %1915 = load float, ptr %1914, align 4, !tbaa !46
  %1916 = insertelement <4 x float> %1912, float %1915, i64 3
  %1917 = fsub <4 x float> %1916, %1897
  %1918 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2343.us
  %1919 = fmul <4 x float> %1918, %1917
  %1920 = fadd <4 x float> %1815, %1919
  %narrow153.us = sub nsw i32 %1442, %f128.v3.min_realized
  %1921 = sext i32 %narrow153.us to i64
  %1922 = add nsw i64 %1921, %1412
  %1923 = getelementptr inbounds float, ptr %154, i64 %1922
  %1924 = load <4 x float>, ptr %1923, align 4, !tbaa !66
  %1925 = fmul <4 x float> %1924, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1926 = sext i32 %t2340.us to i64
  %1927 = sub nsw i64 %1926, %1392
  %1928 = add nsw i64 %1413, %1927
  %1929 = getelementptr inbounds float, ptr %154, i64 %1928
  %1930 = load <4 x float>, ptr %1929, align 4, !tbaa !66
  %1931 = fmul <4 x float> %1930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1932 = fadd <4 x float> %1925, %1931
  %1933 = fmul <4 x float> %1932, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1934 = add nsw i64 %1921, %1414
  %1935 = getelementptr inbounds float, ptr %154, i64 %1934
  %1936 = load <4 x float>, ptr %1935, align 4, !tbaa !66
  %1937 = fmul <4 x float> %1936, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %1938 = add nsw i64 %1415, %1927
  %1939 = getelementptr inbounds float, ptr %154, i64 %1938
  %1940 = load <4 x float>, ptr %1939, align 4, !tbaa !66
  %1941 = fmul <4 x float> %1940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1942 = fadd <4 x float> %1937, %1941
  %1943 = fmul <4 x float> %1942, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %1944 = fadd <4 x float> %1933, %1943
  %1945 = fadd <4 x float> %1920, %1944
  %1946 = shufflevector <4 x float> %1696, <4 x float> %1945, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %1947 = sext i32 %f127.s0.v3.v323.base.us to i64
  %1948 = add i64 %1418, %1947
  %1949 = getelementptr inbounds float, ptr %193, i64 %1948
  store <8 x float> %1946, ptr %1949, align 4, !tbaa !68
  %lsr.iv.next413.us = add i32 %lsr.iv412.us, -1
  %lsr.iv.next415.us = add i32 %lsr.iv414.us, 8
  %.not154.us = icmp eq i32 %lsr.iv.next413.us, 0
  br i1 %.not154.us, label %"end for f127.s0.v3.v3.loopexit.us", label %"for f127.s0.v3.v3.us"

"end for f127.s0.v3.v3.loopexit.us":              ; preds = %"for f127.s0.v3.v3.us"
  %indvars.iv.next316 = add nsw i64 %indvars.iv315, 1
  %1950 = icmp eq i64 %indvars.iv315, %sext317
  br i1 %1950, label %"for f126.s0.v4.preheader", label %"for f127.s0.v4.us"

"for f126.s0.v4.preheader":                       ; preds = %"end for f127.s0.v3.v3.loopexit.us", %"for f127.s0.v4.preheader"
  %1951 = add nsw i32 %167, 9
  %1952 = ashr i32 %1951, 3
  %1953 = icmp sgt i32 %167, -2
  %1954 = add nsw i32 %f72.v3.extent_realized.s, 1
  %1955 = xor i32 %f127.v4.min_realized, -1
  %1956 = xor i32 %f5.v4.min_realized, -1
  %1957 = add nsw i32 %f4.v3.extent_realized.s, 1
  %1958 = insertelement <4 x i32> undef, i32 %1957, i64 0
  %1959 = shufflevector <4 x i32> %1958, <4 x i32> undef, <4 x i32> zeroinitializer
  %1960 = sext i32 %f126.v3.extent_realized.s to i64
  %1961 = add nsw i64 %1960, 1
  %1962 = sext i32 %158 to i64
  %1963 = sext i32 %f126.v3.min_realized to i64
  br i1 %1953, label %"for f126.s0.v4.us.preheader", label %"consume f126", !prof !5

"for f126.s0.v4.us.preheader":                    ; preds = %"for f126.s0.v4.preheader"
  %1964 = add nsw i32 %156, 1
  %narrow365 = add nsw i32 %156, -1
  %1965 = sext i32 %narrow365 to i64
  %sext321 = sext i32 %1964 to i64
  br label %"for f126.s0.v4.us"

"for f126.s0.v4.us":                              ; preds = %"for f126.s0.v4.us.preheader", %"end for f126.s0.v3.v3.loopexit.us"
  %indvars.iv319 = phi i64 [ %1965, %"for f126.s0.v4.us.preheader" ], [ %indvars.iv.next320, %"end for f126.s0.v3.v3.loopexit.us" ]
  %1966 = trunc i64 %indvars.iv319 to i32
  %1967 = shl i32 %1966, 1
  %1968 = and i32 %1967, 2
  %1969 = ashr i32 %1966, 1
  %t2355.us = add nsw i32 %1968, %1969
  %1970 = trunc i64 %indvars.iv319 to i32
  %1971 = sub i32 %1970, %f72.v4.min_realized
  %1972 = mul i32 %1971, %1954
  %1973 = sub i32 %1972, %f72.v3.min_realized
  %1974 = add nsw i32 %t2355.us, %1955
  %t2362.us = mul nsw i32 %1974, %178
  %1975 = sub nsw i32 %1969, %f127.v4.min_realized
  %t2364.us = mul nsw i32 %1975, %178
  %1976 = add i32 %t2355.us, %1956
  %1977 = mul nsw i32 %1976, %f5.stride.1
  %1978 = sub nsw i32 %1969, %f5.v4.min_realized
  %1979 = mul nsw i32 %1978, %f5.stride.1
  %1980 = sext i32 %t2364.us to i64
  %1981 = add nsw i64 %1980, -1
  %1982 = sext i32 %t2362.us to i64
  %1983 = add nsw i64 %1982, -1
  %1984 = sub nsw i64 %indvars.iv319, %1962
  %1985 = mul nsw i64 %1984, %1961
  %1986 = sub i64 %1985, %1963
  %1987 = trunc i64 %indvars.iv319 to i32
  %1988 = sub i32 %1987, %f4.v4.min_realized
  %1989 = mul i32 %1988, %f4.stride.1
  br label %"for f126.s0.v3.v3.us"

"for f126.s0.v3.v3.us":                           ; preds = %"for f126.s0.v4.us", %"for f126.s0.v3.v3.us"
  %lsr.iv410.us = phi i32 [ %lsr.iv.next411.us, %"for f126.s0.v3.v3.us" ], [ -1, %"for f126.s0.v4.us" ]
  %lsr.iv408.us = phi i32 [ %lsr.iv.next409.us, %"for f126.s0.v3.v3.us" ], [ %1952, %"for f126.s0.v4.us" ]
  %1990 = add i32 %lsr.iv410.us, %161
  %f126.s0.v3.v303.base.us = tail call i32 @llvm.smin.i32(i32 %b806, i32 %1990)
  %1991 = shl i32 %f126.s0.v3.v303.base.us, 1
  %1992 = and i32 %1991, 2
  %1993 = ashr i32 %f126.s0.v3.v303.base.us, 1
  %t2356.us = add nsw i32 %1992, %1993
  %t2357.us = add i32 %1973, %f126.s0.v3.v303.base.us
  %1994 = sext i32 %t2357.us to i64
  %1995 = getelementptr inbounds float, ptr %f72.host, i64 %1994
  %1996 = load <4 x float>, ptr %1995, align 4, !tbaa !48
  %1997 = add nsw i64 %1994, 4
  %1998 = getelementptr inbounds float, ptr %f72.host, i64 %1997
  %1999 = load <4 x float>, ptr %1998, align 4, !tbaa !48
  %2000 = shufflevector <4 x float> %1996, <4 x float> %1999, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2358.us = fmul <4 x float> %232, %2000
  %a850.us = fptosi <4 x float> %t2358.us to <4 x i32>
  %a853.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a850.us)
  %2001 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a853.us, <4 x i32> zeroinitializer)
  %2002 = sitofp <4 x i32> %2001 to <4 x float>
  %t2360.us = fsub <4 x float> %t2358.us, %2002
  %2003 = sub nsw i32 %f126.s0.v3.v303.base.us, %f4.v3.min_realized
  %t2365.us = add nsw i32 %2003, %1989
  %t2367.us = sub nsw <4 x i32> %2001, %241
  %2004 = sub nsw i32 %t2356.us, %f5.v3.min_realized
  %t2370.us = add nsw i32 %2004, %1977
  %t2371.us = mul nsw <4 x i32> %t2367.us, %1391
  %2005 = sub nsw i32 %1993, %f5.v3.min_realized
  %t2373.us = add nsw i32 %2005, %1977
  %t2375.us = add nsw i32 %2004, %1979
  %t2376.us = add nsw i32 %2005, %1979
  %2006 = add nsw <4 x i32> %t2367.us, <i32 1, i32 1, i32 1, i32 1>
  %t2377.us = mul nsw <4 x i32> %2006, %1391
  %2007 = add nsw i32 %f126.s0.v3.v303.base.us, 1
  %2008 = shl i32 %2007, 1
  %2009 = and i32 %2008, 2
  %2010 = ashr i32 %2007, 1
  %t2378.us = add nsw i32 %2009, %2010
  %2011 = shufflevector <4 x float> %1996, <4 x float> %1999, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2379.us = fmul <4 x float> %232, %2011
  %a854.us = fptosi <4 x float> %t2379.us to <4 x i32>
  %a857.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a854.us)
  %2012 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a857.us, <4 x i32> zeroinitializer)
  %2013 = sitofp <4 x i32> %2012 to <4 x float>
  %t2381.us = fsub <4 x float> %t2379.us, %2013
  %t2384.us = sub nsw <4 x i32> %2012, %241
  %2014 = sub nsw i32 %t2378.us, %f5.v3.min_realized
  %t2386.us = add nsw i32 %2014, %1977
  %t2387.us = mul nsw <4 x i32> %t2384.us, %1391
  %2015 = sub nsw i32 %2010, %f5.v3.min_realized
  %t2389.us = add nsw i32 %2015, %1977
  %t2390.us = add nsw i32 %2014, %1979
  %t2391.us = add nsw i32 %2015, %1979
  %2016 = add nsw <4 x i32> %t2384.us, <i32 1, i32 1, i32 1, i32 1>
  %t2392.us = mul nsw <4 x i32> %2016, %1391
  %2017 = insertelement <4 x i32> undef, i32 %t2376.us, i64 0
  %2018 = shufflevector <4 x i32> %2017, <4 x i32> undef, <4 x i32> zeroinitializer
  %2019 = add nsw <4 x i32> %2018, <i32 0, i32 1, i32 2, i32 3>
  %2020 = add nsw <4 x i32> %t2377.us, %2019
  %2021 = sext <4 x i32> %2020 to <4 x i64>
  %2022 = extractelement <4 x i64> %2021, i64 0
  %2023 = getelementptr inbounds float, ptr %f5.host, i64 %2022
  %2024 = load float, ptr %2023, align 4, !tbaa !46
  %2025 = insertelement <4 x float> undef, float %2024, i64 0
  %2026 = extractelement <4 x i64> %2021, i64 1
  %2027 = getelementptr inbounds float, ptr %f5.host, i64 %2026
  %2028 = load float, ptr %2027, align 4, !tbaa !46
  %2029 = insertelement <4 x float> %2025, float %2028, i64 1
  %2030 = extractelement <4 x i64> %2021, i64 2
  %2031 = getelementptr inbounds float, ptr %f5.host, i64 %2030
  %2032 = load float, ptr %2031, align 4, !tbaa !46
  %2033 = insertelement <4 x float> %2029, float %2032, i64 2
  %2034 = extractelement <4 x i64> %2021, i64 3
  %2035 = getelementptr inbounds float, ptr %f5.host, i64 %2034
  %2036 = load float, ptr %2035, align 4, !tbaa !46
  %2037 = insertelement <4 x float> %2033, float %2036, i64 3
  %2038 = fmul <4 x float> %2037, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2039 = insertelement <4 x i32> undef, i32 %t2375.us, i64 0
  %2040 = shufflevector <4 x i32> %2039, <4 x i32> undef, <4 x i32> zeroinitializer
  %2041 = add <4 x i32> %2040, <i32 -1, i32 0, i32 1, i32 2>
  %2042 = add <4 x i32> %2041, %t2377.us
  %2043 = sext <4 x i32> %2042 to <4 x i64>
  %2044 = extractelement <4 x i64> %2043, i64 0
  %2045 = getelementptr inbounds float, ptr %f5.host, i64 %2044
  %2046 = load float, ptr %2045, align 4, !tbaa !46
  %2047 = insertelement <4 x float> undef, float %2046, i64 0
  %2048 = extractelement <4 x i64> %2043, i64 1
  %2049 = getelementptr inbounds float, ptr %f5.host, i64 %2048
  %2050 = load float, ptr %2049, align 4, !tbaa !46
  %2051 = insertelement <4 x float> %2047, float %2050, i64 1
  %2052 = extractelement <4 x i64> %2043, i64 2
  %2053 = getelementptr inbounds float, ptr %f5.host, i64 %2052
  %2054 = load float, ptr %2053, align 4, !tbaa !46
  %2055 = insertelement <4 x float> %2051, float %2054, i64 2
  %2056 = extractelement <4 x i64> %2043, i64 3
  %2057 = getelementptr inbounds float, ptr %f5.host, i64 %2056
  %2058 = load float, ptr %2057, align 4, !tbaa !46
  %2059 = insertelement <4 x float> %2055, float %2058, i64 3
  %2060 = fmul <4 x float> %2059, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2061 = fadd <4 x float> %2038, %2060
  %2062 = fmul <4 x float> %2061, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2063 = insertelement <4 x i32> undef, i32 %t2373.us, i64 0
  %2064 = shufflevector <4 x i32> %2063, <4 x i32> undef, <4 x i32> zeroinitializer
  %2065 = add nsw <4 x i32> %2064, <i32 0, i32 1, i32 2, i32 3>
  %2066 = add nsw <4 x i32> %t2377.us, %2065
  %2067 = sext <4 x i32> %2066 to <4 x i64>
  %2068 = extractelement <4 x i64> %2067, i64 0
  %2069 = getelementptr inbounds float, ptr %f5.host, i64 %2068
  %2070 = load float, ptr %2069, align 4, !tbaa !46
  %2071 = insertelement <4 x float> undef, float %2070, i64 0
  %2072 = extractelement <4 x i64> %2067, i64 1
  %2073 = getelementptr inbounds float, ptr %f5.host, i64 %2072
  %2074 = load float, ptr %2073, align 4, !tbaa !46
  %2075 = insertelement <4 x float> %2071, float %2074, i64 1
  %2076 = extractelement <4 x i64> %2067, i64 2
  %2077 = getelementptr inbounds float, ptr %f5.host, i64 %2076
  %2078 = load float, ptr %2077, align 4, !tbaa !46
  %2079 = insertelement <4 x float> %2075, float %2078, i64 2
  %2080 = extractelement <4 x i64> %2067, i64 3
  %2081 = getelementptr inbounds float, ptr %f5.host, i64 %2080
  %2082 = load float, ptr %2081, align 4, !tbaa !46
  %2083 = insertelement <4 x float> %2079, float %2082, i64 3
  %2084 = fmul <4 x float> %2083, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2085 = insertelement <4 x i32> undef, i32 %t2370.us, i64 0
  %2086 = shufflevector <4 x i32> %2085, <4 x i32> undef, <4 x i32> zeroinitializer
  %2087 = add <4 x i32> %2086, <i32 -1, i32 0, i32 1, i32 2>
  %2088 = add <4 x i32> %2087, %t2377.us
  %2089 = sext <4 x i32> %2088 to <4 x i64>
  %2090 = extractelement <4 x i64> %2089, i64 0
  %2091 = getelementptr inbounds float, ptr %f5.host, i64 %2090
  %2092 = load float, ptr %2091, align 4, !tbaa !46
  %2093 = insertelement <4 x float> undef, float %2092, i64 0
  %2094 = extractelement <4 x i64> %2089, i64 1
  %2095 = getelementptr inbounds float, ptr %f5.host, i64 %2094
  %2096 = load float, ptr %2095, align 4, !tbaa !46
  %2097 = insertelement <4 x float> %2093, float %2096, i64 1
  %2098 = extractelement <4 x i64> %2089, i64 2
  %2099 = getelementptr inbounds float, ptr %f5.host, i64 %2098
  %2100 = load float, ptr %2099, align 4, !tbaa !46
  %2101 = insertelement <4 x float> %2097, float %2100, i64 2
  %2102 = extractelement <4 x i64> %2089, i64 3
  %2103 = getelementptr inbounds float, ptr %f5.host, i64 %2102
  %2104 = load float, ptr %2103, align 4, !tbaa !46
  %2105 = insertelement <4 x float> %2101, float %2104, i64 3
  %2106 = fmul <4 x float> %2105, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2107 = fadd <4 x float> %2084, %2106
  %2108 = fmul <4 x float> %2107, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2109 = fadd <4 x float> %2062, %2108
  %2110 = mul nsw <4 x i32> %2006, %1959
  %2111 = insertelement <4 x i32> undef, i32 %t2365.us, i64 0
  %2112 = shufflevector <4 x i32> %2111, <4 x i32> undef, <4 x i32> zeroinitializer
  %2113 = add nsw <4 x i32> %2112, <i32 0, i32 2, i32 4, i32 6>
  %2114 = add nsw <4 x i32> %2110, %2113
  %2115 = sext <4 x i32> %2114 to <4 x i64>
  %2116 = extractelement <4 x i64> %2115, i64 0
  %2117 = getelementptr inbounds float, ptr %f4.host, i64 %2116
  %2118 = load float, ptr %2117, align 4, !tbaa !44
  %2119 = insertelement <4 x float> undef, float %2118, i64 0
  %2120 = extractelement <4 x i64> %2115, i64 1
  %2121 = getelementptr inbounds float, ptr %f4.host, i64 %2120
  %2122 = load float, ptr %2121, align 4, !tbaa !44
  %2123 = insertelement <4 x float> %2119, float %2122, i64 1
  %2124 = extractelement <4 x i64> %2115, i64 2
  %2125 = getelementptr inbounds float, ptr %f4.host, i64 %2124
  %2126 = load float, ptr %2125, align 4, !tbaa !44
  %2127 = insertelement <4 x float> %2123, float %2126, i64 2
  %2128 = extractelement <4 x i64> %2115, i64 3
  %2129 = getelementptr inbounds float, ptr %f4.host, i64 %2128
  %2130 = load float, ptr %2129, align 4, !tbaa !44
  %2131 = insertelement <4 x float> %2127, float %2130, i64 3
  %2132 = fsub <4 x float> %2131, %2109
  %2133 = fmul <4 x float> %t2360.us, %2132
  %2134 = add nsw <4 x i32> %t2371.us, %2019
  %2135 = sext <4 x i32> %2134 to <4 x i64>
  %2136 = extractelement <4 x i64> %2135, i64 0
  %2137 = getelementptr inbounds float, ptr %f5.host, i64 %2136
  %2138 = load float, ptr %2137, align 4, !tbaa !46
  %2139 = insertelement <4 x float> undef, float %2138, i64 0
  %2140 = extractelement <4 x i64> %2135, i64 1
  %2141 = getelementptr inbounds float, ptr %f5.host, i64 %2140
  %2142 = load float, ptr %2141, align 4, !tbaa !46
  %2143 = insertelement <4 x float> %2139, float %2142, i64 1
  %2144 = extractelement <4 x i64> %2135, i64 2
  %2145 = getelementptr inbounds float, ptr %f5.host, i64 %2144
  %2146 = load float, ptr %2145, align 4, !tbaa !46
  %2147 = insertelement <4 x float> %2143, float %2146, i64 2
  %2148 = extractelement <4 x i64> %2135, i64 3
  %2149 = getelementptr inbounds float, ptr %f5.host, i64 %2148
  %2150 = load float, ptr %2149, align 4, !tbaa !46
  %2151 = insertelement <4 x float> %2147, float %2150, i64 3
  %2152 = fmul <4 x float> %2151, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2153 = add <4 x i32> %t2371.us, %2040
  %2154 = add <4 x i32> %2153, <i32 -1, i32 0, i32 1, i32 2>
  %2155 = sext <4 x i32> %2154 to <4 x i64>
  %2156 = extractelement <4 x i64> %2155, i64 0
  %2157 = getelementptr inbounds float, ptr %f5.host, i64 %2156
  %2158 = load float, ptr %2157, align 4, !tbaa !46
  %2159 = insertelement <4 x float> undef, float %2158, i64 0
  %2160 = extractelement <4 x i64> %2155, i64 1
  %2161 = getelementptr inbounds float, ptr %f5.host, i64 %2160
  %2162 = load float, ptr %2161, align 4, !tbaa !46
  %2163 = insertelement <4 x float> %2159, float %2162, i64 1
  %2164 = extractelement <4 x i64> %2155, i64 2
  %2165 = getelementptr inbounds float, ptr %f5.host, i64 %2164
  %2166 = load float, ptr %2165, align 4, !tbaa !46
  %2167 = insertelement <4 x float> %2163, float %2166, i64 2
  %2168 = extractelement <4 x i64> %2155, i64 3
  %2169 = getelementptr inbounds float, ptr %f5.host, i64 %2168
  %2170 = load float, ptr %2169, align 4, !tbaa !46
  %2171 = insertelement <4 x float> %2167, float %2170, i64 3
  %2172 = fmul <4 x float> %2171, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2173 = fadd <4 x float> %2152, %2172
  %2174 = fmul <4 x float> %2173, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2175 = add nsw <4 x i32> %t2371.us, %2065
  %2176 = sext <4 x i32> %2175 to <4 x i64>
  %2177 = extractelement <4 x i64> %2176, i64 0
  %2178 = getelementptr inbounds float, ptr %f5.host, i64 %2177
  %2179 = load float, ptr %2178, align 4, !tbaa !46
  %2180 = insertelement <4 x float> undef, float %2179, i64 0
  %2181 = extractelement <4 x i64> %2176, i64 1
  %2182 = getelementptr inbounds float, ptr %f5.host, i64 %2181
  %2183 = load float, ptr %2182, align 4, !tbaa !46
  %2184 = insertelement <4 x float> %2180, float %2183, i64 1
  %2185 = extractelement <4 x i64> %2176, i64 2
  %2186 = getelementptr inbounds float, ptr %f5.host, i64 %2185
  %2187 = load float, ptr %2186, align 4, !tbaa !46
  %2188 = insertelement <4 x float> %2184, float %2187, i64 2
  %2189 = extractelement <4 x i64> %2176, i64 3
  %2190 = getelementptr inbounds float, ptr %f5.host, i64 %2189
  %2191 = load float, ptr %2190, align 4, !tbaa !46
  %2192 = insertelement <4 x float> %2188, float %2191, i64 3
  %2193 = fmul <4 x float> %2192, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2194 = add <4 x i32> %t2371.us, %2086
  %2195 = add <4 x i32> %2194, <i32 -1, i32 0, i32 1, i32 2>
  %2196 = sext <4 x i32> %2195 to <4 x i64>
  %2197 = extractelement <4 x i64> %2196, i64 0
  %2198 = getelementptr inbounds float, ptr %f5.host, i64 %2197
  %2199 = load float, ptr %2198, align 4, !tbaa !46
  %2200 = insertelement <4 x float> undef, float %2199, i64 0
  %2201 = extractelement <4 x i64> %2196, i64 1
  %2202 = getelementptr inbounds float, ptr %f5.host, i64 %2201
  %2203 = load float, ptr %2202, align 4, !tbaa !46
  %2204 = insertelement <4 x float> %2200, float %2203, i64 1
  %2205 = extractelement <4 x i64> %2196, i64 2
  %2206 = getelementptr inbounds float, ptr %f5.host, i64 %2205
  %2207 = load float, ptr %2206, align 4, !tbaa !46
  %2208 = insertelement <4 x float> %2204, float %2207, i64 2
  %2209 = extractelement <4 x i64> %2196, i64 3
  %2210 = getelementptr inbounds float, ptr %f5.host, i64 %2209
  %2211 = load float, ptr %2210, align 4, !tbaa !46
  %2212 = insertelement <4 x float> %2208, float %2211, i64 3
  %2213 = fmul <4 x float> %2212, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2214 = fadd <4 x float> %2193, %2213
  %2215 = fmul <4 x float> %2214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2216 = fadd <4 x float> %2174, %2215
  %2217 = mul nsw <4 x i32> %t2367.us, %1959
  %2218 = add nsw <4 x i32> %2217, %2113
  %2219 = sext <4 x i32> %2218 to <4 x i64>
  %2220 = extractelement <4 x i64> %2219, i64 0
  %2221 = getelementptr inbounds float, ptr %f4.host, i64 %2220
  %2222 = load float, ptr %2221, align 4, !tbaa !44
  %2223 = insertelement <4 x float> undef, float %2222, i64 0
  %2224 = extractelement <4 x i64> %2219, i64 1
  %2225 = getelementptr inbounds float, ptr %f4.host, i64 %2224
  %2226 = load float, ptr %2225, align 4, !tbaa !44
  %2227 = insertelement <4 x float> %2223, float %2226, i64 1
  %2228 = extractelement <4 x i64> %2219, i64 2
  %2229 = getelementptr inbounds float, ptr %f4.host, i64 %2228
  %2230 = load float, ptr %2229, align 4, !tbaa !44
  %2231 = insertelement <4 x float> %2227, float %2230, i64 2
  %2232 = extractelement <4 x i64> %2219, i64 3
  %2233 = getelementptr inbounds float, ptr %f4.host, i64 %2232
  %2234 = load float, ptr %2233, align 4, !tbaa !44
  %2235 = insertelement <4 x float> %2231, float %2234, i64 3
  %2236 = fsub <4 x float> %2235, %2216
  %2237 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2360.us
  %2238 = fmul <4 x float> %2237, %2236
  %2239 = fadd <4 x float> %2133, %2238
  %2240 = sext i32 %1993 to i64
  %2241 = sub nsw i64 %2240, %1396
  %2242 = add nsw i64 %2241, %1980
  %2243 = getelementptr inbounds float, ptr %193, i64 %2242
  %2244 = load <4 x float>, ptr %2243, align 4, !tbaa !68
  %2245 = fmul <4 x float> %2244, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2246 = sext i32 %t2356.us to i64
  %2247 = sub nsw i64 %2246, %1396
  %2248 = add nsw i64 %1981, %2247
  %2249 = getelementptr inbounds float, ptr %193, i64 %2248
  %2250 = load <4 x float>, ptr %2249, align 4, !tbaa !68
  %2251 = fmul <4 x float> %2250, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2252 = fadd <4 x float> %2245, %2251
  %2253 = fmul <4 x float> %2252, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2254 = add nsw i64 %2241, %1982
  %2255 = getelementptr inbounds float, ptr %193, i64 %2254
  %2256 = load <4 x float>, ptr %2255, align 4, !tbaa !68
  %2257 = fmul <4 x float> %2256, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2258 = add nsw i64 %1983, %2247
  %2259 = getelementptr inbounds float, ptr %193, i64 %2258
  %2260 = load <4 x float>, ptr %2259, align 4, !tbaa !68
  %2261 = fmul <4 x float> %2260, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2262 = fadd <4 x float> %2257, %2261
  %2263 = fmul <4 x float> %2262, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2264 = fadd <4 x float> %2253, %2263
  %2265 = fadd <4 x float> %2239, %2264
  %2266 = insertelement <4 x i32> undef, i32 %t2391.us, i64 0
  %2267 = shufflevector <4 x i32> %2266, <4 x i32> undef, <4 x i32> zeroinitializer
  %2268 = add nsw <4 x i32> %2267, <i32 0, i32 1, i32 2, i32 3>
  %2269 = add nsw <4 x i32> %t2392.us, %2268
  %2270 = sext <4 x i32> %2269 to <4 x i64>
  %2271 = extractelement <4 x i64> %2270, i64 0
  %2272 = getelementptr inbounds float, ptr %f5.host, i64 %2271
  %2273 = load float, ptr %2272, align 4, !tbaa !46
  %2274 = insertelement <4 x float> undef, float %2273, i64 0
  %2275 = extractelement <4 x i64> %2270, i64 1
  %2276 = getelementptr inbounds float, ptr %f5.host, i64 %2275
  %2277 = load float, ptr %2276, align 4, !tbaa !46
  %2278 = insertelement <4 x float> %2274, float %2277, i64 1
  %2279 = extractelement <4 x i64> %2270, i64 2
  %2280 = getelementptr inbounds float, ptr %f5.host, i64 %2279
  %2281 = load float, ptr %2280, align 4, !tbaa !46
  %2282 = insertelement <4 x float> %2278, float %2281, i64 2
  %2283 = extractelement <4 x i64> %2270, i64 3
  %2284 = getelementptr inbounds float, ptr %f5.host, i64 %2283
  %2285 = load float, ptr %2284, align 4, !tbaa !46
  %2286 = insertelement <4 x float> %2282, float %2285, i64 3
  %2287 = fmul <4 x float> %2286, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2288 = insertelement <4 x i32> undef, i32 %t2390.us, i64 0
  %2289 = shufflevector <4 x i32> %2288, <4 x i32> undef, <4 x i32> zeroinitializer
  %2290 = add nsw <4 x i32> %2289, <i32 0, i32 1, i32 2, i32 3>
  %2291 = add <4 x i32> %t2392.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2292 = add <4 x i32> %2291, %2290
  %2293 = sext <4 x i32> %2292 to <4 x i64>
  %2294 = extractelement <4 x i64> %2293, i64 0
  %2295 = getelementptr inbounds float, ptr %f5.host, i64 %2294
  %2296 = load float, ptr %2295, align 4, !tbaa !46
  %2297 = insertelement <4 x float> undef, float %2296, i64 0
  %2298 = extractelement <4 x i64> %2293, i64 1
  %2299 = getelementptr inbounds float, ptr %f5.host, i64 %2298
  %2300 = load float, ptr %2299, align 4, !tbaa !46
  %2301 = insertelement <4 x float> %2297, float %2300, i64 1
  %2302 = extractelement <4 x i64> %2293, i64 2
  %2303 = getelementptr inbounds float, ptr %f5.host, i64 %2302
  %2304 = load float, ptr %2303, align 4, !tbaa !46
  %2305 = insertelement <4 x float> %2301, float %2304, i64 2
  %2306 = extractelement <4 x i64> %2293, i64 3
  %2307 = getelementptr inbounds float, ptr %f5.host, i64 %2306
  %2308 = load float, ptr %2307, align 4, !tbaa !46
  %2309 = insertelement <4 x float> %2305, float %2308, i64 3
  %2310 = fmul <4 x float> %2309, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2311 = fadd <4 x float> %2287, %2310
  %2312 = fmul <4 x float> %2311, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2313 = insertelement <4 x i32> undef, i32 %t2389.us, i64 0
  %2314 = shufflevector <4 x i32> %2313, <4 x i32> undef, <4 x i32> zeroinitializer
  %2315 = add nsw <4 x i32> %2314, <i32 0, i32 1, i32 2, i32 3>
  %2316 = add nsw <4 x i32> %t2392.us, %2315
  %2317 = sext <4 x i32> %2316 to <4 x i64>
  %2318 = extractelement <4 x i64> %2317, i64 0
  %2319 = getelementptr inbounds float, ptr %f5.host, i64 %2318
  %2320 = load float, ptr %2319, align 4, !tbaa !46
  %2321 = insertelement <4 x float> undef, float %2320, i64 0
  %2322 = extractelement <4 x i64> %2317, i64 1
  %2323 = getelementptr inbounds float, ptr %f5.host, i64 %2322
  %2324 = load float, ptr %2323, align 4, !tbaa !46
  %2325 = insertelement <4 x float> %2321, float %2324, i64 1
  %2326 = extractelement <4 x i64> %2317, i64 2
  %2327 = getelementptr inbounds float, ptr %f5.host, i64 %2326
  %2328 = load float, ptr %2327, align 4, !tbaa !46
  %2329 = insertelement <4 x float> %2325, float %2328, i64 2
  %2330 = extractelement <4 x i64> %2317, i64 3
  %2331 = getelementptr inbounds float, ptr %f5.host, i64 %2330
  %2332 = load float, ptr %2331, align 4, !tbaa !46
  %2333 = insertelement <4 x float> %2329, float %2332, i64 3
  %2334 = fmul <4 x float> %2333, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2335 = insertelement <4 x i32> undef, i32 %t2386.us, i64 0
  %2336 = shufflevector <4 x i32> %2335, <4 x i32> undef, <4 x i32> zeroinitializer
  %2337 = add nsw <4 x i32> %2336, <i32 0, i32 1, i32 2, i32 3>
  %2338 = add <4 x i32> %2291, %2337
  %2339 = sext <4 x i32> %2338 to <4 x i64>
  %2340 = extractelement <4 x i64> %2339, i64 0
  %2341 = getelementptr inbounds float, ptr %f5.host, i64 %2340
  %2342 = load float, ptr %2341, align 4, !tbaa !46
  %2343 = insertelement <4 x float> undef, float %2342, i64 0
  %2344 = extractelement <4 x i64> %2339, i64 1
  %2345 = getelementptr inbounds float, ptr %f5.host, i64 %2344
  %2346 = load float, ptr %2345, align 4, !tbaa !46
  %2347 = insertelement <4 x float> %2343, float %2346, i64 1
  %2348 = extractelement <4 x i64> %2339, i64 2
  %2349 = getelementptr inbounds float, ptr %f5.host, i64 %2348
  %2350 = load float, ptr %2349, align 4, !tbaa !46
  %2351 = insertelement <4 x float> %2347, float %2350, i64 2
  %2352 = extractelement <4 x i64> %2339, i64 3
  %2353 = getelementptr inbounds float, ptr %f5.host, i64 %2352
  %2354 = load float, ptr %2353, align 4, !tbaa !46
  %2355 = insertelement <4 x float> %2351, float %2354, i64 3
  %2356 = fmul <4 x float> %2355, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2357 = fadd <4 x float> %2334, %2356
  %2358 = fmul <4 x float> %2357, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2359 = fadd <4 x float> %2312, %2358
  %2360 = mul nsw <4 x i32> %2016, %1959
  %2361 = add nsw i32 %t2365.us, 1
  %2362 = insertelement <4 x i32> undef, i32 %2361, i64 0
  %2363 = shufflevector <4 x i32> %2362, <4 x i32> undef, <4 x i32> zeroinitializer
  %2364 = add nsw <4 x i32> %2363, <i32 0, i32 2, i32 4, i32 6>
  %2365 = add nsw <4 x i32> %2360, %2364
  %2366 = sext <4 x i32> %2365 to <4 x i64>
  %2367 = extractelement <4 x i64> %2366, i64 0
  %2368 = getelementptr inbounds float, ptr %f4.host, i64 %2367
  %2369 = load float, ptr %2368, align 4, !tbaa !44
  %2370 = insertelement <4 x float> undef, float %2369, i64 0
  %2371 = extractelement <4 x i64> %2366, i64 1
  %2372 = getelementptr inbounds float, ptr %f4.host, i64 %2371
  %2373 = load float, ptr %2372, align 4, !tbaa !44
  %2374 = insertelement <4 x float> %2370, float %2373, i64 1
  %2375 = extractelement <4 x i64> %2366, i64 2
  %2376 = getelementptr inbounds float, ptr %f4.host, i64 %2375
  %2377 = load float, ptr %2376, align 4, !tbaa !44
  %2378 = insertelement <4 x float> %2374, float %2377, i64 2
  %2379 = extractelement <4 x i64> %2366, i64 3
  %2380 = getelementptr inbounds float, ptr %f4.host, i64 %2379
  %2381 = load float, ptr %2380, align 4, !tbaa !44
  %2382 = insertelement <4 x float> %2378, float %2381, i64 3
  %2383 = fsub <4 x float> %2382, %2359
  %2384 = fmul <4 x float> %t2381.us, %2383
  %2385 = add nsw <4 x i32> %t2387.us, %2268
  %2386 = sext <4 x i32> %2385 to <4 x i64>
  %2387 = extractelement <4 x i64> %2386, i64 0
  %2388 = getelementptr inbounds float, ptr %f5.host, i64 %2387
  %2389 = load float, ptr %2388, align 4, !tbaa !46
  %2390 = insertelement <4 x float> undef, float %2389, i64 0
  %2391 = extractelement <4 x i64> %2386, i64 1
  %2392 = getelementptr inbounds float, ptr %f5.host, i64 %2391
  %2393 = load float, ptr %2392, align 4, !tbaa !46
  %2394 = insertelement <4 x float> %2390, float %2393, i64 1
  %2395 = extractelement <4 x i64> %2386, i64 2
  %2396 = getelementptr inbounds float, ptr %f5.host, i64 %2395
  %2397 = load float, ptr %2396, align 4, !tbaa !46
  %2398 = insertelement <4 x float> %2394, float %2397, i64 2
  %2399 = extractelement <4 x i64> %2386, i64 3
  %2400 = getelementptr inbounds float, ptr %f5.host, i64 %2399
  %2401 = load float, ptr %2400, align 4, !tbaa !46
  %2402 = insertelement <4 x float> %2398, float %2401, i64 3
  %2403 = fmul <4 x float> %2402, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2404 = add <4 x i32> %t2387.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2405 = add <4 x i32> %2404, %2290
  %2406 = sext <4 x i32> %2405 to <4 x i64>
  %2407 = extractelement <4 x i64> %2406, i64 0
  %2408 = getelementptr inbounds float, ptr %f5.host, i64 %2407
  %2409 = load float, ptr %2408, align 4, !tbaa !46
  %2410 = insertelement <4 x float> undef, float %2409, i64 0
  %2411 = extractelement <4 x i64> %2406, i64 1
  %2412 = getelementptr inbounds float, ptr %f5.host, i64 %2411
  %2413 = load float, ptr %2412, align 4, !tbaa !46
  %2414 = insertelement <4 x float> %2410, float %2413, i64 1
  %2415 = extractelement <4 x i64> %2406, i64 2
  %2416 = getelementptr inbounds float, ptr %f5.host, i64 %2415
  %2417 = load float, ptr %2416, align 4, !tbaa !46
  %2418 = insertelement <4 x float> %2414, float %2417, i64 2
  %2419 = extractelement <4 x i64> %2406, i64 3
  %2420 = getelementptr inbounds float, ptr %f5.host, i64 %2419
  %2421 = load float, ptr %2420, align 4, !tbaa !46
  %2422 = insertelement <4 x float> %2418, float %2421, i64 3
  %2423 = fmul <4 x float> %2422, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2424 = fadd <4 x float> %2403, %2423
  %2425 = fmul <4 x float> %2424, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2426 = add nsw <4 x i32> %t2387.us, %2315
  %2427 = sext <4 x i32> %2426 to <4 x i64>
  %2428 = extractelement <4 x i64> %2427, i64 0
  %2429 = getelementptr inbounds float, ptr %f5.host, i64 %2428
  %2430 = load float, ptr %2429, align 4, !tbaa !46
  %2431 = insertelement <4 x float> undef, float %2430, i64 0
  %2432 = extractelement <4 x i64> %2427, i64 1
  %2433 = getelementptr inbounds float, ptr %f5.host, i64 %2432
  %2434 = load float, ptr %2433, align 4, !tbaa !46
  %2435 = insertelement <4 x float> %2431, float %2434, i64 1
  %2436 = extractelement <4 x i64> %2427, i64 2
  %2437 = getelementptr inbounds float, ptr %f5.host, i64 %2436
  %2438 = load float, ptr %2437, align 4, !tbaa !46
  %2439 = insertelement <4 x float> %2435, float %2438, i64 2
  %2440 = extractelement <4 x i64> %2427, i64 3
  %2441 = getelementptr inbounds float, ptr %f5.host, i64 %2440
  %2442 = load float, ptr %2441, align 4, !tbaa !46
  %2443 = insertelement <4 x float> %2439, float %2442, i64 3
  %2444 = fmul <4 x float> %2443, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2445 = add <4 x i32> %2404, %2337
  %2446 = sext <4 x i32> %2445 to <4 x i64>
  %2447 = extractelement <4 x i64> %2446, i64 0
  %2448 = getelementptr inbounds float, ptr %f5.host, i64 %2447
  %2449 = load float, ptr %2448, align 4, !tbaa !46
  %2450 = insertelement <4 x float> undef, float %2449, i64 0
  %2451 = extractelement <4 x i64> %2446, i64 1
  %2452 = getelementptr inbounds float, ptr %f5.host, i64 %2451
  %2453 = load float, ptr %2452, align 4, !tbaa !46
  %2454 = insertelement <4 x float> %2450, float %2453, i64 1
  %2455 = extractelement <4 x i64> %2446, i64 2
  %2456 = getelementptr inbounds float, ptr %f5.host, i64 %2455
  %2457 = load float, ptr %2456, align 4, !tbaa !46
  %2458 = insertelement <4 x float> %2454, float %2457, i64 2
  %2459 = extractelement <4 x i64> %2446, i64 3
  %2460 = getelementptr inbounds float, ptr %f5.host, i64 %2459
  %2461 = load float, ptr %2460, align 4, !tbaa !46
  %2462 = insertelement <4 x float> %2458, float %2461, i64 3
  %2463 = fmul <4 x float> %2462, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2464 = fadd <4 x float> %2444, %2463
  %2465 = fmul <4 x float> %2464, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2466 = fadd <4 x float> %2425, %2465
  %2467 = mul nsw <4 x i32> %t2384.us, %1959
  %2468 = add nsw <4 x i32> %2467, %2364
  %2469 = sext <4 x i32> %2468 to <4 x i64>
  %2470 = extractelement <4 x i64> %2469, i64 0
  %2471 = getelementptr inbounds float, ptr %f4.host, i64 %2470
  %2472 = load float, ptr %2471, align 4, !tbaa !44
  %2473 = insertelement <4 x float> undef, float %2472, i64 0
  %2474 = extractelement <4 x i64> %2469, i64 1
  %2475 = getelementptr inbounds float, ptr %f4.host, i64 %2474
  %2476 = load float, ptr %2475, align 4, !tbaa !44
  %2477 = insertelement <4 x float> %2473, float %2476, i64 1
  %2478 = extractelement <4 x i64> %2469, i64 2
  %2479 = getelementptr inbounds float, ptr %f4.host, i64 %2478
  %2480 = load float, ptr %2479, align 4, !tbaa !44
  %2481 = insertelement <4 x float> %2477, float %2480, i64 2
  %2482 = extractelement <4 x i64> %2469, i64 3
  %2483 = getelementptr inbounds float, ptr %f4.host, i64 %2482
  %2484 = load float, ptr %2483, align 4, !tbaa !44
  %2485 = insertelement <4 x float> %2481, float %2484, i64 3
  %2486 = fsub <4 x float> %2485, %2466
  %2487 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2381.us
  %2488 = fmul <4 x float> %2487, %2486
  %2489 = fadd <4 x float> %2384, %2488
  %2490 = sext i32 %2010 to i64
  %2491 = sub nsw i64 %2490, %1396
  %2492 = add nsw i64 %2491, %1980
  %2493 = getelementptr inbounds float, ptr %193, i64 %2492
  %2494 = load <4 x float>, ptr %2493, align 4, !tbaa !68
  %2495 = fmul <4 x float> %2494, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2496 = sext i32 %t2378.us to i64
  %2497 = sub nsw i64 %2496, %1396
  %2498 = add nsw i64 %1981, %2497
  %2499 = getelementptr inbounds float, ptr %193, i64 %2498
  %2500 = load <4 x float>, ptr %2499, align 4, !tbaa !68
  %2501 = fmul <4 x float> %2500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2502 = fadd <4 x float> %2495, %2501
  %2503 = fmul <4 x float> %2502, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2504 = add nsw i64 %2491, %1982
  %2505 = getelementptr inbounds float, ptr %193, i64 %2504
  %2506 = load <4 x float>, ptr %2505, align 4, !tbaa !68
  %2507 = fmul <4 x float> %2506, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2508 = add nsw i64 %1983, %2497
  %2509 = getelementptr inbounds float, ptr %193, i64 %2508
  %2510 = load <4 x float>, ptr %2509, align 4, !tbaa !68
  %2511 = fmul <4 x float> %2510, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2512 = fadd <4 x float> %2507, %2511
  %2513 = fmul <4 x float> %2512, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2514 = fadd <4 x float> %2503, %2513
  %2515 = fadd <4 x float> %2489, %2514
  %2516 = shufflevector <4 x float> %2265, <4 x float> %2515, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %2517 = sext i32 %f126.s0.v3.v303.base.us to i64
  %2518 = add i64 %1986, %2517
  %2519 = getelementptr inbounds float, ptr %222, i64 %2518
  store <8 x float> %2516, ptr %2519, align 4, !tbaa !70
  %lsr.iv.next409.us = add i32 %lsr.iv408.us, -1
  %lsr.iv.next411.us = add i32 %lsr.iv410.us, 8
  %.not151.us = icmp eq i32 %lsr.iv.next409.us, 0
  br i1 %.not151.us, label %"end for f126.s0.v3.v3.loopexit.us", label %"for f126.s0.v3.v3.us"

"end for f126.s0.v3.v3.loopexit.us":              ; preds = %"for f126.s0.v3.v3.us"
  %indvars.iv.next320 = add nsw i64 %indvars.iv319, 1
  %2520 = icmp eq i64 %indvars.iv319, %sext321
  br i1 %2520, label %"consume f126", label %"for f126.s0.v4.us"

"consume f126":                                   ; preds = %"end for f126.s0.v3.v3.loopexit.us", %"for f126.s0.v4.preheader"
  %2521 = tail call i32 @llvm.smax.i32(i32 %197, i32 8)
  %t3091 = zext i32 %2521 to i64
  %2522 = shl nuw nsw i64 %t3091, 2
  %2523 = icmp ult i32 %2521, 536870912
  br i1 %2523, label %"assert succeeded16", label %"assert failed15", !prof !5

"assert failed15":                                ; preds = %"consume f126"
  %2524 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %2522, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded16":                             ; preds = %"consume f126"
  %2525 = add nuw nsw i64 %2522, 4
  %2526 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2525)
  %.not103 = icmp eq ptr %2526, null
  br i1 %.not103, label %"assert failed17", label %"produce f125", !prof !4

"assert failed17":                                ; preds = %"assert succeeded16"
  %2527 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f125":                                   ; preds = %"assert succeeded16"
  %2528 = add nsw i32 %197, 7
  %2529 = ashr i32 %2528, 3
  %2530 = icmp sgt i32 %197, 0
  br i1 %2530, label %"for f125.s0.v3.v3.preheader", label %"consume f125", !prof !5

"for f125.s0.v3.v3.preheader":                    ; preds = %"produce f125"
  %2531 = shl i32 %local_laplacian.s0.v4.v4.base, 1
  %2532 = and i32 %2531, 2
  %t2394 = add nsw i32 %2532, %156
  %2533 = add nsw i32 %f2.v3.extent_realized.s, 1
  %2534 = sub nsw i32 %local_laplacian.s0.v4.v4.base, %f2.v4.min_realized
  %2535 = mul nsw i32 %2534, %2533
  %2536 = sub i32 %2535, %f2.v3.min_realized
  %2537 = fdiv float 1.000000e+00, %230
  %2538 = insertelement <4 x float> undef, float %2537, i64 0
  %2539 = shufflevector <4 x float> %2538, <4 x float> undef, <4 x i32> zeroinitializer
  %2540 = xor i32 %158, -1
  %2541 = add i32 %t2394, %2540
  %t2406 = mul nsw i32 %207, %2541
  %2542 = sub nsw i32 %156, %158
  %t2408 = mul nsw i32 %207, %2542
  %2543 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %2544 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %2543
  %.neg216 = shufflevector <4 x i32> %2544, <4 x i32> poison, <4 x i32> zeroinitializer
  %2545 = shl nsw i32 %levels, 8
  %2546 = add nsw i32 %2545, -256
  %2547 = insertelement <4 x i32> undef, i32 %2546, i64 0
  %b870 = shufflevector <4 x i32> %2547, <4 x i32> undef, <4 x i32> zeroinitializer
  %2548 = xor i32 %f4.v4.min_realized, -1
  %2549 = add i32 %t2394, %2548
  %2550 = mul nsw i32 %2549, %f4.stride.1
  %2551 = sub nsw i32 %156, %f4.v4.min_realized
  %2552 = mul nsw i32 %2551, %f4.stride.1
  %2553 = insertelement <4 x float> undef, float %beta, i64 0
  %2554 = shufflevector <4 x float> %2553, <4 x float> undef, <4 x i32> zeroinitializer
  %2555 = sext i32 %t2408 to i64
  %2556 = add nsw i64 %2555, -1
  %2557 = sext i32 %t2406 to i64
  %2558 = add nsw i64 %2557, -1
  %2559 = sext i32 %195 to i64
  br label %"for f125.s0.v3.v3"

"for f125.s0.v3.v3":                              ; preds = %"for f125.s0.v3.v3.preheader", %"for f125.s0.v3.v3"
  %lsr.iv406 = phi i32 [ %lsr.iv.next407, %"for f125.s0.v3.v3" ], [ %a1120, %"for f125.s0.v3.v3.preheader" ]
  %lsr.iv404 = phi i32 [ %lsr.iv.next405, %"for f125.s0.v3.v3" ], [ %2529, %"for f125.s0.v3.v3.preheader" ]
  %f125.s0.v3.v366.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %lsr.iv406)
  %2560 = shl i32 %f125.s0.v3.v366.base, 1
  %2561 = and i32 %2560, 2
  %2562 = ashr i32 %f125.s0.v3.v366.base, 1
  %t2395 = add nsw i32 %2561, %2562
  %t2396 = add i32 %2536, %f125.s0.v3.v366.base
  %2563 = sext i32 %t2396 to i64
  %2564 = getelementptr inbounds float, ptr %f2.host, i64 %2563
  %2565 = load <4 x float>, ptr %2564, align 4, !tbaa !42
  %2566 = add nsw i64 %2563, 4
  %2567 = getelementptr inbounds float, ptr %f2.host, i64 %2566
  %2568 = load <4 x float>, ptr %2567, align 4, !tbaa !42
  %t2397 = shufflevector <4 x float> %2565, <4 x float> %2568, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2398 = shufflevector <4 x float> %2565, <4 x float> %2568, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2399 = fmul <4 x float> %232, %t2397
  %t2400 = fmul <4 x float> %232, %t2398
  %a863 = fptosi <4 x float> %t2400 to <4 x i32>
  %a870 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a863)
  %2569 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a870, <4 x i32> zeroinitializer)
  %t2402 = sitofp <4 x i32> %2569 to <4 x float>
  %t2403 = fmul <4 x float> %2539, %t2402
  %2570 = add nuw nsw <4 x i32> %2569, <i32 1, i32 1, i32 1, i32 1>
  %2571 = sitofp <4 x i32> %2570 to <4 x float>
  %t2404 = fmul <4 x float> %2539, %2571
  %2572 = fmul <4 x float> %t2400, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a868 = fptosi <4 x float> %2572 to <4 x i32>
  %a867 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a868)
  %2573 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a867, <4 x i32> zeroinitializer)
  %2574 = shl <4 x i32> %2569, <i32 8, i32 8, i32 8, i32 8>
  %.neg218 = sub <4 x i32> %.neg216, %2574
  %t2409 = add <4 x i32> %.neg218, %2573
  %2575 = sub nsw i32 %t2395, %f4.v3.min_realized
  %t2412 = add nsw i32 %2575, %2550
  %t2414 = sub nsw <4 x i32> %2569, %241
  %t2415 = mul nsw <4 x i32> %t2414, %1959
  %2576 = sub nsw i32 %2562, %f4.v3.min_realized
  %t2417 = add nsw i32 %2576, %2550
  %t2419 = add nsw i32 %2575, %2552
  %t2420 = add nsw i32 %2576, %2552
  %2577 = add nsw <4 x i32> %t2414, <i32 1, i32 1, i32 1, i32 1>
  %t2421 = mul nsw <4 x i32> %2577, %1959
  %2578 = add nsw i32 %f125.s0.v3.v366.base, 1
  %2579 = shl i32 %2578, 1
  %2580 = and i32 %2579, 2
  %2581 = ashr i32 %2578, 1
  %t2422 = add nsw i32 %2580, %2581
  %a871 = fptosi <4 x float> %t2399 to <4 x i32>
  %a878 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a871)
  %2582 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a878, <4 x i32> zeroinitializer)
  %t2424 = sitofp <4 x i32> %2582 to <4 x float>
  %t2425 = fmul <4 x float> %2539, %t2424
  %2583 = add nuw nsw <4 x i32> %2582, <i32 1, i32 1, i32 1, i32 1>
  %2584 = sitofp <4 x i32> %2583 to <4 x float>
  %t2426 = fmul <4 x float> %2539, %2584
  %2585 = fmul <4 x float> %t2399, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a876 = fptosi <4 x float> %2585 to <4 x i32>
  %a875 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b870, <4 x i32> %a876)
  %2586 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a875, <4 x i32> zeroinitializer)
  %2587 = shl <4 x i32> %2582, <i32 8, i32 8, i32 8, i32 8>
  %.neg220 = sub <4 x i32> %.neg216, %2587
  %t2429 = add <4 x i32> %.neg220, %2586
  %2588 = sub nsw i32 %t2422, %f4.v3.min_realized
  %t2431 = add nsw i32 %2588, %2550
  %t2432 = sub nsw <4 x i32> %2582, %241
  %t2433 = mul nsw <4 x i32> %t2432, %1959
  %2589 = sub nsw i32 %2581, %f4.v3.min_realized
  %t2435 = add nsw i32 %2589, %2550
  %t2436 = add nsw i32 %2588, %2552
  %t2437 = add nsw i32 %2589, %2552
  %2590 = add nsw <4 x i32> %t2432, <i32 1, i32 1, i32 1, i32 1>
  %t2438 = mul nsw <4 x i32> %2590, %1959
  %2591 = insertelement <4 x i32> undef, i32 %t2420, i64 0
  %2592 = shufflevector <4 x i32> %2591, <4 x i32> undef, <4 x i32> zeroinitializer
  %2593 = add nsw <4 x i32> %2592, <i32 0, i32 1, i32 2, i32 3>
  %2594 = add nsw <4 x i32> %t2421, %2593
  %2595 = sext <4 x i32> %2594 to <4 x i64>
  %2596 = extractelement <4 x i64> %2595, i64 0
  %2597 = getelementptr inbounds float, ptr %f4.host, i64 %2596
  %2598 = load float, ptr %2597, align 4, !tbaa !44
  %2599 = insertelement <4 x float> undef, float %2598, i64 0
  %2600 = extractelement <4 x i64> %2595, i64 1
  %2601 = getelementptr inbounds float, ptr %f4.host, i64 %2600
  %2602 = load float, ptr %2601, align 4, !tbaa !44
  %2603 = insertelement <4 x float> %2599, float %2602, i64 1
  %2604 = extractelement <4 x i64> %2595, i64 2
  %2605 = getelementptr inbounds float, ptr %f4.host, i64 %2604
  %2606 = load float, ptr %2605, align 4, !tbaa !44
  %2607 = insertelement <4 x float> %2603, float %2606, i64 2
  %2608 = extractelement <4 x i64> %2595, i64 3
  %2609 = getelementptr inbounds float, ptr %f4.host, i64 %2608
  %2610 = load float, ptr %2609, align 4, !tbaa !44
  %2611 = insertelement <4 x float> %2607, float %2610, i64 3
  %2612 = fmul <4 x float> %2611, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2613 = insertelement <4 x i32> undef, i32 %t2419, i64 0
  %2614 = shufflevector <4 x i32> %2613, <4 x i32> undef, <4 x i32> zeroinitializer
  %2615 = add <4 x i32> %2614, <i32 -1, i32 0, i32 1, i32 2>
  %2616 = add <4 x i32> %2615, %t2421
  %2617 = sext <4 x i32> %2616 to <4 x i64>
  %2618 = extractelement <4 x i64> %2617, i64 0
  %2619 = getelementptr inbounds float, ptr %f4.host, i64 %2618
  %2620 = load float, ptr %2619, align 4, !tbaa !44
  %2621 = insertelement <4 x float> undef, float %2620, i64 0
  %2622 = extractelement <4 x i64> %2617, i64 1
  %2623 = getelementptr inbounds float, ptr %f4.host, i64 %2622
  %2624 = load float, ptr %2623, align 4, !tbaa !44
  %2625 = insertelement <4 x float> %2621, float %2624, i64 1
  %2626 = extractelement <4 x i64> %2617, i64 2
  %2627 = getelementptr inbounds float, ptr %f4.host, i64 %2626
  %2628 = load float, ptr %2627, align 4, !tbaa !44
  %2629 = insertelement <4 x float> %2625, float %2628, i64 2
  %2630 = extractelement <4 x i64> %2617, i64 3
  %2631 = getelementptr inbounds float, ptr %f4.host, i64 %2630
  %2632 = load float, ptr %2631, align 4, !tbaa !44
  %2633 = insertelement <4 x float> %2629, float %2632, i64 3
  %2634 = fmul <4 x float> %2633, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2635 = fadd <4 x float> %2612, %2634
  %2636 = fmul <4 x float> %2635, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2637 = insertelement <4 x i32> undef, i32 %t2417, i64 0
  %2638 = shufflevector <4 x i32> %2637, <4 x i32> undef, <4 x i32> zeroinitializer
  %2639 = add nsw <4 x i32> %2638, <i32 0, i32 1, i32 2, i32 3>
  %2640 = add nsw <4 x i32> %t2421, %2639
  %2641 = sext <4 x i32> %2640 to <4 x i64>
  %2642 = extractelement <4 x i64> %2641, i64 0
  %2643 = getelementptr inbounds float, ptr %f4.host, i64 %2642
  %2644 = load float, ptr %2643, align 4, !tbaa !44
  %2645 = insertelement <4 x float> undef, float %2644, i64 0
  %2646 = extractelement <4 x i64> %2641, i64 1
  %2647 = getelementptr inbounds float, ptr %f4.host, i64 %2646
  %2648 = load float, ptr %2647, align 4, !tbaa !44
  %2649 = insertelement <4 x float> %2645, float %2648, i64 1
  %2650 = extractelement <4 x i64> %2641, i64 2
  %2651 = getelementptr inbounds float, ptr %f4.host, i64 %2650
  %2652 = load float, ptr %2651, align 4, !tbaa !44
  %2653 = insertelement <4 x float> %2649, float %2652, i64 2
  %2654 = extractelement <4 x i64> %2641, i64 3
  %2655 = getelementptr inbounds float, ptr %f4.host, i64 %2654
  %2656 = load float, ptr %2655, align 4, !tbaa !44
  %2657 = insertelement <4 x float> %2653, float %2656, i64 3
  %2658 = fmul <4 x float> %2657, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2659 = insertelement <4 x i32> undef, i32 %t2412, i64 0
  %2660 = shufflevector <4 x i32> %2659, <4 x i32> undef, <4 x i32> zeroinitializer
  %2661 = add <4 x i32> %2660, <i32 -1, i32 0, i32 1, i32 2>
  %2662 = add <4 x i32> %2661, %t2421
  %2663 = sext <4 x i32> %2662 to <4 x i64>
  %2664 = extractelement <4 x i64> %2663, i64 0
  %2665 = getelementptr inbounds float, ptr %f4.host, i64 %2664
  %2666 = load float, ptr %2665, align 4, !tbaa !44
  %2667 = insertelement <4 x float> undef, float %2666, i64 0
  %2668 = extractelement <4 x i64> %2663, i64 1
  %2669 = getelementptr inbounds float, ptr %f4.host, i64 %2668
  %2670 = load float, ptr %2669, align 4, !tbaa !44
  %2671 = insertelement <4 x float> %2667, float %2670, i64 1
  %2672 = extractelement <4 x i64> %2663, i64 2
  %2673 = getelementptr inbounds float, ptr %f4.host, i64 %2672
  %2674 = load float, ptr %2673, align 4, !tbaa !44
  %2675 = insertelement <4 x float> %2671, float %2674, i64 2
  %2676 = extractelement <4 x i64> %2663, i64 3
  %2677 = getelementptr inbounds float, ptr %f4.host, i64 %2676
  %2678 = load float, ptr %2677, align 4, !tbaa !44
  %2679 = insertelement <4 x float> %2675, float %2678, i64 3
  %2680 = fmul <4 x float> %2679, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2681 = fadd <4 x float> %2658, %2680
  %2682 = fmul <4 x float> %2681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2683 = fadd <4 x float> %2636, %2682
  %2684 = sext <4 x i32> %t2409 to <4 x i64>
  %2685 = extractelement <4 x i64> %2684, i64 0
  %2686 = getelementptr inbounds float, ptr %f0.host, i64 %2685
  %2687 = load float, ptr %2686, align 4, !tbaa !6
  %2688 = insertelement <4 x float> undef, float %2687, i64 0
  %2689 = extractelement <4 x i64> %2684, i64 1
  %2690 = getelementptr inbounds float, ptr %f0.host, i64 %2689
  %2691 = load float, ptr %2690, align 4, !tbaa !6
  %2692 = insertelement <4 x float> %2688, float %2691, i64 1
  %2693 = extractelement <4 x i64> %2684, i64 2
  %2694 = getelementptr inbounds float, ptr %f0.host, i64 %2693
  %2695 = load float, ptr %2694, align 4, !tbaa !6
  %2696 = insertelement <4 x float> %2692, float %2695, i64 2
  %2697 = extractelement <4 x i64> %2684, i64 3
  %2698 = getelementptr inbounds float, ptr %f0.host, i64 %2697
  %2699 = load float, ptr %2698, align 4, !tbaa !6
  %2700 = insertelement <4 x float> %2696, float %2699, i64 3
  %2701 = fsub <4 x float> %t2398, %t2404
  %2702 = fmul <4 x float> %2554, %2701
  %2703 = fadd <4 x float> %t2404, %2702
  %2704 = fadd <4 x float> %2703, %2700
  %2705 = fsub <4 x float> %2704, %2683
  %2706 = fsub <4 x float> %t2400, %t2402
  %2707 = fmul <4 x float> %2706, %2705
  %2708 = add nsw <4 x i32> %t2415, %2593
  %2709 = sext <4 x i32> %2708 to <4 x i64>
  %2710 = extractelement <4 x i64> %2709, i64 0
  %2711 = getelementptr inbounds float, ptr %f4.host, i64 %2710
  %2712 = load float, ptr %2711, align 4, !tbaa !44
  %2713 = insertelement <4 x float> undef, float %2712, i64 0
  %2714 = extractelement <4 x i64> %2709, i64 1
  %2715 = getelementptr inbounds float, ptr %f4.host, i64 %2714
  %2716 = load float, ptr %2715, align 4, !tbaa !44
  %2717 = insertelement <4 x float> %2713, float %2716, i64 1
  %2718 = extractelement <4 x i64> %2709, i64 2
  %2719 = getelementptr inbounds float, ptr %f4.host, i64 %2718
  %2720 = load float, ptr %2719, align 4, !tbaa !44
  %2721 = insertelement <4 x float> %2717, float %2720, i64 2
  %2722 = extractelement <4 x i64> %2709, i64 3
  %2723 = getelementptr inbounds float, ptr %f4.host, i64 %2722
  %2724 = load float, ptr %2723, align 4, !tbaa !44
  %2725 = insertelement <4 x float> %2721, float %2724, i64 3
  %2726 = fmul <4 x float> %2725, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2727 = add <4 x i32> %2615, %t2415
  %2728 = sext <4 x i32> %2727 to <4 x i64>
  %2729 = extractelement <4 x i64> %2728, i64 0
  %2730 = getelementptr inbounds float, ptr %f4.host, i64 %2729
  %2731 = load float, ptr %2730, align 4, !tbaa !44
  %2732 = insertelement <4 x float> undef, float %2731, i64 0
  %2733 = extractelement <4 x i64> %2728, i64 1
  %2734 = getelementptr inbounds float, ptr %f4.host, i64 %2733
  %2735 = load float, ptr %2734, align 4, !tbaa !44
  %2736 = insertelement <4 x float> %2732, float %2735, i64 1
  %2737 = extractelement <4 x i64> %2728, i64 2
  %2738 = getelementptr inbounds float, ptr %f4.host, i64 %2737
  %2739 = load float, ptr %2738, align 4, !tbaa !44
  %2740 = insertelement <4 x float> %2736, float %2739, i64 2
  %2741 = extractelement <4 x i64> %2728, i64 3
  %2742 = getelementptr inbounds float, ptr %f4.host, i64 %2741
  %2743 = load float, ptr %2742, align 4, !tbaa !44
  %2744 = insertelement <4 x float> %2740, float %2743, i64 3
  %2745 = fmul <4 x float> %2744, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2746 = fadd <4 x float> %2726, %2745
  %2747 = fmul <4 x float> %2746, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2748 = add nsw <4 x i32> %t2415, %2639
  %2749 = sext <4 x i32> %2748 to <4 x i64>
  %2750 = extractelement <4 x i64> %2749, i64 0
  %2751 = getelementptr inbounds float, ptr %f4.host, i64 %2750
  %2752 = load float, ptr %2751, align 4, !tbaa !44
  %2753 = insertelement <4 x float> undef, float %2752, i64 0
  %2754 = extractelement <4 x i64> %2749, i64 1
  %2755 = getelementptr inbounds float, ptr %f4.host, i64 %2754
  %2756 = load float, ptr %2755, align 4, !tbaa !44
  %2757 = insertelement <4 x float> %2753, float %2756, i64 1
  %2758 = extractelement <4 x i64> %2749, i64 2
  %2759 = getelementptr inbounds float, ptr %f4.host, i64 %2758
  %2760 = load float, ptr %2759, align 4, !tbaa !44
  %2761 = insertelement <4 x float> %2757, float %2760, i64 2
  %2762 = extractelement <4 x i64> %2749, i64 3
  %2763 = getelementptr inbounds float, ptr %f4.host, i64 %2762
  %2764 = load float, ptr %2763, align 4, !tbaa !44
  %2765 = insertelement <4 x float> %2761, float %2764, i64 3
  %2766 = fmul <4 x float> %2765, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2767 = add <4 x i32> %2661, %t2415
  %2768 = sext <4 x i32> %2767 to <4 x i64>
  %2769 = extractelement <4 x i64> %2768, i64 0
  %2770 = getelementptr inbounds float, ptr %f4.host, i64 %2769
  %2771 = load float, ptr %2770, align 4, !tbaa !44
  %2772 = insertelement <4 x float> undef, float %2771, i64 0
  %2773 = extractelement <4 x i64> %2768, i64 1
  %2774 = getelementptr inbounds float, ptr %f4.host, i64 %2773
  %2775 = load float, ptr %2774, align 4, !tbaa !44
  %2776 = insertelement <4 x float> %2772, float %2775, i64 1
  %2777 = extractelement <4 x i64> %2768, i64 2
  %2778 = getelementptr inbounds float, ptr %f4.host, i64 %2777
  %2779 = load float, ptr %2778, align 4, !tbaa !44
  %2780 = insertelement <4 x float> %2776, float %2779, i64 2
  %2781 = extractelement <4 x i64> %2768, i64 3
  %2782 = getelementptr inbounds float, ptr %f4.host, i64 %2781
  %2783 = load float, ptr %2782, align 4, !tbaa !44
  %2784 = insertelement <4 x float> %2780, float %2783, i64 3
  %2785 = fmul <4 x float> %2784, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2786 = fadd <4 x float> %2766, %2785
  %2787 = fmul <4 x float> %2786, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2788 = fadd <4 x float> %2747, %2787
  %2789 = add nsw <4 x i32> %t2409, <i32 256, i32 256, i32 256, i32 256>
  %2790 = sext <4 x i32> %2789 to <4 x i64>
  %2791 = extractelement <4 x i64> %2790, i64 0
  %2792 = getelementptr inbounds float, ptr %f0.host, i64 %2791
  %2793 = load float, ptr %2792, align 4, !tbaa !6
  %2794 = insertelement <4 x float> undef, float %2793, i64 0
  %2795 = extractelement <4 x i64> %2790, i64 1
  %2796 = getelementptr inbounds float, ptr %f0.host, i64 %2795
  %2797 = load float, ptr %2796, align 4, !tbaa !6
  %2798 = insertelement <4 x float> %2794, float %2797, i64 1
  %2799 = extractelement <4 x i64> %2790, i64 2
  %2800 = getelementptr inbounds float, ptr %f0.host, i64 %2799
  %2801 = load float, ptr %2800, align 4, !tbaa !6
  %2802 = insertelement <4 x float> %2798, float %2801, i64 2
  %2803 = extractelement <4 x i64> %2790, i64 3
  %2804 = getelementptr inbounds float, ptr %f0.host, i64 %2803
  %2805 = load float, ptr %2804, align 4, !tbaa !6
  %2806 = insertelement <4 x float> %2802, float %2805, i64 3
  %2807 = fsub <4 x float> %t2398, %t2403
  %2808 = fmul <4 x float> %2554, %2807
  %2809 = fadd <4 x float> %t2403, %2808
  %2810 = fadd <4 x float> %2809, %2806
  %2811 = fsub <4 x float> %2810, %2788
  %2812 = fsub <4 x float> %t2402, %t2400
  %2813 = fadd <4 x float> %2812, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2814 = fmul <4 x float> %2813, %2811
  %2815 = fadd <4 x float> %2707, %2814
  %2816 = sext i32 %2562 to i64
  %2817 = sub nsw i64 %2816, %1963
  %2818 = add nsw i64 %2817, %2555
  %2819 = getelementptr inbounds float, ptr %222, i64 %2818
  %2820 = load <4 x float>, ptr %2819, align 4, !tbaa !70
  %2821 = fmul <4 x float> %2820, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2822 = sext i32 %t2395 to i64
  %2823 = sub nsw i64 %2822, %1963
  %2824 = add nsw i64 %2556, %2823
  %2825 = getelementptr inbounds float, ptr %222, i64 %2824
  %2826 = load <4 x float>, ptr %2825, align 4, !tbaa !70
  %2827 = fmul <4 x float> %2826, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2828 = fadd <4 x float> %2821, %2827
  %2829 = fmul <4 x float> %2828, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2830 = add nsw i64 %2817, %2557
  %2831 = getelementptr inbounds float, ptr %222, i64 %2830
  %2832 = load <4 x float>, ptr %2831, align 4, !tbaa !70
  %2833 = fmul <4 x float> %2832, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2834 = add nsw i64 %2558, %2823
  %2835 = getelementptr inbounds float, ptr %222, i64 %2834
  %2836 = load <4 x float>, ptr %2835, align 4, !tbaa !70
  %2837 = fmul <4 x float> %2836, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2838 = fadd <4 x float> %2833, %2837
  %2839 = fmul <4 x float> %2838, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2840 = fadd <4 x float> %2829, %2839
  %2841 = fadd <4 x float> %2815, %2840
  %2842 = insertelement <4 x i32> undef, i32 %t2437, i64 0
  %2843 = shufflevector <4 x i32> %2842, <4 x i32> undef, <4 x i32> zeroinitializer
  %2844 = add nsw <4 x i32> %2843, <i32 0, i32 1, i32 2, i32 3>
  %2845 = add nsw <4 x i32> %t2438, %2844
  %2846 = sext <4 x i32> %2845 to <4 x i64>
  %2847 = extractelement <4 x i64> %2846, i64 0
  %2848 = getelementptr inbounds float, ptr %f4.host, i64 %2847
  %2849 = load float, ptr %2848, align 4, !tbaa !44
  %2850 = insertelement <4 x float> undef, float %2849, i64 0
  %2851 = extractelement <4 x i64> %2846, i64 1
  %2852 = getelementptr inbounds float, ptr %f4.host, i64 %2851
  %2853 = load float, ptr %2852, align 4, !tbaa !44
  %2854 = insertelement <4 x float> %2850, float %2853, i64 1
  %2855 = extractelement <4 x i64> %2846, i64 2
  %2856 = getelementptr inbounds float, ptr %f4.host, i64 %2855
  %2857 = load float, ptr %2856, align 4, !tbaa !44
  %2858 = insertelement <4 x float> %2854, float %2857, i64 2
  %2859 = extractelement <4 x i64> %2846, i64 3
  %2860 = getelementptr inbounds float, ptr %f4.host, i64 %2859
  %2861 = load float, ptr %2860, align 4, !tbaa !44
  %2862 = insertelement <4 x float> %2858, float %2861, i64 3
  %2863 = fmul <4 x float> %2862, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2864 = insertelement <4 x i32> undef, i32 %t2436, i64 0
  %2865 = shufflevector <4 x i32> %2864, <4 x i32> undef, <4 x i32> zeroinitializer
  %2866 = add <4 x i32> %2865, <i32 -1, i32 0, i32 1, i32 2>
  %2867 = add <4 x i32> %2866, %t2438
  %2868 = sext <4 x i32> %2867 to <4 x i64>
  %2869 = extractelement <4 x i64> %2868, i64 0
  %2870 = getelementptr inbounds float, ptr %f4.host, i64 %2869
  %2871 = load float, ptr %2870, align 4, !tbaa !44
  %2872 = insertelement <4 x float> undef, float %2871, i64 0
  %2873 = extractelement <4 x i64> %2868, i64 1
  %2874 = getelementptr inbounds float, ptr %f4.host, i64 %2873
  %2875 = load float, ptr %2874, align 4, !tbaa !44
  %2876 = insertelement <4 x float> %2872, float %2875, i64 1
  %2877 = extractelement <4 x i64> %2868, i64 2
  %2878 = getelementptr inbounds float, ptr %f4.host, i64 %2877
  %2879 = load float, ptr %2878, align 4, !tbaa !44
  %2880 = insertelement <4 x float> %2876, float %2879, i64 2
  %2881 = extractelement <4 x i64> %2868, i64 3
  %2882 = getelementptr inbounds float, ptr %f4.host, i64 %2881
  %2883 = load float, ptr %2882, align 4, !tbaa !44
  %2884 = insertelement <4 x float> %2880, float %2883, i64 3
  %2885 = fmul <4 x float> %2884, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2886 = fadd <4 x float> %2863, %2885
  %2887 = fmul <4 x float> %2886, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2888 = insertelement <4 x i32> undef, i32 %t2435, i64 0
  %2889 = shufflevector <4 x i32> %2888, <4 x i32> undef, <4 x i32> zeroinitializer
  %2890 = add nsw <4 x i32> %2889, <i32 0, i32 1, i32 2, i32 3>
  %2891 = add nsw <4 x i32> %t2438, %2890
  %2892 = sext <4 x i32> %2891 to <4 x i64>
  %2893 = extractelement <4 x i64> %2892, i64 0
  %2894 = getelementptr inbounds float, ptr %f4.host, i64 %2893
  %2895 = load float, ptr %2894, align 4, !tbaa !44
  %2896 = insertelement <4 x float> undef, float %2895, i64 0
  %2897 = extractelement <4 x i64> %2892, i64 1
  %2898 = getelementptr inbounds float, ptr %f4.host, i64 %2897
  %2899 = load float, ptr %2898, align 4, !tbaa !44
  %2900 = insertelement <4 x float> %2896, float %2899, i64 1
  %2901 = extractelement <4 x i64> %2892, i64 2
  %2902 = getelementptr inbounds float, ptr %f4.host, i64 %2901
  %2903 = load float, ptr %2902, align 4, !tbaa !44
  %2904 = insertelement <4 x float> %2900, float %2903, i64 2
  %2905 = extractelement <4 x i64> %2892, i64 3
  %2906 = getelementptr inbounds float, ptr %f4.host, i64 %2905
  %2907 = load float, ptr %2906, align 4, !tbaa !44
  %2908 = insertelement <4 x float> %2904, float %2907, i64 3
  %2909 = fmul <4 x float> %2908, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2910 = insertelement <4 x i32> undef, i32 %t2431, i64 0
  %2911 = shufflevector <4 x i32> %2910, <4 x i32> undef, <4 x i32> zeroinitializer
  %2912 = add <4 x i32> %2911, <i32 -1, i32 0, i32 1, i32 2>
  %2913 = add <4 x i32> %2912, %t2438
  %2914 = sext <4 x i32> %2913 to <4 x i64>
  %2915 = extractelement <4 x i64> %2914, i64 0
  %2916 = getelementptr inbounds float, ptr %f4.host, i64 %2915
  %2917 = load float, ptr %2916, align 4, !tbaa !44
  %2918 = insertelement <4 x float> undef, float %2917, i64 0
  %2919 = extractelement <4 x i64> %2914, i64 1
  %2920 = getelementptr inbounds float, ptr %f4.host, i64 %2919
  %2921 = load float, ptr %2920, align 4, !tbaa !44
  %2922 = insertelement <4 x float> %2918, float %2921, i64 1
  %2923 = extractelement <4 x i64> %2914, i64 2
  %2924 = getelementptr inbounds float, ptr %f4.host, i64 %2923
  %2925 = load float, ptr %2924, align 4, !tbaa !44
  %2926 = insertelement <4 x float> %2922, float %2925, i64 2
  %2927 = extractelement <4 x i64> %2914, i64 3
  %2928 = getelementptr inbounds float, ptr %f4.host, i64 %2927
  %2929 = load float, ptr %2928, align 4, !tbaa !44
  %2930 = insertelement <4 x float> %2926, float %2929, i64 3
  %2931 = fmul <4 x float> %2930, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2932 = fadd <4 x float> %2909, %2931
  %2933 = fmul <4 x float> %2932, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2934 = fadd <4 x float> %2887, %2933
  %2935 = sext <4 x i32> %t2429 to <4 x i64>
  %2936 = extractelement <4 x i64> %2935, i64 0
  %2937 = getelementptr inbounds float, ptr %f0.host, i64 %2936
  %2938 = load float, ptr %2937, align 4, !tbaa !6
  %2939 = insertelement <4 x float> undef, float %2938, i64 0
  %2940 = extractelement <4 x i64> %2935, i64 1
  %2941 = getelementptr inbounds float, ptr %f0.host, i64 %2940
  %2942 = load float, ptr %2941, align 4, !tbaa !6
  %2943 = insertelement <4 x float> %2939, float %2942, i64 1
  %2944 = extractelement <4 x i64> %2935, i64 2
  %2945 = getelementptr inbounds float, ptr %f0.host, i64 %2944
  %2946 = load float, ptr %2945, align 4, !tbaa !6
  %2947 = insertelement <4 x float> %2943, float %2946, i64 2
  %2948 = extractelement <4 x i64> %2935, i64 3
  %2949 = getelementptr inbounds float, ptr %f0.host, i64 %2948
  %2950 = load float, ptr %2949, align 4, !tbaa !6
  %2951 = insertelement <4 x float> %2947, float %2950, i64 3
  %2952 = fsub <4 x float> %t2397, %t2426
  %2953 = fmul <4 x float> %2554, %2952
  %2954 = fadd <4 x float> %t2426, %2953
  %2955 = fadd <4 x float> %2954, %2951
  %2956 = fsub <4 x float> %2955, %2934
  %2957 = fsub <4 x float> %t2399, %t2424
  %2958 = fmul <4 x float> %2957, %2956
  %2959 = add nsw <4 x i32> %t2433, %2844
  %2960 = sext <4 x i32> %2959 to <4 x i64>
  %2961 = extractelement <4 x i64> %2960, i64 0
  %2962 = getelementptr inbounds float, ptr %f4.host, i64 %2961
  %2963 = load float, ptr %2962, align 4, !tbaa !44
  %2964 = insertelement <4 x float> undef, float %2963, i64 0
  %2965 = extractelement <4 x i64> %2960, i64 1
  %2966 = getelementptr inbounds float, ptr %f4.host, i64 %2965
  %2967 = load float, ptr %2966, align 4, !tbaa !44
  %2968 = insertelement <4 x float> %2964, float %2967, i64 1
  %2969 = extractelement <4 x i64> %2960, i64 2
  %2970 = getelementptr inbounds float, ptr %f4.host, i64 %2969
  %2971 = load float, ptr %2970, align 4, !tbaa !44
  %2972 = insertelement <4 x float> %2968, float %2971, i64 2
  %2973 = extractelement <4 x i64> %2960, i64 3
  %2974 = getelementptr inbounds float, ptr %f4.host, i64 %2973
  %2975 = load float, ptr %2974, align 4, !tbaa !44
  %2976 = insertelement <4 x float> %2972, float %2975, i64 3
  %2977 = fmul <4 x float> %2976, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %2978 = add <4 x i32> %t2433, %2865
  %2979 = add <4 x i32> %2978, <i32 -1, i32 0, i32 1, i32 2>
  %2980 = sext <4 x i32> %2979 to <4 x i64>
  %2981 = extractelement <4 x i64> %2980, i64 0
  %2982 = getelementptr inbounds float, ptr %f4.host, i64 %2981
  %2983 = load float, ptr %2982, align 4, !tbaa !44
  %2984 = insertelement <4 x float> undef, float %2983, i64 0
  %2985 = extractelement <4 x i64> %2980, i64 1
  %2986 = getelementptr inbounds float, ptr %f4.host, i64 %2985
  %2987 = load float, ptr %2986, align 4, !tbaa !44
  %2988 = insertelement <4 x float> %2984, float %2987, i64 1
  %2989 = extractelement <4 x i64> %2980, i64 2
  %2990 = getelementptr inbounds float, ptr %f4.host, i64 %2989
  %2991 = load float, ptr %2990, align 4, !tbaa !44
  %2992 = insertelement <4 x float> %2988, float %2991, i64 2
  %2993 = extractelement <4 x i64> %2980, i64 3
  %2994 = getelementptr inbounds float, ptr %f4.host, i64 %2993
  %2995 = load float, ptr %2994, align 4, !tbaa !44
  %2996 = insertelement <4 x float> %2992, float %2995, i64 3
  %2997 = fmul <4 x float> %2996, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %2998 = fadd <4 x float> %2977, %2997
  %2999 = fmul <4 x float> %2998, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3000 = add nsw <4 x i32> %t2433, %2890
  %3001 = sext <4 x i32> %3000 to <4 x i64>
  %3002 = extractelement <4 x i64> %3001, i64 0
  %3003 = getelementptr inbounds float, ptr %f4.host, i64 %3002
  %3004 = load float, ptr %3003, align 4, !tbaa !44
  %3005 = insertelement <4 x float> undef, float %3004, i64 0
  %3006 = extractelement <4 x i64> %3001, i64 1
  %3007 = getelementptr inbounds float, ptr %f4.host, i64 %3006
  %3008 = load float, ptr %3007, align 4, !tbaa !44
  %3009 = insertelement <4 x float> %3005, float %3008, i64 1
  %3010 = extractelement <4 x i64> %3001, i64 2
  %3011 = getelementptr inbounds float, ptr %f4.host, i64 %3010
  %3012 = load float, ptr %3011, align 4, !tbaa !44
  %3013 = insertelement <4 x float> %3009, float %3012, i64 2
  %3014 = extractelement <4 x i64> %3001, i64 3
  %3015 = getelementptr inbounds float, ptr %f4.host, i64 %3014
  %3016 = load float, ptr %3015, align 4, !tbaa !44
  %3017 = insertelement <4 x float> %3013, float %3016, i64 3
  %3018 = fmul <4 x float> %3017, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3019 = add <4 x i32> %t2433, %2911
  %3020 = add <4 x i32> %3019, <i32 -1, i32 0, i32 1, i32 2>
  %3021 = sext <4 x i32> %3020 to <4 x i64>
  %3022 = extractelement <4 x i64> %3021, i64 0
  %3023 = getelementptr inbounds float, ptr %f4.host, i64 %3022
  %3024 = load float, ptr %3023, align 4, !tbaa !44
  %3025 = insertelement <4 x float> undef, float %3024, i64 0
  %3026 = extractelement <4 x i64> %3021, i64 1
  %3027 = getelementptr inbounds float, ptr %f4.host, i64 %3026
  %3028 = load float, ptr %3027, align 4, !tbaa !44
  %3029 = insertelement <4 x float> %3025, float %3028, i64 1
  %3030 = extractelement <4 x i64> %3021, i64 2
  %3031 = getelementptr inbounds float, ptr %f4.host, i64 %3030
  %3032 = load float, ptr %3031, align 4, !tbaa !44
  %3033 = insertelement <4 x float> %3029, float %3032, i64 2
  %3034 = extractelement <4 x i64> %3021, i64 3
  %3035 = getelementptr inbounds float, ptr %f4.host, i64 %3034
  %3036 = load float, ptr %3035, align 4, !tbaa !44
  %3037 = insertelement <4 x float> %3033, float %3036, i64 3
  %3038 = fmul <4 x float> %3037, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3039 = fadd <4 x float> %3018, %3038
  %3040 = fmul <4 x float> %3039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3041 = fadd <4 x float> %2999, %3040
  %3042 = add nsw <4 x i32> %t2429, <i32 256, i32 256, i32 256, i32 256>
  %3043 = sext <4 x i32> %3042 to <4 x i64>
  %3044 = extractelement <4 x i64> %3043, i64 0
  %3045 = getelementptr inbounds float, ptr %f0.host, i64 %3044
  %3046 = load float, ptr %3045, align 4, !tbaa !6
  %3047 = insertelement <4 x float> undef, float %3046, i64 0
  %3048 = extractelement <4 x i64> %3043, i64 1
  %3049 = getelementptr inbounds float, ptr %f0.host, i64 %3048
  %3050 = load float, ptr %3049, align 4, !tbaa !6
  %3051 = insertelement <4 x float> %3047, float %3050, i64 1
  %3052 = extractelement <4 x i64> %3043, i64 2
  %3053 = getelementptr inbounds float, ptr %f0.host, i64 %3052
  %3054 = load float, ptr %3053, align 4, !tbaa !6
  %3055 = insertelement <4 x float> %3051, float %3054, i64 2
  %3056 = extractelement <4 x i64> %3043, i64 3
  %3057 = getelementptr inbounds float, ptr %f0.host, i64 %3056
  %3058 = load float, ptr %3057, align 4, !tbaa !6
  %3059 = insertelement <4 x float> %3055, float %3058, i64 3
  %3060 = fsub <4 x float> %t2397, %t2425
  %3061 = fmul <4 x float> %2554, %3060
  %3062 = fadd <4 x float> %t2425, %3061
  %3063 = fadd <4 x float> %3062, %3059
  %3064 = fsub <4 x float> %3063, %3041
  %3065 = fsub <4 x float> %t2424, %t2399
  %3066 = fadd <4 x float> %3065, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3067 = fmul <4 x float> %3066, %3064
  %3068 = fadd <4 x float> %2958, %3067
  %3069 = sext i32 %2581 to i64
  %3070 = sub nsw i64 %3069, %1963
  %3071 = add nsw i64 %3070, %2555
  %3072 = getelementptr inbounds float, ptr %222, i64 %3071
  %3073 = load <4 x float>, ptr %3072, align 4, !tbaa !70
  %3074 = fmul <4 x float> %3073, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3075 = sext i32 %t2422 to i64
  %3076 = sub nsw i64 %3075, %1963
  %3077 = add nsw i64 %2556, %3076
  %3078 = getelementptr inbounds float, ptr %222, i64 %3077
  %3079 = load <4 x float>, ptr %3078, align 4, !tbaa !70
  %3080 = fmul <4 x float> %3079, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3081 = fadd <4 x float> %3074, %3080
  %3082 = fmul <4 x float> %3081, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3083 = add nsw i64 %3070, %2557
  %3084 = getelementptr inbounds float, ptr %222, i64 %3083
  %3085 = load <4 x float>, ptr %3084, align 4, !tbaa !70
  %3086 = fmul <4 x float> %3085, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3087 = add nsw i64 %2558, %3076
  %3088 = getelementptr inbounds float, ptr %222, i64 %3087
  %3089 = load <4 x float>, ptr %3088, align 4, !tbaa !70
  %3090 = fmul <4 x float> %3089, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3091 = fadd <4 x float> %3086, %3090
  %3092 = fmul <4 x float> %3091, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3093 = fadd <4 x float> %3082, %3092
  %3094 = fadd <4 x float> %3068, %3093
  %3095 = shufflevector <4 x float> %2841, <4 x float> %3094, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3096 = sext i32 %f125.s0.v3.v366.base to i64
  %3097 = sub nsw i64 %3096, %2559
  %3098 = getelementptr inbounds float, ptr %2526, i64 %3097
  store <8 x float> %3095, ptr %3098, align 4, !tbaa !72
  %lsr.iv.next405 = add i32 %lsr.iv404, -1
  %lsr.iv.next407 = add i32 %lsr.iv406, 8
  %.not150 = icmp eq i32 %lsr.iv.next405, 0
  br i1 %.not150, label %"consume f125", label %"for f125.s0.v3.v3"

"consume f125":                                   ; preds = %"for f125.s0.v3.v3", %"produce f125"
  %3099 = add nsw i32 %local_laplacian.extent.0, 7
  %3100 = ashr i32 %3099, 3
  %3101 = icmp sgt i32 %local_laplacian.extent.0, 0
  %3102 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %3103 = shl nsw i64 %75, 1
  %3104 = add nsw i64 %6, 1
  %3105 = sub nsw i64 %3102, %10
  br i1 %3101, label %"for local_laplacian.s0.v3.v3.preheader", label %"consume f125.if.then.i253_crit_edge", !prof !5

"consume f125.if.then.i253_crit_edge":            ; preds = %"consume f125"
  %.pre335 = sext i32 %195 to i64
  %.pre337 = add nsw i32 %input.min.0, %input.extent.0
  %.pre339 = add nsw i32 %.pre337, -1
  %.pre344 = mul nsw i32 %input.stride.2, %b1146
  %.pre346 = mul nsw i32 %input.stride.1, %b1148
  %.pre348 = add nsw i32 %.pre346, %input.min.0
  %.pre350 = add nsw i32 %.pre348, %.pre344
  %.pre352 = add nsw i32 %b1146, %input.extent.2
  %.pre354 = add nsw i32 %.pre352, -1
  %.pre355 = insertelement <8 x i32> undef, i32 %.pre339, i64 0
  %.pre357 = shufflevector <8 x i32> %.pre355, <8 x i32> undef, <8 x i32> zeroinitializer
  %.pre358 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %.pre360 = shufflevector <8 x i32> %.pre358, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %if.then.i253

"for local_laplacian.s0.v3.v3.preheader":         ; preds = %"consume f125"
  %3106 = icmp sgt i32 %local_laplacian.extent.2, 0
  %reass.add223 = sub nsw i64 %3102, %66
  %reass.mul224 = mul nsw i64 %reass.add223, %73
  %3107 = mul nsw i64 %3105, %3104
  %3108 = sub i64 %3107, %8
  %3109 = mul nsw i32 %input.stride.2, %b1146
  %3110 = mul nsw i32 %input.stride.1, %b1148
  %3111 = add nsw i32 %3110, %input.min.0
  %3112 = add nsw i32 %3111, %3109
  %3113 = add nsw i32 %b1146, %input.extent.2
  %b885 = add nsw i32 %3113, -1
  %3114 = mul nsw i32 %local_laplacian.s0.v4.v4.base, %input.stride.1
  %3115 = add nsw i32 %input.min.0, %input.extent.0
  %3116 = add nsw i32 %3115, -1
  %3117 = insertelement <8 x i32> undef, i32 %3116, i64 0
  %b887 = shufflevector <8 x i32> %3117, <8 x i32> undef, <8 x i32> zeroinitializer
  %3118 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b886 = shufflevector <8 x i32> %3118, <8 x i32> undef, <8 x i32> zeroinitializer
  %3119 = sext i32 %195 to i64
  br label %"for local_laplacian.s0.v3.v3"

"for local_laplacian.s0.v3.v3":                   ; preds = %"end for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3.preheader"
  %local_laplacian.s0.v3.v3 = phi i32 [ %3409, %"end for local_laplacian.s0.v5" ], [ 0, %"for local_laplacian.s0.v3.v3.preheader" ]
  br i1 %3106, label %"for local_laplacian.s0.v5.preheader", label %"end for local_laplacian.s0.v5", !prof !5

"for local_laplacian.s0.v5.preheader":            ; preds = %"for local_laplacian.s0.v3.v3"
  %3120 = shl nsw i32 %local_laplacian.s0.v3.v3, 3
  %a879 = add nsw i32 %3120, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a879)
  %3121 = sext i32 %local_laplacian.s0.v3.v277.base to i64
  %3122 = sub nsw i64 %3121, %62
  %3123 = add i64 %3122, %reass.mul224
  %scevgep399 = getelementptr i16, ptr %local_laplacian.host, i64 %3123
  %3124 = add i64 %3108, %3121
  %3125 = getelementptr inbounds float, ptr %f2.host, i64 %3124
  %3126 = load <8 x float>, ptr %3125, align 4, !tbaa !42
  %3127 = fadd <8 x float> %3126, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3128 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base, i64 0
  %3129 = shufflevector <8 x i32> %3128, <8 x i32> undef, <8 x i32> zeroinitializer
  %a885 = add nsw <8 x i32> %3129, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a884 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b887, <8 x i32> %a885)
  %3130 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a884, <8 x i32> %b886)
  %3131 = sub nsw i64 %3121, %3119
  %3132 = getelementptr inbounds float, ptr %2526, i64 %3131
  %3133 = load <8 x float>, ptr %3132, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5"

if.then.i253:                                     ; preds = %"end for local_laplacian.s0.v5", %"consume f125.if.then.i253_crit_edge"
  %b1020.pre-phi = phi <8 x i32> [ %.pre360, %"consume f125.if.then.i253_crit_edge" ], [ %b886, %"end for local_laplacian.s0.v5" ]
  %b1021.pre-phi = phi <8 x i32> [ %.pre357, %"consume f125.if.then.i253_crit_edge" ], [ %b887, %"end for local_laplacian.s0.v5" ]
  %b1019.pre-phi = phi i32 [ %.pre354, %"consume f125.if.then.i253_crit_edge" ], [ %b885, %"end for local_laplacian.s0.v5" ]
  %.pre-phi353 = phi i32 [ %.pre352, %"consume f125.if.then.i253_crit_edge" ], [ %3113, %"end for local_laplacian.s0.v5" ]
  %.pre-phi351 = phi i32 [ %.pre350, %"consume f125.if.then.i253_crit_edge" ], [ %3112, %"end for local_laplacian.s0.v5" ]
  %b1014.pre-phi = phi i32 [ %.pre339, %"consume f125.if.then.i253_crit_edge" ], [ %3116, %"end for local_laplacian.s0.v5" ]
  %.pre-phi338 = phi i32 [ %.pre337, %"consume f125.if.then.i253_crit_edge" ], [ %3115, %"end for local_laplacian.s0.v5" ]
  %.pre-phi336 = phi i64 [ %.pre335, %"consume f125.if.then.i253_crit_edge" ], [ %3119, %"end for local_laplacian.s0.v5" ]
  tail call void @halide_free(ptr %__user_context, ptr nonnull %2526) #7
  %3134 = shl nsw i64 %64, 2
  %3135 = add i32 %a1120, 1
  %3136 = xor i32 %f4.v4.min_realized, -1
  %3137 = add i32 %local_laplacian.s0.v4.v4.base, 1
  %3138 = and i32 %3137, 1
  %3139 = icmp ne i32 %3138, 0
  %3140 = shl i32 %3135, 1
  %3141 = and i32 %3140, 2
  %3142 = sub i32 %3137, %f2.v4.min_realized
  %3143 = add i32 %f2.v3.extent_realized.s, 1
  %3144 = mul i32 %3142, %3143
  %3145 = sub i32 %a1120, %f2.v3.min_realized
  %3146 = add i32 %3145, %3144
  %3147 = shl i32 %a1120, 1
  %3148 = and i32 %3147, 2
  %3149 = add nsw i64 %3102, 1
  %3150 = mul nsw i64 %3149, %73
  %3151 = mul nsw i64 %73, %66
  %3152 = add nsw i64 %3151, %62
  %3153 = sub i64 %3150, %3152
  %3154 = mul nsw i64 %75, %69
  %3155 = add i64 %3152, %3154
  %3156 = sub i64 %3150, %3155
  %3157 = mul nsw i64 %3149, %53
  %3158 = mul nsw i64 %50, %53
  %3159 = mul nsw i64 %b1037, %55
  %3160 = add nsw i64 %3158, %48
  %3161 = add i64 %3160, %3159
  %3162 = sub i64 %3157, %3161
  %3163 = shl nsw i64 %55, 1
  %3164 = add i32 %b1028, %local_laplacian.extent.2
  %a886 = sub nsw i32 %b793, %106
  %3165 = icmp sgt i32 %108, %b793
  %f129.s0.v3.v3.epilogue.s = select i1 %3165, i32 %a886, i32 %109
  %3166 = ashr i32 %f129.s0.v3.v3.epilogue.s, 3
  %a887 = add nsw i32 %3166, 1
  %.inv141 = icmp slt i32 %f129.s0.v3.v3.epilogue.s, 0
  %3167 = select i1 %.inv141, i32 0, i32 %a887
  %3168 = icmp sgt i32 %3167, 0
  %3169 = shl nsw i32 %106, 1
  %3170 = and i32 %3169, 2
  %3171 = sub i32 %106, %f75.v3.min_realized
  %3172 = sub i32 %106, %f7.v3.min_realized
  %.not142 = icmp slt i32 %123, %3167
  %3173 = shl nsw i32 %b793, 1
  %3174 = and i32 %3173, 2
  %3175 = ashr i32 %b787, 5
  %t2480 = add nsw i32 %3174, %3175
  %3176 = sub i32 %b793, %f75.v3.min_realized
  %3177 = sub nsw i32 %b793, %f7.v3.min_realized
  %3178 = add nsw i32 %95, -67
  %3179 = lshr i32 %3178, 3
  %3180 = and i32 %3179, 2
  %3181 = ashr i32 %3178, 5
  %t2502 = add nsw i32 %3180, %3181
  %3182 = sub nsw i32 %3175, %f8.v3.min_realized
  %3183 = sub nsw i32 %t2480, %f8.v3.min_realized
  %3184 = sext i32 %3175 to i64
  %3185 = sub nsw i64 %3184, %4
  %3186 = sext i32 %t2480 to i64
  %3187 = xor i64 %4, -1
  %3188 = add nsw i64 %3187, %3186
  %3189 = sub nsw i32 %3181, %f8.v3.min_realized
  %3190 = sub nsw i32 %t2502, %f8.v3.min_realized
  %3191 = sext i32 %3181 to i64
  %3192 = sub nsw i64 %3191, %4
  %3193 = sext i32 %t2502 to i64
  %3194 = xor i64 %4, -1
  %3195 = add nsw i64 %3194, %3193
  %narrow144 = sub nsw i32 %b793, %f129.v3.min_realized
  %3196 = sext i32 %narrow144 to i64
  %a906 = sub nsw i32 %b792, %99
  %3197 = icmp sgt i32 %101, %b792
  %f128.s0.v3.v3.epilogue.s = select i1 %3197, i32 %a906, i32 %102
  %3198 = ashr i32 %f128.s0.v3.v3.epilogue.s, 3
  %a907 = add nsw i32 %3198, 1
  %.inv128 = icmp slt i32 %f128.s0.v3.v3.epilogue.s, 0
  %3199 = select i1 %.inv128, i32 0, i32 %a907
  %3200 = icmp sgt i32 %3199, 0
  %3201 = shl nsw i32 %99, 1
  %3202 = and i32 %3201, 2
  %3203 = sub i32 %99, %f74.v3.min_realized
  %3204 = sub i32 %99, %f6.v3.min_realized
  %.not129 = icmp slt i32 %122, %3199
  %3205 = shl nsw i32 %b792, 1
  %3206 = and i32 %3205, 2
  %3207 = ashr i32 %b786, 4
  %t2557 = add nsw i32 %3206, %3207
  %3208 = sub i32 %b792, %f74.v3.min_realized
  %3209 = sub nsw i32 %b792, %f6.v3.min_realized
  %3210 = sub nsw i32 %t2557, %f7.v3.min_realized
  %3211 = sub nsw i32 %3207, %f7.v3.min_realized
  %3212 = add nsw i32 %95, -35
  %3213 = lshr i32 %3212, 2
  %3214 = and i32 %3213, 2
  %3215 = ashr i32 %3212, 4
  %t2579 = add nsw i32 %3214, %3215
  %3216 = sub nsw i32 %t2579, %f7.v3.min_realized
  %3217 = sub nsw i32 %3215, %f7.v3.min_realized
  %narrow130 = sub nsw i32 %3207, %f129.v3.min_realized
  %3218 = sext i32 %narrow130 to i64
  %3219 = xor i32 %f129.v3.min_realized, -1
  %narrow361 = add nsw i32 %t2557, %3219
  %3220 = sext i32 %narrow361 to i64
  %narrow132 = sub nsw i32 %3215, %f129.v3.min_realized
  %3221 = sext i32 %narrow132 to i64
  %3222 = xor i32 %f129.v3.min_realized, -1
  %narrow362 = add nsw i32 %t2579, %3222
  %3223 = sext i32 %narrow362 to i64
  %narrow135 = sub nsw i32 %b792, %f128.v3.min_realized
  %3224 = sext i32 %narrow135 to i64
  %a926 = sub nsw i32 %b801, %135
  %3225 = icmp sgt i32 %137, %b801
  %f127.s0.v3.v3.epilogue.s = select i1 %3225, i32 %a926, i32 %138
  %3226 = ashr i32 %f127.s0.v3.v3.epilogue.s, 3
  %a927 = add nsw i32 %3226, 1
  %.inv = icmp slt i32 %f127.s0.v3.v3.epilogue.s, 0
  %3227 = select i1 %.inv, i32 0, i32 %a927
  %3228 = icmp sgt i32 %3227, 0
  %3229 = shl nsw i32 %135, 1
  %3230 = and i32 %3229, 2
  %3231 = sub i32 %135, %f73.v3.min_realized
  %3232 = sub i32 %135, %f5.v3.min_realized
  %.not119 = icmp slt i32 %139, %3227
  %3233 = shl nsw i32 %b801, 1
  %3234 = and i32 %3233, 2
  %3235 = ashr i32 %b795, 3
  %t2634 = add nsw i32 %3234, %3235
  %3236 = sub i32 %b801, %f73.v3.min_realized
  %3237 = sub nsw i32 %b801, %f5.v3.min_realized
  %3238 = sub nsw i32 %t2634, %f6.v3.min_realized
  %3239 = sub nsw i32 %3235, %f6.v3.min_realized
  %3240 = add nsw i32 %95, -19
  %3241 = lshr i32 %3240, 1
  %3242 = and i32 %3241, 2
  %3243 = ashr i32 %3240, 3
  %t2656 = add nsw i32 %3242, %3243
  %3244 = sub nsw i32 %t2656, %f6.v3.min_realized
  %3245 = sub nsw i32 %3243, %f6.v3.min_realized
  %narrow120 = sub nsw i32 %3235, %f128.v3.min_realized
  %3246 = sext i32 %narrow120 to i64
  %3247 = xor i32 %f128.v3.min_realized, -1
  %narrow363 = add nsw i32 %t2634, %3247
  %3248 = sext i32 %narrow363 to i64
  %narrow122 = sub nsw i32 %3243, %f128.v3.min_realized
  %3249 = sext i32 %narrow122 to i64
  %3250 = xor i32 %f128.v3.min_realized, -1
  %narrow364 = add nsw i32 %t2656, %3250
  %3251 = sext i32 %narrow364 to i64
  %3252 = sext i32 %b801 to i64
  %3253 = sub nsw i64 %3252, %1396
  %a946 = sub nsw i32 %b806, %161
  %3254 = icmp sgt i32 %166, %b806
  %f126.s0.v3.v3.epilogue.s = select i1 %3254, i32 %a946, i32 %167
  %3255 = add nsw i32 %f126.s0.v3.v3.epilogue.s, 9
  %a947 = ashr i32 %3255, 3
  %3256 = icmp sgt i32 %f126.s0.v3.v3.epilogue.s, -2
  %3257 = select i1 %3256, i32 %a947, i32 0
  %3258 = icmp sgt i32 %3257, 0
  %3259 = sub i32 %161, %f72.v3.min_realized
  %3260 = sub i32 %161, %f4.v3.min_realized
  %3261 = and i32 %a1120, 2
  %3262 = xor i32 %f126.v3.min_realized, -1
  %3263 = sext i32 %3262 to i64
  %3264 = icmp sgt i32 %1952, %3257
  %3265 = and i32 %162, 2
  %3266 = ashr i32 %162, 2
  %t2711 = add nsw i32 %3266, %3265
  %3267 = sub i32 %b806, %f72.v3.min_realized
  %3268 = sub nsw i32 %b806, %f4.v3.min_realized
  %3269 = sub nsw i32 %t2711, %f5.v3.min_realized
  %3270 = sub nsw i32 %3266, %f5.v3.min_realized
  %3271 = add nsw i32 %95, -11
  %3272 = and i32 %3271, 2
  %3273 = ashr i32 %3271, 2
  %t2733 = add nsw i32 %3273, %3272
  %3274 = sub nsw i32 %t2733, %f5.v3.min_realized
  %3275 = sub nsw i32 %3273, %f5.v3.min_realized
  %3276 = sext i32 %3266 to i64
  %3277 = sub nsw i64 %3276, %1396
  %3278 = sext i32 %t2711 to i64
  %3279 = xor i64 %1396, -1
  %3280 = add nsw i64 %3279, %3278
  %3281 = sext i32 %3273 to i64
  %3282 = sub nsw i64 %3281, %1396
  %3283 = sext i32 %t2733 to i64
  %3284 = xor i64 %1396, -1
  %3285 = add nsw i64 %3284, %3283
  %3286 = sext i32 %b806 to i64
  %3287 = sub nsw i64 %3286, %1963
  %a970 = ashr i32 %197, 3
  %3288 = icmp sgt i32 %197, 7
  %3289 = select i1 %3288, i32 %a970, i32 0
  %3290 = icmp sgt i32 %3289, 0
  %3291 = mul nsw i64 %.pre-phi336, -4
  %3292 = fdiv float 1.000000e+00, %230
  %3293 = insertelement <4 x float> undef, float %3292, i64 0
  %3294 = shufflevector <4 x float> %3293, <4 x float> undef, <4 x i32> zeroinitializer
  %3295 = xor i32 %158, -1
  %3296 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %3297 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %3296
  %.neg245 = shufflevector <4 x i32> %3297, <4 x i32> poison, <4 x i32> zeroinitializer
  %3298 = shl nsw i32 %levels, 8
  %3299 = add nsw i32 %3298, -256
  %3300 = insertelement <4 x i32> undef, i32 %3299, i64 0
  %b978 = shufflevector <4 x i32> %3300, <4 x i32> undef, <4 x i32> zeroinitializer
  %3301 = ashr i32 %3135, 1
  %3302 = insertelement <4 x float> undef, float %beta, i64 0
  %3303 = shufflevector <4 x float> %3302, <4 x float> undef, <4 x i32> zeroinitializer
  %3304 = add nsw i32 %3148, %161
  %3305 = add nsw i32 %3141, %3301
  %3306 = icmp sgt i32 %2529, %3289
  %3307 = shl i32 %95, 1
  %3308 = and i32 %3307, 2
  %3309 = ashr i32 %95, 1
  %t2801 = add nsw i32 %3308, %3309
  %3310 = sub i32 %95, %f2.v3.min_realized
  %3311 = sub nsw i32 %t2801, %f4.v3.min_realized
  %3312 = sub nsw i32 %3309, %f4.v3.min_realized
  %3313 = add nsw i32 %95, -7
  %3314 = shl i32 %3313, 1
  %3315 = and i32 %3314, 2
  %3316 = ashr i32 %3313, 1
  %t2828 = add nsw i32 %3315, %3316
  %3317 = sub nsw i32 %t2828, %f4.v3.min_realized
  %3318 = sub nsw i32 %3316, %f4.v3.min_realized
  %t2826 = add i32 %3312, -4
  %t2825 = add i32 %3311, -4
  %3319 = sext i32 %3309 to i64
  %3320 = sub nsw i64 %3319, %1963
  %3321 = add nsw i64 %3320, -4
  %3322 = sext i32 %t2801 to i64
  %3323 = sub nsw i64 %3322, %1963
  %3324 = add nsw i64 %3323, -5
  %3325 = sext i32 %3316 to i64
  %3326 = sub nsw i64 %3325, %1963
  %3327 = sext i32 %t2828 to i64
  %3328 = xor i64 %1963, -1
  %3329 = add nsw i64 %3328, %3327
  %3330 = add nsw i64 %58, -8
  %3331 = add nsw i64 %3330, %62
  %3332 = sub nsw i64 %3331, %.pre-phi336
  %3333 = sub nsw i32 %input.min.0, %local_laplacian.min.0
  %3334 = add nsw i32 %3333, 7
  %a1006 = ashr i32 %3334, 3
  %3335 = icmp sgt i32 %3333, 0
  %3336 = select i1 %3335, i32 %a1006, i32 0
  %local_laplacian.s0.v3.v3.prologue = tail call i32 @llvm.smin.i32(i32 %3100, i32 %3336)
  %3337 = sub nsw i32 %.pre-phi338, %local_laplacian.min.0
  %3338 = ashr i32 %3337, 3
  %a1011 = add nsw i32 %3338, -1
  %3339 = tail call i32 @llvm.smin.i32(i32 %b1014.pre-phi, i32 %b816)
  %3340 = sub nsw i32 %3339, %local_laplacian.min.0
  %b1013 = ashr i32 %3340, 3
  %.not175 = icmp slt i32 %b1013, %3338
  %a1010 = select i1 %.not175, i32 %b1013, i32 %a1011
  %3341 = add nsw i32 %local_laplacian.extent.0, -1
  %b1012 = ashr i32 %3341, 3
  %3342 = tail call i32 @llvm.smin.i32(i32 %b1012, i32 %a1010)
  %b1009 = add nsw i32 %3342, 1
  %local_laplacian.s0.v3.v3.epilogue = tail call i32 @llvm.smax.i32(i32 %local_laplacian.s0.v3.v3.prologue, i32 %b1009)
  %3343 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, 0
  %3344 = icmp slt i32 %b1028, %3164
  %.not176 = icmp sgt i32 %local_laplacian.s0.v3.v3.prologue, %3342
  %a1021 = tail call i32 @llvm.smax.i32(i32 %b1146, i32 %b1028)
  %local_laplacian.s0.v5.prologue = tail call i32 @llvm.smin.i32(i32 %3164, i32 %a1021)
  %a1023 = tail call i32 @llvm.smin.i32(i32 %3164, i32 %.pre-phi353)
  %local_laplacian.s0.v5.epilogue = tail call i32 @llvm.smax.i32(i32 %a1023, i32 %local_laplacian.s0.v5.prologue)
  %3345 = icmp slt i32 %b1028, %local_laplacian.s0.v5.prologue
  %3346 = icmp slt i32 %local_laplacian.s0.v5.prologue, %a1023
  %3347 = icmp slt i32 %local_laplacian.s0.v5.epilogue, %3164
  %3348 = add nsw i64 %46, -1
  %b1032 = add nsw i64 %3348, %b1037
  %3349 = sub nsw i32 %local_laplacian.s0.v5.epilogue, %local_laplacian.s0.v5.prologue
  %3350 = sext i32 %local_laplacian.s0.v5.prologue to i64
  %3351 = mul nsw i64 %75, %3350
  %3352 = mul nsw i64 %3350, %55
  %3353 = sext i32 %local_laplacian.s0.v5.epilogue to i64
  %3354 = mul nsw i64 %75, %3353
  %3355 = icmp slt i32 %local_laplacian.s0.v3.v3.epilogue, %3100
  %3356 = sext i32 %3143 to i64
  %3357 = sext i32 %3310 to i64
  br label %"produce f12919"

"for local_laplacian.s0.v5":                      ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v5.preheader"
  %lsr.iv400 = phi ptr [ %scevgep399, %"for local_laplacian.s0.v5.preheader" ], [ %scevgep402, %"for local_laplacian.s0.v5" ]
  %lsr.iv397 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5.preheader" ], [ %lsr.iv.next398, %"for local_laplacian.s0.v5" ]
  %a883 = phi i32 [ %b1028, %"for local_laplacian.s0.v5.preheader" ], [ %3408, %"for local_laplacian.s0.v5" ]
  %a882 = tail call i32 @llvm.smin.i32(i32 %b885, i32 %a883)
  %3358 = tail call i32 @llvm.smax.i32(i32 %a882, i32 %b1146)
  %3359 = mul nsw i32 %3358, %input.stride.2
  %.scalar = add i32 %3359, %3114
  %.scalar326 = sub i32 %.scalar, %3112
  %3360 = insertelement <8 x i32> undef, i32 %.scalar326, i64 0
  %3361 = shufflevector <8 x i32> %3360, <8 x i32> poison, <8 x i32> zeroinitializer
  %3362 = add <8 x i32> %3361, %3130
  %3363 = shufflevector <8 x i32> %3362, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3364 = sext <4 x i32> %3363 to <4 x i64>
  %3365 = extractelement <4 x i64> %3364, i64 0
  %3366 = getelementptr inbounds i16, ptr %input.host, i64 %3365
  %3367 = load i16, ptr %3366, align 2, !tbaa !40
  %3368 = insertelement <8 x i16> undef, i16 %3367, i64 0
  %3369 = extractelement <4 x i64> %3364, i64 1
  %3370 = getelementptr inbounds i16, ptr %input.host, i64 %3369
  %3371 = load i16, ptr %3370, align 2, !tbaa !40
  %3372 = insertelement <8 x i16> %3368, i16 %3371, i64 1
  %3373 = extractelement <4 x i64> %3364, i64 2
  %3374 = getelementptr inbounds i16, ptr %input.host, i64 %3373
  %3375 = load i16, ptr %3374, align 2, !tbaa !40
  %3376 = insertelement <8 x i16> %3372, i16 %3375, i64 2
  %3377 = extractelement <4 x i64> %3364, i64 3
  %3378 = getelementptr inbounds i16, ptr %input.host, i64 %3377
  %3379 = load i16, ptr %3378, align 2, !tbaa !40
  %3380 = insertelement <8 x i16> %3376, i16 %3379, i64 3
  %3381 = shufflevector <8 x i32> %3362, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3382 = sext <4 x i32> %3381 to <4 x i64>
  %3383 = extractelement <4 x i64> %3382, i64 0
  %3384 = getelementptr inbounds i16, ptr %input.host, i64 %3383
  %3385 = load i16, ptr %3384, align 2, !tbaa !40
  %3386 = insertelement <8 x i16> %3380, i16 %3385, i64 4
  %3387 = extractelement <4 x i64> %3382, i64 1
  %3388 = getelementptr inbounds i16, ptr %input.host, i64 %3387
  %3389 = load i16, ptr %3388, align 2, !tbaa !40
  %3390 = insertelement <8 x i16> %3386, i16 %3389, i64 5
  %3391 = extractelement <4 x i64> %3382, i64 2
  %3392 = getelementptr inbounds i16, ptr %input.host, i64 %3391
  %3393 = load i16, ptr %3392, align 2, !tbaa !40
  %3394 = insertelement <8 x i16> %3390, i16 %3393, i64 6
  %3395 = extractelement <4 x i64> %3382, i64 3
  %3396 = getelementptr inbounds i16, ptr %input.host, i64 %3395
  %3397 = load i16, ptr %3396, align 2, !tbaa !40
  %3398 = insertelement <8 x i16> %3394, i16 %3397, i64 7
  %3399 = uitofp <8 x i16> %3398 to <8 x float>
  %3400 = fmul <8 x float> %3399, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3401 = fadd <8 x float> %3400, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %3402 = fmul <8 x float> %3133, %3401
  %a881 = fdiv <8 x float> %3402, %3127
  %3403 = fcmp olt <8 x float> %a881, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a880 = select <8 x i1> %3403, <8 x float> %a881, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3404 = fcmp ogt <8 x float> %a880, zeroinitializer
  %3405 = fmul <8 x float> %a880, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3406 = select <8 x i1> %3404, <8 x float> %3405, <8 x float> zeroinitializer
  %3407 = fptoui <8 x float> %3406 to <8 x i16>
  store <8 x i16> %3407, ptr %lsr.iv400, align 2, !tbaa !74
  %3408 = add nsw i32 %a883, 1
  %lsr.iv.next398 = add i32 %lsr.iv397, -1
  %scevgep402 = getelementptr i1, ptr %lsr.iv400, i64 %3103
  %.not149 = icmp eq i32 %lsr.iv.next398, 0
  br i1 %.not149, label %"end for local_laplacian.s0.v5", label %"for local_laplacian.s0.v5"

"end for local_laplacian.s0.v5":                  ; preds = %"for local_laplacian.s0.v5", %"for local_laplacian.s0.v3.v3"
  %3409 = add nuw nsw i32 %local_laplacian.s0.v3.v3, 1
  %.not148 = icmp eq i32 %3409, %3100
  br i1 %.not148, label %if.then.i253, label %"for local_laplacian.s0.v3.v3"

if.then.i265:                                     ; preds = %if.then.i268
  tail call void @halide_free(ptr %__user_context, ptr nonnull %128) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %154) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %193) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %222) #7
  br label %destructor_block.thread

"produce f12919":                                 ; preds = %if.then.i268, %if.then.i253
  %indvars.iv323 = phi i64 [ %indvars.iv.next324, %if.then.i268 ], [ 1, %if.then.i253 ]
  %lsr.iv374 = phi i64 [ %lsr.iv.next375, %if.then.i268 ], [ %3162, %if.then.i253 ]
  %lsr.iv367 = phi i64 [ %lsr.iv.next368, %if.then.i268 ], [ %3156, %if.then.i253 ]
  %lsr.iv349 = phi i64 [ %lsr.iv.next350, %if.then.i268 ], [ %3153, %if.then.i253 ]
  %lsr.iv329 = phi i32 [ %lsr.iv.next330, %if.then.i268 ], [ %3146, %if.then.i253 ]
  %lsr.iv319 = phi i1 [ %lsr.iv.next320, %if.then.i268 ], [ %3139, %if.then.i253 ]
  %3410 = select i1 %lsr.iv319, i32 2, i32 0
  %3411 = add nsw i64 %indvars.iv323, %3102
  %3412 = trunc i64 %3411 to i32
  %3413 = add i32 %3412, 13
  %3414 = and i32 %3413, 15
  %3415 = icmp eq i32 %3414, 15
  br i1 %3415, label %true_bb21, label %"produce f12832"

true_bb21:                                        ; preds = %"produce f12919"
  br i1 %3168, label %"for f129.s0.v3.v324.preheader", label %"end for f129.s0.v3.v325", !prof !5

"for f129.s0.v3.v324.preheader":                  ; preds = %true_bb21
  %3416 = trunc i64 %3411 to i32
  %3417 = add i32 %3416, 45
  %3418 = ashr i32 %3417, 4
  %3419 = shl nsw i32 %3418, 1
  %3420 = and i32 %3419, 2
  %3421 = ashr i32 %3417, 5
  %t2440 = add nsw i32 %3420, %3421
  %3422 = sub i32 %3418, %f75.v4.min_realized
  %3423 = mul i32 %3422, %228
  %3424 = add i32 %3171, %3423
  %3425 = add nsw i32 %t2440, %238
  %t2447 = mul nsw i32 %3425, %235
  %3426 = sub nsw i32 %3421, %237
  %t2449 = mul nsw i32 %3426, %235
  %3427 = sub i32 %3418, %f7.v4.min_realized
  %3428 = mul i32 %3427, %f7.stride.1
  %3429 = add i32 %3172, %3428
  %3430 = add i32 %t2440, %243
  %t2454 = mul nsw i32 %3430, %242
  %3431 = sub nsw i32 %3421, %f8.v4.min_realized
  %t2459 = mul nsw i32 %3431, %242
  %3432 = sext i32 %t2449 to i64
  %3433 = add nsw i64 %3432, -1
  %3434 = sext i32 %t2447 to i64
  %3435 = add nsw i64 %3434, -1
  %narrow146 = sub nsw i32 %3418, %225
  %3436 = sext i32 %narrow146 to i64
  %3437 = mul nsw i64 %250, %3436
  %3438 = add nsw i64 %3437, %.neg212
  br label %"for f129.s0.v3.v324"

"for f129.s0.v3.v324":                            ; preds = %"for f129.s0.v3.v324.preheader", %"for f129.s0.v3.v324"
  %lsr.iv285 = phi i32 [ %lsr.iv.next286, %"for f129.s0.v3.v324" ], [ 0, %"for f129.s0.v3.v324.preheader" ]
  %lsr.iv = phi i32 [ %lsr.iv.next, %"for f129.s0.v3.v324" ], [ %a887, %"for f129.s0.v3.v324.preheader" ]
  %3439 = add i32 %lsr.iv285, %106
  %3440 = ashr i32 %3439, 1
  %t2441 = add nsw i32 %3440, %3170
  %3441 = add i32 %3424, %lsr.iv285
  %3442 = sext i32 %3441 to i64
  %3443 = getelementptr inbounds float, ptr %f75.host, i64 %3442
  %3444 = load <4 x float>, ptr %3443, align 4, !tbaa !13
  %3445 = add nsw i64 %3442, 4
  %3446 = getelementptr inbounds float, ptr %f75.host, i64 %3445
  %3447 = load <4 x float>, ptr %3446, align 4, !tbaa !13
  %3448 = shufflevector <4 x float> %3444, <4 x float> %3447, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2443 = fmul <4 x float> %232, %3448
  %a888 = fptosi <4 x float> %t2443 to <4 x i32>
  %a891 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a888)
  %3449 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a891, <4 x i32> zeroinitializer)
  %3450 = sitofp <4 x i32> %3449 to <4 x float>
  %t2445 = fsub <4 x float> %t2443, %3450
  %3451 = add i32 %3429, %lsr.iv285
  %t2452 = sub nsw <4 x i32> %3449, %241
  %t2456 = mul nsw <4 x i32> %t2452, %245
  %3452 = add nsw <4 x i32> %t2452, <i32 1, i32 1, i32 1, i32 1>
  %t2462 = mul nsw <4 x i32> %3452, %245
  %3453 = add i32 %3439, 1
  %3454 = shl i32 %3453, 1
  %3455 = and i32 %3454, 2
  %3456 = ashr i32 %3453, 1
  %t2463 = add nsw i32 %3455, %3456
  %3457 = shufflevector <4 x float> %3444, <4 x float> %3447, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2464 = fmul <4 x float> %232, %3457
  %a892 = fptosi <4 x float> %t2464 to <4 x i32>
  %a895 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a892)
  %3458 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a895, <4 x i32> zeroinitializer)
  %3459 = sitofp <4 x i32> %3458 to <4 x float>
  %t2466 = fsub <4 x float> %t2464, %3459
  %t2469 = sub nsw <4 x i32> %3458, %241
  %t2472 = mul nsw <4 x i32> %t2469, %245
  %3460 = add nsw <4 x i32> %t2469, <i32 1, i32 1, i32 1, i32 1>
  %t2477 = mul nsw <4 x i32> %3460, %245
  %3461 = sub nsw i32 %3440, %f8.v3.min_realized
  %3462 = add nsw i32 %3461, %t2459
  %3463 = insertelement <4 x i32> undef, i32 %3462, i64 0
  %3464 = shufflevector <4 x i32> %3463, <4 x i32> undef, <4 x i32> zeroinitializer
  %3465 = add nsw <4 x i32> %3464, <i32 0, i32 1, i32 2, i32 3>
  %3466 = add nsw <4 x i32> %t2462, %3465
  %3467 = sext <4 x i32> %3466 to <4 x i64>
  %3468 = extractelement <4 x i64> %3467, i64 0
  %3469 = getelementptr inbounds float, ptr %f8.host, i64 %3468
  %3470 = load float, ptr %3469, align 4, !tbaa !36
  %3471 = insertelement <4 x float> undef, float %3470, i64 0
  %3472 = extractelement <4 x i64> %3467, i64 1
  %3473 = getelementptr inbounds float, ptr %f8.host, i64 %3472
  %3474 = load float, ptr %3473, align 4, !tbaa !36
  %3475 = insertelement <4 x float> %3471, float %3474, i64 1
  %3476 = extractelement <4 x i64> %3467, i64 2
  %3477 = getelementptr inbounds float, ptr %f8.host, i64 %3476
  %3478 = load float, ptr %3477, align 4, !tbaa !36
  %3479 = insertelement <4 x float> %3475, float %3478, i64 2
  %3480 = extractelement <4 x i64> %3467, i64 3
  %3481 = getelementptr inbounds float, ptr %f8.host, i64 %3480
  %3482 = load float, ptr %3481, align 4, !tbaa !36
  %3483 = insertelement <4 x float> %3479, float %3482, i64 3
  %3484 = fmul <4 x float> %3483, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3485 = sub nsw i32 %t2441, %f8.v3.min_realized
  %3486 = add nsw i32 %3485, %t2459
  %3487 = insertelement <4 x i32> undef, i32 %3486, i64 0
  %3488 = shufflevector <4 x i32> %3487, <4 x i32> undef, <4 x i32> zeroinitializer
  %3489 = add <4 x i32> %3488, <i32 -1, i32 0, i32 1, i32 2>
  %3490 = add <4 x i32> %3489, %t2462
  %3491 = sext <4 x i32> %3490 to <4 x i64>
  %3492 = extractelement <4 x i64> %3491, i64 0
  %3493 = getelementptr inbounds float, ptr %f8.host, i64 %3492
  %3494 = load float, ptr %3493, align 4, !tbaa !36
  %3495 = insertelement <4 x float> undef, float %3494, i64 0
  %3496 = extractelement <4 x i64> %3491, i64 1
  %3497 = getelementptr inbounds float, ptr %f8.host, i64 %3496
  %3498 = load float, ptr %3497, align 4, !tbaa !36
  %3499 = insertelement <4 x float> %3495, float %3498, i64 1
  %3500 = extractelement <4 x i64> %3491, i64 2
  %3501 = getelementptr inbounds float, ptr %f8.host, i64 %3500
  %3502 = load float, ptr %3501, align 4, !tbaa !36
  %3503 = insertelement <4 x float> %3499, float %3502, i64 2
  %3504 = extractelement <4 x i64> %3491, i64 3
  %3505 = getelementptr inbounds float, ptr %f8.host, i64 %3504
  %3506 = load float, ptr %3505, align 4, !tbaa !36
  %3507 = insertelement <4 x float> %3503, float %3506, i64 3
  %3508 = fmul <4 x float> %3507, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3509 = fadd <4 x float> %3484, %3508
  %3510 = fmul <4 x float> %3509, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3511 = add nsw i32 %3461, %t2454
  %3512 = insertelement <4 x i32> undef, i32 %3511, i64 0
  %3513 = shufflevector <4 x i32> %3512, <4 x i32> undef, <4 x i32> zeroinitializer
  %3514 = add nsw <4 x i32> %3513, <i32 0, i32 1, i32 2, i32 3>
  %3515 = add nsw <4 x i32> %t2462, %3514
  %3516 = sext <4 x i32> %3515 to <4 x i64>
  %3517 = extractelement <4 x i64> %3516, i64 0
  %3518 = getelementptr inbounds float, ptr %f8.host, i64 %3517
  %3519 = load float, ptr %3518, align 4, !tbaa !36
  %3520 = insertelement <4 x float> undef, float %3519, i64 0
  %3521 = extractelement <4 x i64> %3516, i64 1
  %3522 = getelementptr inbounds float, ptr %f8.host, i64 %3521
  %3523 = load float, ptr %3522, align 4, !tbaa !36
  %3524 = insertelement <4 x float> %3520, float %3523, i64 1
  %3525 = extractelement <4 x i64> %3516, i64 2
  %3526 = getelementptr inbounds float, ptr %f8.host, i64 %3525
  %3527 = load float, ptr %3526, align 4, !tbaa !36
  %3528 = insertelement <4 x float> %3524, float %3527, i64 2
  %3529 = extractelement <4 x i64> %3516, i64 3
  %3530 = getelementptr inbounds float, ptr %f8.host, i64 %3529
  %3531 = load float, ptr %3530, align 4, !tbaa !36
  %3532 = insertelement <4 x float> %3528, float %3531, i64 3
  %3533 = fmul <4 x float> %3532, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3534 = add nsw i32 %3485, %t2454
  %3535 = insertelement <4 x i32> undef, i32 %3534, i64 0
  %3536 = shufflevector <4 x i32> %3535, <4 x i32> undef, <4 x i32> zeroinitializer
  %3537 = add <4 x i32> %3536, <i32 -1, i32 0, i32 1, i32 2>
  %3538 = add <4 x i32> %3537, %t2462
  %3539 = sext <4 x i32> %3538 to <4 x i64>
  %3540 = extractelement <4 x i64> %3539, i64 0
  %3541 = getelementptr inbounds float, ptr %f8.host, i64 %3540
  %3542 = load float, ptr %3541, align 4, !tbaa !36
  %3543 = insertelement <4 x float> undef, float %3542, i64 0
  %3544 = extractelement <4 x i64> %3539, i64 1
  %3545 = getelementptr inbounds float, ptr %f8.host, i64 %3544
  %3546 = load float, ptr %3545, align 4, !tbaa !36
  %3547 = insertelement <4 x float> %3543, float %3546, i64 1
  %3548 = extractelement <4 x i64> %3539, i64 2
  %3549 = getelementptr inbounds float, ptr %f8.host, i64 %3548
  %3550 = load float, ptr %3549, align 4, !tbaa !36
  %3551 = insertelement <4 x float> %3547, float %3550, i64 2
  %3552 = extractelement <4 x i64> %3539, i64 3
  %3553 = getelementptr inbounds float, ptr %f8.host, i64 %3552
  %3554 = load float, ptr %3553, align 4, !tbaa !36
  %3555 = insertelement <4 x float> %3551, float %3554, i64 3
  %3556 = fmul <4 x float> %3555, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3557 = fadd <4 x float> %3533, %3556
  %3558 = fmul <4 x float> %3557, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3559 = fadd <4 x float> %3510, %3558
  %3560 = mul nsw <4 x i32> %3452, %248
  %3561 = insertelement <4 x i32> undef, i32 %3451, i64 0
  %3562 = shufflevector <4 x i32> %3561, <4 x i32> undef, <4 x i32> zeroinitializer
  %3563 = add nsw <4 x i32> %3562, <i32 0, i32 2, i32 4, i32 6>
  %3564 = add nsw <4 x i32> %3560, %3563
  %3565 = sext <4 x i32> %3564 to <4 x i64>
  %3566 = extractelement <4 x i64> %3565, i64 0
  %3567 = getelementptr inbounds float, ptr %f7.host, i64 %3566
  %3568 = load float, ptr %3567, align 4, !tbaa !54
  %3569 = insertelement <4 x float> undef, float %3568, i64 0
  %3570 = extractelement <4 x i64> %3565, i64 1
  %3571 = getelementptr inbounds float, ptr %f7.host, i64 %3570
  %3572 = load float, ptr %3571, align 4, !tbaa !54
  %3573 = insertelement <4 x float> %3569, float %3572, i64 1
  %3574 = extractelement <4 x i64> %3565, i64 2
  %3575 = getelementptr inbounds float, ptr %f7.host, i64 %3574
  %3576 = load float, ptr %3575, align 4, !tbaa !54
  %3577 = insertelement <4 x float> %3573, float %3576, i64 2
  %3578 = extractelement <4 x i64> %3565, i64 3
  %3579 = getelementptr inbounds float, ptr %f7.host, i64 %3578
  %3580 = load float, ptr %3579, align 4, !tbaa !54
  %3581 = insertelement <4 x float> %3577, float %3580, i64 3
  %3582 = fsub <4 x float> %3581, %3559
  %3583 = fmul <4 x float> %t2445, %3582
  %3584 = add nsw <4 x i32> %t2456, %3465
  %3585 = sext <4 x i32> %3584 to <4 x i64>
  %3586 = extractelement <4 x i64> %3585, i64 0
  %3587 = getelementptr inbounds float, ptr %f8.host, i64 %3586
  %3588 = load float, ptr %3587, align 4, !tbaa !36
  %3589 = insertelement <4 x float> undef, float %3588, i64 0
  %3590 = extractelement <4 x i64> %3585, i64 1
  %3591 = getelementptr inbounds float, ptr %f8.host, i64 %3590
  %3592 = load float, ptr %3591, align 4, !tbaa !36
  %3593 = insertelement <4 x float> %3589, float %3592, i64 1
  %3594 = extractelement <4 x i64> %3585, i64 2
  %3595 = getelementptr inbounds float, ptr %f8.host, i64 %3594
  %3596 = load float, ptr %3595, align 4, !tbaa !36
  %3597 = insertelement <4 x float> %3593, float %3596, i64 2
  %3598 = extractelement <4 x i64> %3585, i64 3
  %3599 = getelementptr inbounds float, ptr %f8.host, i64 %3598
  %3600 = load float, ptr %3599, align 4, !tbaa !36
  %3601 = insertelement <4 x float> %3597, float %3600, i64 3
  %3602 = fmul <4 x float> %3601, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3603 = add <4 x i32> %3489, %t2456
  %3604 = sext <4 x i32> %3603 to <4 x i64>
  %3605 = extractelement <4 x i64> %3604, i64 0
  %3606 = getelementptr inbounds float, ptr %f8.host, i64 %3605
  %3607 = load float, ptr %3606, align 4, !tbaa !36
  %3608 = insertelement <4 x float> undef, float %3607, i64 0
  %3609 = extractelement <4 x i64> %3604, i64 1
  %3610 = getelementptr inbounds float, ptr %f8.host, i64 %3609
  %3611 = load float, ptr %3610, align 4, !tbaa !36
  %3612 = insertelement <4 x float> %3608, float %3611, i64 1
  %3613 = extractelement <4 x i64> %3604, i64 2
  %3614 = getelementptr inbounds float, ptr %f8.host, i64 %3613
  %3615 = load float, ptr %3614, align 4, !tbaa !36
  %3616 = insertelement <4 x float> %3612, float %3615, i64 2
  %3617 = extractelement <4 x i64> %3604, i64 3
  %3618 = getelementptr inbounds float, ptr %f8.host, i64 %3617
  %3619 = load float, ptr %3618, align 4, !tbaa !36
  %3620 = insertelement <4 x float> %3616, float %3619, i64 3
  %3621 = fmul <4 x float> %3620, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3622 = fadd <4 x float> %3602, %3621
  %3623 = fmul <4 x float> %3622, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3624 = add nsw <4 x i32> %t2456, %3514
  %3625 = sext <4 x i32> %3624 to <4 x i64>
  %3626 = extractelement <4 x i64> %3625, i64 0
  %3627 = getelementptr inbounds float, ptr %f8.host, i64 %3626
  %3628 = load float, ptr %3627, align 4, !tbaa !36
  %3629 = insertelement <4 x float> undef, float %3628, i64 0
  %3630 = extractelement <4 x i64> %3625, i64 1
  %3631 = getelementptr inbounds float, ptr %f8.host, i64 %3630
  %3632 = load float, ptr %3631, align 4, !tbaa !36
  %3633 = insertelement <4 x float> %3629, float %3632, i64 1
  %3634 = extractelement <4 x i64> %3625, i64 2
  %3635 = getelementptr inbounds float, ptr %f8.host, i64 %3634
  %3636 = load float, ptr %3635, align 4, !tbaa !36
  %3637 = insertelement <4 x float> %3633, float %3636, i64 2
  %3638 = extractelement <4 x i64> %3625, i64 3
  %3639 = getelementptr inbounds float, ptr %f8.host, i64 %3638
  %3640 = load float, ptr %3639, align 4, !tbaa !36
  %3641 = insertelement <4 x float> %3637, float %3640, i64 3
  %3642 = fmul <4 x float> %3641, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3643 = add <4 x i32> %3537, %t2456
  %3644 = sext <4 x i32> %3643 to <4 x i64>
  %3645 = extractelement <4 x i64> %3644, i64 0
  %3646 = getelementptr inbounds float, ptr %f8.host, i64 %3645
  %3647 = load float, ptr %3646, align 4, !tbaa !36
  %3648 = insertelement <4 x float> undef, float %3647, i64 0
  %3649 = extractelement <4 x i64> %3644, i64 1
  %3650 = getelementptr inbounds float, ptr %f8.host, i64 %3649
  %3651 = load float, ptr %3650, align 4, !tbaa !36
  %3652 = insertelement <4 x float> %3648, float %3651, i64 1
  %3653 = extractelement <4 x i64> %3644, i64 2
  %3654 = getelementptr inbounds float, ptr %f8.host, i64 %3653
  %3655 = load float, ptr %3654, align 4, !tbaa !36
  %3656 = insertelement <4 x float> %3652, float %3655, i64 2
  %3657 = extractelement <4 x i64> %3644, i64 3
  %3658 = getelementptr inbounds float, ptr %f8.host, i64 %3657
  %3659 = load float, ptr %3658, align 4, !tbaa !36
  %3660 = insertelement <4 x float> %3656, float %3659, i64 3
  %3661 = fmul <4 x float> %3660, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3662 = fadd <4 x float> %3642, %3661
  %3663 = fmul <4 x float> %3662, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3664 = fadd <4 x float> %3623, %3663
  %3665 = mul nsw <4 x i32> %t2452, %248
  %3666 = add nsw <4 x i32> %3665, %3563
  %3667 = sext <4 x i32> %3666 to <4 x i64>
  %3668 = extractelement <4 x i64> %3667, i64 0
  %3669 = getelementptr inbounds float, ptr %f7.host, i64 %3668
  %3670 = load float, ptr %3669, align 4, !tbaa !54
  %3671 = insertelement <4 x float> undef, float %3670, i64 0
  %3672 = extractelement <4 x i64> %3667, i64 1
  %3673 = getelementptr inbounds float, ptr %f7.host, i64 %3672
  %3674 = load float, ptr %3673, align 4, !tbaa !54
  %3675 = insertelement <4 x float> %3671, float %3674, i64 1
  %3676 = extractelement <4 x i64> %3667, i64 2
  %3677 = getelementptr inbounds float, ptr %f7.host, i64 %3676
  %3678 = load float, ptr %3677, align 4, !tbaa !54
  %3679 = insertelement <4 x float> %3675, float %3678, i64 2
  %3680 = extractelement <4 x i64> %3667, i64 3
  %3681 = getelementptr inbounds float, ptr %f7.host, i64 %3680
  %3682 = load float, ptr %3681, align 4, !tbaa !54
  %3683 = insertelement <4 x float> %3679, float %3682, i64 3
  %3684 = fsub <4 x float> %3683, %3664
  %3685 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2445
  %3686 = fmul <4 x float> %3685, %3684
  %3687 = fadd <4 x float> %3583, %3686
  %3688 = sext i32 %3440 to i64
  %3689 = sub nsw i64 %3688, %4
  %3690 = add nsw i64 %3689, %3432
  %3691 = getelementptr inbounds float, ptr %f130.host, i64 %3690
  %3692 = load <4 x float>, ptr %3691, align 4, !tbaa !38
  %3693 = fmul <4 x float> %3692, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3694 = sext i32 %t2441 to i64
  %3695 = sub nsw i64 %3694, %4
  %3696 = add nsw i64 %3433, %3695
  %3697 = getelementptr inbounds float, ptr %f130.host, i64 %3696
  %3698 = load <4 x float>, ptr %3697, align 4, !tbaa !38
  %3699 = fmul <4 x float> %3698, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3700 = fadd <4 x float> %3693, %3699
  %3701 = fmul <4 x float> %3700, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3702 = add nsw i64 %3689, %3434
  %3703 = getelementptr inbounds float, ptr %f130.host, i64 %3702
  %3704 = load <4 x float>, ptr %3703, align 4, !tbaa !38
  %3705 = fmul <4 x float> %3704, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3706 = add nsw i64 %3435, %3695
  %3707 = getelementptr inbounds float, ptr %f130.host, i64 %3706
  %3708 = load <4 x float>, ptr %3707, align 4, !tbaa !38
  %3709 = fmul <4 x float> %3708, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3710 = fadd <4 x float> %3705, %3709
  %3711 = fmul <4 x float> %3710, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3712 = fadd <4 x float> %3701, %3711
  %3713 = fadd <4 x float> %3687, %3712
  %3714 = sub nsw i32 %3456, %f8.v3.min_realized
  %3715 = add nsw i32 %3714, %t2459
  %3716 = insertelement <4 x i32> undef, i32 %3715, i64 0
  %3717 = shufflevector <4 x i32> %3716, <4 x i32> undef, <4 x i32> zeroinitializer
  %3718 = add nsw <4 x i32> %3717, <i32 0, i32 1, i32 2, i32 3>
  %3719 = add nsw <4 x i32> %t2477, %3718
  %3720 = sext <4 x i32> %3719 to <4 x i64>
  %3721 = extractelement <4 x i64> %3720, i64 0
  %3722 = getelementptr inbounds float, ptr %f8.host, i64 %3721
  %3723 = load float, ptr %3722, align 4, !tbaa !36
  %3724 = insertelement <4 x float> undef, float %3723, i64 0
  %3725 = extractelement <4 x i64> %3720, i64 1
  %3726 = getelementptr inbounds float, ptr %f8.host, i64 %3725
  %3727 = load float, ptr %3726, align 4, !tbaa !36
  %3728 = insertelement <4 x float> %3724, float %3727, i64 1
  %3729 = extractelement <4 x i64> %3720, i64 2
  %3730 = getelementptr inbounds float, ptr %f8.host, i64 %3729
  %3731 = load float, ptr %3730, align 4, !tbaa !36
  %3732 = insertelement <4 x float> %3728, float %3731, i64 2
  %3733 = extractelement <4 x i64> %3720, i64 3
  %3734 = getelementptr inbounds float, ptr %f8.host, i64 %3733
  %3735 = load float, ptr %3734, align 4, !tbaa !36
  %3736 = insertelement <4 x float> %3732, float %3735, i64 3
  %3737 = fmul <4 x float> %3736, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3738 = sub nsw i32 %t2463, %f8.v3.min_realized
  %3739 = add nsw i32 %3738, %t2459
  %3740 = insertelement <4 x i32> undef, i32 %3739, i64 0
  %3741 = shufflevector <4 x i32> %3740, <4 x i32> undef, <4 x i32> zeroinitializer
  %3742 = add <4 x i32> %3741, <i32 -1, i32 0, i32 1, i32 2>
  %3743 = add <4 x i32> %3742, %t2477
  %3744 = sext <4 x i32> %3743 to <4 x i64>
  %3745 = extractelement <4 x i64> %3744, i64 0
  %3746 = getelementptr inbounds float, ptr %f8.host, i64 %3745
  %3747 = load float, ptr %3746, align 4, !tbaa !36
  %3748 = insertelement <4 x float> undef, float %3747, i64 0
  %3749 = extractelement <4 x i64> %3744, i64 1
  %3750 = getelementptr inbounds float, ptr %f8.host, i64 %3749
  %3751 = load float, ptr %3750, align 4, !tbaa !36
  %3752 = insertelement <4 x float> %3748, float %3751, i64 1
  %3753 = extractelement <4 x i64> %3744, i64 2
  %3754 = getelementptr inbounds float, ptr %f8.host, i64 %3753
  %3755 = load float, ptr %3754, align 4, !tbaa !36
  %3756 = insertelement <4 x float> %3752, float %3755, i64 2
  %3757 = extractelement <4 x i64> %3744, i64 3
  %3758 = getelementptr inbounds float, ptr %f8.host, i64 %3757
  %3759 = load float, ptr %3758, align 4, !tbaa !36
  %3760 = insertelement <4 x float> %3756, float %3759, i64 3
  %3761 = fmul <4 x float> %3760, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3762 = fadd <4 x float> %3737, %3761
  %3763 = fmul <4 x float> %3762, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3764 = add nsw i32 %3714, %t2454
  %3765 = insertelement <4 x i32> undef, i32 %3764, i64 0
  %3766 = shufflevector <4 x i32> %3765, <4 x i32> undef, <4 x i32> zeroinitializer
  %3767 = add nsw <4 x i32> %3766, <i32 0, i32 1, i32 2, i32 3>
  %3768 = add nsw <4 x i32> %t2477, %3767
  %3769 = sext <4 x i32> %3768 to <4 x i64>
  %3770 = extractelement <4 x i64> %3769, i64 0
  %3771 = getelementptr inbounds float, ptr %f8.host, i64 %3770
  %3772 = load float, ptr %3771, align 4, !tbaa !36
  %3773 = insertelement <4 x float> undef, float %3772, i64 0
  %3774 = extractelement <4 x i64> %3769, i64 1
  %3775 = getelementptr inbounds float, ptr %f8.host, i64 %3774
  %3776 = load float, ptr %3775, align 4, !tbaa !36
  %3777 = insertelement <4 x float> %3773, float %3776, i64 1
  %3778 = extractelement <4 x i64> %3769, i64 2
  %3779 = getelementptr inbounds float, ptr %f8.host, i64 %3778
  %3780 = load float, ptr %3779, align 4, !tbaa !36
  %3781 = insertelement <4 x float> %3777, float %3780, i64 2
  %3782 = extractelement <4 x i64> %3769, i64 3
  %3783 = getelementptr inbounds float, ptr %f8.host, i64 %3782
  %3784 = load float, ptr %3783, align 4, !tbaa !36
  %3785 = insertelement <4 x float> %3781, float %3784, i64 3
  %3786 = fmul <4 x float> %3785, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3787 = add nsw i32 %3738, %t2454
  %3788 = insertelement <4 x i32> undef, i32 %3787, i64 0
  %3789 = shufflevector <4 x i32> %3788, <4 x i32> undef, <4 x i32> zeroinitializer
  %3790 = add <4 x i32> %3789, <i32 -1, i32 0, i32 1, i32 2>
  %3791 = add <4 x i32> %3790, %t2477
  %3792 = sext <4 x i32> %3791 to <4 x i64>
  %3793 = extractelement <4 x i64> %3792, i64 0
  %3794 = getelementptr inbounds float, ptr %f8.host, i64 %3793
  %3795 = load float, ptr %3794, align 4, !tbaa !36
  %3796 = insertelement <4 x float> undef, float %3795, i64 0
  %3797 = extractelement <4 x i64> %3792, i64 1
  %3798 = getelementptr inbounds float, ptr %f8.host, i64 %3797
  %3799 = load float, ptr %3798, align 4, !tbaa !36
  %3800 = insertelement <4 x float> %3796, float %3799, i64 1
  %3801 = extractelement <4 x i64> %3792, i64 2
  %3802 = getelementptr inbounds float, ptr %f8.host, i64 %3801
  %3803 = load float, ptr %3802, align 4, !tbaa !36
  %3804 = insertelement <4 x float> %3800, float %3803, i64 2
  %3805 = extractelement <4 x i64> %3792, i64 3
  %3806 = getelementptr inbounds float, ptr %f8.host, i64 %3805
  %3807 = load float, ptr %3806, align 4, !tbaa !36
  %3808 = insertelement <4 x float> %3804, float %3807, i64 3
  %3809 = fmul <4 x float> %3808, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3810 = fadd <4 x float> %3786, %3809
  %3811 = fmul <4 x float> %3810, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3812 = fadd <4 x float> %3763, %3811
  %3813 = mul nsw <4 x i32> %3460, %248
  %3814 = add i32 %3451, 1
  %3815 = insertelement <4 x i32> undef, i32 %3814, i64 0
  %3816 = shufflevector <4 x i32> %3815, <4 x i32> undef, <4 x i32> zeroinitializer
  %3817 = add nsw <4 x i32> %3816, <i32 0, i32 2, i32 4, i32 6>
  %3818 = add nsw <4 x i32> %3813, %3817
  %3819 = sext <4 x i32> %3818 to <4 x i64>
  %3820 = extractelement <4 x i64> %3819, i64 0
  %3821 = getelementptr inbounds float, ptr %f7.host, i64 %3820
  %3822 = load float, ptr %3821, align 4, !tbaa !54
  %3823 = insertelement <4 x float> undef, float %3822, i64 0
  %3824 = extractelement <4 x i64> %3819, i64 1
  %3825 = getelementptr inbounds float, ptr %f7.host, i64 %3824
  %3826 = load float, ptr %3825, align 4, !tbaa !54
  %3827 = insertelement <4 x float> %3823, float %3826, i64 1
  %3828 = extractelement <4 x i64> %3819, i64 2
  %3829 = getelementptr inbounds float, ptr %f7.host, i64 %3828
  %3830 = load float, ptr %3829, align 4, !tbaa !54
  %3831 = insertelement <4 x float> %3827, float %3830, i64 2
  %3832 = extractelement <4 x i64> %3819, i64 3
  %3833 = getelementptr inbounds float, ptr %f7.host, i64 %3832
  %3834 = load float, ptr %3833, align 4, !tbaa !54
  %3835 = insertelement <4 x float> %3831, float %3834, i64 3
  %3836 = fsub <4 x float> %3835, %3812
  %3837 = fmul <4 x float> %t2466, %3836
  %3838 = add nsw <4 x i32> %t2472, %3718
  %3839 = sext <4 x i32> %3838 to <4 x i64>
  %3840 = extractelement <4 x i64> %3839, i64 0
  %3841 = getelementptr inbounds float, ptr %f8.host, i64 %3840
  %3842 = load float, ptr %3841, align 4, !tbaa !36
  %3843 = insertelement <4 x float> undef, float %3842, i64 0
  %3844 = extractelement <4 x i64> %3839, i64 1
  %3845 = getelementptr inbounds float, ptr %f8.host, i64 %3844
  %3846 = load float, ptr %3845, align 4, !tbaa !36
  %3847 = insertelement <4 x float> %3843, float %3846, i64 1
  %3848 = extractelement <4 x i64> %3839, i64 2
  %3849 = getelementptr inbounds float, ptr %f8.host, i64 %3848
  %3850 = load float, ptr %3849, align 4, !tbaa !36
  %3851 = insertelement <4 x float> %3847, float %3850, i64 2
  %3852 = extractelement <4 x i64> %3839, i64 3
  %3853 = getelementptr inbounds float, ptr %f8.host, i64 %3852
  %3854 = load float, ptr %3853, align 4, !tbaa !36
  %3855 = insertelement <4 x float> %3851, float %3854, i64 3
  %3856 = fmul <4 x float> %3855, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3857 = add <4 x i32> %t2472, %3741
  %3858 = add <4 x i32> %3857, <i32 -1, i32 0, i32 1, i32 2>
  %3859 = sext <4 x i32> %3858 to <4 x i64>
  %3860 = extractelement <4 x i64> %3859, i64 0
  %3861 = getelementptr inbounds float, ptr %f8.host, i64 %3860
  %3862 = load float, ptr %3861, align 4, !tbaa !36
  %3863 = insertelement <4 x float> undef, float %3862, i64 0
  %3864 = extractelement <4 x i64> %3859, i64 1
  %3865 = getelementptr inbounds float, ptr %f8.host, i64 %3864
  %3866 = load float, ptr %3865, align 4, !tbaa !36
  %3867 = insertelement <4 x float> %3863, float %3866, i64 1
  %3868 = extractelement <4 x i64> %3859, i64 2
  %3869 = getelementptr inbounds float, ptr %f8.host, i64 %3868
  %3870 = load float, ptr %3869, align 4, !tbaa !36
  %3871 = insertelement <4 x float> %3867, float %3870, i64 2
  %3872 = extractelement <4 x i64> %3859, i64 3
  %3873 = getelementptr inbounds float, ptr %f8.host, i64 %3872
  %3874 = load float, ptr %3873, align 4, !tbaa !36
  %3875 = insertelement <4 x float> %3871, float %3874, i64 3
  %3876 = fmul <4 x float> %3875, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3877 = fadd <4 x float> %3856, %3876
  %3878 = fmul <4 x float> %3877, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3879 = add nsw <4 x i32> %t2472, %3767
  %3880 = sext <4 x i32> %3879 to <4 x i64>
  %3881 = extractelement <4 x i64> %3880, i64 0
  %3882 = getelementptr inbounds float, ptr %f8.host, i64 %3881
  %3883 = load float, ptr %3882, align 4, !tbaa !36
  %3884 = insertelement <4 x float> undef, float %3883, i64 0
  %3885 = extractelement <4 x i64> %3880, i64 1
  %3886 = getelementptr inbounds float, ptr %f8.host, i64 %3885
  %3887 = load float, ptr %3886, align 4, !tbaa !36
  %3888 = insertelement <4 x float> %3884, float %3887, i64 1
  %3889 = extractelement <4 x i64> %3880, i64 2
  %3890 = getelementptr inbounds float, ptr %f8.host, i64 %3889
  %3891 = load float, ptr %3890, align 4, !tbaa !36
  %3892 = insertelement <4 x float> %3888, float %3891, i64 2
  %3893 = extractelement <4 x i64> %3880, i64 3
  %3894 = getelementptr inbounds float, ptr %f8.host, i64 %3893
  %3895 = load float, ptr %3894, align 4, !tbaa !36
  %3896 = insertelement <4 x float> %3892, float %3895, i64 3
  %3897 = fmul <4 x float> %3896, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3898 = add <4 x i32> %t2472, %3789
  %3899 = add <4 x i32> %3898, <i32 -1, i32 0, i32 1, i32 2>
  %3900 = sext <4 x i32> %3899 to <4 x i64>
  %3901 = extractelement <4 x i64> %3900, i64 0
  %3902 = getelementptr inbounds float, ptr %f8.host, i64 %3901
  %3903 = load float, ptr %3902, align 4, !tbaa !36
  %3904 = insertelement <4 x float> undef, float %3903, i64 0
  %3905 = extractelement <4 x i64> %3900, i64 1
  %3906 = getelementptr inbounds float, ptr %f8.host, i64 %3905
  %3907 = load float, ptr %3906, align 4, !tbaa !36
  %3908 = insertelement <4 x float> %3904, float %3907, i64 1
  %3909 = extractelement <4 x i64> %3900, i64 2
  %3910 = getelementptr inbounds float, ptr %f8.host, i64 %3909
  %3911 = load float, ptr %3910, align 4, !tbaa !36
  %3912 = insertelement <4 x float> %3908, float %3911, i64 2
  %3913 = extractelement <4 x i64> %3900, i64 3
  %3914 = getelementptr inbounds float, ptr %f8.host, i64 %3913
  %3915 = load float, ptr %3914, align 4, !tbaa !36
  %3916 = insertelement <4 x float> %3912, float %3915, i64 3
  %3917 = fmul <4 x float> %3916, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3918 = fadd <4 x float> %3897, %3917
  %3919 = fmul <4 x float> %3918, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3920 = fadd <4 x float> %3878, %3919
  %3921 = mul nsw <4 x i32> %t2469, %248
  %3922 = add nsw <4 x i32> %3921, %3817
  %3923 = sext <4 x i32> %3922 to <4 x i64>
  %3924 = extractelement <4 x i64> %3923, i64 0
  %3925 = getelementptr inbounds float, ptr %f7.host, i64 %3924
  %3926 = load float, ptr %3925, align 4, !tbaa !54
  %3927 = insertelement <4 x float> undef, float %3926, i64 0
  %3928 = extractelement <4 x i64> %3923, i64 1
  %3929 = getelementptr inbounds float, ptr %f7.host, i64 %3928
  %3930 = load float, ptr %3929, align 4, !tbaa !54
  %3931 = insertelement <4 x float> %3927, float %3930, i64 1
  %3932 = extractelement <4 x i64> %3923, i64 2
  %3933 = getelementptr inbounds float, ptr %f7.host, i64 %3932
  %3934 = load float, ptr %3933, align 4, !tbaa !54
  %3935 = insertelement <4 x float> %3931, float %3934, i64 2
  %3936 = extractelement <4 x i64> %3923, i64 3
  %3937 = getelementptr inbounds float, ptr %f7.host, i64 %3936
  %3938 = load float, ptr %3937, align 4, !tbaa !54
  %3939 = insertelement <4 x float> %3935, float %3938, i64 3
  %3940 = fsub <4 x float> %3939, %3920
  %3941 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2466
  %3942 = fmul <4 x float> %3941, %3940
  %3943 = fadd <4 x float> %3837, %3942
  %3944 = sext i32 %3456 to i64
  %3945 = sub nsw i64 %3944, %4
  %3946 = add nsw i64 %3945, %3432
  %3947 = getelementptr inbounds float, ptr %f130.host, i64 %3946
  %3948 = load <4 x float>, ptr %3947, align 4, !tbaa !38
  %3949 = fmul <4 x float> %3948, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3950 = sext i32 %t2463 to i64
  %3951 = sub nsw i64 %3950, %4
  %3952 = add nsw i64 %3433, %3951
  %3953 = getelementptr inbounds float, ptr %f130.host, i64 %3952
  %3954 = load <4 x float>, ptr %3953, align 4, !tbaa !38
  %3955 = fmul <4 x float> %3954, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3956 = fadd <4 x float> %3949, %3955
  %3957 = fmul <4 x float> %3956, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3958 = add nsw i64 %3945, %3434
  %3959 = getelementptr inbounds float, ptr %f130.host, i64 %3958
  %3960 = load <4 x float>, ptr %3959, align 4, !tbaa !38
  %3961 = fmul <4 x float> %3960, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %3962 = add nsw i64 %3435, %3951
  %3963 = getelementptr inbounds float, ptr %f130.host, i64 %3962
  %3964 = load <4 x float>, ptr %3963, align 4, !tbaa !38
  %3965 = fmul <4 x float> %3964, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3966 = fadd <4 x float> %3961, %3965
  %3967 = fmul <4 x float> %3966, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %3968 = fadd <4 x float> %3957, %3967
  %3969 = fadd <4 x float> %3943, %3968
  %3970 = shufflevector <4 x float> %3713, <4 x float> %3969, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %3971 = sext i32 %3439 to i64
  %3972 = add nsw i64 %3438, %3971
  %3973 = getelementptr inbounds float, ptr %128, i64 %3972
  store <8 x float> %3970, ptr %3973, align 4, !tbaa !64
  %lsr.iv.next = add i32 %lsr.iv, -1
  %lsr.iv.next286 = add nuw i32 %lsr.iv285, 8
  %.not147 = icmp eq i32 %lsr.iv.next, 0
  br i1 %.not147, label %"end for f129.s0.v3.v325", label %"for f129.s0.v3.v324"

"end for f129.s0.v3.v325":                        ; preds = %"for f129.s0.v3.v324", %true_bb21
  br i1 %.not142, label %"produce f12832", label %"for f129.s0.v3.v328.preheader", !prof !4

"for f129.s0.v3.v328.preheader":                  ; preds = %"end for f129.s0.v3.v325"
  %3974 = trunc i64 %3411 to i32
  %3975 = add i32 %3974, 45
  %3976 = ashr i32 %3975, 4
  %3977 = shl nsw i32 %3976, 1
  %3978 = and i32 %3977, 2
  %3979 = ashr i32 %3975, 5
  %t2478 = add nsw i32 %3978, %3979
  %3980 = sub nsw i32 %3976, %f75.v4.min_realized
  %3981 = mul nsw i32 %3980, %228
  %t2481 = add nsw i32 %3176, %3981
  %3982 = sext i32 %t2481 to i64
  %3983 = getelementptr inbounds float, ptr %f75.host, i64 %3982
  %3984 = load <4 x float>, ptr %3983, align 4, !tbaa !13
  %3985 = add nsw i64 %3982, 4
  %3986 = getelementptr inbounds float, ptr %f75.host, i64 %3985
  %3987 = load <4 x float>, ptr %3986, align 4, !tbaa !13
  %3988 = shufflevector <4 x float> %3984, <4 x float> %3987, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2482 = fmul <4 x float> %232, %3988
  %a898 = fptosi <4 x float> %t2482 to <4 x i32>
  %a901 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a898)
  %3989 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a901, <4 x i32> zeroinitializer)
  %3990 = sitofp <4 x i32> %3989 to <4 x float>
  %t2484 = fsub <4 x float> %t2482, %3990
  %3991 = add nsw i32 %t2478, %238
  %t2486 = mul nsw i32 %3991, %235
  %3992 = sub nsw i32 %3979, %237
  %t2488 = mul nsw i32 %3992, %235
  %3993 = sub nsw i32 %3976, %f7.v4.min_realized
  %3994 = mul nsw i32 %3993, %f7.stride.1
  %t2489 = add nsw i32 %3994, %3177
  %t2491 = sub nsw <4 x i32> %3989, %241
  %3995 = add i32 %t2478, %243
  %t2493 = mul nsw i32 %3995, %242
  %t2495 = mul nsw <4 x i32> %t2491, %245
  %3996 = sub nsw i32 %3979, %f8.v4.min_realized
  %t2498 = mul nsw i32 %3996, %242
  %3997 = add nsw <4 x i32> %t2491, <i32 1, i32 1, i32 1, i32 1>
  %t2501 = mul nsw <4 x i32> %3997, %245
  %3998 = shufflevector <4 x float> %3984, <4 x float> %3987, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2503 = fmul <4 x float> %232, %3998
  %a902 = fptosi <4 x float> %t2503 to <4 x i32>
  %a905 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a902)
  %3999 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a905, <4 x i32> zeroinitializer)
  %4000 = sitofp <4 x i32> %3999 to <4 x float>
  %t2505 = fsub <4 x float> %t2503, %4000
  %t2508 = sub nsw <4 x i32> %3999, %241
  %t2511 = mul nsw <4 x i32> %t2508, %245
  %4001 = add nsw <4 x i32> %t2508, <i32 1, i32 1, i32 1, i32 1>
  %t2516 = mul nsw <4 x i32> %4001, %245
  %4002 = add nsw i32 %t2498, %3182
  %4003 = insertelement <4 x i32> undef, i32 %4002, i64 0
  %4004 = shufflevector <4 x i32> %4003, <4 x i32> undef, <4 x i32> zeroinitializer
  %4005 = add nsw <4 x i32> %4004, <i32 0, i32 1, i32 2, i32 3>
  %4006 = add nsw <4 x i32> %t2501, %4005
  %4007 = sext <4 x i32> %4006 to <4 x i64>
  %4008 = extractelement <4 x i64> %4007, i64 0
  %4009 = getelementptr inbounds float, ptr %f8.host, i64 %4008
  %4010 = load float, ptr %4009, align 4, !tbaa !36
  %4011 = insertelement <4 x float> undef, float %4010, i64 0
  %4012 = extractelement <4 x i64> %4007, i64 1
  %4013 = getelementptr inbounds float, ptr %f8.host, i64 %4012
  %4014 = load float, ptr %4013, align 4, !tbaa !36
  %4015 = insertelement <4 x float> %4011, float %4014, i64 1
  %4016 = extractelement <4 x i64> %4007, i64 2
  %4017 = getelementptr inbounds float, ptr %f8.host, i64 %4016
  %4018 = load float, ptr %4017, align 4, !tbaa !36
  %4019 = insertelement <4 x float> %4015, float %4018, i64 2
  %4020 = extractelement <4 x i64> %4007, i64 3
  %4021 = getelementptr inbounds float, ptr %f8.host, i64 %4020
  %4022 = load float, ptr %4021, align 4, !tbaa !36
  %4023 = insertelement <4 x float> %4019, float %4022, i64 3
  %4024 = fmul <4 x float> %4023, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4025 = add nsw i32 %t2498, %3183
  %4026 = insertelement <4 x i32> undef, i32 %4025, i64 0
  %4027 = shufflevector <4 x i32> %4026, <4 x i32> undef, <4 x i32> zeroinitializer
  %4028 = add <4 x i32> %4027, <i32 -1, i32 0, i32 1, i32 2>
  %4029 = add <4 x i32> %4028, %t2501
  %4030 = sext <4 x i32> %4029 to <4 x i64>
  %4031 = extractelement <4 x i64> %4030, i64 0
  %4032 = getelementptr inbounds float, ptr %f8.host, i64 %4031
  %4033 = load float, ptr %4032, align 4, !tbaa !36
  %4034 = insertelement <4 x float> undef, float %4033, i64 0
  %4035 = extractelement <4 x i64> %4030, i64 1
  %4036 = getelementptr inbounds float, ptr %f8.host, i64 %4035
  %4037 = load float, ptr %4036, align 4, !tbaa !36
  %4038 = insertelement <4 x float> %4034, float %4037, i64 1
  %4039 = extractelement <4 x i64> %4030, i64 2
  %4040 = getelementptr inbounds float, ptr %f8.host, i64 %4039
  %4041 = load float, ptr %4040, align 4, !tbaa !36
  %4042 = insertelement <4 x float> %4038, float %4041, i64 2
  %4043 = extractelement <4 x i64> %4030, i64 3
  %4044 = getelementptr inbounds float, ptr %f8.host, i64 %4043
  %4045 = load float, ptr %4044, align 4, !tbaa !36
  %4046 = insertelement <4 x float> %4042, float %4045, i64 3
  %4047 = fmul <4 x float> %4046, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4048 = fadd <4 x float> %4024, %4047
  %4049 = fmul <4 x float> %4048, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4050 = add nsw i32 %t2493, %3182
  %4051 = insertelement <4 x i32> undef, i32 %4050, i64 0
  %4052 = shufflevector <4 x i32> %4051, <4 x i32> undef, <4 x i32> zeroinitializer
  %4053 = add nsw <4 x i32> %4052, <i32 0, i32 1, i32 2, i32 3>
  %4054 = add nsw <4 x i32> %t2501, %4053
  %4055 = sext <4 x i32> %4054 to <4 x i64>
  %4056 = extractelement <4 x i64> %4055, i64 0
  %4057 = getelementptr inbounds float, ptr %f8.host, i64 %4056
  %4058 = load float, ptr %4057, align 4, !tbaa !36
  %4059 = insertelement <4 x float> undef, float %4058, i64 0
  %4060 = extractelement <4 x i64> %4055, i64 1
  %4061 = getelementptr inbounds float, ptr %f8.host, i64 %4060
  %4062 = load float, ptr %4061, align 4, !tbaa !36
  %4063 = insertelement <4 x float> %4059, float %4062, i64 1
  %4064 = extractelement <4 x i64> %4055, i64 2
  %4065 = getelementptr inbounds float, ptr %f8.host, i64 %4064
  %4066 = load float, ptr %4065, align 4, !tbaa !36
  %4067 = insertelement <4 x float> %4063, float %4066, i64 2
  %4068 = extractelement <4 x i64> %4055, i64 3
  %4069 = getelementptr inbounds float, ptr %f8.host, i64 %4068
  %4070 = load float, ptr %4069, align 4, !tbaa !36
  %4071 = insertelement <4 x float> %4067, float %4070, i64 3
  %4072 = fmul <4 x float> %4071, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4073 = add nsw i32 %t2493, %3183
  %4074 = insertelement <4 x i32> undef, i32 %4073, i64 0
  %4075 = shufflevector <4 x i32> %4074, <4 x i32> undef, <4 x i32> zeroinitializer
  %4076 = add <4 x i32> %4075, <i32 -1, i32 0, i32 1, i32 2>
  %4077 = add <4 x i32> %4076, %t2501
  %4078 = sext <4 x i32> %4077 to <4 x i64>
  %4079 = extractelement <4 x i64> %4078, i64 0
  %4080 = getelementptr inbounds float, ptr %f8.host, i64 %4079
  %4081 = load float, ptr %4080, align 4, !tbaa !36
  %4082 = insertelement <4 x float> undef, float %4081, i64 0
  %4083 = extractelement <4 x i64> %4078, i64 1
  %4084 = getelementptr inbounds float, ptr %f8.host, i64 %4083
  %4085 = load float, ptr %4084, align 4, !tbaa !36
  %4086 = insertelement <4 x float> %4082, float %4085, i64 1
  %4087 = extractelement <4 x i64> %4078, i64 2
  %4088 = getelementptr inbounds float, ptr %f8.host, i64 %4087
  %4089 = load float, ptr %4088, align 4, !tbaa !36
  %4090 = insertelement <4 x float> %4086, float %4089, i64 2
  %4091 = extractelement <4 x i64> %4078, i64 3
  %4092 = getelementptr inbounds float, ptr %f8.host, i64 %4091
  %4093 = load float, ptr %4092, align 4, !tbaa !36
  %4094 = insertelement <4 x float> %4090, float %4093, i64 3
  %4095 = fmul <4 x float> %4094, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4096 = fadd <4 x float> %4072, %4095
  %4097 = fmul <4 x float> %4096, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4098 = fadd <4 x float> %4049, %4097
  %4099 = mul nsw <4 x i32> %3997, %248
  %4100 = insertelement <4 x i32> undef, i32 %t2489, i64 0
  %4101 = shufflevector <4 x i32> %4100, <4 x i32> undef, <4 x i32> zeroinitializer
  %4102 = add nsw <4 x i32> %4101, <i32 0, i32 2, i32 4, i32 6>
  %4103 = add nsw <4 x i32> %4099, %4102
  %4104 = sext <4 x i32> %4103 to <4 x i64>
  %4105 = extractelement <4 x i64> %4104, i64 0
  %4106 = getelementptr inbounds float, ptr %f7.host, i64 %4105
  %4107 = load float, ptr %4106, align 4, !tbaa !54
  %4108 = insertelement <4 x float> undef, float %4107, i64 0
  %4109 = extractelement <4 x i64> %4104, i64 1
  %4110 = getelementptr inbounds float, ptr %f7.host, i64 %4109
  %4111 = load float, ptr %4110, align 4, !tbaa !54
  %4112 = insertelement <4 x float> %4108, float %4111, i64 1
  %4113 = extractelement <4 x i64> %4104, i64 2
  %4114 = getelementptr inbounds float, ptr %f7.host, i64 %4113
  %4115 = load float, ptr %4114, align 4, !tbaa !54
  %4116 = insertelement <4 x float> %4112, float %4115, i64 2
  %4117 = extractelement <4 x i64> %4104, i64 3
  %4118 = getelementptr inbounds float, ptr %f7.host, i64 %4117
  %4119 = load float, ptr %4118, align 4, !tbaa !54
  %4120 = insertelement <4 x float> %4116, float %4119, i64 3
  %4121 = fsub <4 x float> %4120, %4098
  %4122 = fmul <4 x float> %t2484, %4121
  %4123 = add nsw <4 x i32> %t2495, %4005
  %4124 = sext <4 x i32> %4123 to <4 x i64>
  %4125 = extractelement <4 x i64> %4124, i64 0
  %4126 = getelementptr inbounds float, ptr %f8.host, i64 %4125
  %4127 = load float, ptr %4126, align 4, !tbaa !36
  %4128 = insertelement <4 x float> undef, float %4127, i64 0
  %4129 = extractelement <4 x i64> %4124, i64 1
  %4130 = getelementptr inbounds float, ptr %f8.host, i64 %4129
  %4131 = load float, ptr %4130, align 4, !tbaa !36
  %4132 = insertelement <4 x float> %4128, float %4131, i64 1
  %4133 = extractelement <4 x i64> %4124, i64 2
  %4134 = getelementptr inbounds float, ptr %f8.host, i64 %4133
  %4135 = load float, ptr %4134, align 4, !tbaa !36
  %4136 = insertelement <4 x float> %4132, float %4135, i64 2
  %4137 = extractelement <4 x i64> %4124, i64 3
  %4138 = getelementptr inbounds float, ptr %f8.host, i64 %4137
  %4139 = load float, ptr %4138, align 4, !tbaa !36
  %4140 = insertelement <4 x float> %4136, float %4139, i64 3
  %4141 = fmul <4 x float> %4140, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4142 = add <4 x i32> %4028, %t2495
  %4143 = sext <4 x i32> %4142 to <4 x i64>
  %4144 = extractelement <4 x i64> %4143, i64 0
  %4145 = getelementptr inbounds float, ptr %f8.host, i64 %4144
  %4146 = load float, ptr %4145, align 4, !tbaa !36
  %4147 = insertelement <4 x float> undef, float %4146, i64 0
  %4148 = extractelement <4 x i64> %4143, i64 1
  %4149 = getelementptr inbounds float, ptr %f8.host, i64 %4148
  %4150 = load float, ptr %4149, align 4, !tbaa !36
  %4151 = insertelement <4 x float> %4147, float %4150, i64 1
  %4152 = extractelement <4 x i64> %4143, i64 2
  %4153 = getelementptr inbounds float, ptr %f8.host, i64 %4152
  %4154 = load float, ptr %4153, align 4, !tbaa !36
  %4155 = insertelement <4 x float> %4151, float %4154, i64 2
  %4156 = extractelement <4 x i64> %4143, i64 3
  %4157 = getelementptr inbounds float, ptr %f8.host, i64 %4156
  %4158 = load float, ptr %4157, align 4, !tbaa !36
  %4159 = insertelement <4 x float> %4155, float %4158, i64 3
  %4160 = fmul <4 x float> %4159, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4161 = fadd <4 x float> %4141, %4160
  %4162 = fmul <4 x float> %4161, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4163 = add nsw <4 x i32> %t2495, %4053
  %4164 = sext <4 x i32> %4163 to <4 x i64>
  %4165 = extractelement <4 x i64> %4164, i64 0
  %4166 = getelementptr inbounds float, ptr %f8.host, i64 %4165
  %4167 = load float, ptr %4166, align 4, !tbaa !36
  %4168 = insertelement <4 x float> undef, float %4167, i64 0
  %4169 = extractelement <4 x i64> %4164, i64 1
  %4170 = getelementptr inbounds float, ptr %f8.host, i64 %4169
  %4171 = load float, ptr %4170, align 4, !tbaa !36
  %4172 = insertelement <4 x float> %4168, float %4171, i64 1
  %4173 = extractelement <4 x i64> %4164, i64 2
  %4174 = getelementptr inbounds float, ptr %f8.host, i64 %4173
  %4175 = load float, ptr %4174, align 4, !tbaa !36
  %4176 = insertelement <4 x float> %4172, float %4175, i64 2
  %4177 = extractelement <4 x i64> %4164, i64 3
  %4178 = getelementptr inbounds float, ptr %f8.host, i64 %4177
  %4179 = load float, ptr %4178, align 4, !tbaa !36
  %4180 = insertelement <4 x float> %4176, float %4179, i64 3
  %4181 = fmul <4 x float> %4180, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4182 = add <4 x i32> %4076, %t2495
  %4183 = sext <4 x i32> %4182 to <4 x i64>
  %4184 = extractelement <4 x i64> %4183, i64 0
  %4185 = getelementptr inbounds float, ptr %f8.host, i64 %4184
  %4186 = load float, ptr %4185, align 4, !tbaa !36
  %4187 = insertelement <4 x float> undef, float %4186, i64 0
  %4188 = extractelement <4 x i64> %4183, i64 1
  %4189 = getelementptr inbounds float, ptr %f8.host, i64 %4188
  %4190 = load float, ptr %4189, align 4, !tbaa !36
  %4191 = insertelement <4 x float> %4187, float %4190, i64 1
  %4192 = extractelement <4 x i64> %4183, i64 2
  %4193 = getelementptr inbounds float, ptr %f8.host, i64 %4192
  %4194 = load float, ptr %4193, align 4, !tbaa !36
  %4195 = insertelement <4 x float> %4191, float %4194, i64 2
  %4196 = extractelement <4 x i64> %4183, i64 3
  %4197 = getelementptr inbounds float, ptr %f8.host, i64 %4196
  %4198 = load float, ptr %4197, align 4, !tbaa !36
  %4199 = insertelement <4 x float> %4195, float %4198, i64 3
  %4200 = fmul <4 x float> %4199, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4201 = fadd <4 x float> %4181, %4200
  %4202 = fmul <4 x float> %4201, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4203 = fadd <4 x float> %4162, %4202
  %4204 = mul nsw <4 x i32> %t2491, %248
  %4205 = add nsw <4 x i32> %4204, %4102
  %4206 = sext <4 x i32> %4205 to <4 x i64>
  %4207 = extractelement <4 x i64> %4206, i64 0
  %4208 = getelementptr inbounds float, ptr %f7.host, i64 %4207
  %4209 = load float, ptr %4208, align 4, !tbaa !54
  %4210 = insertelement <4 x float> undef, float %4209, i64 0
  %4211 = extractelement <4 x i64> %4206, i64 1
  %4212 = getelementptr inbounds float, ptr %f7.host, i64 %4211
  %4213 = load float, ptr %4212, align 4, !tbaa !54
  %4214 = insertelement <4 x float> %4210, float %4213, i64 1
  %4215 = extractelement <4 x i64> %4206, i64 2
  %4216 = getelementptr inbounds float, ptr %f7.host, i64 %4215
  %4217 = load float, ptr %4216, align 4, !tbaa !54
  %4218 = insertelement <4 x float> %4214, float %4217, i64 2
  %4219 = extractelement <4 x i64> %4206, i64 3
  %4220 = getelementptr inbounds float, ptr %f7.host, i64 %4219
  %4221 = load float, ptr %4220, align 4, !tbaa !54
  %4222 = insertelement <4 x float> %4218, float %4221, i64 3
  %4223 = fsub <4 x float> %4222, %4203
  %4224 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2484
  %4225 = fmul <4 x float> %4224, %4223
  %4226 = fadd <4 x float> %4122, %4225
  %4227 = sext i32 %t2488 to i64
  %4228 = add nsw i64 %3185, %4227
  %4229 = getelementptr inbounds float, ptr %f130.host, i64 %4228
  %4230 = load <4 x float>, ptr %4229, align 4, !tbaa !38
  %4231 = fmul <4 x float> %4230, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4232 = add nsw i64 %3188, %4227
  %4233 = getelementptr inbounds float, ptr %f130.host, i64 %4232
  %4234 = load <4 x float>, ptr %4233, align 4, !tbaa !38
  %4235 = fmul <4 x float> %4234, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4236 = fadd <4 x float> %4231, %4235
  %4237 = fmul <4 x float> %4236, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4238 = sext i32 %t2486 to i64
  %4239 = add nsw i64 %3185, %4238
  %4240 = getelementptr inbounds float, ptr %f130.host, i64 %4239
  %4241 = load <4 x float>, ptr %4240, align 4, !tbaa !38
  %4242 = fmul <4 x float> %4241, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4243 = add nsw i64 %3188, %4238
  %4244 = getelementptr inbounds float, ptr %f130.host, i64 %4243
  %4245 = load <4 x float>, ptr %4244, align 4, !tbaa !38
  %4246 = fmul <4 x float> %4245, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4247 = fadd <4 x float> %4242, %4246
  %4248 = fmul <4 x float> %4247, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4249 = fadd <4 x float> %4237, %4248
  %4250 = fadd <4 x float> %4226, %4249
  %4251 = add nsw i32 %t2498, %3189
  %4252 = insertelement <4 x i32> undef, i32 %4251, i64 0
  %4253 = shufflevector <4 x i32> %4252, <4 x i32> undef, <4 x i32> zeroinitializer
  %4254 = add nsw <4 x i32> %4253, <i32 0, i32 1, i32 2, i32 3>
  %4255 = add nsw <4 x i32> %t2516, %4254
  %4256 = sext <4 x i32> %4255 to <4 x i64>
  %4257 = extractelement <4 x i64> %4256, i64 0
  %4258 = getelementptr inbounds float, ptr %f8.host, i64 %4257
  %4259 = load float, ptr %4258, align 4, !tbaa !36
  %4260 = insertelement <4 x float> undef, float %4259, i64 0
  %4261 = extractelement <4 x i64> %4256, i64 1
  %4262 = getelementptr inbounds float, ptr %f8.host, i64 %4261
  %4263 = load float, ptr %4262, align 4, !tbaa !36
  %4264 = insertelement <4 x float> %4260, float %4263, i64 1
  %4265 = extractelement <4 x i64> %4256, i64 2
  %4266 = getelementptr inbounds float, ptr %f8.host, i64 %4265
  %4267 = load float, ptr %4266, align 4, !tbaa !36
  %4268 = insertelement <4 x float> %4264, float %4267, i64 2
  %4269 = extractelement <4 x i64> %4256, i64 3
  %4270 = getelementptr inbounds float, ptr %f8.host, i64 %4269
  %4271 = load float, ptr %4270, align 4, !tbaa !36
  %4272 = insertelement <4 x float> %4268, float %4271, i64 3
  %4273 = fmul <4 x float> %4272, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4274 = add nsw i32 %t2498, %3190
  %4275 = insertelement <4 x i32> undef, i32 %4274, i64 0
  %4276 = shufflevector <4 x i32> %4275, <4 x i32> undef, <4 x i32> zeroinitializer
  %4277 = add <4 x i32> %4276, <i32 -1, i32 0, i32 1, i32 2>
  %4278 = add <4 x i32> %4277, %t2516
  %4279 = sext <4 x i32> %4278 to <4 x i64>
  %4280 = extractelement <4 x i64> %4279, i64 0
  %4281 = getelementptr inbounds float, ptr %f8.host, i64 %4280
  %4282 = load float, ptr %4281, align 4, !tbaa !36
  %4283 = insertelement <4 x float> undef, float %4282, i64 0
  %4284 = extractelement <4 x i64> %4279, i64 1
  %4285 = getelementptr inbounds float, ptr %f8.host, i64 %4284
  %4286 = load float, ptr %4285, align 4, !tbaa !36
  %4287 = insertelement <4 x float> %4283, float %4286, i64 1
  %4288 = extractelement <4 x i64> %4279, i64 2
  %4289 = getelementptr inbounds float, ptr %f8.host, i64 %4288
  %4290 = load float, ptr %4289, align 4, !tbaa !36
  %4291 = insertelement <4 x float> %4287, float %4290, i64 2
  %4292 = extractelement <4 x i64> %4279, i64 3
  %4293 = getelementptr inbounds float, ptr %f8.host, i64 %4292
  %4294 = load float, ptr %4293, align 4, !tbaa !36
  %4295 = insertelement <4 x float> %4291, float %4294, i64 3
  %4296 = fmul <4 x float> %4295, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4297 = fadd <4 x float> %4273, %4296
  %4298 = fmul <4 x float> %4297, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4299 = add nsw i32 %t2493, %3189
  %4300 = insertelement <4 x i32> undef, i32 %4299, i64 0
  %4301 = shufflevector <4 x i32> %4300, <4 x i32> undef, <4 x i32> zeroinitializer
  %4302 = add nsw <4 x i32> %4301, <i32 0, i32 1, i32 2, i32 3>
  %4303 = add nsw <4 x i32> %t2516, %4302
  %4304 = sext <4 x i32> %4303 to <4 x i64>
  %4305 = extractelement <4 x i64> %4304, i64 0
  %4306 = getelementptr inbounds float, ptr %f8.host, i64 %4305
  %4307 = load float, ptr %4306, align 4, !tbaa !36
  %4308 = insertelement <4 x float> undef, float %4307, i64 0
  %4309 = extractelement <4 x i64> %4304, i64 1
  %4310 = getelementptr inbounds float, ptr %f8.host, i64 %4309
  %4311 = load float, ptr %4310, align 4, !tbaa !36
  %4312 = insertelement <4 x float> %4308, float %4311, i64 1
  %4313 = extractelement <4 x i64> %4304, i64 2
  %4314 = getelementptr inbounds float, ptr %f8.host, i64 %4313
  %4315 = load float, ptr %4314, align 4, !tbaa !36
  %4316 = insertelement <4 x float> %4312, float %4315, i64 2
  %4317 = extractelement <4 x i64> %4304, i64 3
  %4318 = getelementptr inbounds float, ptr %f8.host, i64 %4317
  %4319 = load float, ptr %4318, align 4, !tbaa !36
  %4320 = insertelement <4 x float> %4316, float %4319, i64 3
  %4321 = fmul <4 x float> %4320, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4322 = add nsw i32 %t2493, %3190
  %4323 = insertelement <4 x i32> undef, i32 %4322, i64 0
  %4324 = shufflevector <4 x i32> %4323, <4 x i32> undef, <4 x i32> zeroinitializer
  %4325 = add <4 x i32> %4324, <i32 -1, i32 0, i32 1, i32 2>
  %4326 = add <4 x i32> %4325, %t2516
  %4327 = sext <4 x i32> %4326 to <4 x i64>
  %4328 = extractelement <4 x i64> %4327, i64 0
  %4329 = getelementptr inbounds float, ptr %f8.host, i64 %4328
  %4330 = load float, ptr %4329, align 4, !tbaa !36
  %4331 = insertelement <4 x float> undef, float %4330, i64 0
  %4332 = extractelement <4 x i64> %4327, i64 1
  %4333 = getelementptr inbounds float, ptr %f8.host, i64 %4332
  %4334 = load float, ptr %4333, align 4, !tbaa !36
  %4335 = insertelement <4 x float> %4331, float %4334, i64 1
  %4336 = extractelement <4 x i64> %4327, i64 2
  %4337 = getelementptr inbounds float, ptr %f8.host, i64 %4336
  %4338 = load float, ptr %4337, align 4, !tbaa !36
  %4339 = insertelement <4 x float> %4335, float %4338, i64 2
  %4340 = extractelement <4 x i64> %4327, i64 3
  %4341 = getelementptr inbounds float, ptr %f8.host, i64 %4340
  %4342 = load float, ptr %4341, align 4, !tbaa !36
  %4343 = insertelement <4 x float> %4339, float %4342, i64 3
  %4344 = fmul <4 x float> %4343, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4345 = fadd <4 x float> %4321, %4344
  %4346 = fmul <4 x float> %4345, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4347 = fadd <4 x float> %4298, %4346
  %4348 = mul nsw <4 x i32> %4001, %248
  %4349 = add nsw i32 %t2489, 1
  %4350 = insertelement <4 x i32> undef, i32 %4349, i64 0
  %4351 = shufflevector <4 x i32> %4350, <4 x i32> undef, <4 x i32> zeroinitializer
  %4352 = add nsw <4 x i32> %4351, <i32 0, i32 2, i32 4, i32 6>
  %4353 = add nsw <4 x i32> %4348, %4352
  %4354 = sext <4 x i32> %4353 to <4 x i64>
  %4355 = extractelement <4 x i64> %4354, i64 0
  %4356 = getelementptr inbounds float, ptr %f7.host, i64 %4355
  %4357 = load float, ptr %4356, align 4, !tbaa !54
  %4358 = insertelement <4 x float> undef, float %4357, i64 0
  %4359 = extractelement <4 x i64> %4354, i64 1
  %4360 = getelementptr inbounds float, ptr %f7.host, i64 %4359
  %4361 = load float, ptr %4360, align 4, !tbaa !54
  %4362 = insertelement <4 x float> %4358, float %4361, i64 1
  %4363 = extractelement <4 x i64> %4354, i64 2
  %4364 = getelementptr inbounds float, ptr %f7.host, i64 %4363
  %4365 = load float, ptr %4364, align 4, !tbaa !54
  %4366 = insertelement <4 x float> %4362, float %4365, i64 2
  %4367 = extractelement <4 x i64> %4354, i64 3
  %4368 = getelementptr inbounds float, ptr %f7.host, i64 %4367
  %4369 = load float, ptr %4368, align 4, !tbaa !54
  %4370 = insertelement <4 x float> %4366, float %4369, i64 3
  %4371 = fsub <4 x float> %4370, %4347
  %4372 = fmul <4 x float> %t2505, %4371
  %4373 = add nsw <4 x i32> %t2511, %4254
  %4374 = sext <4 x i32> %4373 to <4 x i64>
  %4375 = extractelement <4 x i64> %4374, i64 0
  %4376 = getelementptr inbounds float, ptr %f8.host, i64 %4375
  %4377 = load float, ptr %4376, align 4, !tbaa !36
  %4378 = insertelement <4 x float> undef, float %4377, i64 0
  %4379 = extractelement <4 x i64> %4374, i64 1
  %4380 = getelementptr inbounds float, ptr %f8.host, i64 %4379
  %4381 = load float, ptr %4380, align 4, !tbaa !36
  %4382 = insertelement <4 x float> %4378, float %4381, i64 1
  %4383 = extractelement <4 x i64> %4374, i64 2
  %4384 = getelementptr inbounds float, ptr %f8.host, i64 %4383
  %4385 = load float, ptr %4384, align 4, !tbaa !36
  %4386 = insertelement <4 x float> %4382, float %4385, i64 2
  %4387 = extractelement <4 x i64> %4374, i64 3
  %4388 = getelementptr inbounds float, ptr %f8.host, i64 %4387
  %4389 = load float, ptr %4388, align 4, !tbaa !36
  %4390 = insertelement <4 x float> %4386, float %4389, i64 3
  %4391 = fmul <4 x float> %4390, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4392 = add <4 x i32> %4277, %t2511
  %4393 = sext <4 x i32> %4392 to <4 x i64>
  %4394 = extractelement <4 x i64> %4393, i64 0
  %4395 = getelementptr inbounds float, ptr %f8.host, i64 %4394
  %4396 = load float, ptr %4395, align 4, !tbaa !36
  %4397 = insertelement <4 x float> undef, float %4396, i64 0
  %4398 = extractelement <4 x i64> %4393, i64 1
  %4399 = getelementptr inbounds float, ptr %f8.host, i64 %4398
  %4400 = load float, ptr %4399, align 4, !tbaa !36
  %4401 = insertelement <4 x float> %4397, float %4400, i64 1
  %4402 = extractelement <4 x i64> %4393, i64 2
  %4403 = getelementptr inbounds float, ptr %f8.host, i64 %4402
  %4404 = load float, ptr %4403, align 4, !tbaa !36
  %4405 = insertelement <4 x float> %4401, float %4404, i64 2
  %4406 = extractelement <4 x i64> %4393, i64 3
  %4407 = getelementptr inbounds float, ptr %f8.host, i64 %4406
  %4408 = load float, ptr %4407, align 4, !tbaa !36
  %4409 = insertelement <4 x float> %4405, float %4408, i64 3
  %4410 = fmul <4 x float> %4409, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4411 = fadd <4 x float> %4391, %4410
  %4412 = fmul <4 x float> %4411, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4413 = add nsw <4 x i32> %t2511, %4302
  %4414 = sext <4 x i32> %4413 to <4 x i64>
  %4415 = extractelement <4 x i64> %4414, i64 0
  %4416 = getelementptr inbounds float, ptr %f8.host, i64 %4415
  %4417 = load float, ptr %4416, align 4, !tbaa !36
  %4418 = insertelement <4 x float> undef, float %4417, i64 0
  %4419 = extractelement <4 x i64> %4414, i64 1
  %4420 = getelementptr inbounds float, ptr %f8.host, i64 %4419
  %4421 = load float, ptr %4420, align 4, !tbaa !36
  %4422 = insertelement <4 x float> %4418, float %4421, i64 1
  %4423 = extractelement <4 x i64> %4414, i64 2
  %4424 = getelementptr inbounds float, ptr %f8.host, i64 %4423
  %4425 = load float, ptr %4424, align 4, !tbaa !36
  %4426 = insertelement <4 x float> %4422, float %4425, i64 2
  %4427 = extractelement <4 x i64> %4414, i64 3
  %4428 = getelementptr inbounds float, ptr %f8.host, i64 %4427
  %4429 = load float, ptr %4428, align 4, !tbaa !36
  %4430 = insertelement <4 x float> %4426, float %4429, i64 3
  %4431 = fmul <4 x float> %4430, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4432 = add <4 x i32> %4325, %t2511
  %4433 = sext <4 x i32> %4432 to <4 x i64>
  %4434 = extractelement <4 x i64> %4433, i64 0
  %4435 = getelementptr inbounds float, ptr %f8.host, i64 %4434
  %4436 = load float, ptr %4435, align 4, !tbaa !36
  %4437 = insertelement <4 x float> undef, float %4436, i64 0
  %4438 = extractelement <4 x i64> %4433, i64 1
  %4439 = getelementptr inbounds float, ptr %f8.host, i64 %4438
  %4440 = load float, ptr %4439, align 4, !tbaa !36
  %4441 = insertelement <4 x float> %4437, float %4440, i64 1
  %4442 = extractelement <4 x i64> %4433, i64 2
  %4443 = getelementptr inbounds float, ptr %f8.host, i64 %4442
  %4444 = load float, ptr %4443, align 4, !tbaa !36
  %4445 = insertelement <4 x float> %4441, float %4444, i64 2
  %4446 = extractelement <4 x i64> %4433, i64 3
  %4447 = getelementptr inbounds float, ptr %f8.host, i64 %4446
  %4448 = load float, ptr %4447, align 4, !tbaa !36
  %4449 = insertelement <4 x float> %4445, float %4448, i64 3
  %4450 = fmul <4 x float> %4449, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4451 = fadd <4 x float> %4431, %4450
  %4452 = fmul <4 x float> %4451, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4453 = fadd <4 x float> %4412, %4452
  %4454 = mul nsw <4 x i32> %t2508, %248
  %4455 = add nsw <4 x i32> %4454, %4352
  %4456 = sext <4 x i32> %4455 to <4 x i64>
  %4457 = extractelement <4 x i64> %4456, i64 0
  %4458 = getelementptr inbounds float, ptr %f7.host, i64 %4457
  %4459 = load float, ptr %4458, align 4, !tbaa !54
  %4460 = insertelement <4 x float> undef, float %4459, i64 0
  %4461 = extractelement <4 x i64> %4456, i64 1
  %4462 = getelementptr inbounds float, ptr %f7.host, i64 %4461
  %4463 = load float, ptr %4462, align 4, !tbaa !54
  %4464 = insertelement <4 x float> %4460, float %4463, i64 1
  %4465 = extractelement <4 x i64> %4456, i64 2
  %4466 = getelementptr inbounds float, ptr %f7.host, i64 %4465
  %4467 = load float, ptr %4466, align 4, !tbaa !54
  %4468 = insertelement <4 x float> %4464, float %4467, i64 2
  %4469 = extractelement <4 x i64> %4456, i64 3
  %4470 = getelementptr inbounds float, ptr %f7.host, i64 %4469
  %4471 = load float, ptr %4470, align 4, !tbaa !54
  %4472 = insertelement <4 x float> %4468, float %4471, i64 3
  %4473 = fsub <4 x float> %4472, %4453
  %4474 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2505
  %4475 = fmul <4 x float> %4474, %4473
  %4476 = fadd <4 x float> %4372, %4475
  %4477 = add nsw i64 %3192, %4227
  %4478 = getelementptr inbounds float, ptr %f130.host, i64 %4477
  %4479 = load <4 x float>, ptr %4478, align 4, !tbaa !38
  %4480 = fmul <4 x float> %4479, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4481 = add nsw i64 %3195, %4227
  %4482 = getelementptr inbounds float, ptr %f130.host, i64 %4481
  %4483 = load <4 x float>, ptr %4482, align 4, !tbaa !38
  %4484 = fmul <4 x float> %4483, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4485 = fadd <4 x float> %4480, %4484
  %4486 = fmul <4 x float> %4485, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4487 = add nsw i64 %3192, %4238
  %4488 = getelementptr inbounds float, ptr %f130.host, i64 %4487
  %4489 = load <4 x float>, ptr %4488, align 4, !tbaa !38
  %4490 = fmul <4 x float> %4489, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4491 = add nsw i64 %3195, %4238
  %4492 = getelementptr inbounds float, ptr %f130.host, i64 %4491
  %4493 = load <4 x float>, ptr %4492, align 4, !tbaa !38
  %4494 = fmul <4 x float> %4493, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4495 = fadd <4 x float> %4490, %4494
  %4496 = fmul <4 x float> %4495, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4497 = fadd <4 x float> %4486, %4496
  %4498 = fadd <4 x float> %4476, %4497
  %4499 = shufflevector <4 x float> %4250, <4 x float> %4498, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow143 = sub nsw i32 %3976, %225
  %4500 = sext i32 %narrow143 to i64
  %4501 = mul nsw i64 %250, %4500
  %4502 = add nsw i64 %4501, %3196
  %4503 = getelementptr inbounds float, ptr %128, i64 %4502
  store <8 x float> %4499, ptr %4503, align 4, !tbaa !64
  br label %"produce f12832"

"produce f12832":                                 ; preds = %"for f129.s0.v3.v328.preheader", %"end for f129.s0.v3.v325", %"produce f12919"
  %4504 = trunc i64 %3411 to i32
  %4505 = add i32 %4504, 5
  %4506 = and i32 %4505, 7
  %4507 = icmp eq i32 %4506, 7
  br i1 %4507, label %true_bb34, label %"produce f12745"

true_bb34:                                        ; preds = %"produce f12832"
  br i1 %3200, label %"for f128.s0.v3.v337.preheader", label %"end for f128.s0.v3.v338", !prof !5

"for f128.s0.v3.v337.preheader":                  ; preds = %true_bb34
  %4508 = trunc i64 %3411 to i32
  %4509 = add i32 %4508, 21
  %4510 = ashr i32 %4509, 3
  %4511 = shl nsw i32 %4510, 1
  %4512 = and i32 %4511, 2
  %4513 = ashr i32 %4509, 4
  %t2517 = add nsw i32 %4512, %4513
  %4514 = sub nsw i32 %4510, %f74.v4.min_realized
  %4515 = mul nsw i32 %4514, %819
  %4516 = add i32 %3203, %4515
  %4517 = add nsw i32 %t2517, %820
  %t2524 = mul nsw i32 %4517, %117
  %4518 = sub nsw i32 %4513, %225
  %t2526 = mul nsw i32 %4518, %117
  %4519 = sub nsw i32 %4510, %f6.v4.min_realized
  %4520 = mul nsw i32 %4519, %f6.stride.1
  %4521 = add i32 %3204, %4520
  %4522 = add i32 %t2517, %821
  %4523 = mul nsw i32 %4522, %f7.stride.1
  %4524 = sub nsw i32 %4513, %f7.v4.min_realized
  %4525 = mul nsw i32 %4524, %f7.stride.1
  %4526 = sext i32 %t2526 to i64
  %4527 = add nsw i64 %4526, -1
  %4528 = sext i32 %t2524 to i64
  %4529 = add nsw i64 %4528, -1
  %narrow139 = sub nsw i32 %4510, %816
  %4530 = sext i32 %narrow139 to i64
  %4531 = mul nsw i64 %827, %4530
  %4532 = add nsw i64 %4531, %.neg213
  br label %"for f128.s0.v3.v337"

"for f128.s0.v3.v337":                            ; preds = %"for f128.s0.v3.v337.preheader", %"for f128.s0.v3.v337"
  %lsr.iv291 = phi i32 [ %lsr.iv.next292, %"for f128.s0.v3.v337" ], [ 0, %"for f128.s0.v3.v337.preheader" ]
  %lsr.iv289 = phi i32 [ %lsr.iv.next290, %"for f128.s0.v3.v337" ], [ %a907, %"for f128.s0.v3.v337.preheader" ]
  %4533 = add i32 %lsr.iv291, %99
  %4534 = ashr i32 %4533, 1
  %t2518 = add nsw i32 %4534, %3202
  %4535 = add i32 %4516, %lsr.iv291
  %4536 = sext i32 %4535 to i64
  %4537 = getelementptr inbounds float, ptr %f74.host, i64 %4536
  %4538 = load <4 x float>, ptr %4537, align 4, !tbaa !56
  %4539 = add nsw i64 %4536, 4
  %4540 = getelementptr inbounds float, ptr %f74.host, i64 %4539
  %4541 = load <4 x float>, ptr %4540, align 4, !tbaa !56
  %4542 = shufflevector <4 x float> %4538, <4 x float> %4541, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2520 = fmul <4 x float> %232, %4542
  %a908 = fptosi <4 x float> %t2520 to <4 x i32>
  %a911 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a908)
  %4543 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a911, <4 x i32> zeroinitializer)
  %4544 = sitofp <4 x i32> %4543 to <4 x float>
  %t2522 = fsub <4 x float> %t2520, %4544
  %4545 = add i32 %4521, %lsr.iv291
  %t2529 = sub nsw <4 x i32> %4543, %241
  %4546 = sub nsw i32 %t2518, %f7.v3.min_realized
  %t2532 = add nsw i32 %4546, %4523
  %t2533 = mul nsw <4 x i32> %t2529, %248
  %4547 = sub nsw i32 %4534, %f7.v3.min_realized
  %t2535 = add nsw i32 %4547, %4523
  %t2537 = add nsw i32 %4546, %4525
  %t2538 = add nsw i32 %4547, %4525
  %4548 = add nsw <4 x i32> %t2529, <i32 1, i32 1, i32 1, i32 1>
  %t2539 = mul nsw <4 x i32> %4548, %248
  %4549 = add i32 %4533, 1
  %4550 = shl i32 %4549, 1
  %4551 = and i32 %4550, 2
  %4552 = ashr i32 %4549, 1
  %t2540 = add nsw i32 %4551, %4552
  %4553 = shufflevector <4 x float> %4538, <4 x float> %4541, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2541 = fmul <4 x float> %232, %4553
  %a912 = fptosi <4 x float> %t2541 to <4 x i32>
  %a915 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a912)
  %4554 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a915, <4 x i32> zeroinitializer)
  %4555 = sitofp <4 x i32> %4554 to <4 x float>
  %t2543 = fsub <4 x float> %t2541, %4555
  %t2546 = sub nsw <4 x i32> %4554, %241
  %4556 = sub nsw i32 %t2540, %f7.v3.min_realized
  %t2548 = add nsw i32 %4556, %4523
  %t2549 = mul nsw <4 x i32> %t2546, %248
  %4557 = sub nsw i32 %4552, %f7.v3.min_realized
  %t2551 = add nsw i32 %4557, %4523
  %t2552 = add nsw i32 %4556, %4525
  %t2553 = add nsw i32 %4557, %4525
  %4558 = add nsw <4 x i32> %t2546, <i32 1, i32 1, i32 1, i32 1>
  %t2554 = mul nsw <4 x i32> %4558, %248
  %4559 = insertelement <4 x i32> undef, i32 %t2538, i64 0
  %4560 = shufflevector <4 x i32> %4559, <4 x i32> undef, <4 x i32> zeroinitializer
  %4561 = add nsw <4 x i32> %4560, <i32 0, i32 1, i32 2, i32 3>
  %4562 = add nsw <4 x i32> %t2539, %4561
  %4563 = sext <4 x i32> %4562 to <4 x i64>
  %4564 = extractelement <4 x i64> %4563, i64 0
  %4565 = getelementptr inbounds float, ptr %f7.host, i64 %4564
  %4566 = load float, ptr %4565, align 4, !tbaa !54
  %4567 = insertelement <4 x float> undef, float %4566, i64 0
  %4568 = extractelement <4 x i64> %4563, i64 1
  %4569 = getelementptr inbounds float, ptr %f7.host, i64 %4568
  %4570 = load float, ptr %4569, align 4, !tbaa !54
  %4571 = insertelement <4 x float> %4567, float %4570, i64 1
  %4572 = extractelement <4 x i64> %4563, i64 2
  %4573 = getelementptr inbounds float, ptr %f7.host, i64 %4572
  %4574 = load float, ptr %4573, align 4, !tbaa !54
  %4575 = insertelement <4 x float> %4571, float %4574, i64 2
  %4576 = extractelement <4 x i64> %4563, i64 3
  %4577 = getelementptr inbounds float, ptr %f7.host, i64 %4576
  %4578 = load float, ptr %4577, align 4, !tbaa !54
  %4579 = insertelement <4 x float> %4575, float %4578, i64 3
  %4580 = fmul <4 x float> %4579, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4581 = insertelement <4 x i32> undef, i32 %t2537, i64 0
  %4582 = shufflevector <4 x i32> %4581, <4 x i32> undef, <4 x i32> zeroinitializer
  %4583 = add <4 x i32> %4582, <i32 -1, i32 0, i32 1, i32 2>
  %4584 = add <4 x i32> %4583, %t2539
  %4585 = sext <4 x i32> %4584 to <4 x i64>
  %4586 = extractelement <4 x i64> %4585, i64 0
  %4587 = getelementptr inbounds float, ptr %f7.host, i64 %4586
  %4588 = load float, ptr %4587, align 4, !tbaa !54
  %4589 = insertelement <4 x float> undef, float %4588, i64 0
  %4590 = extractelement <4 x i64> %4585, i64 1
  %4591 = getelementptr inbounds float, ptr %f7.host, i64 %4590
  %4592 = load float, ptr %4591, align 4, !tbaa !54
  %4593 = insertelement <4 x float> %4589, float %4592, i64 1
  %4594 = extractelement <4 x i64> %4585, i64 2
  %4595 = getelementptr inbounds float, ptr %f7.host, i64 %4594
  %4596 = load float, ptr %4595, align 4, !tbaa !54
  %4597 = insertelement <4 x float> %4593, float %4596, i64 2
  %4598 = extractelement <4 x i64> %4585, i64 3
  %4599 = getelementptr inbounds float, ptr %f7.host, i64 %4598
  %4600 = load float, ptr %4599, align 4, !tbaa !54
  %4601 = insertelement <4 x float> %4597, float %4600, i64 3
  %4602 = fmul <4 x float> %4601, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4603 = fadd <4 x float> %4580, %4602
  %4604 = fmul <4 x float> %4603, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4605 = insertelement <4 x i32> undef, i32 %t2535, i64 0
  %4606 = shufflevector <4 x i32> %4605, <4 x i32> undef, <4 x i32> zeroinitializer
  %4607 = add nsw <4 x i32> %4606, <i32 0, i32 1, i32 2, i32 3>
  %4608 = add nsw <4 x i32> %t2539, %4607
  %4609 = sext <4 x i32> %4608 to <4 x i64>
  %4610 = extractelement <4 x i64> %4609, i64 0
  %4611 = getelementptr inbounds float, ptr %f7.host, i64 %4610
  %4612 = load float, ptr %4611, align 4, !tbaa !54
  %4613 = insertelement <4 x float> undef, float %4612, i64 0
  %4614 = extractelement <4 x i64> %4609, i64 1
  %4615 = getelementptr inbounds float, ptr %f7.host, i64 %4614
  %4616 = load float, ptr %4615, align 4, !tbaa !54
  %4617 = insertelement <4 x float> %4613, float %4616, i64 1
  %4618 = extractelement <4 x i64> %4609, i64 2
  %4619 = getelementptr inbounds float, ptr %f7.host, i64 %4618
  %4620 = load float, ptr %4619, align 4, !tbaa !54
  %4621 = insertelement <4 x float> %4617, float %4620, i64 2
  %4622 = extractelement <4 x i64> %4609, i64 3
  %4623 = getelementptr inbounds float, ptr %f7.host, i64 %4622
  %4624 = load float, ptr %4623, align 4, !tbaa !54
  %4625 = insertelement <4 x float> %4621, float %4624, i64 3
  %4626 = fmul <4 x float> %4625, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4627 = insertelement <4 x i32> undef, i32 %t2532, i64 0
  %4628 = shufflevector <4 x i32> %4627, <4 x i32> undef, <4 x i32> zeroinitializer
  %4629 = add <4 x i32> %4628, <i32 -1, i32 0, i32 1, i32 2>
  %4630 = add <4 x i32> %4629, %t2539
  %4631 = sext <4 x i32> %4630 to <4 x i64>
  %4632 = extractelement <4 x i64> %4631, i64 0
  %4633 = getelementptr inbounds float, ptr %f7.host, i64 %4632
  %4634 = load float, ptr %4633, align 4, !tbaa !54
  %4635 = insertelement <4 x float> undef, float %4634, i64 0
  %4636 = extractelement <4 x i64> %4631, i64 1
  %4637 = getelementptr inbounds float, ptr %f7.host, i64 %4636
  %4638 = load float, ptr %4637, align 4, !tbaa !54
  %4639 = insertelement <4 x float> %4635, float %4638, i64 1
  %4640 = extractelement <4 x i64> %4631, i64 2
  %4641 = getelementptr inbounds float, ptr %f7.host, i64 %4640
  %4642 = load float, ptr %4641, align 4, !tbaa !54
  %4643 = insertelement <4 x float> %4639, float %4642, i64 2
  %4644 = extractelement <4 x i64> %4631, i64 3
  %4645 = getelementptr inbounds float, ptr %f7.host, i64 %4644
  %4646 = load float, ptr %4645, align 4, !tbaa !54
  %4647 = insertelement <4 x float> %4643, float %4646, i64 3
  %4648 = fmul <4 x float> %4647, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4649 = fadd <4 x float> %4626, %4648
  %4650 = fmul <4 x float> %4649, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4651 = fadd <4 x float> %4604, %4650
  %4652 = mul nsw <4 x i32> %4548, %824
  %4653 = insertelement <4 x i32> undef, i32 %4545, i64 0
  %4654 = shufflevector <4 x i32> %4653, <4 x i32> undef, <4 x i32> zeroinitializer
  %4655 = add nsw <4 x i32> %4654, <i32 0, i32 2, i32 4, i32 6>
  %4656 = add nsw <4 x i32> %4652, %4655
  %4657 = sext <4 x i32> %4656 to <4 x i64>
  %4658 = extractelement <4 x i64> %4657, i64 0
  %4659 = getelementptr inbounds float, ptr %f6.host, i64 %4658
  %4660 = load float, ptr %4659, align 4, !tbaa !50
  %4661 = insertelement <4 x float> undef, float %4660, i64 0
  %4662 = extractelement <4 x i64> %4657, i64 1
  %4663 = getelementptr inbounds float, ptr %f6.host, i64 %4662
  %4664 = load float, ptr %4663, align 4, !tbaa !50
  %4665 = insertelement <4 x float> %4661, float %4664, i64 1
  %4666 = extractelement <4 x i64> %4657, i64 2
  %4667 = getelementptr inbounds float, ptr %f6.host, i64 %4666
  %4668 = load float, ptr %4667, align 4, !tbaa !50
  %4669 = insertelement <4 x float> %4665, float %4668, i64 2
  %4670 = extractelement <4 x i64> %4657, i64 3
  %4671 = getelementptr inbounds float, ptr %f6.host, i64 %4670
  %4672 = load float, ptr %4671, align 4, !tbaa !50
  %4673 = insertelement <4 x float> %4669, float %4672, i64 3
  %4674 = fsub <4 x float> %4673, %4651
  %4675 = fmul <4 x float> %t2522, %4674
  %4676 = add nsw <4 x i32> %t2533, %4561
  %4677 = sext <4 x i32> %4676 to <4 x i64>
  %4678 = extractelement <4 x i64> %4677, i64 0
  %4679 = getelementptr inbounds float, ptr %f7.host, i64 %4678
  %4680 = load float, ptr %4679, align 4, !tbaa !54
  %4681 = insertelement <4 x float> undef, float %4680, i64 0
  %4682 = extractelement <4 x i64> %4677, i64 1
  %4683 = getelementptr inbounds float, ptr %f7.host, i64 %4682
  %4684 = load float, ptr %4683, align 4, !tbaa !54
  %4685 = insertelement <4 x float> %4681, float %4684, i64 1
  %4686 = extractelement <4 x i64> %4677, i64 2
  %4687 = getelementptr inbounds float, ptr %f7.host, i64 %4686
  %4688 = load float, ptr %4687, align 4, !tbaa !54
  %4689 = insertelement <4 x float> %4685, float %4688, i64 2
  %4690 = extractelement <4 x i64> %4677, i64 3
  %4691 = getelementptr inbounds float, ptr %f7.host, i64 %4690
  %4692 = load float, ptr %4691, align 4, !tbaa !54
  %4693 = insertelement <4 x float> %4689, float %4692, i64 3
  %4694 = fmul <4 x float> %4693, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4695 = add <4 x i32> %4583, %t2533
  %4696 = sext <4 x i32> %4695 to <4 x i64>
  %4697 = extractelement <4 x i64> %4696, i64 0
  %4698 = getelementptr inbounds float, ptr %f7.host, i64 %4697
  %4699 = load float, ptr %4698, align 4, !tbaa !54
  %4700 = insertelement <4 x float> undef, float %4699, i64 0
  %4701 = extractelement <4 x i64> %4696, i64 1
  %4702 = getelementptr inbounds float, ptr %f7.host, i64 %4701
  %4703 = load float, ptr %4702, align 4, !tbaa !54
  %4704 = insertelement <4 x float> %4700, float %4703, i64 1
  %4705 = extractelement <4 x i64> %4696, i64 2
  %4706 = getelementptr inbounds float, ptr %f7.host, i64 %4705
  %4707 = load float, ptr %4706, align 4, !tbaa !54
  %4708 = insertelement <4 x float> %4704, float %4707, i64 2
  %4709 = extractelement <4 x i64> %4696, i64 3
  %4710 = getelementptr inbounds float, ptr %f7.host, i64 %4709
  %4711 = load float, ptr %4710, align 4, !tbaa !54
  %4712 = insertelement <4 x float> %4708, float %4711, i64 3
  %4713 = fmul <4 x float> %4712, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4714 = fadd <4 x float> %4694, %4713
  %4715 = fmul <4 x float> %4714, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4716 = add nsw <4 x i32> %t2533, %4607
  %4717 = sext <4 x i32> %4716 to <4 x i64>
  %4718 = extractelement <4 x i64> %4717, i64 0
  %4719 = getelementptr inbounds float, ptr %f7.host, i64 %4718
  %4720 = load float, ptr %4719, align 4, !tbaa !54
  %4721 = insertelement <4 x float> undef, float %4720, i64 0
  %4722 = extractelement <4 x i64> %4717, i64 1
  %4723 = getelementptr inbounds float, ptr %f7.host, i64 %4722
  %4724 = load float, ptr %4723, align 4, !tbaa !54
  %4725 = insertelement <4 x float> %4721, float %4724, i64 1
  %4726 = extractelement <4 x i64> %4717, i64 2
  %4727 = getelementptr inbounds float, ptr %f7.host, i64 %4726
  %4728 = load float, ptr %4727, align 4, !tbaa !54
  %4729 = insertelement <4 x float> %4725, float %4728, i64 2
  %4730 = extractelement <4 x i64> %4717, i64 3
  %4731 = getelementptr inbounds float, ptr %f7.host, i64 %4730
  %4732 = load float, ptr %4731, align 4, !tbaa !54
  %4733 = insertelement <4 x float> %4729, float %4732, i64 3
  %4734 = fmul <4 x float> %4733, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4735 = add <4 x i32> %4629, %t2533
  %4736 = sext <4 x i32> %4735 to <4 x i64>
  %4737 = extractelement <4 x i64> %4736, i64 0
  %4738 = getelementptr inbounds float, ptr %f7.host, i64 %4737
  %4739 = load float, ptr %4738, align 4, !tbaa !54
  %4740 = insertelement <4 x float> undef, float %4739, i64 0
  %4741 = extractelement <4 x i64> %4736, i64 1
  %4742 = getelementptr inbounds float, ptr %f7.host, i64 %4741
  %4743 = load float, ptr %4742, align 4, !tbaa !54
  %4744 = insertelement <4 x float> %4740, float %4743, i64 1
  %4745 = extractelement <4 x i64> %4736, i64 2
  %4746 = getelementptr inbounds float, ptr %f7.host, i64 %4745
  %4747 = load float, ptr %4746, align 4, !tbaa !54
  %4748 = insertelement <4 x float> %4744, float %4747, i64 2
  %4749 = extractelement <4 x i64> %4736, i64 3
  %4750 = getelementptr inbounds float, ptr %f7.host, i64 %4749
  %4751 = load float, ptr %4750, align 4, !tbaa !54
  %4752 = insertelement <4 x float> %4748, float %4751, i64 3
  %4753 = fmul <4 x float> %4752, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4754 = fadd <4 x float> %4734, %4753
  %4755 = fmul <4 x float> %4754, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4756 = fadd <4 x float> %4715, %4755
  %4757 = mul nsw <4 x i32> %t2529, %824
  %4758 = add nsw <4 x i32> %4757, %4655
  %4759 = sext <4 x i32> %4758 to <4 x i64>
  %4760 = extractelement <4 x i64> %4759, i64 0
  %4761 = getelementptr inbounds float, ptr %f6.host, i64 %4760
  %4762 = load float, ptr %4761, align 4, !tbaa !50
  %4763 = insertelement <4 x float> undef, float %4762, i64 0
  %4764 = extractelement <4 x i64> %4759, i64 1
  %4765 = getelementptr inbounds float, ptr %f6.host, i64 %4764
  %4766 = load float, ptr %4765, align 4, !tbaa !50
  %4767 = insertelement <4 x float> %4763, float %4766, i64 1
  %4768 = extractelement <4 x i64> %4759, i64 2
  %4769 = getelementptr inbounds float, ptr %f6.host, i64 %4768
  %4770 = load float, ptr %4769, align 4, !tbaa !50
  %4771 = insertelement <4 x float> %4767, float %4770, i64 2
  %4772 = extractelement <4 x i64> %4759, i64 3
  %4773 = getelementptr inbounds float, ptr %f6.host, i64 %4772
  %4774 = load float, ptr %4773, align 4, !tbaa !50
  %4775 = insertelement <4 x float> %4771, float %4774, i64 3
  %4776 = fsub <4 x float> %4775, %4756
  %4777 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2522
  %4778 = fmul <4 x float> %4777, %4776
  %4779 = fadd <4 x float> %4675, %4778
  %narrow137 = sub nsw i32 %4534, %f129.v3.min_realized
  %4780 = sext i32 %narrow137 to i64
  %4781 = add nsw i64 %4780, %4526
  %4782 = getelementptr inbounds float, ptr %128, i64 %4781
  %4783 = load <4 x float>, ptr %4782, align 4, !tbaa !64
  %4784 = fmul <4 x float> %4783, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4785 = sext i32 %t2518 to i64
  %4786 = sub nsw i64 %4785, %825
  %4787 = add nsw i64 %4527, %4786
  %4788 = getelementptr inbounds float, ptr %128, i64 %4787
  %4789 = load <4 x float>, ptr %4788, align 4, !tbaa !64
  %4790 = fmul <4 x float> %4789, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4791 = fadd <4 x float> %4784, %4790
  %4792 = fmul <4 x float> %4791, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4793 = add nsw i64 %4780, %4528
  %4794 = getelementptr inbounds float, ptr %128, i64 %4793
  %4795 = load <4 x float>, ptr %4794, align 4, !tbaa !64
  %4796 = fmul <4 x float> %4795, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4797 = add nsw i64 %4529, %4786
  %4798 = getelementptr inbounds float, ptr %128, i64 %4797
  %4799 = load <4 x float>, ptr %4798, align 4, !tbaa !64
  %4800 = fmul <4 x float> %4799, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4801 = fadd <4 x float> %4796, %4800
  %4802 = fmul <4 x float> %4801, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4803 = fadd <4 x float> %4792, %4802
  %4804 = fadd <4 x float> %4779, %4803
  %4805 = insertelement <4 x i32> undef, i32 %t2553, i64 0
  %4806 = shufflevector <4 x i32> %4805, <4 x i32> undef, <4 x i32> zeroinitializer
  %4807 = add nsw <4 x i32> %4806, <i32 0, i32 1, i32 2, i32 3>
  %4808 = add nsw <4 x i32> %t2554, %4807
  %4809 = sext <4 x i32> %4808 to <4 x i64>
  %4810 = extractelement <4 x i64> %4809, i64 0
  %4811 = getelementptr inbounds float, ptr %f7.host, i64 %4810
  %4812 = load float, ptr %4811, align 4, !tbaa !54
  %4813 = insertelement <4 x float> undef, float %4812, i64 0
  %4814 = extractelement <4 x i64> %4809, i64 1
  %4815 = getelementptr inbounds float, ptr %f7.host, i64 %4814
  %4816 = load float, ptr %4815, align 4, !tbaa !54
  %4817 = insertelement <4 x float> %4813, float %4816, i64 1
  %4818 = extractelement <4 x i64> %4809, i64 2
  %4819 = getelementptr inbounds float, ptr %f7.host, i64 %4818
  %4820 = load float, ptr %4819, align 4, !tbaa !54
  %4821 = insertelement <4 x float> %4817, float %4820, i64 2
  %4822 = extractelement <4 x i64> %4809, i64 3
  %4823 = getelementptr inbounds float, ptr %f7.host, i64 %4822
  %4824 = load float, ptr %4823, align 4, !tbaa !54
  %4825 = insertelement <4 x float> %4821, float %4824, i64 3
  %4826 = fmul <4 x float> %4825, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4827 = insertelement <4 x i32> undef, i32 %t2552, i64 0
  %4828 = shufflevector <4 x i32> %4827, <4 x i32> undef, <4 x i32> zeroinitializer
  %4829 = add <4 x i32> %4828, <i32 -1, i32 0, i32 1, i32 2>
  %4830 = add <4 x i32> %4829, %t2554
  %4831 = sext <4 x i32> %4830 to <4 x i64>
  %4832 = extractelement <4 x i64> %4831, i64 0
  %4833 = getelementptr inbounds float, ptr %f7.host, i64 %4832
  %4834 = load float, ptr %4833, align 4, !tbaa !54
  %4835 = insertelement <4 x float> undef, float %4834, i64 0
  %4836 = extractelement <4 x i64> %4831, i64 1
  %4837 = getelementptr inbounds float, ptr %f7.host, i64 %4836
  %4838 = load float, ptr %4837, align 4, !tbaa !54
  %4839 = insertelement <4 x float> %4835, float %4838, i64 1
  %4840 = extractelement <4 x i64> %4831, i64 2
  %4841 = getelementptr inbounds float, ptr %f7.host, i64 %4840
  %4842 = load float, ptr %4841, align 4, !tbaa !54
  %4843 = insertelement <4 x float> %4839, float %4842, i64 2
  %4844 = extractelement <4 x i64> %4831, i64 3
  %4845 = getelementptr inbounds float, ptr %f7.host, i64 %4844
  %4846 = load float, ptr %4845, align 4, !tbaa !54
  %4847 = insertelement <4 x float> %4843, float %4846, i64 3
  %4848 = fmul <4 x float> %4847, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4849 = fadd <4 x float> %4826, %4848
  %4850 = fmul <4 x float> %4849, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4851 = insertelement <4 x i32> undef, i32 %t2551, i64 0
  %4852 = shufflevector <4 x i32> %4851, <4 x i32> undef, <4 x i32> zeroinitializer
  %4853 = add nsw <4 x i32> %4852, <i32 0, i32 1, i32 2, i32 3>
  %4854 = add nsw <4 x i32> %t2554, %4853
  %4855 = sext <4 x i32> %4854 to <4 x i64>
  %4856 = extractelement <4 x i64> %4855, i64 0
  %4857 = getelementptr inbounds float, ptr %f7.host, i64 %4856
  %4858 = load float, ptr %4857, align 4, !tbaa !54
  %4859 = insertelement <4 x float> undef, float %4858, i64 0
  %4860 = extractelement <4 x i64> %4855, i64 1
  %4861 = getelementptr inbounds float, ptr %f7.host, i64 %4860
  %4862 = load float, ptr %4861, align 4, !tbaa !54
  %4863 = insertelement <4 x float> %4859, float %4862, i64 1
  %4864 = extractelement <4 x i64> %4855, i64 2
  %4865 = getelementptr inbounds float, ptr %f7.host, i64 %4864
  %4866 = load float, ptr %4865, align 4, !tbaa !54
  %4867 = insertelement <4 x float> %4863, float %4866, i64 2
  %4868 = extractelement <4 x i64> %4855, i64 3
  %4869 = getelementptr inbounds float, ptr %f7.host, i64 %4868
  %4870 = load float, ptr %4869, align 4, !tbaa !54
  %4871 = insertelement <4 x float> %4867, float %4870, i64 3
  %4872 = fmul <4 x float> %4871, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4873 = insertelement <4 x i32> undef, i32 %t2548, i64 0
  %4874 = shufflevector <4 x i32> %4873, <4 x i32> undef, <4 x i32> zeroinitializer
  %4875 = add <4 x i32> %4874, <i32 -1, i32 0, i32 1, i32 2>
  %4876 = add <4 x i32> %4875, %t2554
  %4877 = sext <4 x i32> %4876 to <4 x i64>
  %4878 = extractelement <4 x i64> %4877, i64 0
  %4879 = getelementptr inbounds float, ptr %f7.host, i64 %4878
  %4880 = load float, ptr %4879, align 4, !tbaa !54
  %4881 = insertelement <4 x float> undef, float %4880, i64 0
  %4882 = extractelement <4 x i64> %4877, i64 1
  %4883 = getelementptr inbounds float, ptr %f7.host, i64 %4882
  %4884 = load float, ptr %4883, align 4, !tbaa !54
  %4885 = insertelement <4 x float> %4881, float %4884, i64 1
  %4886 = extractelement <4 x i64> %4877, i64 2
  %4887 = getelementptr inbounds float, ptr %f7.host, i64 %4886
  %4888 = load float, ptr %4887, align 4, !tbaa !54
  %4889 = insertelement <4 x float> %4885, float %4888, i64 2
  %4890 = extractelement <4 x i64> %4877, i64 3
  %4891 = getelementptr inbounds float, ptr %f7.host, i64 %4890
  %4892 = load float, ptr %4891, align 4, !tbaa !54
  %4893 = insertelement <4 x float> %4889, float %4892, i64 3
  %4894 = fmul <4 x float> %4893, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4895 = fadd <4 x float> %4872, %4894
  %4896 = fmul <4 x float> %4895, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4897 = fadd <4 x float> %4850, %4896
  %4898 = mul nsw <4 x i32> %4558, %824
  %4899 = add i32 %4545, 1
  %4900 = insertelement <4 x i32> undef, i32 %4899, i64 0
  %4901 = shufflevector <4 x i32> %4900, <4 x i32> undef, <4 x i32> zeroinitializer
  %4902 = add nsw <4 x i32> %4901, <i32 0, i32 2, i32 4, i32 6>
  %4903 = add nsw <4 x i32> %4898, %4902
  %4904 = sext <4 x i32> %4903 to <4 x i64>
  %4905 = extractelement <4 x i64> %4904, i64 0
  %4906 = getelementptr inbounds float, ptr %f6.host, i64 %4905
  %4907 = load float, ptr %4906, align 4, !tbaa !50
  %4908 = insertelement <4 x float> undef, float %4907, i64 0
  %4909 = extractelement <4 x i64> %4904, i64 1
  %4910 = getelementptr inbounds float, ptr %f6.host, i64 %4909
  %4911 = load float, ptr %4910, align 4, !tbaa !50
  %4912 = insertelement <4 x float> %4908, float %4911, i64 1
  %4913 = extractelement <4 x i64> %4904, i64 2
  %4914 = getelementptr inbounds float, ptr %f6.host, i64 %4913
  %4915 = load float, ptr %4914, align 4, !tbaa !50
  %4916 = insertelement <4 x float> %4912, float %4915, i64 2
  %4917 = extractelement <4 x i64> %4904, i64 3
  %4918 = getelementptr inbounds float, ptr %f6.host, i64 %4917
  %4919 = load float, ptr %4918, align 4, !tbaa !50
  %4920 = insertelement <4 x float> %4916, float %4919, i64 3
  %4921 = fsub <4 x float> %4920, %4897
  %4922 = fmul <4 x float> %t2543, %4921
  %4923 = add nsw <4 x i32> %t2549, %4807
  %4924 = sext <4 x i32> %4923 to <4 x i64>
  %4925 = extractelement <4 x i64> %4924, i64 0
  %4926 = getelementptr inbounds float, ptr %f7.host, i64 %4925
  %4927 = load float, ptr %4926, align 4, !tbaa !54
  %4928 = insertelement <4 x float> undef, float %4927, i64 0
  %4929 = extractelement <4 x i64> %4924, i64 1
  %4930 = getelementptr inbounds float, ptr %f7.host, i64 %4929
  %4931 = load float, ptr %4930, align 4, !tbaa !54
  %4932 = insertelement <4 x float> %4928, float %4931, i64 1
  %4933 = extractelement <4 x i64> %4924, i64 2
  %4934 = getelementptr inbounds float, ptr %f7.host, i64 %4933
  %4935 = load float, ptr %4934, align 4, !tbaa !54
  %4936 = insertelement <4 x float> %4932, float %4935, i64 2
  %4937 = extractelement <4 x i64> %4924, i64 3
  %4938 = getelementptr inbounds float, ptr %f7.host, i64 %4937
  %4939 = load float, ptr %4938, align 4, !tbaa !54
  %4940 = insertelement <4 x float> %4936, float %4939, i64 3
  %4941 = fmul <4 x float> %4940, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4942 = add <4 x i32> %t2549, %4828
  %4943 = add <4 x i32> %4942, <i32 -1, i32 0, i32 1, i32 2>
  %4944 = sext <4 x i32> %4943 to <4 x i64>
  %4945 = extractelement <4 x i64> %4944, i64 0
  %4946 = getelementptr inbounds float, ptr %f7.host, i64 %4945
  %4947 = load float, ptr %4946, align 4, !tbaa !54
  %4948 = insertelement <4 x float> undef, float %4947, i64 0
  %4949 = extractelement <4 x i64> %4944, i64 1
  %4950 = getelementptr inbounds float, ptr %f7.host, i64 %4949
  %4951 = load float, ptr %4950, align 4, !tbaa !54
  %4952 = insertelement <4 x float> %4948, float %4951, i64 1
  %4953 = extractelement <4 x i64> %4944, i64 2
  %4954 = getelementptr inbounds float, ptr %f7.host, i64 %4953
  %4955 = load float, ptr %4954, align 4, !tbaa !54
  %4956 = insertelement <4 x float> %4952, float %4955, i64 2
  %4957 = extractelement <4 x i64> %4944, i64 3
  %4958 = getelementptr inbounds float, ptr %f7.host, i64 %4957
  %4959 = load float, ptr %4958, align 4, !tbaa !54
  %4960 = insertelement <4 x float> %4956, float %4959, i64 3
  %4961 = fmul <4 x float> %4960, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %4962 = fadd <4 x float> %4941, %4961
  %4963 = fmul <4 x float> %4962, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4964 = add nsw <4 x i32> %t2549, %4853
  %4965 = sext <4 x i32> %4964 to <4 x i64>
  %4966 = extractelement <4 x i64> %4965, i64 0
  %4967 = getelementptr inbounds float, ptr %f7.host, i64 %4966
  %4968 = load float, ptr %4967, align 4, !tbaa !54
  %4969 = insertelement <4 x float> undef, float %4968, i64 0
  %4970 = extractelement <4 x i64> %4965, i64 1
  %4971 = getelementptr inbounds float, ptr %f7.host, i64 %4970
  %4972 = load float, ptr %4971, align 4, !tbaa !54
  %4973 = insertelement <4 x float> %4969, float %4972, i64 1
  %4974 = extractelement <4 x i64> %4965, i64 2
  %4975 = getelementptr inbounds float, ptr %f7.host, i64 %4974
  %4976 = load float, ptr %4975, align 4, !tbaa !54
  %4977 = insertelement <4 x float> %4973, float %4976, i64 2
  %4978 = extractelement <4 x i64> %4965, i64 3
  %4979 = getelementptr inbounds float, ptr %f7.host, i64 %4978
  %4980 = load float, ptr %4979, align 4, !tbaa !54
  %4981 = insertelement <4 x float> %4977, float %4980, i64 3
  %4982 = fmul <4 x float> %4981, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %4983 = add <4 x i32> %t2549, %4874
  %4984 = add <4 x i32> %4983, <i32 -1, i32 0, i32 1, i32 2>
  %4985 = sext <4 x i32> %4984 to <4 x i64>
  %4986 = extractelement <4 x i64> %4985, i64 0
  %4987 = getelementptr inbounds float, ptr %f7.host, i64 %4986
  %4988 = load float, ptr %4987, align 4, !tbaa !54
  %4989 = insertelement <4 x float> undef, float %4988, i64 0
  %4990 = extractelement <4 x i64> %4985, i64 1
  %4991 = getelementptr inbounds float, ptr %f7.host, i64 %4990
  %4992 = load float, ptr %4991, align 4, !tbaa !54
  %4993 = insertelement <4 x float> %4989, float %4992, i64 1
  %4994 = extractelement <4 x i64> %4985, i64 2
  %4995 = getelementptr inbounds float, ptr %f7.host, i64 %4994
  %4996 = load float, ptr %4995, align 4, !tbaa !54
  %4997 = insertelement <4 x float> %4993, float %4996, i64 2
  %4998 = extractelement <4 x i64> %4985, i64 3
  %4999 = getelementptr inbounds float, ptr %f7.host, i64 %4998
  %5000 = load float, ptr %4999, align 4, !tbaa !54
  %5001 = insertelement <4 x float> %4997, float %5000, i64 3
  %5002 = fmul <4 x float> %5001, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5003 = fadd <4 x float> %4982, %5002
  %5004 = fmul <4 x float> %5003, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5005 = fadd <4 x float> %4963, %5004
  %5006 = mul nsw <4 x i32> %t2546, %824
  %5007 = add nsw <4 x i32> %5006, %4902
  %5008 = sext <4 x i32> %5007 to <4 x i64>
  %5009 = extractelement <4 x i64> %5008, i64 0
  %5010 = getelementptr inbounds float, ptr %f6.host, i64 %5009
  %5011 = load float, ptr %5010, align 4, !tbaa !50
  %5012 = insertelement <4 x float> undef, float %5011, i64 0
  %5013 = extractelement <4 x i64> %5008, i64 1
  %5014 = getelementptr inbounds float, ptr %f6.host, i64 %5013
  %5015 = load float, ptr %5014, align 4, !tbaa !50
  %5016 = insertelement <4 x float> %5012, float %5015, i64 1
  %5017 = extractelement <4 x i64> %5008, i64 2
  %5018 = getelementptr inbounds float, ptr %f6.host, i64 %5017
  %5019 = load float, ptr %5018, align 4, !tbaa !50
  %5020 = insertelement <4 x float> %5016, float %5019, i64 2
  %5021 = extractelement <4 x i64> %5008, i64 3
  %5022 = getelementptr inbounds float, ptr %f6.host, i64 %5021
  %5023 = load float, ptr %5022, align 4, !tbaa !50
  %5024 = insertelement <4 x float> %5020, float %5023, i64 3
  %5025 = fsub <4 x float> %5024, %5005
  %5026 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2543
  %5027 = fmul <4 x float> %5026, %5025
  %5028 = fadd <4 x float> %4922, %5027
  %narrow138 = sub nsw i32 %4552, %f129.v3.min_realized
  %5029 = sext i32 %narrow138 to i64
  %5030 = add nsw i64 %5029, %4526
  %5031 = getelementptr inbounds float, ptr %128, i64 %5030
  %5032 = load <4 x float>, ptr %5031, align 4, !tbaa !64
  %5033 = fmul <4 x float> %5032, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5034 = sext i32 %t2540 to i64
  %5035 = sub nsw i64 %5034, %825
  %5036 = add nsw i64 %4527, %5035
  %5037 = getelementptr inbounds float, ptr %128, i64 %5036
  %5038 = load <4 x float>, ptr %5037, align 4, !tbaa !64
  %5039 = fmul <4 x float> %5038, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5040 = fadd <4 x float> %5033, %5039
  %5041 = fmul <4 x float> %5040, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5042 = add nsw i64 %5029, %4528
  %5043 = getelementptr inbounds float, ptr %128, i64 %5042
  %5044 = load <4 x float>, ptr %5043, align 4, !tbaa !64
  %5045 = fmul <4 x float> %5044, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5046 = add nsw i64 %4529, %5035
  %5047 = getelementptr inbounds float, ptr %128, i64 %5046
  %5048 = load <4 x float>, ptr %5047, align 4, !tbaa !64
  %5049 = fmul <4 x float> %5048, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5050 = fadd <4 x float> %5045, %5049
  %5051 = fmul <4 x float> %5050, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5052 = fadd <4 x float> %5041, %5051
  %5053 = fadd <4 x float> %5028, %5052
  %5054 = shufflevector <4 x float> %4804, <4 x float> %5053, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %5055 = sext i32 %4533 to i64
  %5056 = add nsw i64 %4532, %5055
  %5057 = getelementptr inbounds float, ptr %154, i64 %5056
  store <8 x float> %5054, ptr %5057, align 4, !tbaa !66
  %lsr.iv.next290 = add i32 %lsr.iv289, -1
  %lsr.iv.next292 = add nuw i32 %lsr.iv291, 8
  %.not140 = icmp eq i32 %lsr.iv.next290, 0
  br i1 %.not140, label %"end for f128.s0.v3.v338", label %"for f128.s0.v3.v337"

"end for f128.s0.v3.v338":                        ; preds = %"for f128.s0.v3.v337", %true_bb34
  br i1 %.not129, label %"produce f12745", label %"for f128.s0.v3.v341.preheader", !prof !4

"for f128.s0.v3.v341.preheader":                  ; preds = %"end for f128.s0.v3.v338"
  %5058 = trunc i64 %3411 to i32
  %5059 = add i32 %5058, 21
  %5060 = ashr i32 %5059, 3
  %5061 = shl nsw i32 %5060, 1
  %5062 = and i32 %5061, 2
  %5063 = ashr i32 %5059, 4
  %t2555 = add nsw i32 %5062, %5063
  %5064 = sub nsw i32 %5060, %f74.v4.min_realized
  %5065 = mul nsw i32 %5064, %819
  %t2558 = add nsw i32 %3208, %5065
  %5066 = sext i32 %t2558 to i64
  %5067 = getelementptr inbounds float, ptr %f74.host, i64 %5066
  %5068 = load <4 x float>, ptr %5067, align 4, !tbaa !56
  %5069 = add nsw i64 %5066, 4
  %5070 = getelementptr inbounds float, ptr %f74.host, i64 %5069
  %5071 = load <4 x float>, ptr %5070, align 4, !tbaa !56
  %5072 = shufflevector <4 x float> %5068, <4 x float> %5071, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2559 = fmul <4 x float> %232, %5072
  %a918 = fptosi <4 x float> %t2559 to <4 x i32>
  %a921 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a918)
  %5073 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a921, <4 x i32> zeroinitializer)
  %5074 = sitofp <4 x i32> %5073 to <4 x float>
  %t2561 = fsub <4 x float> %t2559, %5074
  %5075 = add nsw i32 %t2555, %820
  %t2563 = mul nsw i32 %5075, %117
  %5076 = sub nsw i32 %5063, %225
  %t2565 = mul nsw i32 %5076, %117
  %5077 = sub nsw i32 %5060, %f6.v4.min_realized
  %5078 = mul nsw i32 %5077, %f6.stride.1
  %t2566 = add nsw i32 %5078, %3209
  %t2568 = sub nsw <4 x i32> %5073, %241
  %5079 = add i32 %t2555, %821
  %5080 = mul nsw i32 %5079, %f7.stride.1
  %t2571 = add nsw i32 %5080, %3210
  %t2572 = mul nsw <4 x i32> %t2568, %248
  %t2574 = add nsw i32 %5080, %3211
  %5081 = sub nsw i32 %5063, %f7.v4.min_realized
  %5082 = mul nsw i32 %5081, %f7.stride.1
  %t2576 = add nsw i32 %5082, %3210
  %t2577 = add nsw i32 %5082, %3211
  %5083 = add nsw <4 x i32> %t2568, <i32 1, i32 1, i32 1, i32 1>
  %t2578 = mul nsw <4 x i32> %5083, %248
  %5084 = shufflevector <4 x float> %5068, <4 x float> %5071, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2580 = fmul <4 x float> %232, %5084
  %a922 = fptosi <4 x float> %t2580 to <4 x i32>
  %a925 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a922)
  %5085 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a925, <4 x i32> zeroinitializer)
  %5086 = sitofp <4 x i32> %5085 to <4 x float>
  %t2582 = fsub <4 x float> %t2580, %5086
  %t2585 = sub nsw <4 x i32> %5085, %241
  %t2587 = add nsw i32 %5080, %3216
  %t2588 = mul nsw <4 x i32> %t2585, %248
  %t2590 = add nsw i32 %5080, %3217
  %t2591 = add nsw i32 %5082, %3216
  %t2592 = add nsw i32 %5082, %3217
  %5087 = add nsw <4 x i32> %t2585, <i32 1, i32 1, i32 1, i32 1>
  %t2593 = mul nsw <4 x i32> %5087, %248
  %5088 = insertelement <4 x i32> undef, i32 %t2577, i64 0
  %5089 = shufflevector <4 x i32> %5088, <4 x i32> undef, <4 x i32> zeroinitializer
  %5090 = add nsw <4 x i32> %5089, <i32 0, i32 1, i32 2, i32 3>
  %5091 = add nsw <4 x i32> %t2578, %5090
  %5092 = sext <4 x i32> %5091 to <4 x i64>
  %5093 = extractelement <4 x i64> %5092, i64 0
  %5094 = getelementptr inbounds float, ptr %f7.host, i64 %5093
  %5095 = load float, ptr %5094, align 4, !tbaa !54
  %5096 = insertelement <4 x float> undef, float %5095, i64 0
  %5097 = extractelement <4 x i64> %5092, i64 1
  %5098 = getelementptr inbounds float, ptr %f7.host, i64 %5097
  %5099 = load float, ptr %5098, align 4, !tbaa !54
  %5100 = insertelement <4 x float> %5096, float %5099, i64 1
  %5101 = extractelement <4 x i64> %5092, i64 2
  %5102 = getelementptr inbounds float, ptr %f7.host, i64 %5101
  %5103 = load float, ptr %5102, align 4, !tbaa !54
  %5104 = insertelement <4 x float> %5100, float %5103, i64 2
  %5105 = extractelement <4 x i64> %5092, i64 3
  %5106 = getelementptr inbounds float, ptr %f7.host, i64 %5105
  %5107 = load float, ptr %5106, align 4, !tbaa !54
  %5108 = insertelement <4 x float> %5104, float %5107, i64 3
  %5109 = fmul <4 x float> %5108, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5110 = insertelement <4 x i32> undef, i32 %t2576, i64 0
  %5111 = shufflevector <4 x i32> %5110, <4 x i32> undef, <4 x i32> zeroinitializer
  %5112 = add <4 x i32> %5111, <i32 -1, i32 0, i32 1, i32 2>
  %5113 = add <4 x i32> %5112, %t2578
  %5114 = sext <4 x i32> %5113 to <4 x i64>
  %5115 = extractelement <4 x i64> %5114, i64 0
  %5116 = getelementptr inbounds float, ptr %f7.host, i64 %5115
  %5117 = load float, ptr %5116, align 4, !tbaa !54
  %5118 = insertelement <4 x float> undef, float %5117, i64 0
  %5119 = extractelement <4 x i64> %5114, i64 1
  %5120 = getelementptr inbounds float, ptr %f7.host, i64 %5119
  %5121 = load float, ptr %5120, align 4, !tbaa !54
  %5122 = insertelement <4 x float> %5118, float %5121, i64 1
  %5123 = extractelement <4 x i64> %5114, i64 2
  %5124 = getelementptr inbounds float, ptr %f7.host, i64 %5123
  %5125 = load float, ptr %5124, align 4, !tbaa !54
  %5126 = insertelement <4 x float> %5122, float %5125, i64 2
  %5127 = extractelement <4 x i64> %5114, i64 3
  %5128 = getelementptr inbounds float, ptr %f7.host, i64 %5127
  %5129 = load float, ptr %5128, align 4, !tbaa !54
  %5130 = insertelement <4 x float> %5126, float %5129, i64 3
  %5131 = fmul <4 x float> %5130, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5132 = fadd <4 x float> %5109, %5131
  %5133 = fmul <4 x float> %5132, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5134 = insertelement <4 x i32> undef, i32 %t2574, i64 0
  %5135 = shufflevector <4 x i32> %5134, <4 x i32> undef, <4 x i32> zeroinitializer
  %5136 = add nsw <4 x i32> %5135, <i32 0, i32 1, i32 2, i32 3>
  %5137 = add nsw <4 x i32> %t2578, %5136
  %5138 = sext <4 x i32> %5137 to <4 x i64>
  %5139 = extractelement <4 x i64> %5138, i64 0
  %5140 = getelementptr inbounds float, ptr %f7.host, i64 %5139
  %5141 = load float, ptr %5140, align 4, !tbaa !54
  %5142 = insertelement <4 x float> undef, float %5141, i64 0
  %5143 = extractelement <4 x i64> %5138, i64 1
  %5144 = getelementptr inbounds float, ptr %f7.host, i64 %5143
  %5145 = load float, ptr %5144, align 4, !tbaa !54
  %5146 = insertelement <4 x float> %5142, float %5145, i64 1
  %5147 = extractelement <4 x i64> %5138, i64 2
  %5148 = getelementptr inbounds float, ptr %f7.host, i64 %5147
  %5149 = load float, ptr %5148, align 4, !tbaa !54
  %5150 = insertelement <4 x float> %5146, float %5149, i64 2
  %5151 = extractelement <4 x i64> %5138, i64 3
  %5152 = getelementptr inbounds float, ptr %f7.host, i64 %5151
  %5153 = load float, ptr %5152, align 4, !tbaa !54
  %5154 = insertelement <4 x float> %5150, float %5153, i64 3
  %5155 = fmul <4 x float> %5154, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5156 = insertelement <4 x i32> undef, i32 %t2571, i64 0
  %5157 = shufflevector <4 x i32> %5156, <4 x i32> undef, <4 x i32> zeroinitializer
  %5158 = add <4 x i32> %5157, <i32 -1, i32 0, i32 1, i32 2>
  %5159 = add <4 x i32> %5158, %t2578
  %5160 = sext <4 x i32> %5159 to <4 x i64>
  %5161 = extractelement <4 x i64> %5160, i64 0
  %5162 = getelementptr inbounds float, ptr %f7.host, i64 %5161
  %5163 = load float, ptr %5162, align 4, !tbaa !54
  %5164 = insertelement <4 x float> undef, float %5163, i64 0
  %5165 = extractelement <4 x i64> %5160, i64 1
  %5166 = getelementptr inbounds float, ptr %f7.host, i64 %5165
  %5167 = load float, ptr %5166, align 4, !tbaa !54
  %5168 = insertelement <4 x float> %5164, float %5167, i64 1
  %5169 = extractelement <4 x i64> %5160, i64 2
  %5170 = getelementptr inbounds float, ptr %f7.host, i64 %5169
  %5171 = load float, ptr %5170, align 4, !tbaa !54
  %5172 = insertelement <4 x float> %5168, float %5171, i64 2
  %5173 = extractelement <4 x i64> %5160, i64 3
  %5174 = getelementptr inbounds float, ptr %f7.host, i64 %5173
  %5175 = load float, ptr %5174, align 4, !tbaa !54
  %5176 = insertelement <4 x float> %5172, float %5175, i64 3
  %5177 = fmul <4 x float> %5176, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5178 = fadd <4 x float> %5155, %5177
  %5179 = fmul <4 x float> %5178, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5180 = fadd <4 x float> %5133, %5179
  %5181 = mul nsw <4 x i32> %5083, %824
  %5182 = insertelement <4 x i32> undef, i32 %t2566, i64 0
  %5183 = shufflevector <4 x i32> %5182, <4 x i32> undef, <4 x i32> zeroinitializer
  %5184 = add nsw <4 x i32> %5183, <i32 0, i32 2, i32 4, i32 6>
  %5185 = add nsw <4 x i32> %5181, %5184
  %5186 = sext <4 x i32> %5185 to <4 x i64>
  %5187 = extractelement <4 x i64> %5186, i64 0
  %5188 = getelementptr inbounds float, ptr %f6.host, i64 %5187
  %5189 = load float, ptr %5188, align 4, !tbaa !50
  %5190 = insertelement <4 x float> undef, float %5189, i64 0
  %5191 = extractelement <4 x i64> %5186, i64 1
  %5192 = getelementptr inbounds float, ptr %f6.host, i64 %5191
  %5193 = load float, ptr %5192, align 4, !tbaa !50
  %5194 = insertelement <4 x float> %5190, float %5193, i64 1
  %5195 = extractelement <4 x i64> %5186, i64 2
  %5196 = getelementptr inbounds float, ptr %f6.host, i64 %5195
  %5197 = load float, ptr %5196, align 4, !tbaa !50
  %5198 = insertelement <4 x float> %5194, float %5197, i64 2
  %5199 = extractelement <4 x i64> %5186, i64 3
  %5200 = getelementptr inbounds float, ptr %f6.host, i64 %5199
  %5201 = load float, ptr %5200, align 4, !tbaa !50
  %5202 = insertelement <4 x float> %5198, float %5201, i64 3
  %5203 = fsub <4 x float> %5202, %5180
  %5204 = fmul <4 x float> %t2561, %5203
  %5205 = add nsw <4 x i32> %t2572, %5090
  %5206 = sext <4 x i32> %5205 to <4 x i64>
  %5207 = extractelement <4 x i64> %5206, i64 0
  %5208 = getelementptr inbounds float, ptr %f7.host, i64 %5207
  %5209 = load float, ptr %5208, align 4, !tbaa !54
  %5210 = insertelement <4 x float> undef, float %5209, i64 0
  %5211 = extractelement <4 x i64> %5206, i64 1
  %5212 = getelementptr inbounds float, ptr %f7.host, i64 %5211
  %5213 = load float, ptr %5212, align 4, !tbaa !54
  %5214 = insertelement <4 x float> %5210, float %5213, i64 1
  %5215 = extractelement <4 x i64> %5206, i64 2
  %5216 = getelementptr inbounds float, ptr %f7.host, i64 %5215
  %5217 = load float, ptr %5216, align 4, !tbaa !54
  %5218 = insertelement <4 x float> %5214, float %5217, i64 2
  %5219 = extractelement <4 x i64> %5206, i64 3
  %5220 = getelementptr inbounds float, ptr %f7.host, i64 %5219
  %5221 = load float, ptr %5220, align 4, !tbaa !54
  %5222 = insertelement <4 x float> %5218, float %5221, i64 3
  %5223 = fmul <4 x float> %5222, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5224 = add <4 x i32> %5112, %t2572
  %5225 = sext <4 x i32> %5224 to <4 x i64>
  %5226 = extractelement <4 x i64> %5225, i64 0
  %5227 = getelementptr inbounds float, ptr %f7.host, i64 %5226
  %5228 = load float, ptr %5227, align 4, !tbaa !54
  %5229 = insertelement <4 x float> undef, float %5228, i64 0
  %5230 = extractelement <4 x i64> %5225, i64 1
  %5231 = getelementptr inbounds float, ptr %f7.host, i64 %5230
  %5232 = load float, ptr %5231, align 4, !tbaa !54
  %5233 = insertelement <4 x float> %5229, float %5232, i64 1
  %5234 = extractelement <4 x i64> %5225, i64 2
  %5235 = getelementptr inbounds float, ptr %f7.host, i64 %5234
  %5236 = load float, ptr %5235, align 4, !tbaa !54
  %5237 = insertelement <4 x float> %5233, float %5236, i64 2
  %5238 = extractelement <4 x i64> %5225, i64 3
  %5239 = getelementptr inbounds float, ptr %f7.host, i64 %5238
  %5240 = load float, ptr %5239, align 4, !tbaa !54
  %5241 = insertelement <4 x float> %5237, float %5240, i64 3
  %5242 = fmul <4 x float> %5241, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5243 = fadd <4 x float> %5223, %5242
  %5244 = fmul <4 x float> %5243, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5245 = add nsw <4 x i32> %t2572, %5136
  %5246 = sext <4 x i32> %5245 to <4 x i64>
  %5247 = extractelement <4 x i64> %5246, i64 0
  %5248 = getelementptr inbounds float, ptr %f7.host, i64 %5247
  %5249 = load float, ptr %5248, align 4, !tbaa !54
  %5250 = insertelement <4 x float> undef, float %5249, i64 0
  %5251 = extractelement <4 x i64> %5246, i64 1
  %5252 = getelementptr inbounds float, ptr %f7.host, i64 %5251
  %5253 = load float, ptr %5252, align 4, !tbaa !54
  %5254 = insertelement <4 x float> %5250, float %5253, i64 1
  %5255 = extractelement <4 x i64> %5246, i64 2
  %5256 = getelementptr inbounds float, ptr %f7.host, i64 %5255
  %5257 = load float, ptr %5256, align 4, !tbaa !54
  %5258 = insertelement <4 x float> %5254, float %5257, i64 2
  %5259 = extractelement <4 x i64> %5246, i64 3
  %5260 = getelementptr inbounds float, ptr %f7.host, i64 %5259
  %5261 = load float, ptr %5260, align 4, !tbaa !54
  %5262 = insertelement <4 x float> %5258, float %5261, i64 3
  %5263 = fmul <4 x float> %5262, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5264 = add <4 x i32> %5158, %t2572
  %5265 = sext <4 x i32> %5264 to <4 x i64>
  %5266 = extractelement <4 x i64> %5265, i64 0
  %5267 = getelementptr inbounds float, ptr %f7.host, i64 %5266
  %5268 = load float, ptr %5267, align 4, !tbaa !54
  %5269 = insertelement <4 x float> undef, float %5268, i64 0
  %5270 = extractelement <4 x i64> %5265, i64 1
  %5271 = getelementptr inbounds float, ptr %f7.host, i64 %5270
  %5272 = load float, ptr %5271, align 4, !tbaa !54
  %5273 = insertelement <4 x float> %5269, float %5272, i64 1
  %5274 = extractelement <4 x i64> %5265, i64 2
  %5275 = getelementptr inbounds float, ptr %f7.host, i64 %5274
  %5276 = load float, ptr %5275, align 4, !tbaa !54
  %5277 = insertelement <4 x float> %5273, float %5276, i64 2
  %5278 = extractelement <4 x i64> %5265, i64 3
  %5279 = getelementptr inbounds float, ptr %f7.host, i64 %5278
  %5280 = load float, ptr %5279, align 4, !tbaa !54
  %5281 = insertelement <4 x float> %5277, float %5280, i64 3
  %5282 = fmul <4 x float> %5281, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5283 = fadd <4 x float> %5263, %5282
  %5284 = fmul <4 x float> %5283, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5285 = fadd <4 x float> %5244, %5284
  %5286 = mul nsw <4 x i32> %t2568, %824
  %5287 = add nsw <4 x i32> %5286, %5184
  %5288 = sext <4 x i32> %5287 to <4 x i64>
  %5289 = extractelement <4 x i64> %5288, i64 0
  %5290 = getelementptr inbounds float, ptr %f6.host, i64 %5289
  %5291 = load float, ptr %5290, align 4, !tbaa !50
  %5292 = insertelement <4 x float> undef, float %5291, i64 0
  %5293 = extractelement <4 x i64> %5288, i64 1
  %5294 = getelementptr inbounds float, ptr %f6.host, i64 %5293
  %5295 = load float, ptr %5294, align 4, !tbaa !50
  %5296 = insertelement <4 x float> %5292, float %5295, i64 1
  %5297 = extractelement <4 x i64> %5288, i64 2
  %5298 = getelementptr inbounds float, ptr %f6.host, i64 %5297
  %5299 = load float, ptr %5298, align 4, !tbaa !50
  %5300 = insertelement <4 x float> %5296, float %5299, i64 2
  %5301 = extractelement <4 x i64> %5288, i64 3
  %5302 = getelementptr inbounds float, ptr %f6.host, i64 %5301
  %5303 = load float, ptr %5302, align 4, !tbaa !50
  %5304 = insertelement <4 x float> %5300, float %5303, i64 3
  %5305 = fsub <4 x float> %5304, %5285
  %5306 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2561
  %5307 = fmul <4 x float> %5306, %5305
  %5308 = fadd <4 x float> %5204, %5307
  %5309 = sext i32 %t2565 to i64
  %5310 = add nsw i64 %5309, %3218
  %5311 = getelementptr inbounds float, ptr %128, i64 %5310
  %5312 = load <4 x float>, ptr %5311, align 4, !tbaa !64
  %5313 = fmul <4 x float> %5312, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5314 = add nsw i64 %3220, %5309
  %5315 = getelementptr inbounds float, ptr %128, i64 %5314
  %5316 = load <4 x float>, ptr %5315, align 4, !tbaa !64
  %5317 = fmul <4 x float> %5316, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5318 = fadd <4 x float> %5313, %5317
  %5319 = fmul <4 x float> %5318, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5320 = sext i32 %t2563 to i64
  %5321 = add nsw i64 %5320, %3218
  %5322 = getelementptr inbounds float, ptr %128, i64 %5321
  %5323 = load <4 x float>, ptr %5322, align 4, !tbaa !64
  %5324 = fmul <4 x float> %5323, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5325 = add nsw i64 %3220, %5320
  %5326 = getelementptr inbounds float, ptr %128, i64 %5325
  %5327 = load <4 x float>, ptr %5326, align 4, !tbaa !64
  %5328 = fmul <4 x float> %5327, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5329 = fadd <4 x float> %5324, %5328
  %5330 = fmul <4 x float> %5329, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5331 = fadd <4 x float> %5319, %5330
  %5332 = fadd <4 x float> %5308, %5331
  %5333 = insertelement <4 x i32> undef, i32 %t2592, i64 0
  %5334 = shufflevector <4 x i32> %5333, <4 x i32> undef, <4 x i32> zeroinitializer
  %5335 = add nsw <4 x i32> %5334, <i32 0, i32 1, i32 2, i32 3>
  %5336 = add nsw <4 x i32> %t2593, %5335
  %5337 = sext <4 x i32> %5336 to <4 x i64>
  %5338 = extractelement <4 x i64> %5337, i64 0
  %5339 = getelementptr inbounds float, ptr %f7.host, i64 %5338
  %5340 = load float, ptr %5339, align 4, !tbaa !54
  %5341 = insertelement <4 x float> undef, float %5340, i64 0
  %5342 = extractelement <4 x i64> %5337, i64 1
  %5343 = getelementptr inbounds float, ptr %f7.host, i64 %5342
  %5344 = load float, ptr %5343, align 4, !tbaa !54
  %5345 = insertelement <4 x float> %5341, float %5344, i64 1
  %5346 = extractelement <4 x i64> %5337, i64 2
  %5347 = getelementptr inbounds float, ptr %f7.host, i64 %5346
  %5348 = load float, ptr %5347, align 4, !tbaa !54
  %5349 = insertelement <4 x float> %5345, float %5348, i64 2
  %5350 = extractelement <4 x i64> %5337, i64 3
  %5351 = getelementptr inbounds float, ptr %f7.host, i64 %5350
  %5352 = load float, ptr %5351, align 4, !tbaa !54
  %5353 = insertelement <4 x float> %5349, float %5352, i64 3
  %5354 = fmul <4 x float> %5353, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5355 = insertelement <4 x i32> undef, i32 %t2591, i64 0
  %5356 = shufflevector <4 x i32> %5355, <4 x i32> undef, <4 x i32> zeroinitializer
  %5357 = add <4 x i32> %5356, <i32 -1, i32 0, i32 1, i32 2>
  %5358 = add <4 x i32> %5357, %t2593
  %5359 = sext <4 x i32> %5358 to <4 x i64>
  %5360 = extractelement <4 x i64> %5359, i64 0
  %5361 = getelementptr inbounds float, ptr %f7.host, i64 %5360
  %5362 = load float, ptr %5361, align 4, !tbaa !54
  %5363 = insertelement <4 x float> undef, float %5362, i64 0
  %5364 = extractelement <4 x i64> %5359, i64 1
  %5365 = getelementptr inbounds float, ptr %f7.host, i64 %5364
  %5366 = load float, ptr %5365, align 4, !tbaa !54
  %5367 = insertelement <4 x float> %5363, float %5366, i64 1
  %5368 = extractelement <4 x i64> %5359, i64 2
  %5369 = getelementptr inbounds float, ptr %f7.host, i64 %5368
  %5370 = load float, ptr %5369, align 4, !tbaa !54
  %5371 = insertelement <4 x float> %5367, float %5370, i64 2
  %5372 = extractelement <4 x i64> %5359, i64 3
  %5373 = getelementptr inbounds float, ptr %f7.host, i64 %5372
  %5374 = load float, ptr %5373, align 4, !tbaa !54
  %5375 = insertelement <4 x float> %5371, float %5374, i64 3
  %5376 = fmul <4 x float> %5375, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5377 = fadd <4 x float> %5354, %5376
  %5378 = fmul <4 x float> %5377, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5379 = insertelement <4 x i32> undef, i32 %t2590, i64 0
  %5380 = shufflevector <4 x i32> %5379, <4 x i32> undef, <4 x i32> zeroinitializer
  %5381 = add nsw <4 x i32> %5380, <i32 0, i32 1, i32 2, i32 3>
  %5382 = add nsw <4 x i32> %t2593, %5381
  %5383 = sext <4 x i32> %5382 to <4 x i64>
  %5384 = extractelement <4 x i64> %5383, i64 0
  %5385 = getelementptr inbounds float, ptr %f7.host, i64 %5384
  %5386 = load float, ptr %5385, align 4, !tbaa !54
  %5387 = insertelement <4 x float> undef, float %5386, i64 0
  %5388 = extractelement <4 x i64> %5383, i64 1
  %5389 = getelementptr inbounds float, ptr %f7.host, i64 %5388
  %5390 = load float, ptr %5389, align 4, !tbaa !54
  %5391 = insertelement <4 x float> %5387, float %5390, i64 1
  %5392 = extractelement <4 x i64> %5383, i64 2
  %5393 = getelementptr inbounds float, ptr %f7.host, i64 %5392
  %5394 = load float, ptr %5393, align 4, !tbaa !54
  %5395 = insertelement <4 x float> %5391, float %5394, i64 2
  %5396 = extractelement <4 x i64> %5383, i64 3
  %5397 = getelementptr inbounds float, ptr %f7.host, i64 %5396
  %5398 = load float, ptr %5397, align 4, !tbaa !54
  %5399 = insertelement <4 x float> %5395, float %5398, i64 3
  %5400 = fmul <4 x float> %5399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5401 = insertelement <4 x i32> undef, i32 %t2587, i64 0
  %5402 = shufflevector <4 x i32> %5401, <4 x i32> undef, <4 x i32> zeroinitializer
  %5403 = add <4 x i32> %5402, <i32 -1, i32 0, i32 1, i32 2>
  %5404 = add <4 x i32> %5403, %t2593
  %5405 = sext <4 x i32> %5404 to <4 x i64>
  %5406 = extractelement <4 x i64> %5405, i64 0
  %5407 = getelementptr inbounds float, ptr %f7.host, i64 %5406
  %5408 = load float, ptr %5407, align 4, !tbaa !54
  %5409 = insertelement <4 x float> undef, float %5408, i64 0
  %5410 = extractelement <4 x i64> %5405, i64 1
  %5411 = getelementptr inbounds float, ptr %f7.host, i64 %5410
  %5412 = load float, ptr %5411, align 4, !tbaa !54
  %5413 = insertelement <4 x float> %5409, float %5412, i64 1
  %5414 = extractelement <4 x i64> %5405, i64 2
  %5415 = getelementptr inbounds float, ptr %f7.host, i64 %5414
  %5416 = load float, ptr %5415, align 4, !tbaa !54
  %5417 = insertelement <4 x float> %5413, float %5416, i64 2
  %5418 = extractelement <4 x i64> %5405, i64 3
  %5419 = getelementptr inbounds float, ptr %f7.host, i64 %5418
  %5420 = load float, ptr %5419, align 4, !tbaa !54
  %5421 = insertelement <4 x float> %5417, float %5420, i64 3
  %5422 = fmul <4 x float> %5421, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5423 = fadd <4 x float> %5400, %5422
  %5424 = fmul <4 x float> %5423, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5425 = fadd <4 x float> %5378, %5424
  %5426 = mul nsw <4 x i32> %5087, %824
  %5427 = add nsw i32 %t2566, 1
  %5428 = insertelement <4 x i32> undef, i32 %5427, i64 0
  %5429 = shufflevector <4 x i32> %5428, <4 x i32> undef, <4 x i32> zeroinitializer
  %5430 = add nsw <4 x i32> %5429, <i32 0, i32 2, i32 4, i32 6>
  %5431 = add nsw <4 x i32> %5426, %5430
  %5432 = sext <4 x i32> %5431 to <4 x i64>
  %5433 = extractelement <4 x i64> %5432, i64 0
  %5434 = getelementptr inbounds float, ptr %f6.host, i64 %5433
  %5435 = load float, ptr %5434, align 4, !tbaa !50
  %5436 = insertelement <4 x float> undef, float %5435, i64 0
  %5437 = extractelement <4 x i64> %5432, i64 1
  %5438 = getelementptr inbounds float, ptr %f6.host, i64 %5437
  %5439 = load float, ptr %5438, align 4, !tbaa !50
  %5440 = insertelement <4 x float> %5436, float %5439, i64 1
  %5441 = extractelement <4 x i64> %5432, i64 2
  %5442 = getelementptr inbounds float, ptr %f6.host, i64 %5441
  %5443 = load float, ptr %5442, align 4, !tbaa !50
  %5444 = insertelement <4 x float> %5440, float %5443, i64 2
  %5445 = extractelement <4 x i64> %5432, i64 3
  %5446 = getelementptr inbounds float, ptr %f6.host, i64 %5445
  %5447 = load float, ptr %5446, align 4, !tbaa !50
  %5448 = insertelement <4 x float> %5444, float %5447, i64 3
  %5449 = fsub <4 x float> %5448, %5425
  %5450 = fmul <4 x float> %t2582, %5449
  %5451 = add nsw <4 x i32> %t2588, %5335
  %5452 = sext <4 x i32> %5451 to <4 x i64>
  %5453 = extractelement <4 x i64> %5452, i64 0
  %5454 = getelementptr inbounds float, ptr %f7.host, i64 %5453
  %5455 = load float, ptr %5454, align 4, !tbaa !54
  %5456 = insertelement <4 x float> undef, float %5455, i64 0
  %5457 = extractelement <4 x i64> %5452, i64 1
  %5458 = getelementptr inbounds float, ptr %f7.host, i64 %5457
  %5459 = load float, ptr %5458, align 4, !tbaa !54
  %5460 = insertelement <4 x float> %5456, float %5459, i64 1
  %5461 = extractelement <4 x i64> %5452, i64 2
  %5462 = getelementptr inbounds float, ptr %f7.host, i64 %5461
  %5463 = load float, ptr %5462, align 4, !tbaa !54
  %5464 = insertelement <4 x float> %5460, float %5463, i64 2
  %5465 = extractelement <4 x i64> %5452, i64 3
  %5466 = getelementptr inbounds float, ptr %f7.host, i64 %5465
  %5467 = load float, ptr %5466, align 4, !tbaa !54
  %5468 = insertelement <4 x float> %5464, float %5467, i64 3
  %5469 = fmul <4 x float> %5468, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5470 = add <4 x i32> %5357, %t2588
  %5471 = sext <4 x i32> %5470 to <4 x i64>
  %5472 = extractelement <4 x i64> %5471, i64 0
  %5473 = getelementptr inbounds float, ptr %f7.host, i64 %5472
  %5474 = load float, ptr %5473, align 4, !tbaa !54
  %5475 = insertelement <4 x float> undef, float %5474, i64 0
  %5476 = extractelement <4 x i64> %5471, i64 1
  %5477 = getelementptr inbounds float, ptr %f7.host, i64 %5476
  %5478 = load float, ptr %5477, align 4, !tbaa !54
  %5479 = insertelement <4 x float> %5475, float %5478, i64 1
  %5480 = extractelement <4 x i64> %5471, i64 2
  %5481 = getelementptr inbounds float, ptr %f7.host, i64 %5480
  %5482 = load float, ptr %5481, align 4, !tbaa !54
  %5483 = insertelement <4 x float> %5479, float %5482, i64 2
  %5484 = extractelement <4 x i64> %5471, i64 3
  %5485 = getelementptr inbounds float, ptr %f7.host, i64 %5484
  %5486 = load float, ptr %5485, align 4, !tbaa !54
  %5487 = insertelement <4 x float> %5483, float %5486, i64 3
  %5488 = fmul <4 x float> %5487, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5489 = fadd <4 x float> %5469, %5488
  %5490 = fmul <4 x float> %5489, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5491 = add nsw <4 x i32> %t2588, %5381
  %5492 = sext <4 x i32> %5491 to <4 x i64>
  %5493 = extractelement <4 x i64> %5492, i64 0
  %5494 = getelementptr inbounds float, ptr %f7.host, i64 %5493
  %5495 = load float, ptr %5494, align 4, !tbaa !54
  %5496 = insertelement <4 x float> undef, float %5495, i64 0
  %5497 = extractelement <4 x i64> %5492, i64 1
  %5498 = getelementptr inbounds float, ptr %f7.host, i64 %5497
  %5499 = load float, ptr %5498, align 4, !tbaa !54
  %5500 = insertelement <4 x float> %5496, float %5499, i64 1
  %5501 = extractelement <4 x i64> %5492, i64 2
  %5502 = getelementptr inbounds float, ptr %f7.host, i64 %5501
  %5503 = load float, ptr %5502, align 4, !tbaa !54
  %5504 = insertelement <4 x float> %5500, float %5503, i64 2
  %5505 = extractelement <4 x i64> %5492, i64 3
  %5506 = getelementptr inbounds float, ptr %f7.host, i64 %5505
  %5507 = load float, ptr %5506, align 4, !tbaa !54
  %5508 = insertelement <4 x float> %5504, float %5507, i64 3
  %5509 = fmul <4 x float> %5508, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5510 = add <4 x i32> %5403, %t2588
  %5511 = sext <4 x i32> %5510 to <4 x i64>
  %5512 = extractelement <4 x i64> %5511, i64 0
  %5513 = getelementptr inbounds float, ptr %f7.host, i64 %5512
  %5514 = load float, ptr %5513, align 4, !tbaa !54
  %5515 = insertelement <4 x float> undef, float %5514, i64 0
  %5516 = extractelement <4 x i64> %5511, i64 1
  %5517 = getelementptr inbounds float, ptr %f7.host, i64 %5516
  %5518 = load float, ptr %5517, align 4, !tbaa !54
  %5519 = insertelement <4 x float> %5515, float %5518, i64 1
  %5520 = extractelement <4 x i64> %5511, i64 2
  %5521 = getelementptr inbounds float, ptr %f7.host, i64 %5520
  %5522 = load float, ptr %5521, align 4, !tbaa !54
  %5523 = insertelement <4 x float> %5519, float %5522, i64 2
  %5524 = extractelement <4 x i64> %5511, i64 3
  %5525 = getelementptr inbounds float, ptr %f7.host, i64 %5524
  %5526 = load float, ptr %5525, align 4, !tbaa !54
  %5527 = insertelement <4 x float> %5523, float %5526, i64 3
  %5528 = fmul <4 x float> %5527, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5529 = fadd <4 x float> %5509, %5528
  %5530 = fmul <4 x float> %5529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5531 = fadd <4 x float> %5490, %5530
  %5532 = mul nsw <4 x i32> %t2585, %824
  %5533 = add nsw <4 x i32> %5532, %5430
  %5534 = sext <4 x i32> %5533 to <4 x i64>
  %5535 = extractelement <4 x i64> %5534, i64 0
  %5536 = getelementptr inbounds float, ptr %f6.host, i64 %5535
  %5537 = load float, ptr %5536, align 4, !tbaa !50
  %5538 = insertelement <4 x float> undef, float %5537, i64 0
  %5539 = extractelement <4 x i64> %5534, i64 1
  %5540 = getelementptr inbounds float, ptr %f6.host, i64 %5539
  %5541 = load float, ptr %5540, align 4, !tbaa !50
  %5542 = insertelement <4 x float> %5538, float %5541, i64 1
  %5543 = extractelement <4 x i64> %5534, i64 2
  %5544 = getelementptr inbounds float, ptr %f6.host, i64 %5543
  %5545 = load float, ptr %5544, align 4, !tbaa !50
  %5546 = insertelement <4 x float> %5542, float %5545, i64 2
  %5547 = extractelement <4 x i64> %5534, i64 3
  %5548 = getelementptr inbounds float, ptr %f6.host, i64 %5547
  %5549 = load float, ptr %5548, align 4, !tbaa !50
  %5550 = insertelement <4 x float> %5546, float %5549, i64 3
  %5551 = fsub <4 x float> %5550, %5531
  %5552 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2582
  %5553 = fmul <4 x float> %5552, %5551
  %5554 = fadd <4 x float> %5450, %5553
  %5555 = add nsw i64 %5309, %3221
  %5556 = getelementptr inbounds float, ptr %128, i64 %5555
  %5557 = load <4 x float>, ptr %5556, align 4, !tbaa !64
  %5558 = fmul <4 x float> %5557, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5559 = add nsw i64 %3223, %5309
  %5560 = getelementptr inbounds float, ptr %128, i64 %5559
  %5561 = load <4 x float>, ptr %5560, align 4, !tbaa !64
  %5562 = fmul <4 x float> %5561, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5563 = fadd <4 x float> %5558, %5562
  %5564 = fmul <4 x float> %5563, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5565 = add nsw i64 %5320, %3221
  %5566 = getelementptr inbounds float, ptr %128, i64 %5565
  %5567 = load <4 x float>, ptr %5566, align 4, !tbaa !64
  %5568 = fmul <4 x float> %5567, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5569 = add nsw i64 %3223, %5320
  %5570 = getelementptr inbounds float, ptr %128, i64 %5569
  %5571 = load <4 x float>, ptr %5570, align 4, !tbaa !64
  %5572 = fmul <4 x float> %5571, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5573 = fadd <4 x float> %5568, %5572
  %5574 = fmul <4 x float> %5573, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5575 = fadd <4 x float> %5564, %5574
  %5576 = fadd <4 x float> %5554, %5575
  %5577 = shufflevector <4 x float> %5332, <4 x float> %5576, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %narrow134 = sub nsw i32 %5060, %816
  %5578 = sext i32 %narrow134 to i64
  %5579 = mul nsw i64 %827, %5578
  %5580 = add nsw i64 %5579, %3224
  %5581 = getelementptr inbounds float, ptr %154, i64 %5580
  store <8 x float> %5577, ptr %5581, align 4, !tbaa !66
  br label %"produce f12745"

"produce f12745":                                 ; preds = %"for f128.s0.v3.v341.preheader", %"end for f128.s0.v3.v338", %"produce f12832"
  %5582 = trunc i64 %3411 to i32
  %5583 = add i32 %5582, 1
  %5584 = and i32 %5583, 3
  %5585 = icmp eq i32 %5584, 3
  br i1 %5585, label %true_bb47, label %"produce f12658"

true_bb47:                                        ; preds = %"produce f12745"
  br i1 %3228, label %"for f127.s0.v3.v350.preheader", label %"end for f127.s0.v3.v351", !prof !5

"for f127.s0.v3.v350.preheader":                  ; preds = %true_bb47
  %5586 = trunc i64 %3411 to i32
  %5587 = add i32 %5586, 9
  %5588 = ashr i32 %5587, 2
  %5589 = shl nsw i32 %5588, 1
  %5590 = and i32 %5589, 2
  %5591 = ashr i32 %5587, 3
  %t2594 = add nsw i32 %5590, %5591
  %5592 = sub nsw i32 %5588, %f73.v4.min_realized
  %5593 = mul nsw i32 %5592, %1386
  %5594 = add i32 %3231, %5593
  %5595 = add nsw i32 %t2594, %1387
  %t2601 = mul nsw i32 %5595, %147
  %5596 = sub nsw i32 %5591, %816
  %t2603 = mul nsw i32 %5596, %147
  %5597 = sub nsw i32 %5588, %f5.v4.min_realized
  %5598 = mul nsw i32 %5597, %f5.stride.1
  %5599 = add i32 %3232, %5598
  %5600 = add i32 %t2594, %1388
  %5601 = mul nsw i32 %5600, %f6.stride.1
  %5602 = sub nsw i32 %5591, %f6.v4.min_realized
  %5603 = mul nsw i32 %5602, %f6.stride.1
  %5604 = sext i32 %t2603 to i64
  %5605 = add nsw i64 %5604, -1
  %5606 = sext i32 %t2601 to i64
  %5607 = add nsw i64 %5606, -1
  %5608 = sext i32 %5588 to i64
  %5609 = sub nsw i64 %5608, %1395
  %5610 = mul nsw i64 %5609, %1394
  %5611 = sub nsw i64 %5610, %1396
  br label %"for f127.s0.v3.v350"

"for f127.s0.v3.v350":                            ; preds = %"for f127.s0.v3.v350.preheader", %"for f127.s0.v3.v350"
  %lsr.iv297 = phi i32 [ %lsr.iv.next298, %"for f127.s0.v3.v350" ], [ 0, %"for f127.s0.v3.v350.preheader" ]
  %lsr.iv295 = phi i32 [ %lsr.iv.next296, %"for f127.s0.v3.v350" ], [ %a927, %"for f127.s0.v3.v350.preheader" ]
  %5612 = add i32 %lsr.iv297, %135
  %5613 = ashr i32 %5612, 1
  %t2595 = add nsw i32 %5613, %3230
  %5614 = add i32 %5594, %lsr.iv297
  %5615 = sext i32 %5614 to i64
  %5616 = getelementptr inbounds float, ptr %f73.host, i64 %5615
  %5617 = load <4 x float>, ptr %5616, align 4, !tbaa !52
  %5618 = add nsw i64 %5615, 4
  %5619 = getelementptr inbounds float, ptr %f73.host, i64 %5618
  %5620 = load <4 x float>, ptr %5619, align 4, !tbaa !52
  %5621 = shufflevector <4 x float> %5617, <4 x float> %5620, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2597 = fmul <4 x float> %232, %5621
  %a928 = fptosi <4 x float> %t2597 to <4 x i32>
  %a931 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a928)
  %5622 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a931, <4 x i32> zeroinitializer)
  %5623 = sitofp <4 x i32> %5622 to <4 x float>
  %t2599 = fsub <4 x float> %t2597, %5623
  %5624 = add i32 %5599, %lsr.iv297
  %t2606 = sub nsw <4 x i32> %5622, %241
  %5625 = sub nsw i32 %t2595, %f6.v3.min_realized
  %t2609 = add nsw i32 %5625, %5601
  %t2610 = mul nsw <4 x i32> %t2606, %824
  %5626 = sub nsw i32 %5613, %f6.v3.min_realized
  %t2612 = add nsw i32 %5626, %5601
  %t2614 = add nsw i32 %5625, %5603
  %t2615 = add nsw i32 %5626, %5603
  %5627 = add nsw <4 x i32> %t2606, <i32 1, i32 1, i32 1, i32 1>
  %t2616 = mul nsw <4 x i32> %5627, %824
  %5628 = add i32 %5612, 1
  %5629 = shl i32 %5628, 1
  %5630 = and i32 %5629, 2
  %5631 = ashr i32 %5628, 1
  %t2617 = add nsw i32 %5630, %5631
  %5632 = shufflevector <4 x float> %5617, <4 x float> %5620, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2618 = fmul <4 x float> %232, %5632
  %a932 = fptosi <4 x float> %t2618 to <4 x i32>
  %a935 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a932)
  %5633 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a935, <4 x i32> zeroinitializer)
  %5634 = sitofp <4 x i32> %5633 to <4 x float>
  %t2620 = fsub <4 x float> %t2618, %5634
  %t2623 = sub nsw <4 x i32> %5633, %241
  %5635 = sub nsw i32 %t2617, %f6.v3.min_realized
  %t2625 = add nsw i32 %5635, %5601
  %t2626 = mul nsw <4 x i32> %t2623, %824
  %5636 = sub nsw i32 %5631, %f6.v3.min_realized
  %t2628 = add nsw i32 %5636, %5601
  %t2629 = add nsw i32 %5635, %5603
  %t2630 = add nsw i32 %5636, %5603
  %5637 = add nsw <4 x i32> %t2623, <i32 1, i32 1, i32 1, i32 1>
  %t2631 = mul nsw <4 x i32> %5637, %824
  %5638 = insertelement <4 x i32> undef, i32 %t2615, i64 0
  %5639 = shufflevector <4 x i32> %5638, <4 x i32> undef, <4 x i32> zeroinitializer
  %5640 = add nsw <4 x i32> %5639, <i32 0, i32 1, i32 2, i32 3>
  %5641 = add nsw <4 x i32> %t2616, %5640
  %5642 = sext <4 x i32> %5641 to <4 x i64>
  %5643 = extractelement <4 x i64> %5642, i64 0
  %5644 = getelementptr inbounds float, ptr %f6.host, i64 %5643
  %5645 = load float, ptr %5644, align 4, !tbaa !50
  %5646 = insertelement <4 x float> undef, float %5645, i64 0
  %5647 = extractelement <4 x i64> %5642, i64 1
  %5648 = getelementptr inbounds float, ptr %f6.host, i64 %5647
  %5649 = load float, ptr %5648, align 4, !tbaa !50
  %5650 = insertelement <4 x float> %5646, float %5649, i64 1
  %5651 = extractelement <4 x i64> %5642, i64 2
  %5652 = getelementptr inbounds float, ptr %f6.host, i64 %5651
  %5653 = load float, ptr %5652, align 4, !tbaa !50
  %5654 = insertelement <4 x float> %5650, float %5653, i64 2
  %5655 = extractelement <4 x i64> %5642, i64 3
  %5656 = getelementptr inbounds float, ptr %f6.host, i64 %5655
  %5657 = load float, ptr %5656, align 4, !tbaa !50
  %5658 = insertelement <4 x float> %5654, float %5657, i64 3
  %5659 = fmul <4 x float> %5658, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5660 = insertelement <4 x i32> undef, i32 %t2614, i64 0
  %5661 = shufflevector <4 x i32> %5660, <4 x i32> undef, <4 x i32> zeroinitializer
  %5662 = add <4 x i32> %5661, <i32 -1, i32 0, i32 1, i32 2>
  %5663 = add <4 x i32> %5662, %t2616
  %5664 = sext <4 x i32> %5663 to <4 x i64>
  %5665 = extractelement <4 x i64> %5664, i64 0
  %5666 = getelementptr inbounds float, ptr %f6.host, i64 %5665
  %5667 = load float, ptr %5666, align 4, !tbaa !50
  %5668 = insertelement <4 x float> undef, float %5667, i64 0
  %5669 = extractelement <4 x i64> %5664, i64 1
  %5670 = getelementptr inbounds float, ptr %f6.host, i64 %5669
  %5671 = load float, ptr %5670, align 4, !tbaa !50
  %5672 = insertelement <4 x float> %5668, float %5671, i64 1
  %5673 = extractelement <4 x i64> %5664, i64 2
  %5674 = getelementptr inbounds float, ptr %f6.host, i64 %5673
  %5675 = load float, ptr %5674, align 4, !tbaa !50
  %5676 = insertelement <4 x float> %5672, float %5675, i64 2
  %5677 = extractelement <4 x i64> %5664, i64 3
  %5678 = getelementptr inbounds float, ptr %f6.host, i64 %5677
  %5679 = load float, ptr %5678, align 4, !tbaa !50
  %5680 = insertelement <4 x float> %5676, float %5679, i64 3
  %5681 = fmul <4 x float> %5680, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5682 = fadd <4 x float> %5659, %5681
  %5683 = fmul <4 x float> %5682, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5684 = insertelement <4 x i32> undef, i32 %t2612, i64 0
  %5685 = shufflevector <4 x i32> %5684, <4 x i32> undef, <4 x i32> zeroinitializer
  %5686 = add nsw <4 x i32> %5685, <i32 0, i32 1, i32 2, i32 3>
  %5687 = add nsw <4 x i32> %t2616, %5686
  %5688 = sext <4 x i32> %5687 to <4 x i64>
  %5689 = extractelement <4 x i64> %5688, i64 0
  %5690 = getelementptr inbounds float, ptr %f6.host, i64 %5689
  %5691 = load float, ptr %5690, align 4, !tbaa !50
  %5692 = insertelement <4 x float> undef, float %5691, i64 0
  %5693 = extractelement <4 x i64> %5688, i64 1
  %5694 = getelementptr inbounds float, ptr %f6.host, i64 %5693
  %5695 = load float, ptr %5694, align 4, !tbaa !50
  %5696 = insertelement <4 x float> %5692, float %5695, i64 1
  %5697 = extractelement <4 x i64> %5688, i64 2
  %5698 = getelementptr inbounds float, ptr %f6.host, i64 %5697
  %5699 = load float, ptr %5698, align 4, !tbaa !50
  %5700 = insertelement <4 x float> %5696, float %5699, i64 2
  %5701 = extractelement <4 x i64> %5688, i64 3
  %5702 = getelementptr inbounds float, ptr %f6.host, i64 %5701
  %5703 = load float, ptr %5702, align 4, !tbaa !50
  %5704 = insertelement <4 x float> %5700, float %5703, i64 3
  %5705 = fmul <4 x float> %5704, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5706 = insertelement <4 x i32> undef, i32 %t2609, i64 0
  %5707 = shufflevector <4 x i32> %5706, <4 x i32> undef, <4 x i32> zeroinitializer
  %5708 = add <4 x i32> %5707, <i32 -1, i32 0, i32 1, i32 2>
  %5709 = add <4 x i32> %5708, %t2616
  %5710 = sext <4 x i32> %5709 to <4 x i64>
  %5711 = extractelement <4 x i64> %5710, i64 0
  %5712 = getelementptr inbounds float, ptr %f6.host, i64 %5711
  %5713 = load float, ptr %5712, align 4, !tbaa !50
  %5714 = insertelement <4 x float> undef, float %5713, i64 0
  %5715 = extractelement <4 x i64> %5710, i64 1
  %5716 = getelementptr inbounds float, ptr %f6.host, i64 %5715
  %5717 = load float, ptr %5716, align 4, !tbaa !50
  %5718 = insertelement <4 x float> %5714, float %5717, i64 1
  %5719 = extractelement <4 x i64> %5710, i64 2
  %5720 = getelementptr inbounds float, ptr %f6.host, i64 %5719
  %5721 = load float, ptr %5720, align 4, !tbaa !50
  %5722 = insertelement <4 x float> %5718, float %5721, i64 2
  %5723 = extractelement <4 x i64> %5710, i64 3
  %5724 = getelementptr inbounds float, ptr %f6.host, i64 %5723
  %5725 = load float, ptr %5724, align 4, !tbaa !50
  %5726 = insertelement <4 x float> %5722, float %5725, i64 3
  %5727 = fmul <4 x float> %5726, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5728 = fadd <4 x float> %5705, %5727
  %5729 = fmul <4 x float> %5728, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5730 = fadd <4 x float> %5683, %5729
  %5731 = mul nsw <4 x i32> %5627, %1391
  %5732 = insertelement <4 x i32> undef, i32 %5624, i64 0
  %5733 = shufflevector <4 x i32> %5732, <4 x i32> undef, <4 x i32> zeroinitializer
  %5734 = add nsw <4 x i32> %5733, <i32 0, i32 2, i32 4, i32 6>
  %5735 = add nsw <4 x i32> %5731, %5734
  %5736 = sext <4 x i32> %5735 to <4 x i64>
  %5737 = extractelement <4 x i64> %5736, i64 0
  %5738 = getelementptr inbounds float, ptr %f5.host, i64 %5737
  %5739 = load float, ptr %5738, align 4, !tbaa !46
  %5740 = insertelement <4 x float> undef, float %5739, i64 0
  %5741 = extractelement <4 x i64> %5736, i64 1
  %5742 = getelementptr inbounds float, ptr %f5.host, i64 %5741
  %5743 = load float, ptr %5742, align 4, !tbaa !46
  %5744 = insertelement <4 x float> %5740, float %5743, i64 1
  %5745 = extractelement <4 x i64> %5736, i64 2
  %5746 = getelementptr inbounds float, ptr %f5.host, i64 %5745
  %5747 = load float, ptr %5746, align 4, !tbaa !46
  %5748 = insertelement <4 x float> %5744, float %5747, i64 2
  %5749 = extractelement <4 x i64> %5736, i64 3
  %5750 = getelementptr inbounds float, ptr %f5.host, i64 %5749
  %5751 = load float, ptr %5750, align 4, !tbaa !46
  %5752 = insertelement <4 x float> %5748, float %5751, i64 3
  %5753 = fsub <4 x float> %5752, %5730
  %5754 = fmul <4 x float> %t2599, %5753
  %5755 = add nsw <4 x i32> %t2610, %5640
  %5756 = sext <4 x i32> %5755 to <4 x i64>
  %5757 = extractelement <4 x i64> %5756, i64 0
  %5758 = getelementptr inbounds float, ptr %f6.host, i64 %5757
  %5759 = load float, ptr %5758, align 4, !tbaa !50
  %5760 = insertelement <4 x float> undef, float %5759, i64 0
  %5761 = extractelement <4 x i64> %5756, i64 1
  %5762 = getelementptr inbounds float, ptr %f6.host, i64 %5761
  %5763 = load float, ptr %5762, align 4, !tbaa !50
  %5764 = insertelement <4 x float> %5760, float %5763, i64 1
  %5765 = extractelement <4 x i64> %5756, i64 2
  %5766 = getelementptr inbounds float, ptr %f6.host, i64 %5765
  %5767 = load float, ptr %5766, align 4, !tbaa !50
  %5768 = insertelement <4 x float> %5764, float %5767, i64 2
  %5769 = extractelement <4 x i64> %5756, i64 3
  %5770 = getelementptr inbounds float, ptr %f6.host, i64 %5769
  %5771 = load float, ptr %5770, align 4, !tbaa !50
  %5772 = insertelement <4 x float> %5768, float %5771, i64 3
  %5773 = fmul <4 x float> %5772, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5774 = add <4 x i32> %5662, %t2610
  %5775 = sext <4 x i32> %5774 to <4 x i64>
  %5776 = extractelement <4 x i64> %5775, i64 0
  %5777 = getelementptr inbounds float, ptr %f6.host, i64 %5776
  %5778 = load float, ptr %5777, align 4, !tbaa !50
  %5779 = insertelement <4 x float> undef, float %5778, i64 0
  %5780 = extractelement <4 x i64> %5775, i64 1
  %5781 = getelementptr inbounds float, ptr %f6.host, i64 %5780
  %5782 = load float, ptr %5781, align 4, !tbaa !50
  %5783 = insertelement <4 x float> %5779, float %5782, i64 1
  %5784 = extractelement <4 x i64> %5775, i64 2
  %5785 = getelementptr inbounds float, ptr %f6.host, i64 %5784
  %5786 = load float, ptr %5785, align 4, !tbaa !50
  %5787 = insertelement <4 x float> %5783, float %5786, i64 2
  %5788 = extractelement <4 x i64> %5775, i64 3
  %5789 = getelementptr inbounds float, ptr %f6.host, i64 %5788
  %5790 = load float, ptr %5789, align 4, !tbaa !50
  %5791 = insertelement <4 x float> %5787, float %5790, i64 3
  %5792 = fmul <4 x float> %5791, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5793 = fadd <4 x float> %5773, %5792
  %5794 = fmul <4 x float> %5793, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5795 = add nsw <4 x i32> %t2610, %5686
  %5796 = sext <4 x i32> %5795 to <4 x i64>
  %5797 = extractelement <4 x i64> %5796, i64 0
  %5798 = getelementptr inbounds float, ptr %f6.host, i64 %5797
  %5799 = load float, ptr %5798, align 4, !tbaa !50
  %5800 = insertelement <4 x float> undef, float %5799, i64 0
  %5801 = extractelement <4 x i64> %5796, i64 1
  %5802 = getelementptr inbounds float, ptr %f6.host, i64 %5801
  %5803 = load float, ptr %5802, align 4, !tbaa !50
  %5804 = insertelement <4 x float> %5800, float %5803, i64 1
  %5805 = extractelement <4 x i64> %5796, i64 2
  %5806 = getelementptr inbounds float, ptr %f6.host, i64 %5805
  %5807 = load float, ptr %5806, align 4, !tbaa !50
  %5808 = insertelement <4 x float> %5804, float %5807, i64 2
  %5809 = extractelement <4 x i64> %5796, i64 3
  %5810 = getelementptr inbounds float, ptr %f6.host, i64 %5809
  %5811 = load float, ptr %5810, align 4, !tbaa !50
  %5812 = insertelement <4 x float> %5808, float %5811, i64 3
  %5813 = fmul <4 x float> %5812, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5814 = add <4 x i32> %5708, %t2610
  %5815 = sext <4 x i32> %5814 to <4 x i64>
  %5816 = extractelement <4 x i64> %5815, i64 0
  %5817 = getelementptr inbounds float, ptr %f6.host, i64 %5816
  %5818 = load float, ptr %5817, align 4, !tbaa !50
  %5819 = insertelement <4 x float> undef, float %5818, i64 0
  %5820 = extractelement <4 x i64> %5815, i64 1
  %5821 = getelementptr inbounds float, ptr %f6.host, i64 %5820
  %5822 = load float, ptr %5821, align 4, !tbaa !50
  %5823 = insertelement <4 x float> %5819, float %5822, i64 1
  %5824 = extractelement <4 x i64> %5815, i64 2
  %5825 = getelementptr inbounds float, ptr %f6.host, i64 %5824
  %5826 = load float, ptr %5825, align 4, !tbaa !50
  %5827 = insertelement <4 x float> %5823, float %5826, i64 2
  %5828 = extractelement <4 x i64> %5815, i64 3
  %5829 = getelementptr inbounds float, ptr %f6.host, i64 %5828
  %5830 = load float, ptr %5829, align 4, !tbaa !50
  %5831 = insertelement <4 x float> %5827, float %5830, i64 3
  %5832 = fmul <4 x float> %5831, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5833 = fadd <4 x float> %5813, %5832
  %5834 = fmul <4 x float> %5833, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5835 = fadd <4 x float> %5794, %5834
  %5836 = mul nsw <4 x i32> %t2606, %1391
  %5837 = add nsw <4 x i32> %5836, %5734
  %5838 = sext <4 x i32> %5837 to <4 x i64>
  %5839 = extractelement <4 x i64> %5838, i64 0
  %5840 = getelementptr inbounds float, ptr %f5.host, i64 %5839
  %5841 = load float, ptr %5840, align 4, !tbaa !46
  %5842 = insertelement <4 x float> undef, float %5841, i64 0
  %5843 = extractelement <4 x i64> %5838, i64 1
  %5844 = getelementptr inbounds float, ptr %f5.host, i64 %5843
  %5845 = load float, ptr %5844, align 4, !tbaa !46
  %5846 = insertelement <4 x float> %5842, float %5845, i64 1
  %5847 = extractelement <4 x i64> %5838, i64 2
  %5848 = getelementptr inbounds float, ptr %f5.host, i64 %5847
  %5849 = load float, ptr %5848, align 4, !tbaa !46
  %5850 = insertelement <4 x float> %5846, float %5849, i64 2
  %5851 = extractelement <4 x i64> %5838, i64 3
  %5852 = getelementptr inbounds float, ptr %f5.host, i64 %5851
  %5853 = load float, ptr %5852, align 4, !tbaa !46
  %5854 = insertelement <4 x float> %5850, float %5853, i64 3
  %5855 = fsub <4 x float> %5854, %5835
  %5856 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2599
  %5857 = fmul <4 x float> %5856, %5855
  %5858 = fadd <4 x float> %5754, %5857
  %narrow125 = sub nsw i32 %5613, %f128.v3.min_realized
  %5859 = sext i32 %narrow125 to i64
  %5860 = add nsw i64 %5859, %5604
  %5861 = getelementptr inbounds float, ptr %154, i64 %5860
  %5862 = load <4 x float>, ptr %5861, align 4, !tbaa !66
  %5863 = fmul <4 x float> %5862, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5864 = sext i32 %t2595 to i64
  %5865 = sub nsw i64 %5864, %1392
  %5866 = add nsw i64 %5605, %5865
  %5867 = getelementptr inbounds float, ptr %154, i64 %5866
  %5868 = load <4 x float>, ptr %5867, align 4, !tbaa !66
  %5869 = fmul <4 x float> %5868, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5870 = fadd <4 x float> %5863, %5869
  %5871 = fmul <4 x float> %5870, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5872 = add nsw i64 %5859, %5606
  %5873 = getelementptr inbounds float, ptr %154, i64 %5872
  %5874 = load <4 x float>, ptr %5873, align 4, !tbaa !66
  %5875 = fmul <4 x float> %5874, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5876 = add nsw i64 %5607, %5865
  %5877 = getelementptr inbounds float, ptr %154, i64 %5876
  %5878 = load <4 x float>, ptr %5877, align 4, !tbaa !66
  %5879 = fmul <4 x float> %5878, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5880 = fadd <4 x float> %5875, %5879
  %5881 = fmul <4 x float> %5880, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5882 = fadd <4 x float> %5871, %5881
  %5883 = fadd <4 x float> %5858, %5882
  %5884 = insertelement <4 x i32> undef, i32 %t2630, i64 0
  %5885 = shufflevector <4 x i32> %5884, <4 x i32> undef, <4 x i32> zeroinitializer
  %5886 = add nsw <4 x i32> %5885, <i32 0, i32 1, i32 2, i32 3>
  %5887 = add nsw <4 x i32> %t2631, %5886
  %5888 = sext <4 x i32> %5887 to <4 x i64>
  %5889 = extractelement <4 x i64> %5888, i64 0
  %5890 = getelementptr inbounds float, ptr %f6.host, i64 %5889
  %5891 = load float, ptr %5890, align 4, !tbaa !50
  %5892 = insertelement <4 x float> undef, float %5891, i64 0
  %5893 = extractelement <4 x i64> %5888, i64 1
  %5894 = getelementptr inbounds float, ptr %f6.host, i64 %5893
  %5895 = load float, ptr %5894, align 4, !tbaa !50
  %5896 = insertelement <4 x float> %5892, float %5895, i64 1
  %5897 = extractelement <4 x i64> %5888, i64 2
  %5898 = getelementptr inbounds float, ptr %f6.host, i64 %5897
  %5899 = load float, ptr %5898, align 4, !tbaa !50
  %5900 = insertelement <4 x float> %5896, float %5899, i64 2
  %5901 = extractelement <4 x i64> %5888, i64 3
  %5902 = getelementptr inbounds float, ptr %f6.host, i64 %5901
  %5903 = load float, ptr %5902, align 4, !tbaa !50
  %5904 = insertelement <4 x float> %5900, float %5903, i64 3
  %5905 = fmul <4 x float> %5904, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5906 = insertelement <4 x i32> undef, i32 %t2629, i64 0
  %5907 = shufflevector <4 x i32> %5906, <4 x i32> undef, <4 x i32> zeroinitializer
  %5908 = add <4 x i32> %5907, <i32 -1, i32 0, i32 1, i32 2>
  %5909 = add <4 x i32> %5908, %t2631
  %5910 = sext <4 x i32> %5909 to <4 x i64>
  %5911 = extractelement <4 x i64> %5910, i64 0
  %5912 = getelementptr inbounds float, ptr %f6.host, i64 %5911
  %5913 = load float, ptr %5912, align 4, !tbaa !50
  %5914 = insertelement <4 x float> undef, float %5913, i64 0
  %5915 = extractelement <4 x i64> %5910, i64 1
  %5916 = getelementptr inbounds float, ptr %f6.host, i64 %5915
  %5917 = load float, ptr %5916, align 4, !tbaa !50
  %5918 = insertelement <4 x float> %5914, float %5917, i64 1
  %5919 = extractelement <4 x i64> %5910, i64 2
  %5920 = getelementptr inbounds float, ptr %f6.host, i64 %5919
  %5921 = load float, ptr %5920, align 4, !tbaa !50
  %5922 = insertelement <4 x float> %5918, float %5921, i64 2
  %5923 = extractelement <4 x i64> %5910, i64 3
  %5924 = getelementptr inbounds float, ptr %f6.host, i64 %5923
  %5925 = load float, ptr %5924, align 4, !tbaa !50
  %5926 = insertelement <4 x float> %5922, float %5925, i64 3
  %5927 = fmul <4 x float> %5926, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5928 = fadd <4 x float> %5905, %5927
  %5929 = fmul <4 x float> %5928, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5930 = insertelement <4 x i32> undef, i32 %t2628, i64 0
  %5931 = shufflevector <4 x i32> %5930, <4 x i32> undef, <4 x i32> zeroinitializer
  %5932 = add nsw <4 x i32> %5931, <i32 0, i32 1, i32 2, i32 3>
  %5933 = add nsw <4 x i32> %t2631, %5932
  %5934 = sext <4 x i32> %5933 to <4 x i64>
  %5935 = extractelement <4 x i64> %5934, i64 0
  %5936 = getelementptr inbounds float, ptr %f6.host, i64 %5935
  %5937 = load float, ptr %5936, align 4, !tbaa !50
  %5938 = insertelement <4 x float> undef, float %5937, i64 0
  %5939 = extractelement <4 x i64> %5934, i64 1
  %5940 = getelementptr inbounds float, ptr %f6.host, i64 %5939
  %5941 = load float, ptr %5940, align 4, !tbaa !50
  %5942 = insertelement <4 x float> %5938, float %5941, i64 1
  %5943 = extractelement <4 x i64> %5934, i64 2
  %5944 = getelementptr inbounds float, ptr %f6.host, i64 %5943
  %5945 = load float, ptr %5944, align 4, !tbaa !50
  %5946 = insertelement <4 x float> %5942, float %5945, i64 2
  %5947 = extractelement <4 x i64> %5934, i64 3
  %5948 = getelementptr inbounds float, ptr %f6.host, i64 %5947
  %5949 = load float, ptr %5948, align 4, !tbaa !50
  %5950 = insertelement <4 x float> %5946, float %5949, i64 3
  %5951 = fmul <4 x float> %5950, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %5952 = insertelement <4 x i32> undef, i32 %t2625, i64 0
  %5953 = shufflevector <4 x i32> %5952, <4 x i32> undef, <4 x i32> zeroinitializer
  %5954 = add <4 x i32> %5953, <i32 -1, i32 0, i32 1, i32 2>
  %5955 = add <4 x i32> %5954, %t2631
  %5956 = sext <4 x i32> %5955 to <4 x i64>
  %5957 = extractelement <4 x i64> %5956, i64 0
  %5958 = getelementptr inbounds float, ptr %f6.host, i64 %5957
  %5959 = load float, ptr %5958, align 4, !tbaa !50
  %5960 = insertelement <4 x float> undef, float %5959, i64 0
  %5961 = extractelement <4 x i64> %5956, i64 1
  %5962 = getelementptr inbounds float, ptr %f6.host, i64 %5961
  %5963 = load float, ptr %5962, align 4, !tbaa !50
  %5964 = insertelement <4 x float> %5960, float %5963, i64 1
  %5965 = extractelement <4 x i64> %5956, i64 2
  %5966 = getelementptr inbounds float, ptr %f6.host, i64 %5965
  %5967 = load float, ptr %5966, align 4, !tbaa !50
  %5968 = insertelement <4 x float> %5964, float %5967, i64 2
  %5969 = extractelement <4 x i64> %5956, i64 3
  %5970 = getelementptr inbounds float, ptr %f6.host, i64 %5969
  %5971 = load float, ptr %5970, align 4, !tbaa !50
  %5972 = insertelement <4 x float> %5968, float %5971, i64 3
  %5973 = fmul <4 x float> %5972, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5974 = fadd <4 x float> %5951, %5973
  %5975 = fmul <4 x float> %5974, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %5976 = fadd <4 x float> %5929, %5975
  %5977 = mul nsw <4 x i32> %5637, %1391
  %5978 = add i32 %5624, 1
  %5979 = insertelement <4 x i32> undef, i32 %5978, i64 0
  %5980 = shufflevector <4 x i32> %5979, <4 x i32> undef, <4 x i32> zeroinitializer
  %5981 = add nsw <4 x i32> %5980, <i32 0, i32 2, i32 4, i32 6>
  %5982 = add nsw <4 x i32> %5977, %5981
  %5983 = sext <4 x i32> %5982 to <4 x i64>
  %5984 = extractelement <4 x i64> %5983, i64 0
  %5985 = getelementptr inbounds float, ptr %f5.host, i64 %5984
  %5986 = load float, ptr %5985, align 4, !tbaa !46
  %5987 = insertelement <4 x float> undef, float %5986, i64 0
  %5988 = extractelement <4 x i64> %5983, i64 1
  %5989 = getelementptr inbounds float, ptr %f5.host, i64 %5988
  %5990 = load float, ptr %5989, align 4, !tbaa !46
  %5991 = insertelement <4 x float> %5987, float %5990, i64 1
  %5992 = extractelement <4 x i64> %5983, i64 2
  %5993 = getelementptr inbounds float, ptr %f5.host, i64 %5992
  %5994 = load float, ptr %5993, align 4, !tbaa !46
  %5995 = insertelement <4 x float> %5991, float %5994, i64 2
  %5996 = extractelement <4 x i64> %5983, i64 3
  %5997 = getelementptr inbounds float, ptr %f5.host, i64 %5996
  %5998 = load float, ptr %5997, align 4, !tbaa !46
  %5999 = insertelement <4 x float> %5995, float %5998, i64 3
  %6000 = fsub <4 x float> %5999, %5976
  %6001 = fmul <4 x float> %t2620, %6000
  %6002 = add nsw <4 x i32> %t2626, %5886
  %6003 = sext <4 x i32> %6002 to <4 x i64>
  %6004 = extractelement <4 x i64> %6003, i64 0
  %6005 = getelementptr inbounds float, ptr %f6.host, i64 %6004
  %6006 = load float, ptr %6005, align 4, !tbaa !50
  %6007 = insertelement <4 x float> undef, float %6006, i64 0
  %6008 = extractelement <4 x i64> %6003, i64 1
  %6009 = getelementptr inbounds float, ptr %f6.host, i64 %6008
  %6010 = load float, ptr %6009, align 4, !tbaa !50
  %6011 = insertelement <4 x float> %6007, float %6010, i64 1
  %6012 = extractelement <4 x i64> %6003, i64 2
  %6013 = getelementptr inbounds float, ptr %f6.host, i64 %6012
  %6014 = load float, ptr %6013, align 4, !tbaa !50
  %6015 = insertelement <4 x float> %6011, float %6014, i64 2
  %6016 = extractelement <4 x i64> %6003, i64 3
  %6017 = getelementptr inbounds float, ptr %f6.host, i64 %6016
  %6018 = load float, ptr %6017, align 4, !tbaa !50
  %6019 = insertelement <4 x float> %6015, float %6018, i64 3
  %6020 = fmul <4 x float> %6019, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6021 = add <4 x i32> %t2626, %5907
  %6022 = add <4 x i32> %6021, <i32 -1, i32 0, i32 1, i32 2>
  %6023 = sext <4 x i32> %6022 to <4 x i64>
  %6024 = extractelement <4 x i64> %6023, i64 0
  %6025 = getelementptr inbounds float, ptr %f6.host, i64 %6024
  %6026 = load float, ptr %6025, align 4, !tbaa !50
  %6027 = insertelement <4 x float> undef, float %6026, i64 0
  %6028 = extractelement <4 x i64> %6023, i64 1
  %6029 = getelementptr inbounds float, ptr %f6.host, i64 %6028
  %6030 = load float, ptr %6029, align 4, !tbaa !50
  %6031 = insertelement <4 x float> %6027, float %6030, i64 1
  %6032 = extractelement <4 x i64> %6023, i64 2
  %6033 = getelementptr inbounds float, ptr %f6.host, i64 %6032
  %6034 = load float, ptr %6033, align 4, !tbaa !50
  %6035 = insertelement <4 x float> %6031, float %6034, i64 2
  %6036 = extractelement <4 x i64> %6023, i64 3
  %6037 = getelementptr inbounds float, ptr %f6.host, i64 %6036
  %6038 = load float, ptr %6037, align 4, !tbaa !50
  %6039 = insertelement <4 x float> %6035, float %6038, i64 3
  %6040 = fmul <4 x float> %6039, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6041 = fadd <4 x float> %6020, %6040
  %6042 = fmul <4 x float> %6041, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6043 = add nsw <4 x i32> %t2626, %5932
  %6044 = sext <4 x i32> %6043 to <4 x i64>
  %6045 = extractelement <4 x i64> %6044, i64 0
  %6046 = getelementptr inbounds float, ptr %f6.host, i64 %6045
  %6047 = load float, ptr %6046, align 4, !tbaa !50
  %6048 = insertelement <4 x float> undef, float %6047, i64 0
  %6049 = extractelement <4 x i64> %6044, i64 1
  %6050 = getelementptr inbounds float, ptr %f6.host, i64 %6049
  %6051 = load float, ptr %6050, align 4, !tbaa !50
  %6052 = insertelement <4 x float> %6048, float %6051, i64 1
  %6053 = extractelement <4 x i64> %6044, i64 2
  %6054 = getelementptr inbounds float, ptr %f6.host, i64 %6053
  %6055 = load float, ptr %6054, align 4, !tbaa !50
  %6056 = insertelement <4 x float> %6052, float %6055, i64 2
  %6057 = extractelement <4 x i64> %6044, i64 3
  %6058 = getelementptr inbounds float, ptr %f6.host, i64 %6057
  %6059 = load float, ptr %6058, align 4, !tbaa !50
  %6060 = insertelement <4 x float> %6056, float %6059, i64 3
  %6061 = fmul <4 x float> %6060, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6062 = add <4 x i32> %t2626, %5953
  %6063 = add <4 x i32> %6062, <i32 -1, i32 0, i32 1, i32 2>
  %6064 = sext <4 x i32> %6063 to <4 x i64>
  %6065 = extractelement <4 x i64> %6064, i64 0
  %6066 = getelementptr inbounds float, ptr %f6.host, i64 %6065
  %6067 = load float, ptr %6066, align 4, !tbaa !50
  %6068 = insertelement <4 x float> undef, float %6067, i64 0
  %6069 = extractelement <4 x i64> %6064, i64 1
  %6070 = getelementptr inbounds float, ptr %f6.host, i64 %6069
  %6071 = load float, ptr %6070, align 4, !tbaa !50
  %6072 = insertelement <4 x float> %6068, float %6071, i64 1
  %6073 = extractelement <4 x i64> %6064, i64 2
  %6074 = getelementptr inbounds float, ptr %f6.host, i64 %6073
  %6075 = load float, ptr %6074, align 4, !tbaa !50
  %6076 = insertelement <4 x float> %6072, float %6075, i64 2
  %6077 = extractelement <4 x i64> %6064, i64 3
  %6078 = getelementptr inbounds float, ptr %f6.host, i64 %6077
  %6079 = load float, ptr %6078, align 4, !tbaa !50
  %6080 = insertelement <4 x float> %6076, float %6079, i64 3
  %6081 = fmul <4 x float> %6080, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6082 = fadd <4 x float> %6061, %6081
  %6083 = fmul <4 x float> %6082, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6084 = fadd <4 x float> %6042, %6083
  %6085 = mul nsw <4 x i32> %t2623, %1391
  %6086 = add nsw <4 x i32> %6085, %5981
  %6087 = sext <4 x i32> %6086 to <4 x i64>
  %6088 = extractelement <4 x i64> %6087, i64 0
  %6089 = getelementptr inbounds float, ptr %f5.host, i64 %6088
  %6090 = load float, ptr %6089, align 4, !tbaa !46
  %6091 = insertelement <4 x float> undef, float %6090, i64 0
  %6092 = extractelement <4 x i64> %6087, i64 1
  %6093 = getelementptr inbounds float, ptr %f5.host, i64 %6092
  %6094 = load float, ptr %6093, align 4, !tbaa !46
  %6095 = insertelement <4 x float> %6091, float %6094, i64 1
  %6096 = extractelement <4 x i64> %6087, i64 2
  %6097 = getelementptr inbounds float, ptr %f5.host, i64 %6096
  %6098 = load float, ptr %6097, align 4, !tbaa !46
  %6099 = insertelement <4 x float> %6095, float %6098, i64 2
  %6100 = extractelement <4 x i64> %6087, i64 3
  %6101 = getelementptr inbounds float, ptr %f5.host, i64 %6100
  %6102 = load float, ptr %6101, align 4, !tbaa !46
  %6103 = insertelement <4 x float> %6099, float %6102, i64 3
  %6104 = fsub <4 x float> %6103, %6084
  %6105 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2620
  %6106 = fmul <4 x float> %6105, %6104
  %6107 = fadd <4 x float> %6001, %6106
  %narrow126 = sub nsw i32 %5631, %f128.v3.min_realized
  %6108 = sext i32 %narrow126 to i64
  %6109 = add nsw i64 %6108, %5604
  %6110 = getelementptr inbounds float, ptr %154, i64 %6109
  %6111 = load <4 x float>, ptr %6110, align 4, !tbaa !66
  %6112 = fmul <4 x float> %6111, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6113 = sext i32 %t2617 to i64
  %6114 = sub nsw i64 %6113, %1392
  %6115 = add nsw i64 %5605, %6114
  %6116 = getelementptr inbounds float, ptr %154, i64 %6115
  %6117 = load <4 x float>, ptr %6116, align 4, !tbaa !66
  %6118 = fmul <4 x float> %6117, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6119 = fadd <4 x float> %6112, %6118
  %6120 = fmul <4 x float> %6119, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6121 = add nsw i64 %6108, %5606
  %6122 = getelementptr inbounds float, ptr %154, i64 %6121
  %6123 = load <4 x float>, ptr %6122, align 4, !tbaa !66
  %6124 = fmul <4 x float> %6123, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6125 = add nsw i64 %5607, %6114
  %6126 = getelementptr inbounds float, ptr %154, i64 %6125
  %6127 = load <4 x float>, ptr %6126, align 4, !tbaa !66
  %6128 = fmul <4 x float> %6127, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6129 = fadd <4 x float> %6124, %6128
  %6130 = fmul <4 x float> %6129, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6131 = fadd <4 x float> %6120, %6130
  %6132 = fadd <4 x float> %6107, %6131
  %6133 = shufflevector <4 x float> %5883, <4 x float> %6132, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6134 = sext i32 %5612 to i64
  %6135 = add nsw i64 %5611, %6134
  %6136 = getelementptr inbounds float, ptr %193, i64 %6135
  store <8 x float> %6133, ptr %6136, align 4, !tbaa !68
  %lsr.iv.next296 = add i32 %lsr.iv295, -1
  %lsr.iv.next298 = add nuw i32 %lsr.iv297, 8
  %.not127 = icmp eq i32 %lsr.iv.next296, 0
  br i1 %.not127, label %"end for f127.s0.v3.v351", label %"for f127.s0.v3.v350"

"end for f127.s0.v3.v351":                        ; preds = %"for f127.s0.v3.v350", %true_bb47
  br i1 %.not119, label %"produce f12658", label %"for f127.s0.v3.v354.preheader", !prof !4

"for f127.s0.v3.v354.preheader":                  ; preds = %"end for f127.s0.v3.v351"
  %6137 = trunc i64 %3411 to i32
  %6138 = add i32 %6137, 9
  %6139 = ashr i32 %6138, 2
  %6140 = shl nsw i32 %6139, 1
  %6141 = and i32 %6140, 2
  %6142 = ashr i32 %6138, 3
  %t2632 = add nsw i32 %6141, %6142
  %6143 = sub nsw i32 %6139, %f73.v4.min_realized
  %6144 = mul nsw i32 %6143, %1386
  %t2635 = add nsw i32 %3236, %6144
  %6145 = sext i32 %t2635 to i64
  %6146 = getelementptr inbounds float, ptr %f73.host, i64 %6145
  %6147 = load <4 x float>, ptr %6146, align 4, !tbaa !52
  %6148 = add nsw i64 %6145, 4
  %6149 = getelementptr inbounds float, ptr %f73.host, i64 %6148
  %6150 = load <4 x float>, ptr %6149, align 4, !tbaa !52
  %6151 = shufflevector <4 x float> %6147, <4 x float> %6150, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2636 = fmul <4 x float> %232, %6151
  %a938 = fptosi <4 x float> %t2636 to <4 x i32>
  %a941 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a938)
  %6152 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a941, <4 x i32> zeroinitializer)
  %6153 = sitofp <4 x i32> %6152 to <4 x float>
  %t2638 = fsub <4 x float> %t2636, %6153
  %6154 = add nsw i32 %t2632, %1387
  %t2640 = mul nsw i32 %6154, %147
  %6155 = sub nsw i32 %6142, %816
  %t2642 = mul nsw i32 %6155, %147
  %6156 = sub nsw i32 %6139, %f5.v4.min_realized
  %6157 = mul nsw i32 %6156, %f5.stride.1
  %t2643 = add nsw i32 %6157, %3237
  %t2645 = sub nsw <4 x i32> %6152, %241
  %6158 = add i32 %t2632, %1388
  %6159 = mul nsw i32 %6158, %f6.stride.1
  %t2648 = add nsw i32 %6159, %3238
  %t2649 = mul nsw <4 x i32> %t2645, %824
  %t2651 = add nsw i32 %6159, %3239
  %6160 = sub nsw i32 %6142, %f6.v4.min_realized
  %6161 = mul nsw i32 %6160, %f6.stride.1
  %t2653 = add nsw i32 %6161, %3238
  %t2654 = add nsw i32 %6161, %3239
  %6162 = add nsw <4 x i32> %t2645, <i32 1, i32 1, i32 1, i32 1>
  %t2655 = mul nsw <4 x i32> %6162, %824
  %6163 = shufflevector <4 x float> %6147, <4 x float> %6150, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2657 = fmul <4 x float> %232, %6163
  %a942 = fptosi <4 x float> %t2657 to <4 x i32>
  %a945 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a942)
  %6164 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a945, <4 x i32> zeroinitializer)
  %6165 = sitofp <4 x i32> %6164 to <4 x float>
  %t2659 = fsub <4 x float> %t2657, %6165
  %t2662 = sub nsw <4 x i32> %6164, %241
  %t2664 = add nsw i32 %6159, %3244
  %t2665 = mul nsw <4 x i32> %t2662, %824
  %t2667 = add nsw i32 %6159, %3245
  %t2668 = add nsw i32 %6161, %3244
  %t2669 = add nsw i32 %6161, %3245
  %6166 = add nsw <4 x i32> %t2662, <i32 1, i32 1, i32 1, i32 1>
  %t2670 = mul nsw <4 x i32> %6166, %824
  %6167 = insertelement <4 x i32> undef, i32 %t2654, i64 0
  %6168 = shufflevector <4 x i32> %6167, <4 x i32> undef, <4 x i32> zeroinitializer
  %6169 = add nsw <4 x i32> %6168, <i32 0, i32 1, i32 2, i32 3>
  %6170 = add nsw <4 x i32> %t2655, %6169
  %6171 = sext <4 x i32> %6170 to <4 x i64>
  %6172 = extractelement <4 x i64> %6171, i64 0
  %6173 = getelementptr inbounds float, ptr %f6.host, i64 %6172
  %6174 = load float, ptr %6173, align 4, !tbaa !50
  %6175 = insertelement <4 x float> undef, float %6174, i64 0
  %6176 = extractelement <4 x i64> %6171, i64 1
  %6177 = getelementptr inbounds float, ptr %f6.host, i64 %6176
  %6178 = load float, ptr %6177, align 4, !tbaa !50
  %6179 = insertelement <4 x float> %6175, float %6178, i64 1
  %6180 = extractelement <4 x i64> %6171, i64 2
  %6181 = getelementptr inbounds float, ptr %f6.host, i64 %6180
  %6182 = load float, ptr %6181, align 4, !tbaa !50
  %6183 = insertelement <4 x float> %6179, float %6182, i64 2
  %6184 = extractelement <4 x i64> %6171, i64 3
  %6185 = getelementptr inbounds float, ptr %f6.host, i64 %6184
  %6186 = load float, ptr %6185, align 4, !tbaa !50
  %6187 = insertelement <4 x float> %6183, float %6186, i64 3
  %6188 = fmul <4 x float> %6187, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6189 = insertelement <4 x i32> undef, i32 %t2653, i64 0
  %6190 = shufflevector <4 x i32> %6189, <4 x i32> undef, <4 x i32> zeroinitializer
  %6191 = add <4 x i32> %6190, <i32 -1, i32 0, i32 1, i32 2>
  %6192 = add <4 x i32> %6191, %t2655
  %6193 = sext <4 x i32> %6192 to <4 x i64>
  %6194 = extractelement <4 x i64> %6193, i64 0
  %6195 = getelementptr inbounds float, ptr %f6.host, i64 %6194
  %6196 = load float, ptr %6195, align 4, !tbaa !50
  %6197 = insertelement <4 x float> undef, float %6196, i64 0
  %6198 = extractelement <4 x i64> %6193, i64 1
  %6199 = getelementptr inbounds float, ptr %f6.host, i64 %6198
  %6200 = load float, ptr %6199, align 4, !tbaa !50
  %6201 = insertelement <4 x float> %6197, float %6200, i64 1
  %6202 = extractelement <4 x i64> %6193, i64 2
  %6203 = getelementptr inbounds float, ptr %f6.host, i64 %6202
  %6204 = load float, ptr %6203, align 4, !tbaa !50
  %6205 = insertelement <4 x float> %6201, float %6204, i64 2
  %6206 = extractelement <4 x i64> %6193, i64 3
  %6207 = getelementptr inbounds float, ptr %f6.host, i64 %6206
  %6208 = load float, ptr %6207, align 4, !tbaa !50
  %6209 = insertelement <4 x float> %6205, float %6208, i64 3
  %6210 = fmul <4 x float> %6209, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6211 = fadd <4 x float> %6188, %6210
  %6212 = fmul <4 x float> %6211, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6213 = insertelement <4 x i32> undef, i32 %t2651, i64 0
  %6214 = shufflevector <4 x i32> %6213, <4 x i32> undef, <4 x i32> zeroinitializer
  %6215 = add nsw <4 x i32> %6214, <i32 0, i32 1, i32 2, i32 3>
  %6216 = add nsw <4 x i32> %t2655, %6215
  %6217 = sext <4 x i32> %6216 to <4 x i64>
  %6218 = extractelement <4 x i64> %6217, i64 0
  %6219 = getelementptr inbounds float, ptr %f6.host, i64 %6218
  %6220 = load float, ptr %6219, align 4, !tbaa !50
  %6221 = insertelement <4 x float> undef, float %6220, i64 0
  %6222 = extractelement <4 x i64> %6217, i64 1
  %6223 = getelementptr inbounds float, ptr %f6.host, i64 %6222
  %6224 = load float, ptr %6223, align 4, !tbaa !50
  %6225 = insertelement <4 x float> %6221, float %6224, i64 1
  %6226 = extractelement <4 x i64> %6217, i64 2
  %6227 = getelementptr inbounds float, ptr %f6.host, i64 %6226
  %6228 = load float, ptr %6227, align 4, !tbaa !50
  %6229 = insertelement <4 x float> %6225, float %6228, i64 2
  %6230 = extractelement <4 x i64> %6217, i64 3
  %6231 = getelementptr inbounds float, ptr %f6.host, i64 %6230
  %6232 = load float, ptr %6231, align 4, !tbaa !50
  %6233 = insertelement <4 x float> %6229, float %6232, i64 3
  %6234 = fmul <4 x float> %6233, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6235 = insertelement <4 x i32> undef, i32 %t2648, i64 0
  %6236 = shufflevector <4 x i32> %6235, <4 x i32> undef, <4 x i32> zeroinitializer
  %6237 = add <4 x i32> %6236, <i32 -1, i32 0, i32 1, i32 2>
  %6238 = add <4 x i32> %6237, %t2655
  %6239 = sext <4 x i32> %6238 to <4 x i64>
  %6240 = extractelement <4 x i64> %6239, i64 0
  %6241 = getelementptr inbounds float, ptr %f6.host, i64 %6240
  %6242 = load float, ptr %6241, align 4, !tbaa !50
  %6243 = insertelement <4 x float> undef, float %6242, i64 0
  %6244 = extractelement <4 x i64> %6239, i64 1
  %6245 = getelementptr inbounds float, ptr %f6.host, i64 %6244
  %6246 = load float, ptr %6245, align 4, !tbaa !50
  %6247 = insertelement <4 x float> %6243, float %6246, i64 1
  %6248 = extractelement <4 x i64> %6239, i64 2
  %6249 = getelementptr inbounds float, ptr %f6.host, i64 %6248
  %6250 = load float, ptr %6249, align 4, !tbaa !50
  %6251 = insertelement <4 x float> %6247, float %6250, i64 2
  %6252 = extractelement <4 x i64> %6239, i64 3
  %6253 = getelementptr inbounds float, ptr %f6.host, i64 %6252
  %6254 = load float, ptr %6253, align 4, !tbaa !50
  %6255 = insertelement <4 x float> %6251, float %6254, i64 3
  %6256 = fmul <4 x float> %6255, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6257 = fadd <4 x float> %6234, %6256
  %6258 = fmul <4 x float> %6257, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6259 = fadd <4 x float> %6212, %6258
  %6260 = mul nsw <4 x i32> %6162, %1391
  %6261 = insertelement <4 x i32> undef, i32 %t2643, i64 0
  %6262 = shufflevector <4 x i32> %6261, <4 x i32> undef, <4 x i32> zeroinitializer
  %6263 = add nsw <4 x i32> %6262, <i32 0, i32 2, i32 4, i32 6>
  %6264 = add nsw <4 x i32> %6260, %6263
  %6265 = sext <4 x i32> %6264 to <4 x i64>
  %6266 = extractelement <4 x i64> %6265, i64 0
  %6267 = getelementptr inbounds float, ptr %f5.host, i64 %6266
  %6268 = load float, ptr %6267, align 4, !tbaa !46
  %6269 = insertelement <4 x float> undef, float %6268, i64 0
  %6270 = extractelement <4 x i64> %6265, i64 1
  %6271 = getelementptr inbounds float, ptr %f5.host, i64 %6270
  %6272 = load float, ptr %6271, align 4, !tbaa !46
  %6273 = insertelement <4 x float> %6269, float %6272, i64 1
  %6274 = extractelement <4 x i64> %6265, i64 2
  %6275 = getelementptr inbounds float, ptr %f5.host, i64 %6274
  %6276 = load float, ptr %6275, align 4, !tbaa !46
  %6277 = insertelement <4 x float> %6273, float %6276, i64 2
  %6278 = extractelement <4 x i64> %6265, i64 3
  %6279 = getelementptr inbounds float, ptr %f5.host, i64 %6278
  %6280 = load float, ptr %6279, align 4, !tbaa !46
  %6281 = insertelement <4 x float> %6277, float %6280, i64 3
  %6282 = fsub <4 x float> %6281, %6259
  %6283 = fmul <4 x float> %t2638, %6282
  %6284 = add nsw <4 x i32> %t2649, %6169
  %6285 = sext <4 x i32> %6284 to <4 x i64>
  %6286 = extractelement <4 x i64> %6285, i64 0
  %6287 = getelementptr inbounds float, ptr %f6.host, i64 %6286
  %6288 = load float, ptr %6287, align 4, !tbaa !50
  %6289 = insertelement <4 x float> undef, float %6288, i64 0
  %6290 = extractelement <4 x i64> %6285, i64 1
  %6291 = getelementptr inbounds float, ptr %f6.host, i64 %6290
  %6292 = load float, ptr %6291, align 4, !tbaa !50
  %6293 = insertelement <4 x float> %6289, float %6292, i64 1
  %6294 = extractelement <4 x i64> %6285, i64 2
  %6295 = getelementptr inbounds float, ptr %f6.host, i64 %6294
  %6296 = load float, ptr %6295, align 4, !tbaa !50
  %6297 = insertelement <4 x float> %6293, float %6296, i64 2
  %6298 = extractelement <4 x i64> %6285, i64 3
  %6299 = getelementptr inbounds float, ptr %f6.host, i64 %6298
  %6300 = load float, ptr %6299, align 4, !tbaa !50
  %6301 = insertelement <4 x float> %6297, float %6300, i64 3
  %6302 = fmul <4 x float> %6301, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6303 = add <4 x i32> %6191, %t2649
  %6304 = sext <4 x i32> %6303 to <4 x i64>
  %6305 = extractelement <4 x i64> %6304, i64 0
  %6306 = getelementptr inbounds float, ptr %f6.host, i64 %6305
  %6307 = load float, ptr %6306, align 4, !tbaa !50
  %6308 = insertelement <4 x float> undef, float %6307, i64 0
  %6309 = extractelement <4 x i64> %6304, i64 1
  %6310 = getelementptr inbounds float, ptr %f6.host, i64 %6309
  %6311 = load float, ptr %6310, align 4, !tbaa !50
  %6312 = insertelement <4 x float> %6308, float %6311, i64 1
  %6313 = extractelement <4 x i64> %6304, i64 2
  %6314 = getelementptr inbounds float, ptr %f6.host, i64 %6313
  %6315 = load float, ptr %6314, align 4, !tbaa !50
  %6316 = insertelement <4 x float> %6312, float %6315, i64 2
  %6317 = extractelement <4 x i64> %6304, i64 3
  %6318 = getelementptr inbounds float, ptr %f6.host, i64 %6317
  %6319 = load float, ptr %6318, align 4, !tbaa !50
  %6320 = insertelement <4 x float> %6316, float %6319, i64 3
  %6321 = fmul <4 x float> %6320, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6322 = fadd <4 x float> %6302, %6321
  %6323 = fmul <4 x float> %6322, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6324 = add nsw <4 x i32> %t2649, %6215
  %6325 = sext <4 x i32> %6324 to <4 x i64>
  %6326 = extractelement <4 x i64> %6325, i64 0
  %6327 = getelementptr inbounds float, ptr %f6.host, i64 %6326
  %6328 = load float, ptr %6327, align 4, !tbaa !50
  %6329 = insertelement <4 x float> undef, float %6328, i64 0
  %6330 = extractelement <4 x i64> %6325, i64 1
  %6331 = getelementptr inbounds float, ptr %f6.host, i64 %6330
  %6332 = load float, ptr %6331, align 4, !tbaa !50
  %6333 = insertelement <4 x float> %6329, float %6332, i64 1
  %6334 = extractelement <4 x i64> %6325, i64 2
  %6335 = getelementptr inbounds float, ptr %f6.host, i64 %6334
  %6336 = load float, ptr %6335, align 4, !tbaa !50
  %6337 = insertelement <4 x float> %6333, float %6336, i64 2
  %6338 = extractelement <4 x i64> %6325, i64 3
  %6339 = getelementptr inbounds float, ptr %f6.host, i64 %6338
  %6340 = load float, ptr %6339, align 4, !tbaa !50
  %6341 = insertelement <4 x float> %6337, float %6340, i64 3
  %6342 = fmul <4 x float> %6341, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6343 = add <4 x i32> %6237, %t2649
  %6344 = sext <4 x i32> %6343 to <4 x i64>
  %6345 = extractelement <4 x i64> %6344, i64 0
  %6346 = getelementptr inbounds float, ptr %f6.host, i64 %6345
  %6347 = load float, ptr %6346, align 4, !tbaa !50
  %6348 = insertelement <4 x float> undef, float %6347, i64 0
  %6349 = extractelement <4 x i64> %6344, i64 1
  %6350 = getelementptr inbounds float, ptr %f6.host, i64 %6349
  %6351 = load float, ptr %6350, align 4, !tbaa !50
  %6352 = insertelement <4 x float> %6348, float %6351, i64 1
  %6353 = extractelement <4 x i64> %6344, i64 2
  %6354 = getelementptr inbounds float, ptr %f6.host, i64 %6353
  %6355 = load float, ptr %6354, align 4, !tbaa !50
  %6356 = insertelement <4 x float> %6352, float %6355, i64 2
  %6357 = extractelement <4 x i64> %6344, i64 3
  %6358 = getelementptr inbounds float, ptr %f6.host, i64 %6357
  %6359 = load float, ptr %6358, align 4, !tbaa !50
  %6360 = insertelement <4 x float> %6356, float %6359, i64 3
  %6361 = fmul <4 x float> %6360, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6362 = fadd <4 x float> %6342, %6361
  %6363 = fmul <4 x float> %6362, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6364 = fadd <4 x float> %6323, %6363
  %6365 = mul nsw <4 x i32> %t2645, %1391
  %6366 = add nsw <4 x i32> %6365, %6263
  %6367 = sext <4 x i32> %6366 to <4 x i64>
  %6368 = extractelement <4 x i64> %6367, i64 0
  %6369 = getelementptr inbounds float, ptr %f5.host, i64 %6368
  %6370 = load float, ptr %6369, align 4, !tbaa !46
  %6371 = insertelement <4 x float> undef, float %6370, i64 0
  %6372 = extractelement <4 x i64> %6367, i64 1
  %6373 = getelementptr inbounds float, ptr %f5.host, i64 %6372
  %6374 = load float, ptr %6373, align 4, !tbaa !46
  %6375 = insertelement <4 x float> %6371, float %6374, i64 1
  %6376 = extractelement <4 x i64> %6367, i64 2
  %6377 = getelementptr inbounds float, ptr %f5.host, i64 %6376
  %6378 = load float, ptr %6377, align 4, !tbaa !46
  %6379 = insertelement <4 x float> %6375, float %6378, i64 2
  %6380 = extractelement <4 x i64> %6367, i64 3
  %6381 = getelementptr inbounds float, ptr %f5.host, i64 %6380
  %6382 = load float, ptr %6381, align 4, !tbaa !46
  %6383 = insertelement <4 x float> %6379, float %6382, i64 3
  %6384 = fsub <4 x float> %6383, %6364
  %6385 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2638
  %6386 = fmul <4 x float> %6385, %6384
  %6387 = fadd <4 x float> %6283, %6386
  %6388 = sext i32 %t2642 to i64
  %6389 = add nsw i64 %6388, %3246
  %6390 = getelementptr inbounds float, ptr %154, i64 %6389
  %6391 = load <4 x float>, ptr %6390, align 4, !tbaa !66
  %6392 = fmul <4 x float> %6391, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6393 = add nsw i64 %3248, %6388
  %6394 = getelementptr inbounds float, ptr %154, i64 %6393
  %6395 = load <4 x float>, ptr %6394, align 4, !tbaa !66
  %6396 = fmul <4 x float> %6395, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6397 = fadd <4 x float> %6392, %6396
  %6398 = fmul <4 x float> %6397, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6399 = sext i32 %t2640 to i64
  %6400 = add nsw i64 %6399, %3246
  %6401 = getelementptr inbounds float, ptr %154, i64 %6400
  %6402 = load <4 x float>, ptr %6401, align 4, !tbaa !66
  %6403 = fmul <4 x float> %6402, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6404 = add nsw i64 %3248, %6399
  %6405 = getelementptr inbounds float, ptr %154, i64 %6404
  %6406 = load <4 x float>, ptr %6405, align 4, !tbaa !66
  %6407 = fmul <4 x float> %6406, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6408 = fadd <4 x float> %6403, %6407
  %6409 = fmul <4 x float> %6408, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6410 = fadd <4 x float> %6398, %6409
  %6411 = fadd <4 x float> %6387, %6410
  %6412 = insertelement <4 x i32> undef, i32 %t2669, i64 0
  %6413 = shufflevector <4 x i32> %6412, <4 x i32> undef, <4 x i32> zeroinitializer
  %6414 = add nsw <4 x i32> %6413, <i32 0, i32 1, i32 2, i32 3>
  %6415 = add nsw <4 x i32> %t2670, %6414
  %6416 = sext <4 x i32> %6415 to <4 x i64>
  %6417 = extractelement <4 x i64> %6416, i64 0
  %6418 = getelementptr inbounds float, ptr %f6.host, i64 %6417
  %6419 = load float, ptr %6418, align 4, !tbaa !50
  %6420 = insertelement <4 x float> undef, float %6419, i64 0
  %6421 = extractelement <4 x i64> %6416, i64 1
  %6422 = getelementptr inbounds float, ptr %f6.host, i64 %6421
  %6423 = load float, ptr %6422, align 4, !tbaa !50
  %6424 = insertelement <4 x float> %6420, float %6423, i64 1
  %6425 = extractelement <4 x i64> %6416, i64 2
  %6426 = getelementptr inbounds float, ptr %f6.host, i64 %6425
  %6427 = load float, ptr %6426, align 4, !tbaa !50
  %6428 = insertelement <4 x float> %6424, float %6427, i64 2
  %6429 = extractelement <4 x i64> %6416, i64 3
  %6430 = getelementptr inbounds float, ptr %f6.host, i64 %6429
  %6431 = load float, ptr %6430, align 4, !tbaa !50
  %6432 = insertelement <4 x float> %6428, float %6431, i64 3
  %6433 = fmul <4 x float> %6432, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6434 = insertelement <4 x i32> undef, i32 %t2668, i64 0
  %6435 = shufflevector <4 x i32> %6434, <4 x i32> undef, <4 x i32> zeroinitializer
  %6436 = add <4 x i32> %6435, <i32 -1, i32 0, i32 1, i32 2>
  %6437 = add <4 x i32> %6436, %t2670
  %6438 = sext <4 x i32> %6437 to <4 x i64>
  %6439 = extractelement <4 x i64> %6438, i64 0
  %6440 = getelementptr inbounds float, ptr %f6.host, i64 %6439
  %6441 = load float, ptr %6440, align 4, !tbaa !50
  %6442 = insertelement <4 x float> undef, float %6441, i64 0
  %6443 = extractelement <4 x i64> %6438, i64 1
  %6444 = getelementptr inbounds float, ptr %f6.host, i64 %6443
  %6445 = load float, ptr %6444, align 4, !tbaa !50
  %6446 = insertelement <4 x float> %6442, float %6445, i64 1
  %6447 = extractelement <4 x i64> %6438, i64 2
  %6448 = getelementptr inbounds float, ptr %f6.host, i64 %6447
  %6449 = load float, ptr %6448, align 4, !tbaa !50
  %6450 = insertelement <4 x float> %6446, float %6449, i64 2
  %6451 = extractelement <4 x i64> %6438, i64 3
  %6452 = getelementptr inbounds float, ptr %f6.host, i64 %6451
  %6453 = load float, ptr %6452, align 4, !tbaa !50
  %6454 = insertelement <4 x float> %6450, float %6453, i64 3
  %6455 = fmul <4 x float> %6454, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6456 = fadd <4 x float> %6433, %6455
  %6457 = fmul <4 x float> %6456, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6458 = insertelement <4 x i32> undef, i32 %t2667, i64 0
  %6459 = shufflevector <4 x i32> %6458, <4 x i32> undef, <4 x i32> zeroinitializer
  %6460 = add nsw <4 x i32> %6459, <i32 0, i32 1, i32 2, i32 3>
  %6461 = add nsw <4 x i32> %t2670, %6460
  %6462 = sext <4 x i32> %6461 to <4 x i64>
  %6463 = extractelement <4 x i64> %6462, i64 0
  %6464 = getelementptr inbounds float, ptr %f6.host, i64 %6463
  %6465 = load float, ptr %6464, align 4, !tbaa !50
  %6466 = insertelement <4 x float> undef, float %6465, i64 0
  %6467 = extractelement <4 x i64> %6462, i64 1
  %6468 = getelementptr inbounds float, ptr %f6.host, i64 %6467
  %6469 = load float, ptr %6468, align 4, !tbaa !50
  %6470 = insertelement <4 x float> %6466, float %6469, i64 1
  %6471 = extractelement <4 x i64> %6462, i64 2
  %6472 = getelementptr inbounds float, ptr %f6.host, i64 %6471
  %6473 = load float, ptr %6472, align 4, !tbaa !50
  %6474 = insertelement <4 x float> %6470, float %6473, i64 2
  %6475 = extractelement <4 x i64> %6462, i64 3
  %6476 = getelementptr inbounds float, ptr %f6.host, i64 %6475
  %6477 = load float, ptr %6476, align 4, !tbaa !50
  %6478 = insertelement <4 x float> %6474, float %6477, i64 3
  %6479 = fmul <4 x float> %6478, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6480 = insertelement <4 x i32> undef, i32 %t2664, i64 0
  %6481 = shufflevector <4 x i32> %6480, <4 x i32> undef, <4 x i32> zeroinitializer
  %6482 = add <4 x i32> %6481, <i32 -1, i32 0, i32 1, i32 2>
  %6483 = add <4 x i32> %6482, %t2670
  %6484 = sext <4 x i32> %6483 to <4 x i64>
  %6485 = extractelement <4 x i64> %6484, i64 0
  %6486 = getelementptr inbounds float, ptr %f6.host, i64 %6485
  %6487 = load float, ptr %6486, align 4, !tbaa !50
  %6488 = insertelement <4 x float> undef, float %6487, i64 0
  %6489 = extractelement <4 x i64> %6484, i64 1
  %6490 = getelementptr inbounds float, ptr %f6.host, i64 %6489
  %6491 = load float, ptr %6490, align 4, !tbaa !50
  %6492 = insertelement <4 x float> %6488, float %6491, i64 1
  %6493 = extractelement <4 x i64> %6484, i64 2
  %6494 = getelementptr inbounds float, ptr %f6.host, i64 %6493
  %6495 = load float, ptr %6494, align 4, !tbaa !50
  %6496 = insertelement <4 x float> %6492, float %6495, i64 2
  %6497 = extractelement <4 x i64> %6484, i64 3
  %6498 = getelementptr inbounds float, ptr %f6.host, i64 %6497
  %6499 = load float, ptr %6498, align 4, !tbaa !50
  %6500 = insertelement <4 x float> %6496, float %6499, i64 3
  %6501 = fmul <4 x float> %6500, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6502 = fadd <4 x float> %6479, %6501
  %6503 = fmul <4 x float> %6502, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6504 = fadd <4 x float> %6457, %6503
  %6505 = mul nsw <4 x i32> %6166, %1391
  %6506 = add nsw i32 %t2643, 1
  %6507 = insertelement <4 x i32> undef, i32 %6506, i64 0
  %6508 = shufflevector <4 x i32> %6507, <4 x i32> undef, <4 x i32> zeroinitializer
  %6509 = add nsw <4 x i32> %6508, <i32 0, i32 2, i32 4, i32 6>
  %6510 = add nsw <4 x i32> %6505, %6509
  %6511 = sext <4 x i32> %6510 to <4 x i64>
  %6512 = extractelement <4 x i64> %6511, i64 0
  %6513 = getelementptr inbounds float, ptr %f5.host, i64 %6512
  %6514 = load float, ptr %6513, align 4, !tbaa !46
  %6515 = insertelement <4 x float> undef, float %6514, i64 0
  %6516 = extractelement <4 x i64> %6511, i64 1
  %6517 = getelementptr inbounds float, ptr %f5.host, i64 %6516
  %6518 = load float, ptr %6517, align 4, !tbaa !46
  %6519 = insertelement <4 x float> %6515, float %6518, i64 1
  %6520 = extractelement <4 x i64> %6511, i64 2
  %6521 = getelementptr inbounds float, ptr %f5.host, i64 %6520
  %6522 = load float, ptr %6521, align 4, !tbaa !46
  %6523 = insertelement <4 x float> %6519, float %6522, i64 2
  %6524 = extractelement <4 x i64> %6511, i64 3
  %6525 = getelementptr inbounds float, ptr %f5.host, i64 %6524
  %6526 = load float, ptr %6525, align 4, !tbaa !46
  %6527 = insertelement <4 x float> %6523, float %6526, i64 3
  %6528 = fsub <4 x float> %6527, %6504
  %6529 = fmul <4 x float> %t2659, %6528
  %6530 = add nsw <4 x i32> %t2665, %6414
  %6531 = sext <4 x i32> %6530 to <4 x i64>
  %6532 = extractelement <4 x i64> %6531, i64 0
  %6533 = getelementptr inbounds float, ptr %f6.host, i64 %6532
  %6534 = load float, ptr %6533, align 4, !tbaa !50
  %6535 = insertelement <4 x float> undef, float %6534, i64 0
  %6536 = extractelement <4 x i64> %6531, i64 1
  %6537 = getelementptr inbounds float, ptr %f6.host, i64 %6536
  %6538 = load float, ptr %6537, align 4, !tbaa !50
  %6539 = insertelement <4 x float> %6535, float %6538, i64 1
  %6540 = extractelement <4 x i64> %6531, i64 2
  %6541 = getelementptr inbounds float, ptr %f6.host, i64 %6540
  %6542 = load float, ptr %6541, align 4, !tbaa !50
  %6543 = insertelement <4 x float> %6539, float %6542, i64 2
  %6544 = extractelement <4 x i64> %6531, i64 3
  %6545 = getelementptr inbounds float, ptr %f6.host, i64 %6544
  %6546 = load float, ptr %6545, align 4, !tbaa !50
  %6547 = insertelement <4 x float> %6543, float %6546, i64 3
  %6548 = fmul <4 x float> %6547, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6549 = add <4 x i32> %6436, %t2665
  %6550 = sext <4 x i32> %6549 to <4 x i64>
  %6551 = extractelement <4 x i64> %6550, i64 0
  %6552 = getelementptr inbounds float, ptr %f6.host, i64 %6551
  %6553 = load float, ptr %6552, align 4, !tbaa !50
  %6554 = insertelement <4 x float> undef, float %6553, i64 0
  %6555 = extractelement <4 x i64> %6550, i64 1
  %6556 = getelementptr inbounds float, ptr %f6.host, i64 %6555
  %6557 = load float, ptr %6556, align 4, !tbaa !50
  %6558 = insertelement <4 x float> %6554, float %6557, i64 1
  %6559 = extractelement <4 x i64> %6550, i64 2
  %6560 = getelementptr inbounds float, ptr %f6.host, i64 %6559
  %6561 = load float, ptr %6560, align 4, !tbaa !50
  %6562 = insertelement <4 x float> %6558, float %6561, i64 2
  %6563 = extractelement <4 x i64> %6550, i64 3
  %6564 = getelementptr inbounds float, ptr %f6.host, i64 %6563
  %6565 = load float, ptr %6564, align 4, !tbaa !50
  %6566 = insertelement <4 x float> %6562, float %6565, i64 3
  %6567 = fmul <4 x float> %6566, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6568 = fadd <4 x float> %6548, %6567
  %6569 = fmul <4 x float> %6568, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6570 = add nsw <4 x i32> %t2665, %6460
  %6571 = sext <4 x i32> %6570 to <4 x i64>
  %6572 = extractelement <4 x i64> %6571, i64 0
  %6573 = getelementptr inbounds float, ptr %f6.host, i64 %6572
  %6574 = load float, ptr %6573, align 4, !tbaa !50
  %6575 = insertelement <4 x float> undef, float %6574, i64 0
  %6576 = extractelement <4 x i64> %6571, i64 1
  %6577 = getelementptr inbounds float, ptr %f6.host, i64 %6576
  %6578 = load float, ptr %6577, align 4, !tbaa !50
  %6579 = insertelement <4 x float> %6575, float %6578, i64 1
  %6580 = extractelement <4 x i64> %6571, i64 2
  %6581 = getelementptr inbounds float, ptr %f6.host, i64 %6580
  %6582 = load float, ptr %6581, align 4, !tbaa !50
  %6583 = insertelement <4 x float> %6579, float %6582, i64 2
  %6584 = extractelement <4 x i64> %6571, i64 3
  %6585 = getelementptr inbounds float, ptr %f6.host, i64 %6584
  %6586 = load float, ptr %6585, align 4, !tbaa !50
  %6587 = insertelement <4 x float> %6583, float %6586, i64 3
  %6588 = fmul <4 x float> %6587, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6589 = add <4 x i32> %6482, %t2665
  %6590 = sext <4 x i32> %6589 to <4 x i64>
  %6591 = extractelement <4 x i64> %6590, i64 0
  %6592 = getelementptr inbounds float, ptr %f6.host, i64 %6591
  %6593 = load float, ptr %6592, align 4, !tbaa !50
  %6594 = insertelement <4 x float> undef, float %6593, i64 0
  %6595 = extractelement <4 x i64> %6590, i64 1
  %6596 = getelementptr inbounds float, ptr %f6.host, i64 %6595
  %6597 = load float, ptr %6596, align 4, !tbaa !50
  %6598 = insertelement <4 x float> %6594, float %6597, i64 1
  %6599 = extractelement <4 x i64> %6590, i64 2
  %6600 = getelementptr inbounds float, ptr %f6.host, i64 %6599
  %6601 = load float, ptr %6600, align 4, !tbaa !50
  %6602 = insertelement <4 x float> %6598, float %6601, i64 2
  %6603 = extractelement <4 x i64> %6590, i64 3
  %6604 = getelementptr inbounds float, ptr %f6.host, i64 %6603
  %6605 = load float, ptr %6604, align 4, !tbaa !50
  %6606 = insertelement <4 x float> %6602, float %6605, i64 3
  %6607 = fmul <4 x float> %6606, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6608 = fadd <4 x float> %6588, %6607
  %6609 = fmul <4 x float> %6608, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6610 = fadd <4 x float> %6569, %6609
  %6611 = mul nsw <4 x i32> %t2662, %1391
  %6612 = add nsw <4 x i32> %6611, %6509
  %6613 = sext <4 x i32> %6612 to <4 x i64>
  %6614 = extractelement <4 x i64> %6613, i64 0
  %6615 = getelementptr inbounds float, ptr %f5.host, i64 %6614
  %6616 = load float, ptr %6615, align 4, !tbaa !46
  %6617 = insertelement <4 x float> undef, float %6616, i64 0
  %6618 = extractelement <4 x i64> %6613, i64 1
  %6619 = getelementptr inbounds float, ptr %f5.host, i64 %6618
  %6620 = load float, ptr %6619, align 4, !tbaa !46
  %6621 = insertelement <4 x float> %6617, float %6620, i64 1
  %6622 = extractelement <4 x i64> %6613, i64 2
  %6623 = getelementptr inbounds float, ptr %f5.host, i64 %6622
  %6624 = load float, ptr %6623, align 4, !tbaa !46
  %6625 = insertelement <4 x float> %6621, float %6624, i64 2
  %6626 = extractelement <4 x i64> %6613, i64 3
  %6627 = getelementptr inbounds float, ptr %f5.host, i64 %6626
  %6628 = load float, ptr %6627, align 4, !tbaa !46
  %6629 = insertelement <4 x float> %6625, float %6628, i64 3
  %6630 = fsub <4 x float> %6629, %6610
  %6631 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2659
  %6632 = fmul <4 x float> %6631, %6630
  %6633 = fadd <4 x float> %6529, %6632
  %6634 = add nsw i64 %6388, %3249
  %6635 = getelementptr inbounds float, ptr %154, i64 %6634
  %6636 = load <4 x float>, ptr %6635, align 4, !tbaa !66
  %6637 = fmul <4 x float> %6636, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6638 = add nsw i64 %3251, %6388
  %6639 = getelementptr inbounds float, ptr %154, i64 %6638
  %6640 = load <4 x float>, ptr %6639, align 4, !tbaa !66
  %6641 = fmul <4 x float> %6640, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6642 = fadd <4 x float> %6637, %6641
  %6643 = fmul <4 x float> %6642, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6644 = add nsw i64 %6399, %3249
  %6645 = getelementptr inbounds float, ptr %154, i64 %6644
  %6646 = load <4 x float>, ptr %6645, align 4, !tbaa !66
  %6647 = fmul <4 x float> %6646, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6648 = add nsw i64 %3251, %6399
  %6649 = getelementptr inbounds float, ptr %154, i64 %6648
  %6650 = load <4 x float>, ptr %6649, align 4, !tbaa !66
  %6651 = fmul <4 x float> %6650, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6652 = fadd <4 x float> %6647, %6651
  %6653 = fmul <4 x float> %6652, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6654 = fadd <4 x float> %6643, %6653
  %6655 = fadd <4 x float> %6633, %6654
  %6656 = shufflevector <4 x float> %6411, <4 x float> %6655, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %6657 = sext i32 %6139 to i64
  %6658 = sub nsw i64 %6657, %1395
  %6659 = mul nsw i64 %6658, %1394
  %6660 = add nsw i64 %3253, %6659
  %6661 = getelementptr inbounds float, ptr %193, i64 %6660
  store <8 x float> %6656, ptr %6661, align 4, !tbaa !68
  br label %"produce f12658"

"produce f12658":                                 ; preds = %"for f127.s0.v3.v354.preheader", %"end for f127.s0.v3.v351", %"produce f12745"
  %6662 = trunc i64 %3411 to i32
  %6663 = and i32 %6662, 1
  %.not104.not = icmp eq i32 %6663, 0
  br i1 %.not104.not, label %true_bb60, label %"assert succeeded72"

true_bb60:                                        ; preds = %"produce f12658"
  br i1 %3258, label %"for f126.s0.v3.v363.preheader", label %"end for f126.s0.v3.v364", !prof !5

"for f126.s0.v3.v363.preheader":                  ; preds = %true_bb60
  %6664 = trunc i64 %3411 to i32
  %6665 = add i32 %6664, 3
  %6666 = ashr i32 %6665, 1
  %6667 = and i32 %6665, 2
  %6668 = ashr i32 %6665, 2
  %t2671 = add nsw i32 %6668, %6667
  %6669 = sub nsw i32 %6666, %f72.v4.min_realized
  %6670 = mul nsw i32 %6669, %1954
  %6671 = add i32 %3259, %6670
  %6672 = add nsw i32 %t2671, %1955
  %t2678 = mul nsw i32 %6672, %178
  %6673 = sub nsw i32 %6668, %f127.v4.min_realized
  %t2680 = mul nsw i32 %6673, %178
  %6674 = sub nsw i32 %6666, %f4.v4.min_realized
  %6675 = mul nsw i32 %6674, %f4.stride.1
  %6676 = add i32 %3260, %6675
  %6677 = add i32 %t2671, %1956
  %6678 = mul nsw i32 %6677, %f5.stride.1
  %6679 = sub nsw i32 %6668, %f5.v4.min_realized
  %6680 = mul nsw i32 %6679, %f5.stride.1
  %6681 = sext i32 %t2680 to i64
  %6682 = add nsw i64 %6681, -1
  %6683 = sext i32 %t2678 to i64
  %6684 = add nsw i64 %6683, -1
  %6685 = sext i32 %6666 to i64
  %6686 = sub nsw i64 %6685, %1962
  %6687 = mul nsw i64 %6686, %1961
  %6688 = add nsw i64 %6687, %3263
  br label %"for f126.s0.v3.v363"

"for f126.s0.v3.v363":                            ; preds = %"for f126.s0.v3.v363.preheader", %"for f126.s0.v3.v363"
  %lsr.iv303 = phi i32 [ %lsr.iv.next304, %"for f126.s0.v3.v363" ], [ 0, %"for f126.s0.v3.v363.preheader" ]
  %lsr.iv301 = phi i32 [ %lsr.iv.next302, %"for f126.s0.v3.v363" ], [ %a947, %"for f126.s0.v3.v363.preheader" ]
  %6689 = add i32 %lsr.iv303, %161
  %6690 = add i32 %6689, -1
  %6691 = shl i32 %6690, 1
  %6692 = and i32 %6691, 2
  %6693 = ashr i32 %6690, 1
  %t2672 = add nsw i32 %6692, %6693
  %6694 = add i32 %6671, %lsr.iv303
  %6695 = sext i32 %6694 to i64
  %6696 = add nsw i64 %6695, -2
  %6697 = getelementptr inbounds float, ptr %f72.host, i64 %6696
  %6698 = load <4 x float>, ptr %6697, align 4, !tbaa !48
  %6699 = add nsw i64 %6695, 2
  %6700 = getelementptr inbounds float, ptr %f72.host, i64 %6699
  %6701 = load <4 x float>, ptr %6700, align 4, !tbaa !48
  %6702 = shufflevector <4 x float> %6698, <4 x float> %6701, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2674 = fmul <4 x float> %232, %6702
  %a948 = fptosi <4 x float> %t2674 to <4 x i32>
  %a951 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a948)
  %6703 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a951, <4 x i32> zeroinitializer)
  %6704 = sitofp <4 x i32> %6703 to <4 x float>
  %t2676 = fsub <4 x float> %t2674, %6704
  %6705 = add i32 %6676, %lsr.iv303
  %t2683 = sub nsw <4 x i32> %6703, %241
  %6706 = sub nsw i32 %t2672, %f5.v3.min_realized
  %t2686 = add nsw i32 %6706, %6678
  %t2687 = mul nsw <4 x i32> %t2683, %1391
  %6707 = sub nsw i32 %6693, %f5.v3.min_realized
  %t2689 = add nsw i32 %6707, %6678
  %t2691 = add nsw i32 %6706, %6680
  %t2692 = add nsw i32 %6707, %6680
  %6708 = add nsw <4 x i32> %t2683, <i32 1, i32 1, i32 1, i32 1>
  %t2693 = mul nsw <4 x i32> %6708, %1391
  %6709 = ashr i32 %6689, 1
  %t2694 = add nsw i32 %6709, %3261
  %6710 = getelementptr inbounds float, ptr %f72.host, i64 %6695
  %6711 = load <4 x float>, ptr %6710, align 4, !tbaa !48
  %6712 = add nsw i64 %6695, 4
  %6713 = getelementptr inbounds float, ptr %f72.host, i64 %6712
  %6714 = load <4 x float>, ptr %6713, align 4, !tbaa !48
  %6715 = shufflevector <4 x float> %6711, <4 x float> %6714, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2695 = fmul <4 x float> %232, %6715
  %a952 = fptosi <4 x float> %t2695 to <4 x i32>
  %a955 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a952)
  %6716 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a955, <4 x i32> zeroinitializer)
  %6717 = sitofp <4 x i32> %6716 to <4 x float>
  %t2697 = fsub <4 x float> %t2695, %6717
  %t2700 = sub nsw <4 x i32> %6716, %241
  %6718 = sub nsw i32 %t2694, %f5.v3.min_realized
  %t2702 = add nsw i32 %6718, %6678
  %t2703 = mul nsw <4 x i32> %t2700, %1391
  %6719 = sub nsw i32 %6709, %f5.v3.min_realized
  %t2705 = add nsw i32 %6719, %6678
  %t2706 = add nsw i32 %6718, %6680
  %t2707 = add nsw i32 %6719, %6680
  %6720 = add nsw <4 x i32> %t2700, <i32 1, i32 1, i32 1, i32 1>
  %t2708 = mul nsw <4 x i32> %6720, %1391
  %6721 = insertelement <4 x i32> undef, i32 %t2692, i64 0
  %6722 = shufflevector <4 x i32> %6721, <4 x i32> undef, <4 x i32> zeroinitializer
  %6723 = add nsw <4 x i32> %6722, <i32 0, i32 1, i32 2, i32 3>
  %6724 = add nsw <4 x i32> %t2693, %6723
  %6725 = sext <4 x i32> %6724 to <4 x i64>
  %6726 = extractelement <4 x i64> %6725, i64 0
  %6727 = getelementptr inbounds float, ptr %f5.host, i64 %6726
  %6728 = load float, ptr %6727, align 4, !tbaa !46
  %6729 = insertelement <4 x float> undef, float %6728, i64 0
  %6730 = extractelement <4 x i64> %6725, i64 1
  %6731 = getelementptr inbounds float, ptr %f5.host, i64 %6730
  %6732 = load float, ptr %6731, align 4, !tbaa !46
  %6733 = insertelement <4 x float> %6729, float %6732, i64 1
  %6734 = extractelement <4 x i64> %6725, i64 2
  %6735 = getelementptr inbounds float, ptr %f5.host, i64 %6734
  %6736 = load float, ptr %6735, align 4, !tbaa !46
  %6737 = insertelement <4 x float> %6733, float %6736, i64 2
  %6738 = extractelement <4 x i64> %6725, i64 3
  %6739 = getelementptr inbounds float, ptr %f5.host, i64 %6738
  %6740 = load float, ptr %6739, align 4, !tbaa !46
  %6741 = insertelement <4 x float> %6737, float %6740, i64 3
  %6742 = fmul <4 x float> %6741, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6743 = insertelement <4 x i32> undef, i32 %t2691, i64 0
  %6744 = shufflevector <4 x i32> %6743, <4 x i32> undef, <4 x i32> zeroinitializer
  %6745 = add <4 x i32> %6744, <i32 -1, i32 0, i32 1, i32 2>
  %6746 = add <4 x i32> %6745, %t2693
  %6747 = sext <4 x i32> %6746 to <4 x i64>
  %6748 = extractelement <4 x i64> %6747, i64 0
  %6749 = getelementptr inbounds float, ptr %f5.host, i64 %6748
  %6750 = load float, ptr %6749, align 4, !tbaa !46
  %6751 = insertelement <4 x float> undef, float %6750, i64 0
  %6752 = extractelement <4 x i64> %6747, i64 1
  %6753 = getelementptr inbounds float, ptr %f5.host, i64 %6752
  %6754 = load float, ptr %6753, align 4, !tbaa !46
  %6755 = insertelement <4 x float> %6751, float %6754, i64 1
  %6756 = extractelement <4 x i64> %6747, i64 2
  %6757 = getelementptr inbounds float, ptr %f5.host, i64 %6756
  %6758 = load float, ptr %6757, align 4, !tbaa !46
  %6759 = insertelement <4 x float> %6755, float %6758, i64 2
  %6760 = extractelement <4 x i64> %6747, i64 3
  %6761 = getelementptr inbounds float, ptr %f5.host, i64 %6760
  %6762 = load float, ptr %6761, align 4, !tbaa !46
  %6763 = insertelement <4 x float> %6759, float %6762, i64 3
  %6764 = fmul <4 x float> %6763, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6765 = fadd <4 x float> %6742, %6764
  %6766 = fmul <4 x float> %6765, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6767 = insertelement <4 x i32> undef, i32 %t2689, i64 0
  %6768 = shufflevector <4 x i32> %6767, <4 x i32> undef, <4 x i32> zeroinitializer
  %6769 = add nsw <4 x i32> %6768, <i32 0, i32 1, i32 2, i32 3>
  %6770 = add nsw <4 x i32> %t2693, %6769
  %6771 = sext <4 x i32> %6770 to <4 x i64>
  %6772 = extractelement <4 x i64> %6771, i64 0
  %6773 = getelementptr inbounds float, ptr %f5.host, i64 %6772
  %6774 = load float, ptr %6773, align 4, !tbaa !46
  %6775 = insertelement <4 x float> undef, float %6774, i64 0
  %6776 = extractelement <4 x i64> %6771, i64 1
  %6777 = getelementptr inbounds float, ptr %f5.host, i64 %6776
  %6778 = load float, ptr %6777, align 4, !tbaa !46
  %6779 = insertelement <4 x float> %6775, float %6778, i64 1
  %6780 = extractelement <4 x i64> %6771, i64 2
  %6781 = getelementptr inbounds float, ptr %f5.host, i64 %6780
  %6782 = load float, ptr %6781, align 4, !tbaa !46
  %6783 = insertelement <4 x float> %6779, float %6782, i64 2
  %6784 = extractelement <4 x i64> %6771, i64 3
  %6785 = getelementptr inbounds float, ptr %f5.host, i64 %6784
  %6786 = load float, ptr %6785, align 4, !tbaa !46
  %6787 = insertelement <4 x float> %6783, float %6786, i64 3
  %6788 = fmul <4 x float> %6787, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6789 = insertelement <4 x i32> undef, i32 %t2686, i64 0
  %6790 = shufflevector <4 x i32> %6789, <4 x i32> undef, <4 x i32> zeroinitializer
  %6791 = add <4 x i32> %6790, <i32 -1, i32 0, i32 1, i32 2>
  %6792 = add <4 x i32> %6791, %t2693
  %6793 = sext <4 x i32> %6792 to <4 x i64>
  %6794 = extractelement <4 x i64> %6793, i64 0
  %6795 = getelementptr inbounds float, ptr %f5.host, i64 %6794
  %6796 = load float, ptr %6795, align 4, !tbaa !46
  %6797 = insertelement <4 x float> undef, float %6796, i64 0
  %6798 = extractelement <4 x i64> %6793, i64 1
  %6799 = getelementptr inbounds float, ptr %f5.host, i64 %6798
  %6800 = load float, ptr %6799, align 4, !tbaa !46
  %6801 = insertelement <4 x float> %6797, float %6800, i64 1
  %6802 = extractelement <4 x i64> %6793, i64 2
  %6803 = getelementptr inbounds float, ptr %f5.host, i64 %6802
  %6804 = load float, ptr %6803, align 4, !tbaa !46
  %6805 = insertelement <4 x float> %6801, float %6804, i64 2
  %6806 = extractelement <4 x i64> %6793, i64 3
  %6807 = getelementptr inbounds float, ptr %f5.host, i64 %6806
  %6808 = load float, ptr %6807, align 4, !tbaa !46
  %6809 = insertelement <4 x float> %6805, float %6808, i64 3
  %6810 = fmul <4 x float> %6809, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6811 = fadd <4 x float> %6788, %6810
  %6812 = fmul <4 x float> %6811, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6813 = fadd <4 x float> %6766, %6812
  %6814 = mul nsw <4 x i32> %6708, %1959
  %6815 = add i32 %6705, -1
  %6816 = insertelement <4 x i32> undef, i32 %6815, i64 0
  %6817 = shufflevector <4 x i32> %6816, <4 x i32> undef, <4 x i32> zeroinitializer
  %6818 = add nsw <4 x i32> %6817, <i32 0, i32 2, i32 4, i32 6>
  %6819 = add nsw <4 x i32> %6814, %6818
  %6820 = sext <4 x i32> %6819 to <4 x i64>
  %6821 = extractelement <4 x i64> %6820, i64 0
  %6822 = getelementptr inbounds float, ptr %f4.host, i64 %6821
  %6823 = load float, ptr %6822, align 4, !tbaa !44
  %6824 = insertelement <4 x float> undef, float %6823, i64 0
  %6825 = extractelement <4 x i64> %6820, i64 1
  %6826 = getelementptr inbounds float, ptr %f4.host, i64 %6825
  %6827 = load float, ptr %6826, align 4, !tbaa !44
  %6828 = insertelement <4 x float> %6824, float %6827, i64 1
  %6829 = extractelement <4 x i64> %6820, i64 2
  %6830 = getelementptr inbounds float, ptr %f4.host, i64 %6829
  %6831 = load float, ptr %6830, align 4, !tbaa !44
  %6832 = insertelement <4 x float> %6828, float %6831, i64 2
  %6833 = extractelement <4 x i64> %6820, i64 3
  %6834 = getelementptr inbounds float, ptr %f4.host, i64 %6833
  %6835 = load float, ptr %6834, align 4, !tbaa !44
  %6836 = insertelement <4 x float> %6832, float %6835, i64 3
  %6837 = fsub <4 x float> %6836, %6813
  %6838 = fmul <4 x float> %t2676, %6837
  %6839 = add nsw <4 x i32> %t2687, %6723
  %6840 = sext <4 x i32> %6839 to <4 x i64>
  %6841 = extractelement <4 x i64> %6840, i64 0
  %6842 = getelementptr inbounds float, ptr %f5.host, i64 %6841
  %6843 = load float, ptr %6842, align 4, !tbaa !46
  %6844 = insertelement <4 x float> undef, float %6843, i64 0
  %6845 = extractelement <4 x i64> %6840, i64 1
  %6846 = getelementptr inbounds float, ptr %f5.host, i64 %6845
  %6847 = load float, ptr %6846, align 4, !tbaa !46
  %6848 = insertelement <4 x float> %6844, float %6847, i64 1
  %6849 = extractelement <4 x i64> %6840, i64 2
  %6850 = getelementptr inbounds float, ptr %f5.host, i64 %6849
  %6851 = load float, ptr %6850, align 4, !tbaa !46
  %6852 = insertelement <4 x float> %6848, float %6851, i64 2
  %6853 = extractelement <4 x i64> %6840, i64 3
  %6854 = getelementptr inbounds float, ptr %f5.host, i64 %6853
  %6855 = load float, ptr %6854, align 4, !tbaa !46
  %6856 = insertelement <4 x float> %6852, float %6855, i64 3
  %6857 = fmul <4 x float> %6856, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6858 = add <4 x i32> %t2687, %6744
  %6859 = add <4 x i32> %6858, <i32 -1, i32 0, i32 1, i32 2>
  %6860 = sext <4 x i32> %6859 to <4 x i64>
  %6861 = extractelement <4 x i64> %6860, i64 0
  %6862 = getelementptr inbounds float, ptr %f5.host, i64 %6861
  %6863 = load float, ptr %6862, align 4, !tbaa !46
  %6864 = insertelement <4 x float> undef, float %6863, i64 0
  %6865 = extractelement <4 x i64> %6860, i64 1
  %6866 = getelementptr inbounds float, ptr %f5.host, i64 %6865
  %6867 = load float, ptr %6866, align 4, !tbaa !46
  %6868 = insertelement <4 x float> %6864, float %6867, i64 1
  %6869 = extractelement <4 x i64> %6860, i64 2
  %6870 = getelementptr inbounds float, ptr %f5.host, i64 %6869
  %6871 = load float, ptr %6870, align 4, !tbaa !46
  %6872 = insertelement <4 x float> %6868, float %6871, i64 2
  %6873 = extractelement <4 x i64> %6860, i64 3
  %6874 = getelementptr inbounds float, ptr %f5.host, i64 %6873
  %6875 = load float, ptr %6874, align 4, !tbaa !46
  %6876 = insertelement <4 x float> %6872, float %6875, i64 3
  %6877 = fmul <4 x float> %6876, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6878 = fadd <4 x float> %6857, %6877
  %6879 = fmul <4 x float> %6878, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6880 = add nsw <4 x i32> %t2687, %6769
  %6881 = sext <4 x i32> %6880 to <4 x i64>
  %6882 = extractelement <4 x i64> %6881, i64 0
  %6883 = getelementptr inbounds float, ptr %f5.host, i64 %6882
  %6884 = load float, ptr %6883, align 4, !tbaa !46
  %6885 = insertelement <4 x float> undef, float %6884, i64 0
  %6886 = extractelement <4 x i64> %6881, i64 1
  %6887 = getelementptr inbounds float, ptr %f5.host, i64 %6886
  %6888 = load float, ptr %6887, align 4, !tbaa !46
  %6889 = insertelement <4 x float> %6885, float %6888, i64 1
  %6890 = extractelement <4 x i64> %6881, i64 2
  %6891 = getelementptr inbounds float, ptr %f5.host, i64 %6890
  %6892 = load float, ptr %6891, align 4, !tbaa !46
  %6893 = insertelement <4 x float> %6889, float %6892, i64 2
  %6894 = extractelement <4 x i64> %6881, i64 3
  %6895 = getelementptr inbounds float, ptr %f5.host, i64 %6894
  %6896 = load float, ptr %6895, align 4, !tbaa !46
  %6897 = insertelement <4 x float> %6893, float %6896, i64 3
  %6898 = fmul <4 x float> %6897, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6899 = add <4 x i32> %t2687, %6790
  %6900 = add <4 x i32> %6899, <i32 -1, i32 0, i32 1, i32 2>
  %6901 = sext <4 x i32> %6900 to <4 x i64>
  %6902 = extractelement <4 x i64> %6901, i64 0
  %6903 = getelementptr inbounds float, ptr %f5.host, i64 %6902
  %6904 = load float, ptr %6903, align 4, !tbaa !46
  %6905 = insertelement <4 x float> undef, float %6904, i64 0
  %6906 = extractelement <4 x i64> %6901, i64 1
  %6907 = getelementptr inbounds float, ptr %f5.host, i64 %6906
  %6908 = load float, ptr %6907, align 4, !tbaa !46
  %6909 = insertelement <4 x float> %6905, float %6908, i64 1
  %6910 = extractelement <4 x i64> %6901, i64 2
  %6911 = getelementptr inbounds float, ptr %f5.host, i64 %6910
  %6912 = load float, ptr %6911, align 4, !tbaa !46
  %6913 = insertelement <4 x float> %6909, float %6912, i64 2
  %6914 = extractelement <4 x i64> %6901, i64 3
  %6915 = getelementptr inbounds float, ptr %f5.host, i64 %6914
  %6916 = load float, ptr %6915, align 4, !tbaa !46
  %6917 = insertelement <4 x float> %6913, float %6916, i64 3
  %6918 = fmul <4 x float> %6917, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6919 = fadd <4 x float> %6898, %6918
  %6920 = fmul <4 x float> %6919, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6921 = fadd <4 x float> %6879, %6920
  %6922 = mul nsw <4 x i32> %t2683, %1959
  %6923 = add nsw <4 x i32> %6922, %6818
  %6924 = sext <4 x i32> %6923 to <4 x i64>
  %6925 = extractelement <4 x i64> %6924, i64 0
  %6926 = getelementptr inbounds float, ptr %f4.host, i64 %6925
  %6927 = load float, ptr %6926, align 4, !tbaa !44
  %6928 = insertelement <4 x float> undef, float %6927, i64 0
  %6929 = extractelement <4 x i64> %6924, i64 1
  %6930 = getelementptr inbounds float, ptr %f4.host, i64 %6929
  %6931 = load float, ptr %6930, align 4, !tbaa !44
  %6932 = insertelement <4 x float> %6928, float %6931, i64 1
  %6933 = extractelement <4 x i64> %6924, i64 2
  %6934 = getelementptr inbounds float, ptr %f4.host, i64 %6933
  %6935 = load float, ptr %6934, align 4, !tbaa !44
  %6936 = insertelement <4 x float> %6932, float %6935, i64 2
  %6937 = extractelement <4 x i64> %6924, i64 3
  %6938 = getelementptr inbounds float, ptr %f4.host, i64 %6937
  %6939 = load float, ptr %6938, align 4, !tbaa !44
  %6940 = insertelement <4 x float> %6936, float %6939, i64 3
  %6941 = fsub <4 x float> %6940, %6921
  %6942 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2676
  %6943 = fmul <4 x float> %6942, %6941
  %6944 = fadd <4 x float> %6838, %6943
  %6945 = sext i32 %6693 to i64
  %6946 = sub nsw i64 %6945, %1396
  %6947 = add nsw i64 %6946, %6681
  %6948 = getelementptr inbounds float, ptr %193, i64 %6947
  %6949 = load <4 x float>, ptr %6948, align 4, !tbaa !68
  %6950 = fmul <4 x float> %6949, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6951 = sext i32 %t2672 to i64
  %6952 = sub nsw i64 %6951, %1396
  %6953 = add nsw i64 %6682, %6952
  %6954 = getelementptr inbounds float, ptr %193, i64 %6953
  %6955 = load <4 x float>, ptr %6954, align 4, !tbaa !68
  %6956 = fmul <4 x float> %6955, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6957 = fadd <4 x float> %6950, %6956
  %6958 = fmul <4 x float> %6957, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6959 = add nsw i64 %6946, %6683
  %6960 = getelementptr inbounds float, ptr %193, i64 %6959
  %6961 = load <4 x float>, ptr %6960, align 4, !tbaa !68
  %6962 = fmul <4 x float> %6961, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6963 = add nsw i64 %6684, %6952
  %6964 = getelementptr inbounds float, ptr %193, i64 %6963
  %6965 = load <4 x float>, ptr %6964, align 4, !tbaa !68
  %6966 = fmul <4 x float> %6965, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6967 = fadd <4 x float> %6962, %6966
  %6968 = fmul <4 x float> %6967, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %6969 = fadd <4 x float> %6958, %6968
  %6970 = fadd <4 x float> %6944, %6969
  %6971 = insertelement <4 x i32> undef, i32 %t2707, i64 0
  %6972 = shufflevector <4 x i32> %6971, <4 x i32> undef, <4 x i32> zeroinitializer
  %6973 = add nsw <4 x i32> %6972, <i32 0, i32 1, i32 2, i32 3>
  %6974 = add nsw <4 x i32> %t2708, %6973
  %6975 = sext <4 x i32> %6974 to <4 x i64>
  %6976 = extractelement <4 x i64> %6975, i64 0
  %6977 = getelementptr inbounds float, ptr %f5.host, i64 %6976
  %6978 = load float, ptr %6977, align 4, !tbaa !46
  %6979 = insertelement <4 x float> undef, float %6978, i64 0
  %6980 = extractelement <4 x i64> %6975, i64 1
  %6981 = getelementptr inbounds float, ptr %f5.host, i64 %6980
  %6982 = load float, ptr %6981, align 4, !tbaa !46
  %6983 = insertelement <4 x float> %6979, float %6982, i64 1
  %6984 = extractelement <4 x i64> %6975, i64 2
  %6985 = getelementptr inbounds float, ptr %f5.host, i64 %6984
  %6986 = load float, ptr %6985, align 4, !tbaa !46
  %6987 = insertelement <4 x float> %6983, float %6986, i64 2
  %6988 = extractelement <4 x i64> %6975, i64 3
  %6989 = getelementptr inbounds float, ptr %f5.host, i64 %6988
  %6990 = load float, ptr %6989, align 4, !tbaa !46
  %6991 = insertelement <4 x float> %6987, float %6990, i64 3
  %6992 = fmul <4 x float> %6991, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %6993 = insertelement <4 x i32> undef, i32 %t2706, i64 0
  %6994 = shufflevector <4 x i32> %6993, <4 x i32> undef, <4 x i32> zeroinitializer
  %6995 = add <4 x i32> %6994, <i32 -1, i32 0, i32 1, i32 2>
  %6996 = add <4 x i32> %6995, %t2708
  %6997 = sext <4 x i32> %6996 to <4 x i64>
  %6998 = extractelement <4 x i64> %6997, i64 0
  %6999 = getelementptr inbounds float, ptr %f5.host, i64 %6998
  %7000 = load float, ptr %6999, align 4, !tbaa !46
  %7001 = insertelement <4 x float> undef, float %7000, i64 0
  %7002 = extractelement <4 x i64> %6997, i64 1
  %7003 = getelementptr inbounds float, ptr %f5.host, i64 %7002
  %7004 = load float, ptr %7003, align 4, !tbaa !46
  %7005 = insertelement <4 x float> %7001, float %7004, i64 1
  %7006 = extractelement <4 x i64> %6997, i64 2
  %7007 = getelementptr inbounds float, ptr %f5.host, i64 %7006
  %7008 = load float, ptr %7007, align 4, !tbaa !46
  %7009 = insertelement <4 x float> %7005, float %7008, i64 2
  %7010 = extractelement <4 x i64> %6997, i64 3
  %7011 = getelementptr inbounds float, ptr %f5.host, i64 %7010
  %7012 = load float, ptr %7011, align 4, !tbaa !46
  %7013 = insertelement <4 x float> %7009, float %7012, i64 3
  %7014 = fmul <4 x float> %7013, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7015 = fadd <4 x float> %6992, %7014
  %7016 = fmul <4 x float> %7015, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7017 = insertelement <4 x i32> undef, i32 %t2705, i64 0
  %7018 = shufflevector <4 x i32> %7017, <4 x i32> undef, <4 x i32> zeroinitializer
  %7019 = add nsw <4 x i32> %7018, <i32 0, i32 1, i32 2, i32 3>
  %7020 = add nsw <4 x i32> %t2708, %7019
  %7021 = sext <4 x i32> %7020 to <4 x i64>
  %7022 = extractelement <4 x i64> %7021, i64 0
  %7023 = getelementptr inbounds float, ptr %f5.host, i64 %7022
  %7024 = load float, ptr %7023, align 4, !tbaa !46
  %7025 = insertelement <4 x float> undef, float %7024, i64 0
  %7026 = extractelement <4 x i64> %7021, i64 1
  %7027 = getelementptr inbounds float, ptr %f5.host, i64 %7026
  %7028 = load float, ptr %7027, align 4, !tbaa !46
  %7029 = insertelement <4 x float> %7025, float %7028, i64 1
  %7030 = extractelement <4 x i64> %7021, i64 2
  %7031 = getelementptr inbounds float, ptr %f5.host, i64 %7030
  %7032 = load float, ptr %7031, align 4, !tbaa !46
  %7033 = insertelement <4 x float> %7029, float %7032, i64 2
  %7034 = extractelement <4 x i64> %7021, i64 3
  %7035 = getelementptr inbounds float, ptr %f5.host, i64 %7034
  %7036 = load float, ptr %7035, align 4, !tbaa !46
  %7037 = insertelement <4 x float> %7033, float %7036, i64 3
  %7038 = fmul <4 x float> %7037, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7039 = insertelement <4 x i32> undef, i32 %t2702, i64 0
  %7040 = shufflevector <4 x i32> %7039, <4 x i32> undef, <4 x i32> zeroinitializer
  %7041 = add <4 x i32> %7040, <i32 -1, i32 0, i32 1, i32 2>
  %7042 = add <4 x i32> %7041, %t2708
  %7043 = sext <4 x i32> %7042 to <4 x i64>
  %7044 = extractelement <4 x i64> %7043, i64 0
  %7045 = getelementptr inbounds float, ptr %f5.host, i64 %7044
  %7046 = load float, ptr %7045, align 4, !tbaa !46
  %7047 = insertelement <4 x float> undef, float %7046, i64 0
  %7048 = extractelement <4 x i64> %7043, i64 1
  %7049 = getelementptr inbounds float, ptr %f5.host, i64 %7048
  %7050 = load float, ptr %7049, align 4, !tbaa !46
  %7051 = insertelement <4 x float> %7047, float %7050, i64 1
  %7052 = extractelement <4 x i64> %7043, i64 2
  %7053 = getelementptr inbounds float, ptr %f5.host, i64 %7052
  %7054 = load float, ptr %7053, align 4, !tbaa !46
  %7055 = insertelement <4 x float> %7051, float %7054, i64 2
  %7056 = extractelement <4 x i64> %7043, i64 3
  %7057 = getelementptr inbounds float, ptr %f5.host, i64 %7056
  %7058 = load float, ptr %7057, align 4, !tbaa !46
  %7059 = insertelement <4 x float> %7055, float %7058, i64 3
  %7060 = fmul <4 x float> %7059, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7061 = fadd <4 x float> %7038, %7060
  %7062 = fmul <4 x float> %7061, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7063 = fadd <4 x float> %7016, %7062
  %7064 = mul nsw <4 x i32> %6720, %1959
  %7065 = insertelement <4 x i32> undef, i32 %6705, i64 0
  %7066 = shufflevector <4 x i32> %7065, <4 x i32> undef, <4 x i32> zeroinitializer
  %7067 = add nsw <4 x i32> %7066, <i32 0, i32 2, i32 4, i32 6>
  %7068 = add nsw <4 x i32> %7064, %7067
  %7069 = sext <4 x i32> %7068 to <4 x i64>
  %7070 = extractelement <4 x i64> %7069, i64 0
  %7071 = getelementptr inbounds float, ptr %f4.host, i64 %7070
  %7072 = load float, ptr %7071, align 4, !tbaa !44
  %7073 = insertelement <4 x float> undef, float %7072, i64 0
  %7074 = extractelement <4 x i64> %7069, i64 1
  %7075 = getelementptr inbounds float, ptr %f4.host, i64 %7074
  %7076 = load float, ptr %7075, align 4, !tbaa !44
  %7077 = insertelement <4 x float> %7073, float %7076, i64 1
  %7078 = extractelement <4 x i64> %7069, i64 2
  %7079 = getelementptr inbounds float, ptr %f4.host, i64 %7078
  %7080 = load float, ptr %7079, align 4, !tbaa !44
  %7081 = insertelement <4 x float> %7077, float %7080, i64 2
  %7082 = extractelement <4 x i64> %7069, i64 3
  %7083 = getelementptr inbounds float, ptr %f4.host, i64 %7082
  %7084 = load float, ptr %7083, align 4, !tbaa !44
  %7085 = insertelement <4 x float> %7081, float %7084, i64 3
  %7086 = fsub <4 x float> %7085, %7063
  %7087 = fmul <4 x float> %t2697, %7086
  %7088 = add nsw <4 x i32> %t2703, %6973
  %7089 = sext <4 x i32> %7088 to <4 x i64>
  %7090 = extractelement <4 x i64> %7089, i64 0
  %7091 = getelementptr inbounds float, ptr %f5.host, i64 %7090
  %7092 = load float, ptr %7091, align 4, !tbaa !46
  %7093 = insertelement <4 x float> undef, float %7092, i64 0
  %7094 = extractelement <4 x i64> %7089, i64 1
  %7095 = getelementptr inbounds float, ptr %f5.host, i64 %7094
  %7096 = load float, ptr %7095, align 4, !tbaa !46
  %7097 = insertelement <4 x float> %7093, float %7096, i64 1
  %7098 = extractelement <4 x i64> %7089, i64 2
  %7099 = getelementptr inbounds float, ptr %f5.host, i64 %7098
  %7100 = load float, ptr %7099, align 4, !tbaa !46
  %7101 = insertelement <4 x float> %7097, float %7100, i64 2
  %7102 = extractelement <4 x i64> %7089, i64 3
  %7103 = getelementptr inbounds float, ptr %f5.host, i64 %7102
  %7104 = load float, ptr %7103, align 4, !tbaa !46
  %7105 = insertelement <4 x float> %7101, float %7104, i64 3
  %7106 = fmul <4 x float> %7105, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7107 = add <4 x i32> %6995, %t2703
  %7108 = sext <4 x i32> %7107 to <4 x i64>
  %7109 = extractelement <4 x i64> %7108, i64 0
  %7110 = getelementptr inbounds float, ptr %f5.host, i64 %7109
  %7111 = load float, ptr %7110, align 4, !tbaa !46
  %7112 = insertelement <4 x float> undef, float %7111, i64 0
  %7113 = extractelement <4 x i64> %7108, i64 1
  %7114 = getelementptr inbounds float, ptr %f5.host, i64 %7113
  %7115 = load float, ptr %7114, align 4, !tbaa !46
  %7116 = insertelement <4 x float> %7112, float %7115, i64 1
  %7117 = extractelement <4 x i64> %7108, i64 2
  %7118 = getelementptr inbounds float, ptr %f5.host, i64 %7117
  %7119 = load float, ptr %7118, align 4, !tbaa !46
  %7120 = insertelement <4 x float> %7116, float %7119, i64 2
  %7121 = extractelement <4 x i64> %7108, i64 3
  %7122 = getelementptr inbounds float, ptr %f5.host, i64 %7121
  %7123 = load float, ptr %7122, align 4, !tbaa !46
  %7124 = insertelement <4 x float> %7120, float %7123, i64 3
  %7125 = fmul <4 x float> %7124, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7126 = fadd <4 x float> %7106, %7125
  %7127 = fmul <4 x float> %7126, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7128 = add nsw <4 x i32> %t2703, %7019
  %7129 = sext <4 x i32> %7128 to <4 x i64>
  %7130 = extractelement <4 x i64> %7129, i64 0
  %7131 = getelementptr inbounds float, ptr %f5.host, i64 %7130
  %7132 = load float, ptr %7131, align 4, !tbaa !46
  %7133 = insertelement <4 x float> undef, float %7132, i64 0
  %7134 = extractelement <4 x i64> %7129, i64 1
  %7135 = getelementptr inbounds float, ptr %f5.host, i64 %7134
  %7136 = load float, ptr %7135, align 4, !tbaa !46
  %7137 = insertelement <4 x float> %7133, float %7136, i64 1
  %7138 = extractelement <4 x i64> %7129, i64 2
  %7139 = getelementptr inbounds float, ptr %f5.host, i64 %7138
  %7140 = load float, ptr %7139, align 4, !tbaa !46
  %7141 = insertelement <4 x float> %7137, float %7140, i64 2
  %7142 = extractelement <4 x i64> %7129, i64 3
  %7143 = getelementptr inbounds float, ptr %f5.host, i64 %7142
  %7144 = load float, ptr %7143, align 4, !tbaa !46
  %7145 = insertelement <4 x float> %7141, float %7144, i64 3
  %7146 = fmul <4 x float> %7145, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7147 = add <4 x i32> %7041, %t2703
  %7148 = sext <4 x i32> %7147 to <4 x i64>
  %7149 = extractelement <4 x i64> %7148, i64 0
  %7150 = getelementptr inbounds float, ptr %f5.host, i64 %7149
  %7151 = load float, ptr %7150, align 4, !tbaa !46
  %7152 = insertelement <4 x float> undef, float %7151, i64 0
  %7153 = extractelement <4 x i64> %7148, i64 1
  %7154 = getelementptr inbounds float, ptr %f5.host, i64 %7153
  %7155 = load float, ptr %7154, align 4, !tbaa !46
  %7156 = insertelement <4 x float> %7152, float %7155, i64 1
  %7157 = extractelement <4 x i64> %7148, i64 2
  %7158 = getelementptr inbounds float, ptr %f5.host, i64 %7157
  %7159 = load float, ptr %7158, align 4, !tbaa !46
  %7160 = insertelement <4 x float> %7156, float %7159, i64 2
  %7161 = extractelement <4 x i64> %7148, i64 3
  %7162 = getelementptr inbounds float, ptr %f5.host, i64 %7161
  %7163 = load float, ptr %7162, align 4, !tbaa !46
  %7164 = insertelement <4 x float> %7160, float %7163, i64 3
  %7165 = fmul <4 x float> %7164, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7166 = fadd <4 x float> %7146, %7165
  %7167 = fmul <4 x float> %7166, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7168 = fadd <4 x float> %7127, %7167
  %7169 = mul nsw <4 x i32> %t2700, %1959
  %7170 = add nsw <4 x i32> %7169, %7067
  %7171 = sext <4 x i32> %7170 to <4 x i64>
  %7172 = extractelement <4 x i64> %7171, i64 0
  %7173 = getelementptr inbounds float, ptr %f4.host, i64 %7172
  %7174 = load float, ptr %7173, align 4, !tbaa !44
  %7175 = insertelement <4 x float> undef, float %7174, i64 0
  %7176 = extractelement <4 x i64> %7171, i64 1
  %7177 = getelementptr inbounds float, ptr %f4.host, i64 %7176
  %7178 = load float, ptr %7177, align 4, !tbaa !44
  %7179 = insertelement <4 x float> %7175, float %7178, i64 1
  %7180 = extractelement <4 x i64> %7171, i64 2
  %7181 = getelementptr inbounds float, ptr %f4.host, i64 %7180
  %7182 = load float, ptr %7181, align 4, !tbaa !44
  %7183 = insertelement <4 x float> %7179, float %7182, i64 2
  %7184 = extractelement <4 x i64> %7171, i64 3
  %7185 = getelementptr inbounds float, ptr %f4.host, i64 %7184
  %7186 = load float, ptr %7185, align 4, !tbaa !44
  %7187 = insertelement <4 x float> %7183, float %7186, i64 3
  %7188 = fsub <4 x float> %7187, %7168
  %7189 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2697
  %7190 = fmul <4 x float> %7189, %7188
  %7191 = fadd <4 x float> %7087, %7190
  %7192 = sext i32 %6709 to i64
  %7193 = sub nsw i64 %7192, %1396
  %7194 = add nsw i64 %7193, %6681
  %7195 = getelementptr inbounds float, ptr %193, i64 %7194
  %7196 = load <4 x float>, ptr %7195, align 4, !tbaa !68
  %7197 = fmul <4 x float> %7196, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7198 = sext i32 %t2694 to i64
  %7199 = sub nsw i64 %7198, %1396
  %7200 = add nsw i64 %6682, %7199
  %7201 = getelementptr inbounds float, ptr %193, i64 %7200
  %7202 = load <4 x float>, ptr %7201, align 4, !tbaa !68
  %7203 = fmul <4 x float> %7202, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7204 = fadd <4 x float> %7197, %7203
  %7205 = fmul <4 x float> %7204, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7206 = add nsw i64 %7193, %6683
  %7207 = getelementptr inbounds float, ptr %193, i64 %7206
  %7208 = load <4 x float>, ptr %7207, align 4, !tbaa !68
  %7209 = fmul <4 x float> %7208, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7210 = add nsw i64 %6684, %7199
  %7211 = getelementptr inbounds float, ptr %193, i64 %7210
  %7212 = load <4 x float>, ptr %7211, align 4, !tbaa !68
  %7213 = fmul <4 x float> %7212, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7214 = fadd <4 x float> %7209, %7213
  %7215 = fmul <4 x float> %7214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7216 = fadd <4 x float> %7205, %7215
  %7217 = fadd <4 x float> %7191, %7216
  %7218 = shufflevector <4 x float> %6970, <4 x float> %7217, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7219 = sext i32 %6689 to i64
  %7220 = add nsw i64 %6688, %7219
  %7221 = getelementptr inbounds float, ptr %222, i64 %7220
  store <8 x float> %7218, ptr %7221, align 4, !tbaa !70
  %lsr.iv.next302 = add i32 %lsr.iv301, -1
  %lsr.iv.next304 = add nuw i32 %lsr.iv303, 8
  %.not118 = icmp eq i32 %lsr.iv.next302, 0
  br i1 %.not118, label %"end for f126.s0.v3.v364", label %"for f126.s0.v3.v363"

"end for f126.s0.v3.v364":                        ; preds = %"for f126.s0.v3.v363", %true_bb60
  br i1 %3264, label %"for f126.s0.v3.v366.preheader", label %"assert succeeded72", !prof !5

"for f126.s0.v3.v366.preheader":                  ; preds = %"end for f126.s0.v3.v364"
  %7222 = trunc i64 %3411 to i32
  %7223 = add i32 %7222, 3
  %7224 = ashr i32 %7223, 1
  %7225 = and i32 %7223, 2
  %7226 = ashr i32 %7223, 2
  %t2709 = add nsw i32 %7226, %7225
  %7227 = sub nsw i32 %7224, %f72.v4.min_realized
  %7228 = mul nsw i32 %7227, %1954
  %t2712 = add nsw i32 %3267, %7228
  %7229 = sext i32 %t2712 to i64
  %7230 = getelementptr inbounds float, ptr %f72.host, i64 %7229
  %7231 = load <4 x float>, ptr %7230, align 4, !tbaa !48
  %7232 = add nsw i64 %7229, 4
  %7233 = getelementptr inbounds float, ptr %f72.host, i64 %7232
  %7234 = load <4 x float>, ptr %7233, align 4, !tbaa !48
  %7235 = shufflevector <4 x float> %7231, <4 x float> %7234, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2713 = fmul <4 x float> %232, %7235
  %a958 = fptosi <4 x float> %t2713 to <4 x i32>
  %a961 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a958)
  %7236 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a961, <4 x i32> zeroinitializer)
  %7237 = sitofp <4 x i32> %7236 to <4 x float>
  %t2715 = fsub <4 x float> %t2713, %7237
  %7238 = add nsw i32 %t2709, %1955
  %t2717 = mul nsw i32 %7238, %178
  %7239 = sub nsw i32 %7226, %f127.v4.min_realized
  %t2719 = mul nsw i32 %7239, %178
  %7240 = sub nsw i32 %7224, %f4.v4.min_realized
  %7241 = mul nsw i32 %7240, %f4.stride.1
  %t2720 = add nsw i32 %7241, %3268
  %t2722 = sub nsw <4 x i32> %7236, %241
  %7242 = add i32 %t2709, %1956
  %7243 = mul nsw i32 %7242, %f5.stride.1
  %t2725 = add nsw i32 %7243, %3269
  %t2726 = mul nsw <4 x i32> %t2722, %1391
  %t2728 = add nsw i32 %7243, %3270
  %7244 = sub nsw i32 %7226, %f5.v4.min_realized
  %7245 = mul nsw i32 %7244, %f5.stride.1
  %t2730 = add nsw i32 %7245, %3269
  %t2731 = add nsw i32 %7245, %3270
  %7246 = add nsw <4 x i32> %t2722, <i32 1, i32 1, i32 1, i32 1>
  %t2732 = mul nsw <4 x i32> %7246, %1391
  %7247 = shufflevector <4 x float> %7231, <4 x float> %7234, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2734 = fmul <4 x float> %232, %7247
  %a962 = fptosi <4 x float> %t2734 to <4 x i32>
  %a965 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a962)
  %7248 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a965, <4 x i32> zeroinitializer)
  %7249 = sitofp <4 x i32> %7248 to <4 x float>
  %t2736 = fsub <4 x float> %t2734, %7249
  %t2739 = sub nsw <4 x i32> %7248, %241
  %t2741 = add nsw i32 %7243, %3274
  %t2742 = mul nsw <4 x i32> %t2739, %1391
  %t2744 = add nsw i32 %7243, %3275
  %t2745 = add nsw i32 %7245, %3274
  %t2746 = add nsw i32 %7245, %3275
  %7250 = add nsw <4 x i32> %t2739, <i32 1, i32 1, i32 1, i32 1>
  %t2747 = mul nsw <4 x i32> %7250, %1391
  %7251 = insertelement <4 x i32> undef, i32 %t2731, i64 0
  %7252 = shufflevector <4 x i32> %7251, <4 x i32> undef, <4 x i32> zeroinitializer
  %7253 = add nsw <4 x i32> %7252, <i32 0, i32 1, i32 2, i32 3>
  %7254 = add nsw <4 x i32> %t2732, %7253
  %7255 = sext <4 x i32> %7254 to <4 x i64>
  %7256 = extractelement <4 x i64> %7255, i64 0
  %7257 = getelementptr inbounds float, ptr %f5.host, i64 %7256
  %7258 = load float, ptr %7257, align 4, !tbaa !46
  %7259 = insertelement <4 x float> undef, float %7258, i64 0
  %7260 = extractelement <4 x i64> %7255, i64 1
  %7261 = getelementptr inbounds float, ptr %f5.host, i64 %7260
  %7262 = load float, ptr %7261, align 4, !tbaa !46
  %7263 = insertelement <4 x float> %7259, float %7262, i64 1
  %7264 = extractelement <4 x i64> %7255, i64 2
  %7265 = getelementptr inbounds float, ptr %f5.host, i64 %7264
  %7266 = load float, ptr %7265, align 4, !tbaa !46
  %7267 = insertelement <4 x float> %7263, float %7266, i64 2
  %7268 = extractelement <4 x i64> %7255, i64 3
  %7269 = getelementptr inbounds float, ptr %f5.host, i64 %7268
  %7270 = load float, ptr %7269, align 4, !tbaa !46
  %7271 = insertelement <4 x float> %7267, float %7270, i64 3
  %7272 = fmul <4 x float> %7271, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7273 = insertelement <4 x i32> undef, i32 %t2730, i64 0
  %7274 = shufflevector <4 x i32> %7273, <4 x i32> undef, <4 x i32> zeroinitializer
  %7275 = add <4 x i32> %7274, <i32 -1, i32 0, i32 1, i32 2>
  %7276 = add <4 x i32> %7275, %t2732
  %7277 = sext <4 x i32> %7276 to <4 x i64>
  %7278 = extractelement <4 x i64> %7277, i64 0
  %7279 = getelementptr inbounds float, ptr %f5.host, i64 %7278
  %7280 = load float, ptr %7279, align 4, !tbaa !46
  %7281 = insertelement <4 x float> undef, float %7280, i64 0
  %7282 = extractelement <4 x i64> %7277, i64 1
  %7283 = getelementptr inbounds float, ptr %f5.host, i64 %7282
  %7284 = load float, ptr %7283, align 4, !tbaa !46
  %7285 = insertelement <4 x float> %7281, float %7284, i64 1
  %7286 = extractelement <4 x i64> %7277, i64 2
  %7287 = getelementptr inbounds float, ptr %f5.host, i64 %7286
  %7288 = load float, ptr %7287, align 4, !tbaa !46
  %7289 = insertelement <4 x float> %7285, float %7288, i64 2
  %7290 = extractelement <4 x i64> %7277, i64 3
  %7291 = getelementptr inbounds float, ptr %f5.host, i64 %7290
  %7292 = load float, ptr %7291, align 4, !tbaa !46
  %7293 = insertelement <4 x float> %7289, float %7292, i64 3
  %7294 = fmul <4 x float> %7293, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7295 = fadd <4 x float> %7272, %7294
  %7296 = fmul <4 x float> %7295, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7297 = insertelement <4 x i32> undef, i32 %t2728, i64 0
  %7298 = shufflevector <4 x i32> %7297, <4 x i32> undef, <4 x i32> zeroinitializer
  %7299 = add nsw <4 x i32> %7298, <i32 0, i32 1, i32 2, i32 3>
  %7300 = add nsw <4 x i32> %t2732, %7299
  %7301 = sext <4 x i32> %7300 to <4 x i64>
  %7302 = extractelement <4 x i64> %7301, i64 0
  %7303 = getelementptr inbounds float, ptr %f5.host, i64 %7302
  %7304 = load float, ptr %7303, align 4, !tbaa !46
  %7305 = insertelement <4 x float> undef, float %7304, i64 0
  %7306 = extractelement <4 x i64> %7301, i64 1
  %7307 = getelementptr inbounds float, ptr %f5.host, i64 %7306
  %7308 = load float, ptr %7307, align 4, !tbaa !46
  %7309 = insertelement <4 x float> %7305, float %7308, i64 1
  %7310 = extractelement <4 x i64> %7301, i64 2
  %7311 = getelementptr inbounds float, ptr %f5.host, i64 %7310
  %7312 = load float, ptr %7311, align 4, !tbaa !46
  %7313 = insertelement <4 x float> %7309, float %7312, i64 2
  %7314 = extractelement <4 x i64> %7301, i64 3
  %7315 = getelementptr inbounds float, ptr %f5.host, i64 %7314
  %7316 = load float, ptr %7315, align 4, !tbaa !46
  %7317 = insertelement <4 x float> %7313, float %7316, i64 3
  %7318 = fmul <4 x float> %7317, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7319 = insertelement <4 x i32> undef, i32 %t2725, i64 0
  %7320 = shufflevector <4 x i32> %7319, <4 x i32> undef, <4 x i32> zeroinitializer
  %7321 = add <4 x i32> %7320, <i32 -1, i32 0, i32 1, i32 2>
  %7322 = add <4 x i32> %7321, %t2732
  %7323 = sext <4 x i32> %7322 to <4 x i64>
  %7324 = extractelement <4 x i64> %7323, i64 0
  %7325 = getelementptr inbounds float, ptr %f5.host, i64 %7324
  %7326 = load float, ptr %7325, align 4, !tbaa !46
  %7327 = insertelement <4 x float> undef, float %7326, i64 0
  %7328 = extractelement <4 x i64> %7323, i64 1
  %7329 = getelementptr inbounds float, ptr %f5.host, i64 %7328
  %7330 = load float, ptr %7329, align 4, !tbaa !46
  %7331 = insertelement <4 x float> %7327, float %7330, i64 1
  %7332 = extractelement <4 x i64> %7323, i64 2
  %7333 = getelementptr inbounds float, ptr %f5.host, i64 %7332
  %7334 = load float, ptr %7333, align 4, !tbaa !46
  %7335 = insertelement <4 x float> %7331, float %7334, i64 2
  %7336 = extractelement <4 x i64> %7323, i64 3
  %7337 = getelementptr inbounds float, ptr %f5.host, i64 %7336
  %7338 = load float, ptr %7337, align 4, !tbaa !46
  %7339 = insertelement <4 x float> %7335, float %7338, i64 3
  %7340 = fmul <4 x float> %7339, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7341 = fadd <4 x float> %7318, %7340
  %7342 = fmul <4 x float> %7341, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7343 = fadd <4 x float> %7296, %7342
  %7344 = mul nsw <4 x i32> %7246, %1959
  %7345 = insertelement <4 x i32> undef, i32 %t2720, i64 0
  %7346 = shufflevector <4 x i32> %7345, <4 x i32> undef, <4 x i32> zeroinitializer
  %7347 = add nsw <4 x i32> %7346, <i32 0, i32 2, i32 4, i32 6>
  %7348 = add nsw <4 x i32> %7344, %7347
  %7349 = sext <4 x i32> %7348 to <4 x i64>
  %7350 = extractelement <4 x i64> %7349, i64 0
  %7351 = getelementptr inbounds float, ptr %f4.host, i64 %7350
  %7352 = load float, ptr %7351, align 4, !tbaa !44
  %7353 = insertelement <4 x float> undef, float %7352, i64 0
  %7354 = extractelement <4 x i64> %7349, i64 1
  %7355 = getelementptr inbounds float, ptr %f4.host, i64 %7354
  %7356 = load float, ptr %7355, align 4, !tbaa !44
  %7357 = insertelement <4 x float> %7353, float %7356, i64 1
  %7358 = extractelement <4 x i64> %7349, i64 2
  %7359 = getelementptr inbounds float, ptr %f4.host, i64 %7358
  %7360 = load float, ptr %7359, align 4, !tbaa !44
  %7361 = insertelement <4 x float> %7357, float %7360, i64 2
  %7362 = extractelement <4 x i64> %7349, i64 3
  %7363 = getelementptr inbounds float, ptr %f4.host, i64 %7362
  %7364 = load float, ptr %7363, align 4, !tbaa !44
  %7365 = insertelement <4 x float> %7361, float %7364, i64 3
  %7366 = fsub <4 x float> %7365, %7343
  %7367 = fmul <4 x float> %t2715, %7366
  %7368 = add nsw <4 x i32> %t2726, %7253
  %7369 = sext <4 x i32> %7368 to <4 x i64>
  %7370 = extractelement <4 x i64> %7369, i64 0
  %7371 = getelementptr inbounds float, ptr %f5.host, i64 %7370
  %7372 = load float, ptr %7371, align 4, !tbaa !46
  %7373 = insertelement <4 x float> undef, float %7372, i64 0
  %7374 = extractelement <4 x i64> %7369, i64 1
  %7375 = getelementptr inbounds float, ptr %f5.host, i64 %7374
  %7376 = load float, ptr %7375, align 4, !tbaa !46
  %7377 = insertelement <4 x float> %7373, float %7376, i64 1
  %7378 = extractelement <4 x i64> %7369, i64 2
  %7379 = getelementptr inbounds float, ptr %f5.host, i64 %7378
  %7380 = load float, ptr %7379, align 4, !tbaa !46
  %7381 = insertelement <4 x float> %7377, float %7380, i64 2
  %7382 = extractelement <4 x i64> %7369, i64 3
  %7383 = getelementptr inbounds float, ptr %f5.host, i64 %7382
  %7384 = load float, ptr %7383, align 4, !tbaa !46
  %7385 = insertelement <4 x float> %7381, float %7384, i64 3
  %7386 = fmul <4 x float> %7385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7387 = add <4 x i32> %7275, %t2726
  %7388 = sext <4 x i32> %7387 to <4 x i64>
  %7389 = extractelement <4 x i64> %7388, i64 0
  %7390 = getelementptr inbounds float, ptr %f5.host, i64 %7389
  %7391 = load float, ptr %7390, align 4, !tbaa !46
  %7392 = insertelement <4 x float> undef, float %7391, i64 0
  %7393 = extractelement <4 x i64> %7388, i64 1
  %7394 = getelementptr inbounds float, ptr %f5.host, i64 %7393
  %7395 = load float, ptr %7394, align 4, !tbaa !46
  %7396 = insertelement <4 x float> %7392, float %7395, i64 1
  %7397 = extractelement <4 x i64> %7388, i64 2
  %7398 = getelementptr inbounds float, ptr %f5.host, i64 %7397
  %7399 = load float, ptr %7398, align 4, !tbaa !46
  %7400 = insertelement <4 x float> %7396, float %7399, i64 2
  %7401 = extractelement <4 x i64> %7388, i64 3
  %7402 = getelementptr inbounds float, ptr %f5.host, i64 %7401
  %7403 = load float, ptr %7402, align 4, !tbaa !46
  %7404 = insertelement <4 x float> %7400, float %7403, i64 3
  %7405 = fmul <4 x float> %7404, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7406 = fadd <4 x float> %7386, %7405
  %7407 = fmul <4 x float> %7406, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7408 = add nsw <4 x i32> %t2726, %7299
  %7409 = sext <4 x i32> %7408 to <4 x i64>
  %7410 = extractelement <4 x i64> %7409, i64 0
  %7411 = getelementptr inbounds float, ptr %f5.host, i64 %7410
  %7412 = load float, ptr %7411, align 4, !tbaa !46
  %7413 = insertelement <4 x float> undef, float %7412, i64 0
  %7414 = extractelement <4 x i64> %7409, i64 1
  %7415 = getelementptr inbounds float, ptr %f5.host, i64 %7414
  %7416 = load float, ptr %7415, align 4, !tbaa !46
  %7417 = insertelement <4 x float> %7413, float %7416, i64 1
  %7418 = extractelement <4 x i64> %7409, i64 2
  %7419 = getelementptr inbounds float, ptr %f5.host, i64 %7418
  %7420 = load float, ptr %7419, align 4, !tbaa !46
  %7421 = insertelement <4 x float> %7417, float %7420, i64 2
  %7422 = extractelement <4 x i64> %7409, i64 3
  %7423 = getelementptr inbounds float, ptr %f5.host, i64 %7422
  %7424 = load float, ptr %7423, align 4, !tbaa !46
  %7425 = insertelement <4 x float> %7421, float %7424, i64 3
  %7426 = fmul <4 x float> %7425, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7427 = add <4 x i32> %7321, %t2726
  %7428 = sext <4 x i32> %7427 to <4 x i64>
  %7429 = extractelement <4 x i64> %7428, i64 0
  %7430 = getelementptr inbounds float, ptr %f5.host, i64 %7429
  %7431 = load float, ptr %7430, align 4, !tbaa !46
  %7432 = insertelement <4 x float> undef, float %7431, i64 0
  %7433 = extractelement <4 x i64> %7428, i64 1
  %7434 = getelementptr inbounds float, ptr %f5.host, i64 %7433
  %7435 = load float, ptr %7434, align 4, !tbaa !46
  %7436 = insertelement <4 x float> %7432, float %7435, i64 1
  %7437 = extractelement <4 x i64> %7428, i64 2
  %7438 = getelementptr inbounds float, ptr %f5.host, i64 %7437
  %7439 = load float, ptr %7438, align 4, !tbaa !46
  %7440 = insertelement <4 x float> %7436, float %7439, i64 2
  %7441 = extractelement <4 x i64> %7428, i64 3
  %7442 = getelementptr inbounds float, ptr %f5.host, i64 %7441
  %7443 = load float, ptr %7442, align 4, !tbaa !46
  %7444 = insertelement <4 x float> %7440, float %7443, i64 3
  %7445 = fmul <4 x float> %7444, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7446 = fadd <4 x float> %7426, %7445
  %7447 = fmul <4 x float> %7446, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7448 = fadd <4 x float> %7407, %7447
  %7449 = mul nsw <4 x i32> %t2722, %1959
  %7450 = add nsw <4 x i32> %7449, %7347
  %7451 = sext <4 x i32> %7450 to <4 x i64>
  %7452 = extractelement <4 x i64> %7451, i64 0
  %7453 = getelementptr inbounds float, ptr %f4.host, i64 %7452
  %7454 = load float, ptr %7453, align 4, !tbaa !44
  %7455 = insertelement <4 x float> undef, float %7454, i64 0
  %7456 = extractelement <4 x i64> %7451, i64 1
  %7457 = getelementptr inbounds float, ptr %f4.host, i64 %7456
  %7458 = load float, ptr %7457, align 4, !tbaa !44
  %7459 = insertelement <4 x float> %7455, float %7458, i64 1
  %7460 = extractelement <4 x i64> %7451, i64 2
  %7461 = getelementptr inbounds float, ptr %f4.host, i64 %7460
  %7462 = load float, ptr %7461, align 4, !tbaa !44
  %7463 = insertelement <4 x float> %7459, float %7462, i64 2
  %7464 = extractelement <4 x i64> %7451, i64 3
  %7465 = getelementptr inbounds float, ptr %f4.host, i64 %7464
  %7466 = load float, ptr %7465, align 4, !tbaa !44
  %7467 = insertelement <4 x float> %7463, float %7466, i64 3
  %7468 = fsub <4 x float> %7467, %7448
  %7469 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2715
  %7470 = fmul <4 x float> %7469, %7468
  %7471 = fadd <4 x float> %7367, %7470
  %7472 = sext i32 %t2719 to i64
  %7473 = add nsw i64 %3277, %7472
  %7474 = getelementptr inbounds float, ptr %193, i64 %7473
  %7475 = load <4 x float>, ptr %7474, align 4, !tbaa !68
  %7476 = fmul <4 x float> %7475, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7477 = add nsw i64 %3280, %7472
  %7478 = getelementptr inbounds float, ptr %193, i64 %7477
  %7479 = load <4 x float>, ptr %7478, align 4, !tbaa !68
  %7480 = fmul <4 x float> %7479, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7481 = fadd <4 x float> %7476, %7480
  %7482 = fmul <4 x float> %7481, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7483 = sext i32 %t2717 to i64
  %7484 = add nsw i64 %3277, %7483
  %7485 = getelementptr inbounds float, ptr %193, i64 %7484
  %7486 = load <4 x float>, ptr %7485, align 4, !tbaa !68
  %7487 = fmul <4 x float> %7486, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7488 = add nsw i64 %3280, %7483
  %7489 = getelementptr inbounds float, ptr %193, i64 %7488
  %7490 = load <4 x float>, ptr %7489, align 4, !tbaa !68
  %7491 = fmul <4 x float> %7490, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7492 = fadd <4 x float> %7487, %7491
  %7493 = fmul <4 x float> %7492, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7494 = fadd <4 x float> %7482, %7493
  %7495 = fadd <4 x float> %7471, %7494
  %7496 = insertelement <4 x i32> undef, i32 %t2746, i64 0
  %7497 = shufflevector <4 x i32> %7496, <4 x i32> undef, <4 x i32> zeroinitializer
  %7498 = add nsw <4 x i32> %7497, <i32 0, i32 1, i32 2, i32 3>
  %7499 = add nsw <4 x i32> %t2747, %7498
  %7500 = sext <4 x i32> %7499 to <4 x i64>
  %7501 = extractelement <4 x i64> %7500, i64 0
  %7502 = getelementptr inbounds float, ptr %f5.host, i64 %7501
  %7503 = load float, ptr %7502, align 4, !tbaa !46
  %7504 = insertelement <4 x float> undef, float %7503, i64 0
  %7505 = extractelement <4 x i64> %7500, i64 1
  %7506 = getelementptr inbounds float, ptr %f5.host, i64 %7505
  %7507 = load float, ptr %7506, align 4, !tbaa !46
  %7508 = insertelement <4 x float> %7504, float %7507, i64 1
  %7509 = extractelement <4 x i64> %7500, i64 2
  %7510 = getelementptr inbounds float, ptr %f5.host, i64 %7509
  %7511 = load float, ptr %7510, align 4, !tbaa !46
  %7512 = insertelement <4 x float> %7508, float %7511, i64 2
  %7513 = extractelement <4 x i64> %7500, i64 3
  %7514 = getelementptr inbounds float, ptr %f5.host, i64 %7513
  %7515 = load float, ptr %7514, align 4, !tbaa !46
  %7516 = insertelement <4 x float> %7512, float %7515, i64 3
  %7517 = fmul <4 x float> %7516, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7518 = insertelement <4 x i32> undef, i32 %t2745, i64 0
  %7519 = shufflevector <4 x i32> %7518, <4 x i32> undef, <4 x i32> zeroinitializer
  %7520 = add <4 x i32> %7519, <i32 -1, i32 0, i32 1, i32 2>
  %7521 = add <4 x i32> %7520, %t2747
  %7522 = sext <4 x i32> %7521 to <4 x i64>
  %7523 = extractelement <4 x i64> %7522, i64 0
  %7524 = getelementptr inbounds float, ptr %f5.host, i64 %7523
  %7525 = load float, ptr %7524, align 4, !tbaa !46
  %7526 = insertelement <4 x float> undef, float %7525, i64 0
  %7527 = extractelement <4 x i64> %7522, i64 1
  %7528 = getelementptr inbounds float, ptr %f5.host, i64 %7527
  %7529 = load float, ptr %7528, align 4, !tbaa !46
  %7530 = insertelement <4 x float> %7526, float %7529, i64 1
  %7531 = extractelement <4 x i64> %7522, i64 2
  %7532 = getelementptr inbounds float, ptr %f5.host, i64 %7531
  %7533 = load float, ptr %7532, align 4, !tbaa !46
  %7534 = insertelement <4 x float> %7530, float %7533, i64 2
  %7535 = extractelement <4 x i64> %7522, i64 3
  %7536 = getelementptr inbounds float, ptr %f5.host, i64 %7535
  %7537 = load float, ptr %7536, align 4, !tbaa !46
  %7538 = insertelement <4 x float> %7534, float %7537, i64 3
  %7539 = fmul <4 x float> %7538, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7540 = fadd <4 x float> %7517, %7539
  %7541 = fmul <4 x float> %7540, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7542 = insertelement <4 x i32> undef, i32 %t2744, i64 0
  %7543 = shufflevector <4 x i32> %7542, <4 x i32> undef, <4 x i32> zeroinitializer
  %7544 = add nsw <4 x i32> %7543, <i32 0, i32 1, i32 2, i32 3>
  %7545 = add nsw <4 x i32> %t2747, %7544
  %7546 = sext <4 x i32> %7545 to <4 x i64>
  %7547 = extractelement <4 x i64> %7546, i64 0
  %7548 = getelementptr inbounds float, ptr %f5.host, i64 %7547
  %7549 = load float, ptr %7548, align 4, !tbaa !46
  %7550 = insertelement <4 x float> undef, float %7549, i64 0
  %7551 = extractelement <4 x i64> %7546, i64 1
  %7552 = getelementptr inbounds float, ptr %f5.host, i64 %7551
  %7553 = load float, ptr %7552, align 4, !tbaa !46
  %7554 = insertelement <4 x float> %7550, float %7553, i64 1
  %7555 = extractelement <4 x i64> %7546, i64 2
  %7556 = getelementptr inbounds float, ptr %f5.host, i64 %7555
  %7557 = load float, ptr %7556, align 4, !tbaa !46
  %7558 = insertelement <4 x float> %7554, float %7557, i64 2
  %7559 = extractelement <4 x i64> %7546, i64 3
  %7560 = getelementptr inbounds float, ptr %f5.host, i64 %7559
  %7561 = load float, ptr %7560, align 4, !tbaa !46
  %7562 = insertelement <4 x float> %7558, float %7561, i64 3
  %7563 = fmul <4 x float> %7562, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7564 = insertelement <4 x i32> undef, i32 %t2741, i64 0
  %7565 = shufflevector <4 x i32> %7564, <4 x i32> undef, <4 x i32> zeroinitializer
  %7566 = add <4 x i32> %7565, <i32 -1, i32 0, i32 1, i32 2>
  %7567 = add <4 x i32> %7566, %t2747
  %7568 = sext <4 x i32> %7567 to <4 x i64>
  %7569 = extractelement <4 x i64> %7568, i64 0
  %7570 = getelementptr inbounds float, ptr %f5.host, i64 %7569
  %7571 = load float, ptr %7570, align 4, !tbaa !46
  %7572 = insertelement <4 x float> undef, float %7571, i64 0
  %7573 = extractelement <4 x i64> %7568, i64 1
  %7574 = getelementptr inbounds float, ptr %f5.host, i64 %7573
  %7575 = load float, ptr %7574, align 4, !tbaa !46
  %7576 = insertelement <4 x float> %7572, float %7575, i64 1
  %7577 = extractelement <4 x i64> %7568, i64 2
  %7578 = getelementptr inbounds float, ptr %f5.host, i64 %7577
  %7579 = load float, ptr %7578, align 4, !tbaa !46
  %7580 = insertelement <4 x float> %7576, float %7579, i64 2
  %7581 = extractelement <4 x i64> %7568, i64 3
  %7582 = getelementptr inbounds float, ptr %f5.host, i64 %7581
  %7583 = load float, ptr %7582, align 4, !tbaa !46
  %7584 = insertelement <4 x float> %7580, float %7583, i64 3
  %7585 = fmul <4 x float> %7584, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7586 = fadd <4 x float> %7563, %7585
  %7587 = fmul <4 x float> %7586, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7588 = fadd <4 x float> %7541, %7587
  %7589 = mul nsw <4 x i32> %7250, %1959
  %7590 = add nsw i32 %t2720, 1
  %7591 = insertelement <4 x i32> undef, i32 %7590, i64 0
  %7592 = shufflevector <4 x i32> %7591, <4 x i32> undef, <4 x i32> zeroinitializer
  %7593 = add nsw <4 x i32> %7592, <i32 0, i32 2, i32 4, i32 6>
  %7594 = add nsw <4 x i32> %7589, %7593
  %7595 = sext <4 x i32> %7594 to <4 x i64>
  %7596 = extractelement <4 x i64> %7595, i64 0
  %7597 = getelementptr inbounds float, ptr %f4.host, i64 %7596
  %7598 = load float, ptr %7597, align 4, !tbaa !44
  %7599 = insertelement <4 x float> undef, float %7598, i64 0
  %7600 = extractelement <4 x i64> %7595, i64 1
  %7601 = getelementptr inbounds float, ptr %f4.host, i64 %7600
  %7602 = load float, ptr %7601, align 4, !tbaa !44
  %7603 = insertelement <4 x float> %7599, float %7602, i64 1
  %7604 = extractelement <4 x i64> %7595, i64 2
  %7605 = getelementptr inbounds float, ptr %f4.host, i64 %7604
  %7606 = load float, ptr %7605, align 4, !tbaa !44
  %7607 = insertelement <4 x float> %7603, float %7606, i64 2
  %7608 = extractelement <4 x i64> %7595, i64 3
  %7609 = getelementptr inbounds float, ptr %f4.host, i64 %7608
  %7610 = load float, ptr %7609, align 4, !tbaa !44
  %7611 = insertelement <4 x float> %7607, float %7610, i64 3
  %7612 = fsub <4 x float> %7611, %7588
  %7613 = fmul <4 x float> %t2736, %7612
  %7614 = add nsw <4 x i32> %t2742, %7498
  %7615 = sext <4 x i32> %7614 to <4 x i64>
  %7616 = extractelement <4 x i64> %7615, i64 0
  %7617 = getelementptr inbounds float, ptr %f5.host, i64 %7616
  %7618 = load float, ptr %7617, align 4, !tbaa !46
  %7619 = insertelement <4 x float> undef, float %7618, i64 0
  %7620 = extractelement <4 x i64> %7615, i64 1
  %7621 = getelementptr inbounds float, ptr %f5.host, i64 %7620
  %7622 = load float, ptr %7621, align 4, !tbaa !46
  %7623 = insertelement <4 x float> %7619, float %7622, i64 1
  %7624 = extractelement <4 x i64> %7615, i64 2
  %7625 = getelementptr inbounds float, ptr %f5.host, i64 %7624
  %7626 = load float, ptr %7625, align 4, !tbaa !46
  %7627 = insertelement <4 x float> %7623, float %7626, i64 2
  %7628 = extractelement <4 x i64> %7615, i64 3
  %7629 = getelementptr inbounds float, ptr %f5.host, i64 %7628
  %7630 = load float, ptr %7629, align 4, !tbaa !46
  %7631 = insertelement <4 x float> %7627, float %7630, i64 3
  %7632 = fmul <4 x float> %7631, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7633 = add <4 x i32> %7520, %t2742
  %7634 = sext <4 x i32> %7633 to <4 x i64>
  %7635 = extractelement <4 x i64> %7634, i64 0
  %7636 = getelementptr inbounds float, ptr %f5.host, i64 %7635
  %7637 = load float, ptr %7636, align 4, !tbaa !46
  %7638 = insertelement <4 x float> undef, float %7637, i64 0
  %7639 = extractelement <4 x i64> %7634, i64 1
  %7640 = getelementptr inbounds float, ptr %f5.host, i64 %7639
  %7641 = load float, ptr %7640, align 4, !tbaa !46
  %7642 = insertelement <4 x float> %7638, float %7641, i64 1
  %7643 = extractelement <4 x i64> %7634, i64 2
  %7644 = getelementptr inbounds float, ptr %f5.host, i64 %7643
  %7645 = load float, ptr %7644, align 4, !tbaa !46
  %7646 = insertelement <4 x float> %7642, float %7645, i64 2
  %7647 = extractelement <4 x i64> %7634, i64 3
  %7648 = getelementptr inbounds float, ptr %f5.host, i64 %7647
  %7649 = load float, ptr %7648, align 4, !tbaa !46
  %7650 = insertelement <4 x float> %7646, float %7649, i64 3
  %7651 = fmul <4 x float> %7650, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7652 = fadd <4 x float> %7632, %7651
  %7653 = fmul <4 x float> %7652, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7654 = add nsw <4 x i32> %t2742, %7544
  %7655 = sext <4 x i32> %7654 to <4 x i64>
  %7656 = extractelement <4 x i64> %7655, i64 0
  %7657 = getelementptr inbounds float, ptr %f5.host, i64 %7656
  %7658 = load float, ptr %7657, align 4, !tbaa !46
  %7659 = insertelement <4 x float> undef, float %7658, i64 0
  %7660 = extractelement <4 x i64> %7655, i64 1
  %7661 = getelementptr inbounds float, ptr %f5.host, i64 %7660
  %7662 = load float, ptr %7661, align 4, !tbaa !46
  %7663 = insertelement <4 x float> %7659, float %7662, i64 1
  %7664 = extractelement <4 x i64> %7655, i64 2
  %7665 = getelementptr inbounds float, ptr %f5.host, i64 %7664
  %7666 = load float, ptr %7665, align 4, !tbaa !46
  %7667 = insertelement <4 x float> %7663, float %7666, i64 2
  %7668 = extractelement <4 x i64> %7655, i64 3
  %7669 = getelementptr inbounds float, ptr %f5.host, i64 %7668
  %7670 = load float, ptr %7669, align 4, !tbaa !46
  %7671 = insertelement <4 x float> %7667, float %7670, i64 3
  %7672 = fmul <4 x float> %7671, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7673 = add <4 x i32> %7566, %t2742
  %7674 = sext <4 x i32> %7673 to <4 x i64>
  %7675 = extractelement <4 x i64> %7674, i64 0
  %7676 = getelementptr inbounds float, ptr %f5.host, i64 %7675
  %7677 = load float, ptr %7676, align 4, !tbaa !46
  %7678 = insertelement <4 x float> undef, float %7677, i64 0
  %7679 = extractelement <4 x i64> %7674, i64 1
  %7680 = getelementptr inbounds float, ptr %f5.host, i64 %7679
  %7681 = load float, ptr %7680, align 4, !tbaa !46
  %7682 = insertelement <4 x float> %7678, float %7681, i64 1
  %7683 = extractelement <4 x i64> %7674, i64 2
  %7684 = getelementptr inbounds float, ptr %f5.host, i64 %7683
  %7685 = load float, ptr %7684, align 4, !tbaa !46
  %7686 = insertelement <4 x float> %7682, float %7685, i64 2
  %7687 = extractelement <4 x i64> %7674, i64 3
  %7688 = getelementptr inbounds float, ptr %f5.host, i64 %7687
  %7689 = load float, ptr %7688, align 4, !tbaa !46
  %7690 = insertelement <4 x float> %7686, float %7689, i64 3
  %7691 = fmul <4 x float> %7690, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7692 = fadd <4 x float> %7672, %7691
  %7693 = fmul <4 x float> %7692, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7694 = fadd <4 x float> %7653, %7693
  %7695 = mul nsw <4 x i32> %t2739, %1959
  %7696 = add nsw <4 x i32> %7695, %7593
  %7697 = sext <4 x i32> %7696 to <4 x i64>
  %7698 = extractelement <4 x i64> %7697, i64 0
  %7699 = getelementptr inbounds float, ptr %f4.host, i64 %7698
  %7700 = load float, ptr %7699, align 4, !tbaa !44
  %7701 = insertelement <4 x float> undef, float %7700, i64 0
  %7702 = extractelement <4 x i64> %7697, i64 1
  %7703 = getelementptr inbounds float, ptr %f4.host, i64 %7702
  %7704 = load float, ptr %7703, align 4, !tbaa !44
  %7705 = insertelement <4 x float> %7701, float %7704, i64 1
  %7706 = extractelement <4 x i64> %7697, i64 2
  %7707 = getelementptr inbounds float, ptr %f4.host, i64 %7706
  %7708 = load float, ptr %7707, align 4, !tbaa !44
  %7709 = insertelement <4 x float> %7705, float %7708, i64 2
  %7710 = extractelement <4 x i64> %7697, i64 3
  %7711 = getelementptr inbounds float, ptr %f4.host, i64 %7710
  %7712 = load float, ptr %7711, align 4, !tbaa !44
  %7713 = insertelement <4 x float> %7709, float %7712, i64 3
  %7714 = fsub <4 x float> %7713, %7694
  %7715 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2736
  %7716 = fmul <4 x float> %7715, %7714
  %7717 = fadd <4 x float> %7613, %7716
  %7718 = add nsw i64 %3282, %7472
  %7719 = getelementptr inbounds float, ptr %193, i64 %7718
  %7720 = load <4 x float>, ptr %7719, align 4, !tbaa !68
  %7721 = fmul <4 x float> %7720, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7722 = add nsw i64 %3285, %7472
  %7723 = getelementptr inbounds float, ptr %193, i64 %7722
  %7724 = load <4 x float>, ptr %7723, align 4, !tbaa !68
  %7725 = fmul <4 x float> %7724, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7726 = fadd <4 x float> %7721, %7725
  %7727 = fmul <4 x float> %7726, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7728 = add nsw i64 %3282, %7483
  %7729 = getelementptr inbounds float, ptr %193, i64 %7728
  %7730 = load <4 x float>, ptr %7729, align 4, !tbaa !68
  %7731 = fmul <4 x float> %7730, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7732 = add nsw i64 %3285, %7483
  %7733 = getelementptr inbounds float, ptr %193, i64 %7732
  %7734 = load <4 x float>, ptr %7733, align 4, !tbaa !68
  %7735 = fmul <4 x float> %7734, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7736 = fadd <4 x float> %7731, %7735
  %7737 = fmul <4 x float> %7736, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7738 = fadd <4 x float> %7727, %7737
  %7739 = fadd <4 x float> %7717, %7738
  %7740 = shufflevector <4 x float> %7495, <4 x float> %7739, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %7741 = sext i32 %7224 to i64
  %7742 = sub nsw i64 %7741, %1962
  %7743 = mul nsw i64 %7742, %1961
  %7744 = add nsw i64 %3287, %7743
  %7745 = getelementptr inbounds float, ptr %222, i64 %7744
  store <8 x float> %7740, ptr %7745, align 4, !tbaa !70
  br label %"assert succeeded72"

"assert succeeded72":                             ; preds = %"for f126.s0.v3.v366.preheader", %"produce f12658", %"end for f126.s0.v3.v364"
  %7746 = tail call ptr @halide_malloc(ptr %__user_context, i64 %2525)
  %.not105 = icmp eq ptr %7746, null
  br i1 %.not105, label %"assert failed73", label %"produce f12576", !prof !4

"assert failed73":                                ; preds = %"assert succeeded72"
  %7747 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"produce f12576":                                 ; preds = %"assert succeeded72"
  br i1 %3290, label %"for f125.s0.v3.v377.preheader", label %"end for f125.s0.v3.v378", !prof !5

"for f125.s0.v3.v377.preheader":                  ; preds = %"produce f12576"
  %scevgep = getelementptr i8, ptr %7746, i64 %3134
  %scevgep309 = getelementptr i8, ptr %scevgep, i64 %3291
  %7748 = add i32 %3410, %3136
  %7749 = shl nuw nsw i32 %6663, 1
  %7750 = ashr i32 %6662, 1
  %t2749 = add nsw i32 %7750, %3295
  %7751 = add i32 %t2749, %7749
  %t2763 = mul nsw i32 %7751, %207
  %7752 = sub nsw i32 %7750, %158
  %t2765 = mul nsw i32 %7752, %207
  %7753 = add i32 %7748, %7750
  %7754 = mul i32 %7753, %f4.stride.1
  %7755 = sub nsw i32 %7750, %f4.v4.min_realized
  %7756 = mul nsw i32 %7755, %f4.stride.1
  %7757 = sext i32 %t2765 to i64
  %7758 = add nsw i64 %7757, -1
  %7759 = sext i32 %t2763 to i64
  %7760 = add nsw i64 %7759, -1
  br label %"for f125.s0.v3.v377"

"for f125.s0.v3.v377":                            ; preds = %"for f125.s0.v3.v377", %"for f125.s0.v3.v377.preheader"
  %lsr.iv331 = phi i32 [ %lsr.iv329, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next332, %"for f125.s0.v3.v377" ]
  %lsr.iv311 = phi i64 [ 0, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next312, %"for f125.s0.v3.v377" ]
  %lsr.iv307 = phi i32 [ %a970, %"for f125.s0.v3.v377.preheader" ], [ %lsr.iv.next308, %"for f125.s0.v3.v377" ]
  %7761 = sext i32 %lsr.iv331 to i64
  %7762 = getelementptr inbounds float, ptr %f2.host, i64 %7761
  %7763 = load <4 x float>, ptr %7762, align 4, !tbaa !42
  %7764 = add nsw i64 %7761, 4
  %7765 = getelementptr inbounds float, ptr %f2.host, i64 %7764
  %7766 = load <4 x float>, ptr %7765, align 4, !tbaa !42
  %t2754 = shufflevector <4 x float> %7763, <4 x float> %7766, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2755 = shufflevector <4 x float> %7763, <4 x float> %7766, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2756 = fmul <4 x float> %232, %t2754
  %t2757 = fmul <4 x float> %232, %t2755
  %a971 = fptosi <4 x float> %t2757 to <4 x i32>
  %a978 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a971)
  %7767 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a978, <4 x i32> zeroinitializer)
  %t2759 = sitofp <4 x i32> %7767 to <4 x float>
  %t2760 = fmul <4 x float> %3294, %t2759
  %7768 = add nuw nsw <4 x i32> %7767, <i32 1, i32 1, i32 1, i32 1>
  %7769 = sitofp <4 x i32> %7768 to <4 x float>
  %t2761 = fmul <4 x float> %3294, %7769
  %7770 = fmul <4 x float> %t2757, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a976 = fptosi <4 x float> %7770 to <4 x i32>
  %a975 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a976)
  %7771 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a975, <4 x i32> zeroinitializer)
  %7772 = shl <4 x i32> %7767, <i32 8, i32 8, i32 8, i32 8>
  %.neg247 = sub <4 x i32> %.neg245, %7772
  %t2766 = add <4 x i32> %.neg247, %7771
  %t2771 = sub nsw <4 x i32> %7767, %241
  %t2772 = mul nsw <4 x i32> %t2771, %1959
  %7773 = add nsw <4 x i32> %t2771, <i32 1, i32 1, i32 1, i32 1>
  %t2778 = mul nsw <4 x i32> %7773, %1959
  %a979 = fptosi <4 x float> %t2756 to <4 x i32>
  %a986 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a979)
  %7774 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a986, <4 x i32> zeroinitializer)
  %t2782 = sitofp <4 x i32> %7774 to <4 x float>
  %t2783 = fmul <4 x float> %3294, %t2782
  %7775 = add nuw nsw <4 x i32> %7774, <i32 1, i32 1, i32 1, i32 1>
  %7776 = sitofp <4 x i32> %7775 to <4 x float>
  %t2784 = fmul <4 x float> %3294, %7776
  %7777 = fmul <4 x float> %t2756, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a984 = fptosi <4 x float> %7777 to <4 x i32>
  %a983 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a984)
  %7778 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a983, <4 x i32> zeroinitializer)
  %7779 = shl <4 x i32> %7774, <i32 8, i32 8, i32 8, i32 8>
  %.neg249 = sub <4 x i32> %.neg245, %7779
  %t2787 = add <4 x i32> %.neg249, %7778
  %t2790 = sub nsw <4 x i32> %7774, %241
  %t2791 = mul nsw <4 x i32> %t2790, %1959
  %7780 = add nsw <4 x i32> %t2790, <i32 1, i32 1, i32 1, i32 1>
  %t2796 = mul nsw <4 x i32> %7780, %1959
  %7781 = trunc i64 %lsr.iv311 to i32
  %7782 = sub i32 %7781, %f4.v3.min_realized
  %7783 = add i32 %7756, %7782
  %tmp336 = add i32 %7783, %161
  %7784 = insertelement <4 x i32> undef, i32 %tmp336, i64 0
  %7785 = shufflevector <4 x i32> %7784, <4 x i32> undef, <4 x i32> zeroinitializer
  %7786 = add nsw <4 x i32> %7785, <i32 0, i32 1, i32 2, i32 3>
  %7787 = add nsw <4 x i32> %t2778, %7786
  %7788 = sext <4 x i32> %7787 to <4 x i64>
  %7789 = extractelement <4 x i64> %7788, i64 0
  %7790 = getelementptr inbounds float, ptr %f4.host, i64 %7789
  %7791 = load float, ptr %7790, align 4, !tbaa !44
  %7792 = insertelement <4 x float> undef, float %7791, i64 0
  %7793 = extractelement <4 x i64> %7788, i64 1
  %7794 = getelementptr inbounds float, ptr %f4.host, i64 %7793
  %7795 = load float, ptr %7794, align 4, !tbaa !44
  %7796 = insertelement <4 x float> %7792, float %7795, i64 1
  %7797 = extractelement <4 x i64> %7788, i64 2
  %7798 = getelementptr inbounds float, ptr %f4.host, i64 %7797
  %7799 = load float, ptr %7798, align 4, !tbaa !44
  %7800 = insertelement <4 x float> %7796, float %7799, i64 2
  %7801 = extractelement <4 x i64> %7788, i64 3
  %7802 = getelementptr inbounds float, ptr %f4.host, i64 %7801
  %7803 = load float, ptr %7802, align 4, !tbaa !44
  %7804 = insertelement <4 x float> %7800, float %7803, i64 3
  %7805 = fmul <4 x float> %7804, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7806 = trunc i64 %lsr.iv311 to i32
  %7807 = sub i32 %7806, %f4.v3.min_realized
  %7808 = add i32 %7807, %3148
  %7809 = add i32 %7808, %161
  %tmp342 = add i32 %7809, %7756
  %7810 = insertelement <4 x i32> undef, i32 %tmp342, i64 0
  %7811 = shufflevector <4 x i32> %7810, <4 x i32> undef, <4 x i32> zeroinitializer
  %7812 = add <4 x i32> %7811, <i32 -1, i32 0, i32 1, i32 2>
  %7813 = add <4 x i32> %7812, %t2778
  %7814 = sext <4 x i32> %7813 to <4 x i64>
  %7815 = extractelement <4 x i64> %7814, i64 0
  %7816 = getelementptr inbounds float, ptr %f4.host, i64 %7815
  %7817 = load float, ptr %7816, align 4, !tbaa !44
  %7818 = insertelement <4 x float> undef, float %7817, i64 0
  %7819 = extractelement <4 x i64> %7814, i64 1
  %7820 = getelementptr inbounds float, ptr %f4.host, i64 %7819
  %7821 = load float, ptr %7820, align 4, !tbaa !44
  %7822 = insertelement <4 x float> %7818, float %7821, i64 1
  %7823 = extractelement <4 x i64> %7814, i64 2
  %7824 = getelementptr inbounds float, ptr %f4.host, i64 %7823
  %7825 = load float, ptr %7824, align 4, !tbaa !44
  %7826 = insertelement <4 x float> %7822, float %7825, i64 2
  %7827 = extractelement <4 x i64> %7814, i64 3
  %7828 = getelementptr inbounds float, ptr %f4.host, i64 %7827
  %7829 = load float, ptr %7828, align 4, !tbaa !44
  %7830 = insertelement <4 x float> %7826, float %7829, i64 3
  %7831 = fmul <4 x float> %7830, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7832 = fadd <4 x float> %7805, %7831
  %7833 = fmul <4 x float> %7832, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7834 = add i32 %7754, %7782
  %tmp338 = add i32 %7834, %161
  %7835 = insertelement <4 x i32> undef, i32 %tmp338, i64 0
  %7836 = shufflevector <4 x i32> %7835, <4 x i32> undef, <4 x i32> zeroinitializer
  %7837 = add nsw <4 x i32> %7836, <i32 0, i32 1, i32 2, i32 3>
  %7838 = add nsw <4 x i32> %t2778, %7837
  %7839 = sext <4 x i32> %7838 to <4 x i64>
  %7840 = extractelement <4 x i64> %7839, i64 0
  %7841 = getelementptr inbounds float, ptr %f4.host, i64 %7840
  %7842 = load float, ptr %7841, align 4, !tbaa !44
  %7843 = insertelement <4 x float> undef, float %7842, i64 0
  %7844 = extractelement <4 x i64> %7839, i64 1
  %7845 = getelementptr inbounds float, ptr %f4.host, i64 %7844
  %7846 = load float, ptr %7845, align 4, !tbaa !44
  %7847 = insertelement <4 x float> %7843, float %7846, i64 1
  %7848 = extractelement <4 x i64> %7839, i64 2
  %7849 = getelementptr inbounds float, ptr %f4.host, i64 %7848
  %7850 = load float, ptr %7849, align 4, !tbaa !44
  %7851 = insertelement <4 x float> %7847, float %7850, i64 2
  %7852 = extractelement <4 x i64> %7839, i64 3
  %7853 = getelementptr inbounds float, ptr %f4.host, i64 %7852
  %7854 = load float, ptr %7853, align 4, !tbaa !44
  %7855 = insertelement <4 x float> %7851, float %7854, i64 3
  %7856 = fmul <4 x float> %7855, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp344 = add i32 %7809, %7754
  %7857 = insertelement <4 x i32> undef, i32 %tmp344, i64 0
  %7858 = shufflevector <4 x i32> %7857, <4 x i32> undef, <4 x i32> zeroinitializer
  %7859 = add <4 x i32> %7858, <i32 -1, i32 0, i32 1, i32 2>
  %7860 = add <4 x i32> %7859, %t2778
  %7861 = sext <4 x i32> %7860 to <4 x i64>
  %7862 = extractelement <4 x i64> %7861, i64 0
  %7863 = getelementptr inbounds float, ptr %f4.host, i64 %7862
  %7864 = load float, ptr %7863, align 4, !tbaa !44
  %7865 = insertelement <4 x float> undef, float %7864, i64 0
  %7866 = extractelement <4 x i64> %7861, i64 1
  %7867 = getelementptr inbounds float, ptr %f4.host, i64 %7866
  %7868 = load float, ptr %7867, align 4, !tbaa !44
  %7869 = insertelement <4 x float> %7865, float %7868, i64 1
  %7870 = extractelement <4 x i64> %7861, i64 2
  %7871 = getelementptr inbounds float, ptr %f4.host, i64 %7870
  %7872 = load float, ptr %7871, align 4, !tbaa !44
  %7873 = insertelement <4 x float> %7869, float %7872, i64 2
  %7874 = extractelement <4 x i64> %7861, i64 3
  %7875 = getelementptr inbounds float, ptr %f4.host, i64 %7874
  %7876 = load float, ptr %7875, align 4, !tbaa !44
  %7877 = insertelement <4 x float> %7873, float %7876, i64 3
  %7878 = fmul <4 x float> %7877, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7879 = fadd <4 x float> %7856, %7878
  %7880 = fmul <4 x float> %7879, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7881 = fadd <4 x float> %7833, %7880
  %7882 = sext <4 x i32> %t2766 to <4 x i64>
  %7883 = extractelement <4 x i64> %7882, i64 0
  %7884 = getelementptr inbounds float, ptr %f0.host, i64 %7883
  %7885 = load float, ptr %7884, align 4, !tbaa !6
  %7886 = insertelement <4 x float> undef, float %7885, i64 0
  %7887 = extractelement <4 x i64> %7882, i64 1
  %7888 = getelementptr inbounds float, ptr %f0.host, i64 %7887
  %7889 = load float, ptr %7888, align 4, !tbaa !6
  %7890 = insertelement <4 x float> %7886, float %7889, i64 1
  %7891 = extractelement <4 x i64> %7882, i64 2
  %7892 = getelementptr inbounds float, ptr %f0.host, i64 %7891
  %7893 = load float, ptr %7892, align 4, !tbaa !6
  %7894 = insertelement <4 x float> %7890, float %7893, i64 2
  %7895 = extractelement <4 x i64> %7882, i64 3
  %7896 = getelementptr inbounds float, ptr %f0.host, i64 %7895
  %7897 = load float, ptr %7896, align 4, !tbaa !6
  %7898 = insertelement <4 x float> %7894, float %7897, i64 3
  %7899 = fsub <4 x float> %t2755, %t2761
  %7900 = fmul <4 x float> %3303, %7899
  %7901 = fadd <4 x float> %t2761, %7900
  %7902 = fadd <4 x float> %7901, %7898
  %7903 = fsub <4 x float> %7902, %7881
  %7904 = fsub <4 x float> %t2757, %t2759
  %7905 = fmul <4 x float> %7904, %7903
  %7906 = add nsw <4 x i32> %t2772, %7786
  %7907 = sext <4 x i32> %7906 to <4 x i64>
  %7908 = extractelement <4 x i64> %7907, i64 0
  %7909 = getelementptr inbounds float, ptr %f4.host, i64 %7908
  %7910 = load float, ptr %7909, align 4, !tbaa !44
  %7911 = insertelement <4 x float> undef, float %7910, i64 0
  %7912 = extractelement <4 x i64> %7907, i64 1
  %7913 = getelementptr inbounds float, ptr %f4.host, i64 %7912
  %7914 = load float, ptr %7913, align 4, !tbaa !44
  %7915 = insertelement <4 x float> %7911, float %7914, i64 1
  %7916 = extractelement <4 x i64> %7907, i64 2
  %7917 = getelementptr inbounds float, ptr %f4.host, i64 %7916
  %7918 = load float, ptr %7917, align 4, !tbaa !44
  %7919 = insertelement <4 x float> %7915, float %7918, i64 2
  %7920 = extractelement <4 x i64> %7907, i64 3
  %7921 = getelementptr inbounds float, ptr %f4.host, i64 %7920
  %7922 = load float, ptr %7921, align 4, !tbaa !44
  %7923 = insertelement <4 x float> %7919, float %7922, i64 3
  %7924 = fmul <4 x float> %7923, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7925 = add <4 x i32> %7812, %t2772
  %7926 = sext <4 x i32> %7925 to <4 x i64>
  %7927 = extractelement <4 x i64> %7926, i64 0
  %7928 = getelementptr inbounds float, ptr %f4.host, i64 %7927
  %7929 = load float, ptr %7928, align 4, !tbaa !44
  %7930 = insertelement <4 x float> undef, float %7929, i64 0
  %7931 = extractelement <4 x i64> %7926, i64 1
  %7932 = getelementptr inbounds float, ptr %f4.host, i64 %7931
  %7933 = load float, ptr %7932, align 4, !tbaa !44
  %7934 = insertelement <4 x float> %7930, float %7933, i64 1
  %7935 = extractelement <4 x i64> %7926, i64 2
  %7936 = getelementptr inbounds float, ptr %f4.host, i64 %7935
  %7937 = load float, ptr %7936, align 4, !tbaa !44
  %7938 = insertelement <4 x float> %7934, float %7937, i64 2
  %7939 = extractelement <4 x i64> %7926, i64 3
  %7940 = getelementptr inbounds float, ptr %f4.host, i64 %7939
  %7941 = load float, ptr %7940, align 4, !tbaa !44
  %7942 = insertelement <4 x float> %7938, float %7941, i64 3
  %7943 = fmul <4 x float> %7942, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7944 = fadd <4 x float> %7924, %7943
  %7945 = fmul <4 x float> %7944, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7946 = add nsw <4 x i32> %t2772, %7837
  %7947 = sext <4 x i32> %7946 to <4 x i64>
  %7948 = extractelement <4 x i64> %7947, i64 0
  %7949 = getelementptr inbounds float, ptr %f4.host, i64 %7948
  %7950 = load float, ptr %7949, align 4, !tbaa !44
  %7951 = insertelement <4 x float> undef, float %7950, i64 0
  %7952 = extractelement <4 x i64> %7947, i64 1
  %7953 = getelementptr inbounds float, ptr %f4.host, i64 %7952
  %7954 = load float, ptr %7953, align 4, !tbaa !44
  %7955 = insertelement <4 x float> %7951, float %7954, i64 1
  %7956 = extractelement <4 x i64> %7947, i64 2
  %7957 = getelementptr inbounds float, ptr %f4.host, i64 %7956
  %7958 = load float, ptr %7957, align 4, !tbaa !44
  %7959 = insertelement <4 x float> %7955, float %7958, i64 2
  %7960 = extractelement <4 x i64> %7947, i64 3
  %7961 = getelementptr inbounds float, ptr %f4.host, i64 %7960
  %7962 = load float, ptr %7961, align 4, !tbaa !44
  %7963 = insertelement <4 x float> %7959, float %7962, i64 3
  %7964 = fmul <4 x float> %7963, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %7965 = add <4 x i32> %7859, %t2772
  %7966 = sext <4 x i32> %7965 to <4 x i64>
  %7967 = extractelement <4 x i64> %7966, i64 0
  %7968 = getelementptr inbounds float, ptr %f4.host, i64 %7967
  %7969 = load float, ptr %7968, align 4, !tbaa !44
  %7970 = insertelement <4 x float> undef, float %7969, i64 0
  %7971 = extractelement <4 x i64> %7966, i64 1
  %7972 = getelementptr inbounds float, ptr %f4.host, i64 %7971
  %7973 = load float, ptr %7972, align 4, !tbaa !44
  %7974 = insertelement <4 x float> %7970, float %7973, i64 1
  %7975 = extractelement <4 x i64> %7966, i64 2
  %7976 = getelementptr inbounds float, ptr %f4.host, i64 %7975
  %7977 = load float, ptr %7976, align 4, !tbaa !44
  %7978 = insertelement <4 x float> %7974, float %7977, i64 2
  %7979 = extractelement <4 x i64> %7966, i64 3
  %7980 = getelementptr inbounds float, ptr %f4.host, i64 %7979
  %7981 = load float, ptr %7980, align 4, !tbaa !44
  %7982 = insertelement <4 x float> %7978, float %7981, i64 3
  %7983 = fmul <4 x float> %7982, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7984 = fadd <4 x float> %7964, %7983
  %7985 = fmul <4 x float> %7984, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %7986 = fadd <4 x float> %7945, %7985
  %7987 = add nsw <4 x i32> %t2766, <i32 256, i32 256, i32 256, i32 256>
  %7988 = sext <4 x i32> %7987 to <4 x i64>
  %7989 = extractelement <4 x i64> %7988, i64 0
  %7990 = getelementptr inbounds float, ptr %f0.host, i64 %7989
  %7991 = load float, ptr %7990, align 4, !tbaa !6
  %7992 = insertelement <4 x float> undef, float %7991, i64 0
  %7993 = extractelement <4 x i64> %7988, i64 1
  %7994 = getelementptr inbounds float, ptr %f0.host, i64 %7993
  %7995 = load float, ptr %7994, align 4, !tbaa !6
  %7996 = insertelement <4 x float> %7992, float %7995, i64 1
  %7997 = extractelement <4 x i64> %7988, i64 2
  %7998 = getelementptr inbounds float, ptr %f0.host, i64 %7997
  %7999 = load float, ptr %7998, align 4, !tbaa !6
  %8000 = insertelement <4 x float> %7996, float %7999, i64 2
  %8001 = extractelement <4 x i64> %7988, i64 3
  %8002 = getelementptr inbounds float, ptr %f0.host, i64 %8001
  %8003 = load float, ptr %8002, align 4, !tbaa !6
  %8004 = insertelement <4 x float> %8000, float %8003, i64 3
  %8005 = fsub <4 x float> %t2755, %t2760
  %8006 = fmul <4 x float> %3303, %8005
  %8007 = fadd <4 x float> %t2760, %8006
  %8008 = fadd <4 x float> %8007, %8004
  %8009 = fsub <4 x float> %8008, %7986
  %8010 = fsub <4 x float> %t2759, %t2757
  %8011 = fadd <4 x float> %8010, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8012 = fmul <4 x float> %8011, %8009
  %8013 = fadd <4 x float> %7905, %8012
  %tmp334 = add i32 %161, %7806
  %8014 = sext i32 %tmp334 to i64
  %8015 = sub nsw i64 %8014, %1963
  %8016 = add nsw i64 %8015, %7757
  %8017 = getelementptr inbounds float, ptr %222, i64 %8016
  %8018 = load <4 x float>, ptr %8017, align 4, !tbaa !70
  %8019 = fmul <4 x float> %8018, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp340 = add i32 %3304, %7806
  %8020 = sext i32 %tmp340 to i64
  %8021 = sub nsw i64 %8020, %1963
  %8022 = add nsw i64 %7758, %8021
  %8023 = getelementptr inbounds float, ptr %222, i64 %8022
  %8024 = load <4 x float>, ptr %8023, align 4, !tbaa !70
  %8025 = fmul <4 x float> %8024, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8026 = fadd <4 x float> %8019, %8025
  %8027 = fmul <4 x float> %8026, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8028 = add nsw i64 %8015, %7759
  %8029 = getelementptr inbounds float, ptr %222, i64 %8028
  %8030 = load <4 x float>, ptr %8029, align 4, !tbaa !70
  %8031 = fmul <4 x float> %8030, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8032 = add nsw i64 %7760, %8021
  %8033 = getelementptr inbounds float, ptr %222, i64 %8032
  %8034 = load <4 x float>, ptr %8033, align 4, !tbaa !70
  %8035 = fmul <4 x float> %8034, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8036 = fadd <4 x float> %8031, %8035
  %8037 = fmul <4 x float> %8036, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8038 = fadd <4 x float> %8027, %8037
  %8039 = fadd <4 x float> %8013, %8038
  %tmp318 = add i32 %7783, %3301
  %8040 = insertelement <4 x i32> undef, i32 %tmp318, i64 0
  %8041 = shufflevector <4 x i32> %8040, <4 x i32> undef, <4 x i32> zeroinitializer
  %8042 = add nsw <4 x i32> %8041, <i32 0, i32 1, i32 2, i32 3>
  %8043 = add nsw <4 x i32> %t2796, %8042
  %8044 = sext <4 x i32> %8043 to <4 x i64>
  %8045 = extractelement <4 x i64> %8044, i64 0
  %8046 = getelementptr inbounds float, ptr %f4.host, i64 %8045
  %8047 = load float, ptr %8046, align 4, !tbaa !44
  %8048 = insertelement <4 x float> undef, float %8047, i64 0
  %8049 = extractelement <4 x i64> %8044, i64 1
  %8050 = getelementptr inbounds float, ptr %f4.host, i64 %8049
  %8051 = load float, ptr %8050, align 4, !tbaa !44
  %8052 = insertelement <4 x float> %8048, float %8051, i64 1
  %8053 = extractelement <4 x i64> %8044, i64 2
  %8054 = getelementptr inbounds float, ptr %f4.host, i64 %8053
  %8055 = load float, ptr %8054, align 4, !tbaa !44
  %8056 = insertelement <4 x float> %8052, float %8055, i64 2
  %8057 = extractelement <4 x i64> %8044, i64 3
  %8058 = getelementptr inbounds float, ptr %f4.host, i64 %8057
  %8059 = load float, ptr %8058, align 4, !tbaa !44
  %8060 = insertelement <4 x float> %8056, float %8059, i64 3
  %8061 = fmul <4 x float> %8060, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8062 = add i32 %7807, %3141
  %8063 = add i32 %8062, %3301
  %tmp326 = add i32 %8063, %7756
  %8064 = insertelement <4 x i32> undef, i32 %tmp326, i64 0
  %8065 = shufflevector <4 x i32> %8064, <4 x i32> undef, <4 x i32> zeroinitializer
  %8066 = add <4 x i32> %8065, <i32 -1, i32 0, i32 1, i32 2>
  %8067 = add <4 x i32> %8066, %t2796
  %8068 = sext <4 x i32> %8067 to <4 x i64>
  %8069 = extractelement <4 x i64> %8068, i64 0
  %8070 = getelementptr inbounds float, ptr %f4.host, i64 %8069
  %8071 = load float, ptr %8070, align 4, !tbaa !44
  %8072 = insertelement <4 x float> undef, float %8071, i64 0
  %8073 = extractelement <4 x i64> %8068, i64 1
  %8074 = getelementptr inbounds float, ptr %f4.host, i64 %8073
  %8075 = load float, ptr %8074, align 4, !tbaa !44
  %8076 = insertelement <4 x float> %8072, float %8075, i64 1
  %8077 = extractelement <4 x i64> %8068, i64 2
  %8078 = getelementptr inbounds float, ptr %f4.host, i64 %8077
  %8079 = load float, ptr %8078, align 4, !tbaa !44
  %8080 = insertelement <4 x float> %8076, float %8079, i64 2
  %8081 = extractelement <4 x i64> %8068, i64 3
  %8082 = getelementptr inbounds float, ptr %f4.host, i64 %8081
  %8083 = load float, ptr %8082, align 4, !tbaa !44
  %8084 = insertelement <4 x float> %8080, float %8083, i64 3
  %8085 = fmul <4 x float> %8084, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8086 = fadd <4 x float> %8061, %8085
  %8087 = fmul <4 x float> %8086, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp322 = add i32 %7834, %3301
  %8088 = insertelement <4 x i32> undef, i32 %tmp322, i64 0
  %8089 = shufflevector <4 x i32> %8088, <4 x i32> undef, <4 x i32> zeroinitializer
  %8090 = add nsw <4 x i32> %8089, <i32 0, i32 1, i32 2, i32 3>
  %8091 = add nsw <4 x i32> %t2796, %8090
  %8092 = sext <4 x i32> %8091 to <4 x i64>
  %8093 = extractelement <4 x i64> %8092, i64 0
  %8094 = getelementptr inbounds float, ptr %f4.host, i64 %8093
  %8095 = load float, ptr %8094, align 4, !tbaa !44
  %8096 = insertelement <4 x float> undef, float %8095, i64 0
  %8097 = extractelement <4 x i64> %8092, i64 1
  %8098 = getelementptr inbounds float, ptr %f4.host, i64 %8097
  %8099 = load float, ptr %8098, align 4, !tbaa !44
  %8100 = insertelement <4 x float> %8096, float %8099, i64 1
  %8101 = extractelement <4 x i64> %8092, i64 2
  %8102 = getelementptr inbounds float, ptr %f4.host, i64 %8101
  %8103 = load float, ptr %8102, align 4, !tbaa !44
  %8104 = insertelement <4 x float> %8100, float %8103, i64 2
  %8105 = extractelement <4 x i64> %8092, i64 3
  %8106 = getelementptr inbounds float, ptr %f4.host, i64 %8105
  %8107 = load float, ptr %8106, align 4, !tbaa !44
  %8108 = insertelement <4 x float> %8104, float %8107, i64 3
  %8109 = fmul <4 x float> %8108, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp328 = add i32 %8063, %7754
  %8110 = insertelement <4 x i32> undef, i32 %tmp328, i64 0
  %8111 = shufflevector <4 x i32> %8110, <4 x i32> undef, <4 x i32> zeroinitializer
  %8112 = add <4 x i32> %8111, <i32 -1, i32 0, i32 1, i32 2>
  %8113 = add <4 x i32> %8112, %t2796
  %8114 = sext <4 x i32> %8113 to <4 x i64>
  %8115 = extractelement <4 x i64> %8114, i64 0
  %8116 = getelementptr inbounds float, ptr %f4.host, i64 %8115
  %8117 = load float, ptr %8116, align 4, !tbaa !44
  %8118 = insertelement <4 x float> undef, float %8117, i64 0
  %8119 = extractelement <4 x i64> %8114, i64 1
  %8120 = getelementptr inbounds float, ptr %f4.host, i64 %8119
  %8121 = load float, ptr %8120, align 4, !tbaa !44
  %8122 = insertelement <4 x float> %8118, float %8121, i64 1
  %8123 = extractelement <4 x i64> %8114, i64 2
  %8124 = getelementptr inbounds float, ptr %f4.host, i64 %8123
  %8125 = load float, ptr %8124, align 4, !tbaa !44
  %8126 = insertelement <4 x float> %8122, float %8125, i64 2
  %8127 = extractelement <4 x i64> %8114, i64 3
  %8128 = getelementptr inbounds float, ptr %f4.host, i64 %8127
  %8129 = load float, ptr %8128, align 4, !tbaa !44
  %8130 = insertelement <4 x float> %8126, float %8129, i64 3
  %8131 = fmul <4 x float> %8130, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8132 = fadd <4 x float> %8109, %8131
  %8133 = fmul <4 x float> %8132, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8134 = fadd <4 x float> %8087, %8133
  %8135 = sext <4 x i32> %t2787 to <4 x i64>
  %8136 = extractelement <4 x i64> %8135, i64 0
  %8137 = getelementptr inbounds float, ptr %f0.host, i64 %8136
  %8138 = load float, ptr %8137, align 4, !tbaa !6
  %8139 = insertelement <4 x float> undef, float %8138, i64 0
  %8140 = extractelement <4 x i64> %8135, i64 1
  %8141 = getelementptr inbounds float, ptr %f0.host, i64 %8140
  %8142 = load float, ptr %8141, align 4, !tbaa !6
  %8143 = insertelement <4 x float> %8139, float %8142, i64 1
  %8144 = extractelement <4 x i64> %8135, i64 2
  %8145 = getelementptr inbounds float, ptr %f0.host, i64 %8144
  %8146 = load float, ptr %8145, align 4, !tbaa !6
  %8147 = insertelement <4 x float> %8143, float %8146, i64 2
  %8148 = extractelement <4 x i64> %8135, i64 3
  %8149 = getelementptr inbounds float, ptr %f0.host, i64 %8148
  %8150 = load float, ptr %8149, align 4, !tbaa !6
  %8151 = insertelement <4 x float> %8147, float %8150, i64 3
  %8152 = fsub <4 x float> %t2754, %t2784
  %8153 = fmul <4 x float> %3303, %8152
  %8154 = fadd <4 x float> %t2784, %8153
  %8155 = fadd <4 x float> %8154, %8151
  %8156 = fsub <4 x float> %8155, %8134
  %8157 = fsub <4 x float> %t2756, %t2782
  %8158 = fmul <4 x float> %8157, %8156
  %8159 = add nsw <4 x i32> %t2791, %8042
  %8160 = sext <4 x i32> %8159 to <4 x i64>
  %8161 = extractelement <4 x i64> %8160, i64 0
  %8162 = getelementptr inbounds float, ptr %f4.host, i64 %8161
  %8163 = load float, ptr %8162, align 4, !tbaa !44
  %8164 = insertelement <4 x float> undef, float %8163, i64 0
  %8165 = extractelement <4 x i64> %8160, i64 1
  %8166 = getelementptr inbounds float, ptr %f4.host, i64 %8165
  %8167 = load float, ptr %8166, align 4, !tbaa !44
  %8168 = insertelement <4 x float> %8164, float %8167, i64 1
  %8169 = extractelement <4 x i64> %8160, i64 2
  %8170 = getelementptr inbounds float, ptr %f4.host, i64 %8169
  %8171 = load float, ptr %8170, align 4, !tbaa !44
  %8172 = insertelement <4 x float> %8168, float %8171, i64 2
  %8173 = extractelement <4 x i64> %8160, i64 3
  %8174 = getelementptr inbounds float, ptr %f4.host, i64 %8173
  %8175 = load float, ptr %8174, align 4, !tbaa !44
  %8176 = insertelement <4 x float> %8172, float %8175, i64 3
  %8177 = fmul <4 x float> %8176, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8178 = add <4 x i32> %8066, %t2791
  %8179 = sext <4 x i32> %8178 to <4 x i64>
  %8180 = extractelement <4 x i64> %8179, i64 0
  %8181 = getelementptr inbounds float, ptr %f4.host, i64 %8180
  %8182 = load float, ptr %8181, align 4, !tbaa !44
  %8183 = insertelement <4 x float> undef, float %8182, i64 0
  %8184 = extractelement <4 x i64> %8179, i64 1
  %8185 = getelementptr inbounds float, ptr %f4.host, i64 %8184
  %8186 = load float, ptr %8185, align 4, !tbaa !44
  %8187 = insertelement <4 x float> %8183, float %8186, i64 1
  %8188 = extractelement <4 x i64> %8179, i64 2
  %8189 = getelementptr inbounds float, ptr %f4.host, i64 %8188
  %8190 = load float, ptr %8189, align 4, !tbaa !44
  %8191 = insertelement <4 x float> %8187, float %8190, i64 2
  %8192 = extractelement <4 x i64> %8179, i64 3
  %8193 = getelementptr inbounds float, ptr %f4.host, i64 %8192
  %8194 = load float, ptr %8193, align 4, !tbaa !44
  %8195 = insertelement <4 x float> %8191, float %8194, i64 3
  %8196 = fmul <4 x float> %8195, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8197 = fadd <4 x float> %8177, %8196
  %8198 = fmul <4 x float> %8197, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8199 = add nsw <4 x i32> %t2791, %8090
  %8200 = sext <4 x i32> %8199 to <4 x i64>
  %8201 = extractelement <4 x i64> %8200, i64 0
  %8202 = getelementptr inbounds float, ptr %f4.host, i64 %8201
  %8203 = load float, ptr %8202, align 4, !tbaa !44
  %8204 = insertelement <4 x float> undef, float %8203, i64 0
  %8205 = extractelement <4 x i64> %8200, i64 1
  %8206 = getelementptr inbounds float, ptr %f4.host, i64 %8205
  %8207 = load float, ptr %8206, align 4, !tbaa !44
  %8208 = insertelement <4 x float> %8204, float %8207, i64 1
  %8209 = extractelement <4 x i64> %8200, i64 2
  %8210 = getelementptr inbounds float, ptr %f4.host, i64 %8209
  %8211 = load float, ptr %8210, align 4, !tbaa !44
  %8212 = insertelement <4 x float> %8208, float %8211, i64 2
  %8213 = extractelement <4 x i64> %8200, i64 3
  %8214 = getelementptr inbounds float, ptr %f4.host, i64 %8213
  %8215 = load float, ptr %8214, align 4, !tbaa !44
  %8216 = insertelement <4 x float> %8212, float %8215, i64 3
  %8217 = fmul <4 x float> %8216, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8218 = add <4 x i32> %8112, %t2791
  %8219 = sext <4 x i32> %8218 to <4 x i64>
  %8220 = extractelement <4 x i64> %8219, i64 0
  %8221 = getelementptr inbounds float, ptr %f4.host, i64 %8220
  %8222 = load float, ptr %8221, align 4, !tbaa !44
  %8223 = insertelement <4 x float> undef, float %8222, i64 0
  %8224 = extractelement <4 x i64> %8219, i64 1
  %8225 = getelementptr inbounds float, ptr %f4.host, i64 %8224
  %8226 = load float, ptr %8225, align 4, !tbaa !44
  %8227 = insertelement <4 x float> %8223, float %8226, i64 1
  %8228 = extractelement <4 x i64> %8219, i64 2
  %8229 = getelementptr inbounds float, ptr %f4.host, i64 %8228
  %8230 = load float, ptr %8229, align 4, !tbaa !44
  %8231 = insertelement <4 x float> %8227, float %8230, i64 2
  %8232 = extractelement <4 x i64> %8219, i64 3
  %8233 = getelementptr inbounds float, ptr %f4.host, i64 %8232
  %8234 = load float, ptr %8233, align 4, !tbaa !44
  %8235 = insertelement <4 x float> %8231, float %8234, i64 3
  %8236 = fmul <4 x float> %8235, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8237 = fadd <4 x float> %8217, %8236
  %8238 = fmul <4 x float> %8237, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8239 = fadd <4 x float> %8198, %8238
  %8240 = add nsw <4 x i32> %t2787, <i32 256, i32 256, i32 256, i32 256>
  %8241 = sext <4 x i32> %8240 to <4 x i64>
  %8242 = extractelement <4 x i64> %8241, i64 0
  %8243 = getelementptr inbounds float, ptr %f0.host, i64 %8242
  %8244 = load float, ptr %8243, align 4, !tbaa !6
  %8245 = insertelement <4 x float> undef, float %8244, i64 0
  %8246 = extractelement <4 x i64> %8241, i64 1
  %8247 = getelementptr inbounds float, ptr %f0.host, i64 %8246
  %8248 = load float, ptr %8247, align 4, !tbaa !6
  %8249 = insertelement <4 x float> %8245, float %8248, i64 1
  %8250 = extractelement <4 x i64> %8241, i64 2
  %8251 = getelementptr inbounds float, ptr %f0.host, i64 %8250
  %8252 = load float, ptr %8251, align 4, !tbaa !6
  %8253 = insertelement <4 x float> %8249, float %8252, i64 2
  %8254 = extractelement <4 x i64> %8241, i64 3
  %8255 = getelementptr inbounds float, ptr %f0.host, i64 %8254
  %8256 = load float, ptr %8255, align 4, !tbaa !6
  %8257 = insertelement <4 x float> %8253, float %8256, i64 3
  %8258 = fsub <4 x float> %t2754, %t2783
  %8259 = fmul <4 x float> %3303, %8258
  %8260 = fadd <4 x float> %t2783, %8259
  %8261 = fadd <4 x float> %8260, %8257
  %8262 = fsub <4 x float> %8261, %8239
  %8263 = fsub <4 x float> %t2782, %t2756
  %8264 = fadd <4 x float> %8263, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8265 = fmul <4 x float> %8264, %8262
  %8266 = fadd <4 x float> %8158, %8265
  %tmp316 = add i32 %3301, %7806
  %8267 = sext i32 %tmp316 to i64
  %8268 = sub nsw i64 %8267, %1963
  %8269 = add nsw i64 %8268, %7757
  %8270 = getelementptr inbounds float, ptr %222, i64 %8269
  %8271 = load <4 x float>, ptr %8270, align 4, !tbaa !70
  %8272 = fmul <4 x float> %8271, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %tmp324 = add i32 %3305, %7806
  %8273 = sext i32 %tmp324 to i64
  %8274 = sub nsw i64 %8273, %1963
  %8275 = add nsw i64 %7758, %8274
  %8276 = getelementptr inbounds float, ptr %222, i64 %8275
  %8277 = load <4 x float>, ptr %8276, align 4, !tbaa !70
  %8278 = fmul <4 x float> %8277, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8279 = fadd <4 x float> %8272, %8278
  %8280 = fmul <4 x float> %8279, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8281 = add nsw i64 %8268, %7759
  %8282 = getelementptr inbounds float, ptr %222, i64 %8281
  %8283 = load <4 x float>, ptr %8282, align 4, !tbaa !70
  %8284 = fmul <4 x float> %8283, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8285 = add nsw i64 %7760, %8274
  %8286 = getelementptr inbounds float, ptr %222, i64 %8285
  %8287 = load <4 x float>, ptr %8286, align 4, !tbaa !70
  %8288 = fmul <4 x float> %8287, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8289 = fadd <4 x float> %8284, %8288
  %8290 = fmul <4 x float> %8289, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8291 = fadd <4 x float> %8280, %8290
  %8292 = fadd <4 x float> %8266, %8291
  %8293 = shufflevector <4 x float> %8039, <4 x float> %8292, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8294 = shl i64 %lsr.iv311, 3
  %uglygep = getelementptr i8, ptr %scevgep309, i64 %8294
  store <8 x float> %8293, ptr %uglygep, align 4, !tbaa !72
  %lsr.iv.next308 = add i32 %lsr.iv307, -1
  %lsr.iv.next312 = add nuw nsw i64 %lsr.iv311, 4
  %lsr.iv.next332 = add i32 %lsr.iv331, 8
  %.not116 = icmp eq i32 %lsr.iv.next308, 0
  br i1 %.not116, label %"end for f125.s0.v3.v378", label %"for f125.s0.v3.v377"

"end for f125.s0.v3.v378":                        ; preds = %"for f125.s0.v3.v377", %"produce f12576"
  br i1 %3306, label %"for f125.s0.v3.v380.preheader", label %"consume f12583", !prof !5

"for f125.s0.v3.v380.preheader":                  ; preds = %"end for f125.s0.v3.v378"
  %8295 = shl nuw nsw i32 %6663, 1
  %8296 = ashr i32 %6662, 1
  %t2799 = add nsw i32 %8295, %8296
  %8297 = sub nsw i64 %3411, %10
  %8298 = mul nsw i64 %8297, %3356
  %8299 = add nsw i64 %8298, %3357
  %8300 = add nsw i64 %8299, -8
  %8301 = getelementptr inbounds float, ptr %f2.host, i64 %8300
  %8302 = load <4 x float>, ptr %8301, align 4, !tbaa !42
  %8303 = add nsw i64 %8299, -4
  %8304 = getelementptr inbounds float, ptr %f2.host, i64 %8303
  %8305 = load <4 x float>, ptr %8304, align 4, !tbaa !42
  %t2803 = shufflevector <4 x float> %8302, <4 x float> %8305, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2804 = shufflevector <4 x float> %8302, <4 x float> %8305, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2805 = fmul <4 x float> %232, %t2803
  %t2806 = fmul <4 x float> %232, %t2804
  %a989 = fptosi <4 x float> %t2806 to <4 x i32>
  %a996 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a989)
  %8306 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a996, <4 x i32> zeroinitializer)
  %t2808 = sitofp <4 x i32> %8306 to <4 x float>
  %t2809 = fmul <4 x float> %3294, %t2808
  %8307 = add nuw nsw <4 x i32> %8306, <i32 1, i32 1, i32 1, i32 1>
  %8308 = sitofp <4 x i32> %8307 to <4 x float>
  %t2810 = fmul <4 x float> %3294, %8308
  %8309 = add i32 %t2799, %3295
  %t2812 = mul nsw i32 %8309, %207
  %8310 = sub nsw i32 %8296, %158
  %t2814 = mul nsw i32 %8310, %207
  %8311 = fmul <4 x float> %t2806, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a994 = fptosi <4 x float> %8311 to <4 x i32>
  %a993 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a994)
  %8312 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a993, <4 x i32> zeroinitializer)
  %8313 = shl <4 x i32> %8306, <i32 8, i32 8, i32 8, i32 8>
  %.neg252 = sub <4 x i32> %.neg245, %8313
  %t2815 = add <4 x i32> %.neg252, %8312
  %8314 = add i32 %t2799, %3136
  %8315 = mul nsw i32 %8314, %f4.stride.1
  %t2820 = sub nsw <4 x i32> %8306, %241
  %t2821 = mul nsw <4 x i32> %t2820, %1959
  %8316 = sub nsw i32 %8296, %f4.v4.min_realized
  %8317 = mul nsw i32 %8316, %f4.stride.1
  %8318 = add nsw <4 x i32> %t2820, <i32 1, i32 1, i32 1, i32 1>
  %t2827 = mul nsw <4 x i32> %8318, %1959
  %a997 = fptosi <4 x float> %t2805 to <4 x i32>
  %a1004 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b825, <4 x i32> %a997)
  %8319 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1004, <4 x i32> zeroinitializer)
  %t2830 = sitofp <4 x i32> %8319 to <4 x float>
  %t2831 = fmul <4 x float> %3294, %t2830
  %8320 = add nuw nsw <4 x i32> %8319, <i32 1, i32 1, i32 1, i32 1>
  %8321 = sitofp <4 x i32> %8320 to <4 x float>
  %t2832 = fmul <4 x float> %3294, %8321
  %8322 = fmul <4 x float> %t2805, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1002 = fptosi <4 x float> %8322 to <4 x i32>
  %a1001 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b978, <4 x i32> %a1002)
  %8323 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1001, <4 x i32> zeroinitializer)
  %8324 = shl <4 x i32> %8319, <i32 8, i32 8, i32 8, i32 8>
  %.neg254 = sub <4 x i32> %.neg245, %8324
  %t2835 = add <4 x i32> %.neg254, %8323
  %t2837 = add nsw i32 %8315, %3317
  %t2838 = sub nsw <4 x i32> %8319, %241
  %t2839 = mul nsw <4 x i32> %t2838, %1959
  %t2841 = add nsw i32 %8315, %3318
  %t2842 = add nsw i32 %8317, %3317
  %t2843 = add nsw i32 %8317, %3318
  %8325 = add nsw <4 x i32> %t2838, <i32 1, i32 1, i32 1, i32 1>
  %t2844 = mul nsw <4 x i32> %8325, %1959
  %8326 = add i32 %t2826, %8317
  %8327 = insertelement <4 x i32> undef, i32 %8326, i64 0
  %8328 = shufflevector <4 x i32> %8327, <4 x i32> undef, <4 x i32> zeroinitializer
  %8329 = add nsw <4 x i32> %8328, <i32 0, i32 1, i32 2, i32 3>
  %8330 = add nsw <4 x i32> %t2827, %8329
  %8331 = sext <4 x i32> %8330 to <4 x i64>
  %8332 = extractelement <4 x i64> %8331, i64 0
  %8333 = getelementptr inbounds float, ptr %f4.host, i64 %8332
  %8334 = load float, ptr %8333, align 4, !tbaa !44
  %8335 = insertelement <4 x float> undef, float %8334, i64 0
  %8336 = extractelement <4 x i64> %8331, i64 1
  %8337 = getelementptr inbounds float, ptr %f4.host, i64 %8336
  %8338 = load float, ptr %8337, align 4, !tbaa !44
  %8339 = insertelement <4 x float> %8335, float %8338, i64 1
  %8340 = extractelement <4 x i64> %8331, i64 2
  %8341 = getelementptr inbounds float, ptr %f4.host, i64 %8340
  %8342 = load float, ptr %8341, align 4, !tbaa !44
  %8343 = insertelement <4 x float> %8339, float %8342, i64 2
  %8344 = extractelement <4 x i64> %8331, i64 3
  %8345 = getelementptr inbounds float, ptr %f4.host, i64 %8344
  %8346 = load float, ptr %8345, align 4, !tbaa !44
  %8347 = insertelement <4 x float> %8343, float %8346, i64 3
  %8348 = fmul <4 x float> %8347, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8349 = add i32 %t2825, %8317
  %8350 = insertelement <4 x i32> undef, i32 %8349, i64 0
  %8351 = shufflevector <4 x i32> %8350, <4 x i32> undef, <4 x i32> zeroinitializer
  %8352 = add <4 x i32> %8351, <i32 -1, i32 0, i32 1, i32 2>
  %8353 = add <4 x i32> %8352, %t2827
  %8354 = sext <4 x i32> %8353 to <4 x i64>
  %8355 = extractelement <4 x i64> %8354, i64 0
  %8356 = getelementptr inbounds float, ptr %f4.host, i64 %8355
  %8357 = load float, ptr %8356, align 4, !tbaa !44
  %8358 = insertelement <4 x float> undef, float %8357, i64 0
  %8359 = extractelement <4 x i64> %8354, i64 1
  %8360 = getelementptr inbounds float, ptr %f4.host, i64 %8359
  %8361 = load float, ptr %8360, align 4, !tbaa !44
  %8362 = insertelement <4 x float> %8358, float %8361, i64 1
  %8363 = extractelement <4 x i64> %8354, i64 2
  %8364 = getelementptr inbounds float, ptr %f4.host, i64 %8363
  %8365 = load float, ptr %8364, align 4, !tbaa !44
  %8366 = insertelement <4 x float> %8362, float %8365, i64 2
  %8367 = extractelement <4 x i64> %8354, i64 3
  %8368 = getelementptr inbounds float, ptr %f4.host, i64 %8367
  %8369 = load float, ptr %8368, align 4, !tbaa !44
  %8370 = insertelement <4 x float> %8366, float %8369, i64 3
  %8371 = fmul <4 x float> %8370, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8372 = fadd <4 x float> %8348, %8371
  %8373 = fmul <4 x float> %8372, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8374 = add i32 %t2826, %8315
  %8375 = insertelement <4 x i32> undef, i32 %8374, i64 0
  %8376 = shufflevector <4 x i32> %8375, <4 x i32> undef, <4 x i32> zeroinitializer
  %8377 = add nsw <4 x i32> %8376, <i32 0, i32 1, i32 2, i32 3>
  %8378 = add nsw <4 x i32> %t2827, %8377
  %8379 = sext <4 x i32> %8378 to <4 x i64>
  %8380 = extractelement <4 x i64> %8379, i64 0
  %8381 = getelementptr inbounds float, ptr %f4.host, i64 %8380
  %8382 = load float, ptr %8381, align 4, !tbaa !44
  %8383 = insertelement <4 x float> undef, float %8382, i64 0
  %8384 = extractelement <4 x i64> %8379, i64 1
  %8385 = getelementptr inbounds float, ptr %f4.host, i64 %8384
  %8386 = load float, ptr %8385, align 4, !tbaa !44
  %8387 = insertelement <4 x float> %8383, float %8386, i64 1
  %8388 = extractelement <4 x i64> %8379, i64 2
  %8389 = getelementptr inbounds float, ptr %f4.host, i64 %8388
  %8390 = load float, ptr %8389, align 4, !tbaa !44
  %8391 = insertelement <4 x float> %8387, float %8390, i64 2
  %8392 = extractelement <4 x i64> %8379, i64 3
  %8393 = getelementptr inbounds float, ptr %f4.host, i64 %8392
  %8394 = load float, ptr %8393, align 4, !tbaa !44
  %8395 = insertelement <4 x float> %8391, float %8394, i64 3
  %8396 = fmul <4 x float> %8395, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8397 = add i32 %t2825, %8315
  %8398 = insertelement <4 x i32> undef, i32 %8397, i64 0
  %8399 = shufflevector <4 x i32> %8398, <4 x i32> undef, <4 x i32> zeroinitializer
  %8400 = add <4 x i32> %8399, <i32 -1, i32 0, i32 1, i32 2>
  %8401 = add <4 x i32> %8400, %t2827
  %8402 = sext <4 x i32> %8401 to <4 x i64>
  %8403 = extractelement <4 x i64> %8402, i64 0
  %8404 = getelementptr inbounds float, ptr %f4.host, i64 %8403
  %8405 = load float, ptr %8404, align 4, !tbaa !44
  %8406 = insertelement <4 x float> undef, float %8405, i64 0
  %8407 = extractelement <4 x i64> %8402, i64 1
  %8408 = getelementptr inbounds float, ptr %f4.host, i64 %8407
  %8409 = load float, ptr %8408, align 4, !tbaa !44
  %8410 = insertelement <4 x float> %8406, float %8409, i64 1
  %8411 = extractelement <4 x i64> %8402, i64 2
  %8412 = getelementptr inbounds float, ptr %f4.host, i64 %8411
  %8413 = load float, ptr %8412, align 4, !tbaa !44
  %8414 = insertelement <4 x float> %8410, float %8413, i64 2
  %8415 = extractelement <4 x i64> %8402, i64 3
  %8416 = getelementptr inbounds float, ptr %f4.host, i64 %8415
  %8417 = load float, ptr %8416, align 4, !tbaa !44
  %8418 = insertelement <4 x float> %8414, float %8417, i64 3
  %8419 = fmul <4 x float> %8418, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8420 = fadd <4 x float> %8396, %8419
  %8421 = fmul <4 x float> %8420, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8422 = fadd <4 x float> %8373, %8421
  %8423 = sext <4 x i32> %t2815 to <4 x i64>
  %8424 = extractelement <4 x i64> %8423, i64 0
  %8425 = getelementptr inbounds float, ptr %f0.host, i64 %8424
  %8426 = load float, ptr %8425, align 4, !tbaa !6
  %8427 = insertelement <4 x float> undef, float %8426, i64 0
  %8428 = extractelement <4 x i64> %8423, i64 1
  %8429 = getelementptr inbounds float, ptr %f0.host, i64 %8428
  %8430 = load float, ptr %8429, align 4, !tbaa !6
  %8431 = insertelement <4 x float> %8427, float %8430, i64 1
  %8432 = extractelement <4 x i64> %8423, i64 2
  %8433 = getelementptr inbounds float, ptr %f0.host, i64 %8432
  %8434 = load float, ptr %8433, align 4, !tbaa !6
  %8435 = insertelement <4 x float> %8431, float %8434, i64 2
  %8436 = extractelement <4 x i64> %8423, i64 3
  %8437 = getelementptr inbounds float, ptr %f0.host, i64 %8436
  %8438 = load float, ptr %8437, align 4, !tbaa !6
  %8439 = insertelement <4 x float> %8435, float %8438, i64 3
  %8440 = fsub <4 x float> %t2804, %t2810
  %8441 = fmul <4 x float> %3303, %8440
  %8442 = fadd <4 x float> %t2810, %8441
  %8443 = fadd <4 x float> %8442, %8439
  %8444 = fsub <4 x float> %8443, %8422
  %8445 = fsub <4 x float> %t2806, %t2808
  %8446 = fmul <4 x float> %8445, %8444
  %8447 = add nsw <4 x i32> %t2821, %8329
  %8448 = sext <4 x i32> %8447 to <4 x i64>
  %8449 = extractelement <4 x i64> %8448, i64 0
  %8450 = getelementptr inbounds float, ptr %f4.host, i64 %8449
  %8451 = load float, ptr %8450, align 4, !tbaa !44
  %8452 = insertelement <4 x float> undef, float %8451, i64 0
  %8453 = extractelement <4 x i64> %8448, i64 1
  %8454 = getelementptr inbounds float, ptr %f4.host, i64 %8453
  %8455 = load float, ptr %8454, align 4, !tbaa !44
  %8456 = insertelement <4 x float> %8452, float %8455, i64 1
  %8457 = extractelement <4 x i64> %8448, i64 2
  %8458 = getelementptr inbounds float, ptr %f4.host, i64 %8457
  %8459 = load float, ptr %8458, align 4, !tbaa !44
  %8460 = insertelement <4 x float> %8456, float %8459, i64 2
  %8461 = extractelement <4 x i64> %8448, i64 3
  %8462 = getelementptr inbounds float, ptr %f4.host, i64 %8461
  %8463 = load float, ptr %8462, align 4, !tbaa !44
  %8464 = insertelement <4 x float> %8460, float %8463, i64 3
  %8465 = fmul <4 x float> %8464, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8466 = add <4 x i32> %8352, %t2821
  %8467 = sext <4 x i32> %8466 to <4 x i64>
  %8468 = extractelement <4 x i64> %8467, i64 0
  %8469 = getelementptr inbounds float, ptr %f4.host, i64 %8468
  %8470 = load float, ptr %8469, align 4, !tbaa !44
  %8471 = insertelement <4 x float> undef, float %8470, i64 0
  %8472 = extractelement <4 x i64> %8467, i64 1
  %8473 = getelementptr inbounds float, ptr %f4.host, i64 %8472
  %8474 = load float, ptr %8473, align 4, !tbaa !44
  %8475 = insertelement <4 x float> %8471, float %8474, i64 1
  %8476 = extractelement <4 x i64> %8467, i64 2
  %8477 = getelementptr inbounds float, ptr %f4.host, i64 %8476
  %8478 = load float, ptr %8477, align 4, !tbaa !44
  %8479 = insertelement <4 x float> %8475, float %8478, i64 2
  %8480 = extractelement <4 x i64> %8467, i64 3
  %8481 = getelementptr inbounds float, ptr %f4.host, i64 %8480
  %8482 = load float, ptr %8481, align 4, !tbaa !44
  %8483 = insertelement <4 x float> %8479, float %8482, i64 3
  %8484 = fmul <4 x float> %8483, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8485 = fadd <4 x float> %8465, %8484
  %8486 = fmul <4 x float> %8485, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8487 = add nsw <4 x i32> %t2821, %8377
  %8488 = sext <4 x i32> %8487 to <4 x i64>
  %8489 = extractelement <4 x i64> %8488, i64 0
  %8490 = getelementptr inbounds float, ptr %f4.host, i64 %8489
  %8491 = load float, ptr %8490, align 4, !tbaa !44
  %8492 = insertelement <4 x float> undef, float %8491, i64 0
  %8493 = extractelement <4 x i64> %8488, i64 1
  %8494 = getelementptr inbounds float, ptr %f4.host, i64 %8493
  %8495 = load float, ptr %8494, align 4, !tbaa !44
  %8496 = insertelement <4 x float> %8492, float %8495, i64 1
  %8497 = extractelement <4 x i64> %8488, i64 2
  %8498 = getelementptr inbounds float, ptr %f4.host, i64 %8497
  %8499 = load float, ptr %8498, align 4, !tbaa !44
  %8500 = insertelement <4 x float> %8496, float %8499, i64 2
  %8501 = extractelement <4 x i64> %8488, i64 3
  %8502 = getelementptr inbounds float, ptr %f4.host, i64 %8501
  %8503 = load float, ptr %8502, align 4, !tbaa !44
  %8504 = insertelement <4 x float> %8500, float %8503, i64 3
  %8505 = fmul <4 x float> %8504, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8506 = add <4 x i32> %8400, %t2821
  %8507 = sext <4 x i32> %8506 to <4 x i64>
  %8508 = extractelement <4 x i64> %8507, i64 0
  %8509 = getelementptr inbounds float, ptr %f4.host, i64 %8508
  %8510 = load float, ptr %8509, align 4, !tbaa !44
  %8511 = insertelement <4 x float> undef, float %8510, i64 0
  %8512 = extractelement <4 x i64> %8507, i64 1
  %8513 = getelementptr inbounds float, ptr %f4.host, i64 %8512
  %8514 = load float, ptr %8513, align 4, !tbaa !44
  %8515 = insertelement <4 x float> %8511, float %8514, i64 1
  %8516 = extractelement <4 x i64> %8507, i64 2
  %8517 = getelementptr inbounds float, ptr %f4.host, i64 %8516
  %8518 = load float, ptr %8517, align 4, !tbaa !44
  %8519 = insertelement <4 x float> %8515, float %8518, i64 2
  %8520 = extractelement <4 x i64> %8507, i64 3
  %8521 = getelementptr inbounds float, ptr %f4.host, i64 %8520
  %8522 = load float, ptr %8521, align 4, !tbaa !44
  %8523 = insertelement <4 x float> %8519, float %8522, i64 3
  %8524 = fmul <4 x float> %8523, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8525 = fadd <4 x float> %8505, %8524
  %8526 = fmul <4 x float> %8525, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8527 = fadd <4 x float> %8486, %8526
  %8528 = add nsw <4 x i32> %t2815, <i32 256, i32 256, i32 256, i32 256>
  %8529 = sext <4 x i32> %8528 to <4 x i64>
  %8530 = extractelement <4 x i64> %8529, i64 0
  %8531 = getelementptr inbounds float, ptr %f0.host, i64 %8530
  %8532 = load float, ptr %8531, align 4, !tbaa !6
  %8533 = insertelement <4 x float> undef, float %8532, i64 0
  %8534 = extractelement <4 x i64> %8529, i64 1
  %8535 = getelementptr inbounds float, ptr %f0.host, i64 %8534
  %8536 = load float, ptr %8535, align 4, !tbaa !6
  %8537 = insertelement <4 x float> %8533, float %8536, i64 1
  %8538 = extractelement <4 x i64> %8529, i64 2
  %8539 = getelementptr inbounds float, ptr %f0.host, i64 %8538
  %8540 = load float, ptr %8539, align 4, !tbaa !6
  %8541 = insertelement <4 x float> %8537, float %8540, i64 2
  %8542 = extractelement <4 x i64> %8529, i64 3
  %8543 = getelementptr inbounds float, ptr %f0.host, i64 %8542
  %8544 = load float, ptr %8543, align 4, !tbaa !6
  %8545 = insertelement <4 x float> %8541, float %8544, i64 3
  %8546 = fsub <4 x float> %t2804, %t2809
  %8547 = fmul <4 x float> %3303, %8546
  %8548 = fadd <4 x float> %t2809, %8547
  %8549 = fadd <4 x float> %8548, %8545
  %8550 = fsub <4 x float> %8549, %8527
  %8551 = fsub <4 x float> %t2808, %t2806
  %8552 = fadd <4 x float> %8551, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8553 = fmul <4 x float> %8552, %8550
  %8554 = fadd <4 x float> %8446, %8553
  %8555 = sext i32 %t2814 to i64
  %8556 = add nsw i64 %3321, %8555
  %8557 = getelementptr inbounds float, ptr %222, i64 %8556
  %8558 = load <4 x float>, ptr %8557, align 4, !tbaa !70
  %8559 = fmul <4 x float> %8558, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8560 = add nsw i64 %3324, %8555
  %8561 = getelementptr inbounds float, ptr %222, i64 %8560
  %8562 = load <4 x float>, ptr %8561, align 4, !tbaa !70
  %8563 = fmul <4 x float> %8562, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8564 = fadd <4 x float> %8559, %8563
  %8565 = fmul <4 x float> %8564, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8566 = sext i32 %t2812 to i64
  %8567 = add nsw i64 %3321, %8566
  %8568 = getelementptr inbounds float, ptr %222, i64 %8567
  %8569 = load <4 x float>, ptr %8568, align 4, !tbaa !70
  %8570 = fmul <4 x float> %8569, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8571 = add nsw i64 %3324, %8566
  %8572 = getelementptr inbounds float, ptr %222, i64 %8571
  %8573 = load <4 x float>, ptr %8572, align 4, !tbaa !70
  %8574 = fmul <4 x float> %8573, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8575 = fadd <4 x float> %8570, %8574
  %8576 = fmul <4 x float> %8575, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8577 = fadd <4 x float> %8565, %8576
  %8578 = fadd <4 x float> %8554, %8577
  %8579 = insertelement <4 x i32> undef, i32 %t2843, i64 0
  %8580 = shufflevector <4 x i32> %8579, <4 x i32> undef, <4 x i32> zeroinitializer
  %8581 = add nsw <4 x i32> %8580, <i32 0, i32 1, i32 2, i32 3>
  %8582 = add nsw <4 x i32> %t2844, %8581
  %8583 = sext <4 x i32> %8582 to <4 x i64>
  %8584 = extractelement <4 x i64> %8583, i64 0
  %8585 = getelementptr inbounds float, ptr %f4.host, i64 %8584
  %8586 = load float, ptr %8585, align 4, !tbaa !44
  %8587 = insertelement <4 x float> undef, float %8586, i64 0
  %8588 = extractelement <4 x i64> %8583, i64 1
  %8589 = getelementptr inbounds float, ptr %f4.host, i64 %8588
  %8590 = load float, ptr %8589, align 4, !tbaa !44
  %8591 = insertelement <4 x float> %8587, float %8590, i64 1
  %8592 = extractelement <4 x i64> %8583, i64 2
  %8593 = getelementptr inbounds float, ptr %f4.host, i64 %8592
  %8594 = load float, ptr %8593, align 4, !tbaa !44
  %8595 = insertelement <4 x float> %8591, float %8594, i64 2
  %8596 = extractelement <4 x i64> %8583, i64 3
  %8597 = getelementptr inbounds float, ptr %f4.host, i64 %8596
  %8598 = load float, ptr %8597, align 4, !tbaa !44
  %8599 = insertelement <4 x float> %8595, float %8598, i64 3
  %8600 = fmul <4 x float> %8599, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8601 = insertelement <4 x i32> undef, i32 %t2842, i64 0
  %8602 = shufflevector <4 x i32> %8601, <4 x i32> undef, <4 x i32> zeroinitializer
  %8603 = add <4 x i32> %8602, <i32 -1, i32 0, i32 1, i32 2>
  %8604 = add <4 x i32> %8603, %t2844
  %8605 = sext <4 x i32> %8604 to <4 x i64>
  %8606 = extractelement <4 x i64> %8605, i64 0
  %8607 = getelementptr inbounds float, ptr %f4.host, i64 %8606
  %8608 = load float, ptr %8607, align 4, !tbaa !44
  %8609 = insertelement <4 x float> undef, float %8608, i64 0
  %8610 = extractelement <4 x i64> %8605, i64 1
  %8611 = getelementptr inbounds float, ptr %f4.host, i64 %8610
  %8612 = load float, ptr %8611, align 4, !tbaa !44
  %8613 = insertelement <4 x float> %8609, float %8612, i64 1
  %8614 = extractelement <4 x i64> %8605, i64 2
  %8615 = getelementptr inbounds float, ptr %f4.host, i64 %8614
  %8616 = load float, ptr %8615, align 4, !tbaa !44
  %8617 = insertelement <4 x float> %8613, float %8616, i64 2
  %8618 = extractelement <4 x i64> %8605, i64 3
  %8619 = getelementptr inbounds float, ptr %f4.host, i64 %8618
  %8620 = load float, ptr %8619, align 4, !tbaa !44
  %8621 = insertelement <4 x float> %8617, float %8620, i64 3
  %8622 = fmul <4 x float> %8621, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8623 = fadd <4 x float> %8600, %8622
  %8624 = fmul <4 x float> %8623, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8625 = insertelement <4 x i32> undef, i32 %t2841, i64 0
  %8626 = shufflevector <4 x i32> %8625, <4 x i32> undef, <4 x i32> zeroinitializer
  %8627 = add nsw <4 x i32> %8626, <i32 0, i32 1, i32 2, i32 3>
  %8628 = add nsw <4 x i32> %t2844, %8627
  %8629 = sext <4 x i32> %8628 to <4 x i64>
  %8630 = extractelement <4 x i64> %8629, i64 0
  %8631 = getelementptr inbounds float, ptr %f4.host, i64 %8630
  %8632 = load float, ptr %8631, align 4, !tbaa !44
  %8633 = insertelement <4 x float> undef, float %8632, i64 0
  %8634 = extractelement <4 x i64> %8629, i64 1
  %8635 = getelementptr inbounds float, ptr %f4.host, i64 %8634
  %8636 = load float, ptr %8635, align 4, !tbaa !44
  %8637 = insertelement <4 x float> %8633, float %8636, i64 1
  %8638 = extractelement <4 x i64> %8629, i64 2
  %8639 = getelementptr inbounds float, ptr %f4.host, i64 %8638
  %8640 = load float, ptr %8639, align 4, !tbaa !44
  %8641 = insertelement <4 x float> %8637, float %8640, i64 2
  %8642 = extractelement <4 x i64> %8629, i64 3
  %8643 = getelementptr inbounds float, ptr %f4.host, i64 %8642
  %8644 = load float, ptr %8643, align 4, !tbaa !44
  %8645 = insertelement <4 x float> %8641, float %8644, i64 3
  %8646 = fmul <4 x float> %8645, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8647 = insertelement <4 x i32> undef, i32 %t2837, i64 0
  %8648 = shufflevector <4 x i32> %8647, <4 x i32> undef, <4 x i32> zeroinitializer
  %8649 = add <4 x i32> %8648, <i32 -1, i32 0, i32 1, i32 2>
  %8650 = add <4 x i32> %8649, %t2844
  %8651 = sext <4 x i32> %8650 to <4 x i64>
  %8652 = extractelement <4 x i64> %8651, i64 0
  %8653 = getelementptr inbounds float, ptr %f4.host, i64 %8652
  %8654 = load float, ptr %8653, align 4, !tbaa !44
  %8655 = insertelement <4 x float> undef, float %8654, i64 0
  %8656 = extractelement <4 x i64> %8651, i64 1
  %8657 = getelementptr inbounds float, ptr %f4.host, i64 %8656
  %8658 = load float, ptr %8657, align 4, !tbaa !44
  %8659 = insertelement <4 x float> %8655, float %8658, i64 1
  %8660 = extractelement <4 x i64> %8651, i64 2
  %8661 = getelementptr inbounds float, ptr %f4.host, i64 %8660
  %8662 = load float, ptr %8661, align 4, !tbaa !44
  %8663 = insertelement <4 x float> %8659, float %8662, i64 2
  %8664 = extractelement <4 x i64> %8651, i64 3
  %8665 = getelementptr inbounds float, ptr %f4.host, i64 %8664
  %8666 = load float, ptr %8665, align 4, !tbaa !44
  %8667 = insertelement <4 x float> %8663, float %8666, i64 3
  %8668 = fmul <4 x float> %8667, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8669 = fadd <4 x float> %8646, %8668
  %8670 = fmul <4 x float> %8669, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8671 = fadd <4 x float> %8624, %8670
  %8672 = sext <4 x i32> %t2835 to <4 x i64>
  %8673 = extractelement <4 x i64> %8672, i64 0
  %8674 = getelementptr inbounds float, ptr %f0.host, i64 %8673
  %8675 = load float, ptr %8674, align 4, !tbaa !6
  %8676 = insertelement <4 x float> undef, float %8675, i64 0
  %8677 = extractelement <4 x i64> %8672, i64 1
  %8678 = getelementptr inbounds float, ptr %f0.host, i64 %8677
  %8679 = load float, ptr %8678, align 4, !tbaa !6
  %8680 = insertelement <4 x float> %8676, float %8679, i64 1
  %8681 = extractelement <4 x i64> %8672, i64 2
  %8682 = getelementptr inbounds float, ptr %f0.host, i64 %8681
  %8683 = load float, ptr %8682, align 4, !tbaa !6
  %8684 = insertelement <4 x float> %8680, float %8683, i64 2
  %8685 = extractelement <4 x i64> %8672, i64 3
  %8686 = getelementptr inbounds float, ptr %f0.host, i64 %8685
  %8687 = load float, ptr %8686, align 4, !tbaa !6
  %8688 = insertelement <4 x float> %8684, float %8687, i64 3
  %8689 = fsub <4 x float> %t2803, %t2832
  %8690 = fmul <4 x float> %3303, %8689
  %8691 = fadd <4 x float> %t2832, %8690
  %8692 = fadd <4 x float> %8691, %8688
  %8693 = fsub <4 x float> %8692, %8671
  %8694 = fsub <4 x float> %t2805, %t2830
  %8695 = fmul <4 x float> %8694, %8693
  %8696 = add nsw <4 x i32> %t2839, %8581
  %8697 = sext <4 x i32> %8696 to <4 x i64>
  %8698 = extractelement <4 x i64> %8697, i64 0
  %8699 = getelementptr inbounds float, ptr %f4.host, i64 %8698
  %8700 = load float, ptr %8699, align 4, !tbaa !44
  %8701 = insertelement <4 x float> undef, float %8700, i64 0
  %8702 = extractelement <4 x i64> %8697, i64 1
  %8703 = getelementptr inbounds float, ptr %f4.host, i64 %8702
  %8704 = load float, ptr %8703, align 4, !tbaa !44
  %8705 = insertelement <4 x float> %8701, float %8704, i64 1
  %8706 = extractelement <4 x i64> %8697, i64 2
  %8707 = getelementptr inbounds float, ptr %f4.host, i64 %8706
  %8708 = load float, ptr %8707, align 4, !tbaa !44
  %8709 = insertelement <4 x float> %8705, float %8708, i64 2
  %8710 = extractelement <4 x i64> %8697, i64 3
  %8711 = getelementptr inbounds float, ptr %f4.host, i64 %8710
  %8712 = load float, ptr %8711, align 4, !tbaa !44
  %8713 = insertelement <4 x float> %8709, float %8712, i64 3
  %8714 = fmul <4 x float> %8713, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8715 = add <4 x i32> %8603, %t2839
  %8716 = sext <4 x i32> %8715 to <4 x i64>
  %8717 = extractelement <4 x i64> %8716, i64 0
  %8718 = getelementptr inbounds float, ptr %f4.host, i64 %8717
  %8719 = load float, ptr %8718, align 4, !tbaa !44
  %8720 = insertelement <4 x float> undef, float %8719, i64 0
  %8721 = extractelement <4 x i64> %8716, i64 1
  %8722 = getelementptr inbounds float, ptr %f4.host, i64 %8721
  %8723 = load float, ptr %8722, align 4, !tbaa !44
  %8724 = insertelement <4 x float> %8720, float %8723, i64 1
  %8725 = extractelement <4 x i64> %8716, i64 2
  %8726 = getelementptr inbounds float, ptr %f4.host, i64 %8725
  %8727 = load float, ptr %8726, align 4, !tbaa !44
  %8728 = insertelement <4 x float> %8724, float %8727, i64 2
  %8729 = extractelement <4 x i64> %8716, i64 3
  %8730 = getelementptr inbounds float, ptr %f4.host, i64 %8729
  %8731 = load float, ptr %8730, align 4, !tbaa !44
  %8732 = insertelement <4 x float> %8728, float %8731, i64 3
  %8733 = fmul <4 x float> %8732, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8734 = fadd <4 x float> %8714, %8733
  %8735 = fmul <4 x float> %8734, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8736 = add nsw <4 x i32> %t2839, %8627
  %8737 = sext <4 x i32> %8736 to <4 x i64>
  %8738 = extractelement <4 x i64> %8737, i64 0
  %8739 = getelementptr inbounds float, ptr %f4.host, i64 %8738
  %8740 = load float, ptr %8739, align 4, !tbaa !44
  %8741 = insertelement <4 x float> undef, float %8740, i64 0
  %8742 = extractelement <4 x i64> %8737, i64 1
  %8743 = getelementptr inbounds float, ptr %f4.host, i64 %8742
  %8744 = load float, ptr %8743, align 4, !tbaa !44
  %8745 = insertelement <4 x float> %8741, float %8744, i64 1
  %8746 = extractelement <4 x i64> %8737, i64 2
  %8747 = getelementptr inbounds float, ptr %f4.host, i64 %8746
  %8748 = load float, ptr %8747, align 4, !tbaa !44
  %8749 = insertelement <4 x float> %8745, float %8748, i64 2
  %8750 = extractelement <4 x i64> %8737, i64 3
  %8751 = getelementptr inbounds float, ptr %f4.host, i64 %8750
  %8752 = load float, ptr %8751, align 4, !tbaa !44
  %8753 = insertelement <4 x float> %8749, float %8752, i64 3
  %8754 = fmul <4 x float> %8753, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8755 = add <4 x i32> %8649, %t2839
  %8756 = sext <4 x i32> %8755 to <4 x i64>
  %8757 = extractelement <4 x i64> %8756, i64 0
  %8758 = getelementptr inbounds float, ptr %f4.host, i64 %8757
  %8759 = load float, ptr %8758, align 4, !tbaa !44
  %8760 = insertelement <4 x float> undef, float %8759, i64 0
  %8761 = extractelement <4 x i64> %8756, i64 1
  %8762 = getelementptr inbounds float, ptr %f4.host, i64 %8761
  %8763 = load float, ptr %8762, align 4, !tbaa !44
  %8764 = insertelement <4 x float> %8760, float %8763, i64 1
  %8765 = extractelement <4 x i64> %8756, i64 2
  %8766 = getelementptr inbounds float, ptr %f4.host, i64 %8765
  %8767 = load float, ptr %8766, align 4, !tbaa !44
  %8768 = insertelement <4 x float> %8764, float %8767, i64 2
  %8769 = extractelement <4 x i64> %8756, i64 3
  %8770 = getelementptr inbounds float, ptr %f4.host, i64 %8769
  %8771 = load float, ptr %8770, align 4, !tbaa !44
  %8772 = insertelement <4 x float> %8768, float %8771, i64 3
  %8773 = fmul <4 x float> %8772, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8774 = fadd <4 x float> %8754, %8773
  %8775 = fmul <4 x float> %8774, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8776 = fadd <4 x float> %8735, %8775
  %8777 = add nsw <4 x i32> %t2835, <i32 256, i32 256, i32 256, i32 256>
  %8778 = sext <4 x i32> %8777 to <4 x i64>
  %8779 = extractelement <4 x i64> %8778, i64 0
  %8780 = getelementptr inbounds float, ptr %f0.host, i64 %8779
  %8781 = load float, ptr %8780, align 4, !tbaa !6
  %8782 = insertelement <4 x float> undef, float %8781, i64 0
  %8783 = extractelement <4 x i64> %8778, i64 1
  %8784 = getelementptr inbounds float, ptr %f0.host, i64 %8783
  %8785 = load float, ptr %8784, align 4, !tbaa !6
  %8786 = insertelement <4 x float> %8782, float %8785, i64 1
  %8787 = extractelement <4 x i64> %8778, i64 2
  %8788 = getelementptr inbounds float, ptr %f0.host, i64 %8787
  %8789 = load float, ptr %8788, align 4, !tbaa !6
  %8790 = insertelement <4 x float> %8786, float %8789, i64 2
  %8791 = extractelement <4 x i64> %8778, i64 3
  %8792 = getelementptr inbounds float, ptr %f0.host, i64 %8791
  %8793 = load float, ptr %8792, align 4, !tbaa !6
  %8794 = insertelement <4 x float> %8790, float %8793, i64 3
  %8795 = fsub <4 x float> %t2803, %t2831
  %8796 = fmul <4 x float> %3303, %8795
  %8797 = fadd <4 x float> %t2831, %8796
  %8798 = fadd <4 x float> %8797, %8794
  %8799 = fsub <4 x float> %8798, %8776
  %8800 = fsub <4 x float> %t2830, %t2805
  %8801 = fadd <4 x float> %8800, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8802 = fmul <4 x float> %8801, %8799
  %8803 = fadd <4 x float> %8695, %8802
  %8804 = add nsw i64 %3326, %8555
  %8805 = getelementptr inbounds float, ptr %222, i64 %8804
  %8806 = load <4 x float>, ptr %8805, align 4, !tbaa !70
  %8807 = fmul <4 x float> %8806, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8808 = add nsw i64 %3329, %8555
  %8809 = getelementptr inbounds float, ptr %222, i64 %8808
  %8810 = load <4 x float>, ptr %8809, align 4, !tbaa !70
  %8811 = fmul <4 x float> %8810, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8812 = fadd <4 x float> %8807, %8811
  %8813 = fmul <4 x float> %8812, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8814 = add nsw i64 %3326, %8566
  %8815 = getelementptr inbounds float, ptr %222, i64 %8814
  %8816 = load <4 x float>, ptr %8815, align 4, !tbaa !70
  %8817 = fmul <4 x float> %8816, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %8818 = add nsw i64 %3329, %8566
  %8819 = getelementptr inbounds float, ptr %222, i64 %8818
  %8820 = load <4 x float>, ptr %8819, align 4, !tbaa !70
  %8821 = fmul <4 x float> %8820, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8822 = fadd <4 x float> %8817, %8821
  %8823 = fmul <4 x float> %8822, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %8824 = fadd <4 x float> %8813, %8823
  %8825 = fadd <4 x float> %8803, %8824
  %8826 = shufflevector <4 x float> %8578, <4 x float> %8825, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %8827 = getelementptr inbounds float, ptr %7746, i64 %3332
  store <8 x float> %8826, ptr %8827, align 4, !tbaa !72
  br label %"consume f12583"

"consume f12583":                                 ; preds = %"for f125.s0.v3.v380.preheader", %"end for f125.s0.v3.v378"
  br i1 %3343, label %"for local_laplacian.s0.v3.v384.preheader", label %"end for local_laplacian.s0.v3.v385", !prof !5

"for local_laplacian.s0.v3.v384.preheader":       ; preds = %"consume f12583"
  %8828 = add nsw i64 %3105, %indvars.iv323
  %8829 = mul nsw i64 %8828, %3104
  %8830 = sub i64 %8829, %8
  %8831 = trunc i64 %3411 to i32
  %8832 = mul i32 %input.stride.1, %8831
  br label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v384":                 ; preds = %"for local_laplacian.s0.v3.v384.preheader", %"end for local_laplacian.s0.v589"
  %local_laplacian.s0.v3.v386 = phi i32 [ %8908, %"end for local_laplacian.s0.v589" ], [ 0, %"for local_laplacian.s0.v3.v384.preheader" ]
  br i1 %3344, label %"for local_laplacian.s0.v588.preheader", label %"end for local_laplacian.s0.v589", !prof !5

"for local_laplacian.s0.v588.preheader":          ; preds = %"for local_laplacian.s0.v3.v384"
  %8833 = shl nsw i32 %local_laplacian.s0.v3.v386, 3
  %a1013 = add nsw i32 %8833, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base87 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1013)
  %8834 = sext i32 %local_laplacian.s0.v3.v277.base87 to i64
  %8835 = add i64 %lsr.iv349, %8834
  %scevgep351 = getelementptr i16, ptr %local_laplacian.host, i64 %8835
  %8836 = add i64 %8830, %8834
  %8837 = getelementptr inbounds float, ptr %f2.host, i64 %8836
  %8838 = load <8 x float>, ptr %8837, align 4, !tbaa !42
  %8839 = fadd <8 x float> %8838, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8840 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base87, i64 0
  %8841 = shufflevector <8 x i32> %8840, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1019 = add nsw <8 x i32> %8841, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1018 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1019)
  %8842 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1018, <8 x i32> %b1020.pre-phi)
  %8843 = sub nsw i64 %8834, %.pre-phi336
  %8844 = getelementptr inbounds float, ptr %7746, i64 %8843
  %8845 = load <8 x float>, ptr %8844, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v3.v385":             ; preds = %"end for local_laplacian.s0.v589", %"consume f12583"
  br i1 %.not176, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390.preheader", !prof !4

"for local_laplacian.s0.v3.v390.preheader":       ; preds = %"end for local_laplacian.s0.v3.v385"
  %8846 = sub nsw i64 %3411, %10
  %8847 = mul nsw i64 %8846, %3104
  %8848 = sub i64 %8847, %8
  %8849 = mul nsw i64 %3411, %53
  %8850 = sub i64 %8849, %3161
  %8851 = add i64 %lsr.iv367, %3351
  %8852 = add i64 %lsr.iv374, %3352
  %8853 = add nsw i64 %3105, %indvars.iv323
  %8854 = mul nsw i64 %8853, %3104
  %8855 = sub i64 %8854, %8
  %8856 = add i64 %lsr.iv367, %3354
  br label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v588":                    ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v588.preheader"
  %lsr.iv352 = phi ptr [ %scevgep351, %"for local_laplacian.s0.v588.preheader" ], [ %scevgep354, %"for local_laplacian.s0.v588" ]
  %lsr.iv347 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v588.preheader" ], [ %lsr.iv.next348, %"for local_laplacian.s0.v588" ]
  %a1017 = phi i32 [ %b1028, %"for local_laplacian.s0.v588.preheader" ], [ %8907, %"for local_laplacian.s0.v588" ]
  %a1016 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1017)
  %8857 = tail call i32 @llvm.smax.i32(i32 %a1016, i32 %b1146)
  %8858 = mul nsw i32 %8857, %input.stride.2
  %.scalar327 = add i32 %8858, %8832
  %.scalar328 = sub i32 %.scalar327, %.pre-phi351
  %8859 = insertelement <8 x i32> undef, i32 %.scalar328, i64 0
  %8860 = shufflevector <8 x i32> %8859, <8 x i32> poison, <8 x i32> zeroinitializer
  %8861 = add <8 x i32> %8860, %8842
  %8862 = shufflevector <8 x i32> %8861, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8863 = sext <4 x i32> %8862 to <4 x i64>
  %8864 = extractelement <4 x i64> %8863, i64 0
  %8865 = getelementptr inbounds i16, ptr %input.host, i64 %8864
  %8866 = load i16, ptr %8865, align 2, !tbaa !40
  %8867 = insertelement <8 x i16> undef, i16 %8866, i64 0
  %8868 = extractelement <4 x i64> %8863, i64 1
  %8869 = getelementptr inbounds i16, ptr %input.host, i64 %8868
  %8870 = load i16, ptr %8869, align 2, !tbaa !40
  %8871 = insertelement <8 x i16> %8867, i16 %8870, i64 1
  %8872 = extractelement <4 x i64> %8863, i64 2
  %8873 = getelementptr inbounds i16, ptr %input.host, i64 %8872
  %8874 = load i16, ptr %8873, align 2, !tbaa !40
  %8875 = insertelement <8 x i16> %8871, i16 %8874, i64 2
  %8876 = extractelement <4 x i64> %8863, i64 3
  %8877 = getelementptr inbounds i16, ptr %input.host, i64 %8876
  %8878 = load i16, ptr %8877, align 2, !tbaa !40
  %8879 = insertelement <8 x i16> %8875, i16 %8878, i64 3
  %8880 = shufflevector <8 x i32> %8861, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8881 = sext <4 x i32> %8880 to <4 x i64>
  %8882 = extractelement <4 x i64> %8881, i64 0
  %8883 = getelementptr inbounds i16, ptr %input.host, i64 %8882
  %8884 = load i16, ptr %8883, align 2, !tbaa !40
  %8885 = insertelement <8 x i16> %8879, i16 %8884, i64 4
  %8886 = extractelement <4 x i64> %8881, i64 1
  %8887 = getelementptr inbounds i16, ptr %input.host, i64 %8886
  %8888 = load i16, ptr %8887, align 2, !tbaa !40
  %8889 = insertelement <8 x i16> %8885, i16 %8888, i64 5
  %8890 = extractelement <4 x i64> %8881, i64 2
  %8891 = getelementptr inbounds i16, ptr %input.host, i64 %8890
  %8892 = load i16, ptr %8891, align 2, !tbaa !40
  %8893 = insertelement <8 x i16> %8889, i16 %8892, i64 6
  %8894 = extractelement <4 x i64> %8881, i64 3
  %8895 = getelementptr inbounds i16, ptr %input.host, i64 %8894
  %8896 = load i16, ptr %8895, align 2, !tbaa !40
  %8897 = insertelement <8 x i16> %8893, i16 %8896, i64 7
  %8898 = uitofp <8 x i16> %8897 to <8 x float>
  %8899 = fmul <8 x float> %8898, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8900 = fadd <8 x float> %8899, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8901 = fmul <8 x float> %8845, %8900
  %a1015 = fdiv <8 x float> %8901, %8839
  %8902 = fcmp olt <8 x float> %a1015, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1014 = select <8 x i1> %8902, <8 x float> %a1015, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8903 = fcmp ogt <8 x float> %a1014, zeroinitializer
  %8904 = fmul <8 x float> %a1014, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8905 = select <8 x i1> %8903, <8 x float> %8904, <8 x float> zeroinitializer
  %8906 = fptoui <8 x float> %8905 to <8 x i16>
  store <8 x i16> %8906, ptr %lsr.iv352, align 2, !tbaa !74
  %8907 = add nsw i32 %a1017, 1
  %lsr.iv.next348 = add i32 %lsr.iv347, -1
  %scevgep354 = getelementptr i1, ptr %lsr.iv352, i64 %3103
  %.not114 = icmp eq i32 %lsr.iv.next348, 0
  br i1 %.not114, label %"end for local_laplacian.s0.v589", label %"for local_laplacian.s0.v588"

"end for local_laplacian.s0.v589":                ; preds = %"for local_laplacian.s0.v588", %"for local_laplacian.s0.v3.v384"
  %8908 = add nuw nsw i32 %local_laplacian.s0.v3.v386, 1
  %.not113 = icmp eq i32 %8908, %local_laplacian.s0.v3.v3.prologue
  br i1 %.not113, label %"end for local_laplacian.s0.v3.v385", label %"for local_laplacian.s0.v3.v384"

"for local_laplacian.s0.v3.v390":                 ; preds = %"for local_laplacian.s0.v3.v390.preheader", %"end for local_laplacian.s0.v5100"
  %local_laplacian.s0.v3.v392 = phi i32 [ %8983, %"end for local_laplacian.s0.v5100" ], [ %local_laplacian.s0.v3.v3.prologue, %"for local_laplacian.s0.v3.v390.preheader" ]
  %8909 = shl nsw i32 %local_laplacian.s0.v3.v392, 3
  %a1020 = add nsw i32 %8909, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base93 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1020)
  br i1 %3345, label %"for local_laplacian.s0.v594.preheader", label %"end for local_laplacian.s0.v595", !prof !5

"for local_laplacian.s0.v594.preheader":          ; preds = %"for local_laplacian.s0.v3.v390"
  %8910 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8911 = add i64 %lsr.iv349, %8910
  %scevgep360 = getelementptr i16, ptr %local_laplacian.host, i64 %8911
  %8912 = add i64 %8848, %8910
  %8913 = getelementptr inbounds float, ptr %f2.host, i64 %8912
  %8914 = load <8 x float>, ptr %8913, align 4, !tbaa !42
  %8915 = fadd <8 x float> %8914, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8916 = add i64 %8850, %8910
  %8917 = sub nsw i64 %8910, %.pre-phi336
  %8918 = getelementptr inbounds float, ptr %7746, i64 %8917
  %8919 = load <8 x float>, ptr %8918, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v3.v391":             ; preds = %"end for local_laplacian.s0.v5100", %"end for local_laplacian.s0.v3.v385"
  br i1 %3355, label %"for local_laplacian.s0.v3.v3102.preheader", label %if.then.i268, !prof !5

"for local_laplacian.s0.v3.v3102.preheader":      ; preds = %"end for local_laplacian.s0.v3.v391"
  %8920 = add nsw i64 %3105, %indvars.iv323
  %8921 = mul nsw i64 %8920, %3104
  %8922 = sub i64 %8921, %8
  %8923 = trunc i64 %3411 to i32
  %8924 = mul i32 %input.stride.1, %8923
  br label %"for local_laplacian.s0.v3.v3102"

"for local_laplacian.s0.v594":                    ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v594.preheader"
  %lsr.iv361 = phi ptr [ %scevgep360, %"for local_laplacian.s0.v594.preheader" ], [ %scevgep363, %"for local_laplacian.s0.v594" ]
  %lsr.iv356 = phi i64 [ %69, %"for local_laplacian.s0.v594.preheader" ], [ %lsr.iv.next357, %"for local_laplacian.s0.v594" ]
  %a1029 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv356)
  %8925 = tail call i64 @llvm.smax.i64(i64 %a1029, i64 %b1037)
  %8926 = mul nsw i64 %8925, %55
  %8927 = add i64 %8916, %8926
  %8928 = getelementptr inbounds i16, ptr %input.host, i64 %8927
  %8929 = load <8 x i16>, ptr %8928, align 2, !tbaa !40
  %8930 = uitofp <8 x i16> %8929 to <8 x float>
  %8931 = fmul <8 x float> %8930, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8932 = fadd <8 x float> %8931, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8933 = fmul <8 x float> %8919, %8932
  %a1028 = fdiv <8 x float> %8933, %8915
  %8934 = fcmp olt <8 x float> %a1028, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1027 = select <8 x i1> %8934, <8 x float> %a1028, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8935 = fcmp ogt <8 x float> %a1027, zeroinitializer
  %8936 = fmul <8 x float> %a1027, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8937 = select <8 x i1> %8935, <8 x float> %8936, <8 x float> zeroinitializer
  %8938 = fptoui <8 x float> %8937 to <8 x i16>
  store <8 x i16> %8938, ptr %lsr.iv361, align 2, !tbaa !74
  %lsr.iv.next357 = add nsw i64 %lsr.iv356, 1
  %tmp358 = trunc i64 %lsr.iv.next357 to i32
  %scevgep363 = getelementptr i1, ptr %lsr.iv361, i64 %3103
  %.not112 = icmp eq i32 %local_laplacian.s0.v5.prologue, %tmp358
  br i1 %.not112, label %"end for local_laplacian.s0.v595", label %"for local_laplacian.s0.v594"

"end for local_laplacian.s0.v595":                ; preds = %"for local_laplacian.s0.v594", %"for local_laplacian.s0.v3.v390"
  br i1 %3346, label %"for local_laplacian.s0.v596.preheader", label %"end for local_laplacian.s0.v597", !prof !5

"for local_laplacian.s0.v596.preheader":          ; preds = %"end for local_laplacian.s0.v595"
  %8939 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8940 = add i64 %8851, %8939
  %scevgep369 = getelementptr i16, ptr %local_laplacian.host, i64 %8940
  %8941 = add i64 %8852, %8939
  %scevgep376 = getelementptr i16, ptr %input.host, i64 %8941
  %8942 = add i64 %8855, %8939
  %8943 = getelementptr inbounds float, ptr %f2.host, i64 %8942
  %8944 = load <8 x float>, ptr %8943, align 4, !tbaa !42
  %8945 = fadd <8 x float> %8944, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8946 = sub nsw i64 %8939, %.pre-phi336
  %8947 = getelementptr inbounds float, ptr %7746, i64 %8946
  %8948 = load <8 x float>, ptr %8947, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v596"

"for local_laplacian.s0.v596":                    ; preds = %"for local_laplacian.s0.v596", %"for local_laplacian.s0.v596.preheader"
  %lsr.iv377 = phi ptr [ %scevgep376, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep379, %"for local_laplacian.s0.v596" ]
  %lsr.iv370 = phi ptr [ %scevgep369, %"for local_laplacian.s0.v596.preheader" ], [ %scevgep372, %"for local_laplacian.s0.v596" ]
  %lsr.iv365 = phi i32 [ %3349, %"for local_laplacian.s0.v596.preheader" ], [ %lsr.iv.next366, %"for local_laplacian.s0.v596" ]
  %8949 = load <8 x i16>, ptr %lsr.iv377, align 2, !tbaa !40
  %8950 = uitofp <8 x i16> %8949 to <8 x float>
  %8951 = fmul <8 x float> %8950, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8952 = fadd <8 x float> %8951, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8953 = fmul <8 x float> %8948, %8952
  %a1032 = fdiv <8 x float> %8953, %8945
  %8954 = fcmp olt <8 x float> %a1032, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1031 = select <8 x i1> %8954, <8 x float> %a1032, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8955 = fcmp ogt <8 x float> %a1031, zeroinitializer
  %8956 = fmul <8 x float> %a1031, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8957 = select <8 x i1> %8955, <8 x float> %8956, <8 x float> zeroinitializer
  %8958 = fptoui <8 x float> %8957 to <8 x i16>
  store <8 x i16> %8958, ptr %lsr.iv370, align 2, !tbaa !74
  %lsr.iv.next366 = add i32 %lsr.iv365, -1
  %scevgep372 = getelementptr i1, ptr %lsr.iv370, i64 %3103
  %scevgep379 = getelementptr i1, ptr %lsr.iv377, i64 %3163
  %.not111 = icmp eq i32 %lsr.iv.next366, 0
  br i1 %.not111, label %"end for local_laplacian.s0.v597", label %"for local_laplacian.s0.v596"

"end for local_laplacian.s0.v597":                ; preds = %"for local_laplacian.s0.v596", %"end for local_laplacian.s0.v595"
  br i1 %3347, label %"for local_laplacian.s0.v599.preheader", label %"end for local_laplacian.s0.v5100", !prof !5

"for local_laplacian.s0.v599.preheader":          ; preds = %"end for local_laplacian.s0.v597"
  %8959 = sext i32 %local_laplacian.s0.v3.v277.base93 to i64
  %8960 = add i64 %8856, %8959
  %scevgep385 = getelementptr i16, ptr %local_laplacian.host, i64 %8960
  %8961 = add i64 %8848, %8959
  %8962 = getelementptr inbounds float, ptr %f2.host, i64 %8961
  %8963 = load <8 x float>, ptr %8962, align 4, !tbaa !42
  %8964 = fadd <8 x float> %8963, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8965 = add i64 %8850, %8959
  %8966 = sub nsw i64 %8959, %.pre-phi336
  %8967 = getelementptr inbounds float, ptr %7746, i64 %8966
  %8968 = load <8 x float>, ptr %8967, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v599"

"for local_laplacian.s0.v599":                    ; preds = %"for local_laplacian.s0.v599", %"for local_laplacian.s0.v599.preheader"
  %lsr.iv386 = phi ptr [ %scevgep385, %"for local_laplacian.s0.v599.preheader" ], [ %scevgep388, %"for local_laplacian.s0.v599" ]
  %lsr.iv381 = phi i64 [ %3353, %"for local_laplacian.s0.v599.preheader" ], [ %lsr.iv.next382, %"for local_laplacian.s0.v599" ]
  %a1035 = tail call i64 @llvm.smin.i64(i64 %b1032, i64 %lsr.iv381)
  %8969 = tail call i64 @llvm.smax.i64(i64 %a1035, i64 %b1037)
  %8970 = mul nsw i64 %8969, %55
  %8971 = add i64 %8965, %8970
  %8972 = getelementptr inbounds i16, ptr %input.host, i64 %8971
  %8973 = load <8 x i16>, ptr %8972, align 2, !tbaa !40
  %8974 = uitofp <8 x i16> %8973 to <8 x float>
  %8975 = fmul <8 x float> %8974, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %8976 = fadd <8 x float> %8975, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8977 = fmul <8 x float> %8968, %8976
  %a1034 = fdiv <8 x float> %8977, %8964
  %8978 = fcmp olt <8 x float> %a1034, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1033 = select <8 x i1> %8978, <8 x float> %a1034, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8979 = fcmp ogt <8 x float> %a1033, zeroinitializer
  %8980 = fmul <8 x float> %a1033, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %8981 = select <8 x i1> %8979, <8 x float> %8980, <8 x float> zeroinitializer
  %8982 = fptoui <8 x float> %8981 to <8 x i16>
  store <8 x i16> %8982, ptr %lsr.iv386, align 2, !tbaa !74
  %lsr.iv.next382 = add nsw i64 %lsr.iv381, 1
  %tmp383 = trunc i64 %lsr.iv.next382 to i32
  %scevgep388 = getelementptr i1, ptr %lsr.iv386, i64 %3103
  %.not110 = icmp eq i32 %3164, %tmp383
  br i1 %.not110, label %"end for local_laplacian.s0.v5100", label %"for local_laplacian.s0.v599"

"end for local_laplacian.s0.v5100":               ; preds = %"for local_laplacian.s0.v599", %"end for local_laplacian.s0.v597"
  %8983 = add nsw i32 %local_laplacian.s0.v3.v392, 1
  %.not109 = icmp eq i32 %8983, %local_laplacian.s0.v3.v3.epilogue
  br i1 %.not109, label %"end for local_laplacian.s0.v3.v391", label %"for local_laplacian.s0.v3.v390"

"for local_laplacian.s0.v3.v3102":                ; preds = %"for local_laplacian.s0.v3.v3102.preheader", %"end for local_laplacian.s0.v5107"
  %local_laplacian.s0.v3.v3104 = phi i32 [ %9048, %"end for local_laplacian.s0.v5107" ], [ %local_laplacian.s0.v3.v3.epilogue, %"for local_laplacian.s0.v3.v3102.preheader" ]
  br i1 %3344, label %"for local_laplacian.s0.v5106.preheader", label %"end for local_laplacian.s0.v5107", !prof !5

"for local_laplacian.s0.v5106.preheader":         ; preds = %"for local_laplacian.s0.v3.v3102"
  %8984 = shl nsw i32 %local_laplacian.s0.v3.v3104, 3
  %a1037 = add nsw i32 %8984, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base105 = tail call i32 @llvm.smin.i32(i32 %b816, i32 %a1037)
  %8985 = sext i32 %local_laplacian.s0.v3.v277.base105 to i64
  %8986 = add i64 %lsr.iv349, %8985
  %scevgep392 = getelementptr i16, ptr %local_laplacian.host, i64 %8986
  %8987 = add i64 %8922, %8985
  %8988 = getelementptr inbounds float, ptr %f2.host, i64 %8987
  %8989 = load <8 x float>, ptr %8988, align 4, !tbaa !42
  %8990 = fadd <8 x float> %8989, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %8991 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base105, i64 0
  %8992 = shufflevector <8 x i32> %8991, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1043 = add nsw <8 x i32> %8992, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1042 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1021.pre-phi, <8 x i32> %a1043)
  %8993 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1042, <8 x i32> %b1020.pre-phi)
  %8994 = sub nsw i64 %8985, %.pre-phi336
  %8995 = getelementptr inbounds float, ptr %7746, i64 %8994
  %8996 = load <8 x float>, ptr %8995, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5106"

if.then.i268:                                     ; preds = %"end for local_laplacian.s0.v5107", %"end for local_laplacian.s0.v3.v391"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %7746) #7
  %indvars.iv.next324 = add nuw nsw i64 %indvars.iv323, 1
  %lsr.iv.next320 = xor i1 %lsr.iv319, true
  %lsr.iv.next330 = add i32 %lsr.iv329, %3143
  %lsr.iv.next350 = add i64 %lsr.iv349, %73
  %lsr.iv.next368 = add i64 %lsr.iv367, %73
  %lsr.iv.next375 = add i64 %lsr.iv374, %53
  %.not106 = icmp eq i64 %indvars.iv.next324, 64
  br i1 %.not106, label %if.then.i265, label %"produce f12919"

"for local_laplacian.s0.v5106":                   ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v5106.preheader"
  %lsr.iv393 = phi ptr [ %scevgep392, %"for local_laplacian.s0.v5106.preheader" ], [ %scevgep395, %"for local_laplacian.s0.v5106" ]
  %lsr.iv390 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5106.preheader" ], [ %lsr.iv.next391, %"for local_laplacian.s0.v5106" ]
  %a1041 = phi i32 [ %b1028, %"for local_laplacian.s0.v5106.preheader" ], [ %9047, %"for local_laplacian.s0.v5106" ]
  %a1040 = tail call i32 @llvm.smin.i32(i32 %b1019.pre-phi, i32 %a1041)
  %8997 = tail call i32 @llvm.smax.i32(i32 %a1040, i32 %b1146)
  %8998 = mul nsw i32 %8997, %input.stride.2
  %.scalar329 = add i32 %8998, %8924
  %.scalar330 = sub i32 %.scalar329, %.pre-phi351
  %8999 = insertelement <8 x i32> undef, i32 %.scalar330, i64 0
  %9000 = shufflevector <8 x i32> %8999, <8 x i32> poison, <8 x i32> zeroinitializer
  %9001 = add <8 x i32> %9000, %8993
  %9002 = shufflevector <8 x i32> %9001, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9003 = sext <4 x i32> %9002 to <4 x i64>
  %9004 = extractelement <4 x i64> %9003, i64 0
  %9005 = getelementptr inbounds i16, ptr %input.host, i64 %9004
  %9006 = load i16, ptr %9005, align 2, !tbaa !40
  %9007 = insertelement <8 x i16> undef, i16 %9006, i64 0
  %9008 = extractelement <4 x i64> %9003, i64 1
  %9009 = getelementptr inbounds i16, ptr %input.host, i64 %9008
  %9010 = load i16, ptr %9009, align 2, !tbaa !40
  %9011 = insertelement <8 x i16> %9007, i16 %9010, i64 1
  %9012 = extractelement <4 x i64> %9003, i64 2
  %9013 = getelementptr inbounds i16, ptr %input.host, i64 %9012
  %9014 = load i16, ptr %9013, align 2, !tbaa !40
  %9015 = insertelement <8 x i16> %9011, i16 %9014, i64 2
  %9016 = extractelement <4 x i64> %9003, i64 3
  %9017 = getelementptr inbounds i16, ptr %input.host, i64 %9016
  %9018 = load i16, ptr %9017, align 2, !tbaa !40
  %9019 = insertelement <8 x i16> %9015, i16 %9018, i64 3
  %9020 = shufflevector <8 x i32> %9001, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9021 = sext <4 x i32> %9020 to <4 x i64>
  %9022 = extractelement <4 x i64> %9021, i64 0
  %9023 = getelementptr inbounds i16, ptr %input.host, i64 %9022
  %9024 = load i16, ptr %9023, align 2, !tbaa !40
  %9025 = insertelement <8 x i16> %9019, i16 %9024, i64 4
  %9026 = extractelement <4 x i64> %9021, i64 1
  %9027 = getelementptr inbounds i16, ptr %input.host, i64 %9026
  %9028 = load i16, ptr %9027, align 2, !tbaa !40
  %9029 = insertelement <8 x i16> %9025, i16 %9028, i64 5
  %9030 = extractelement <4 x i64> %9021, i64 2
  %9031 = getelementptr inbounds i16, ptr %input.host, i64 %9030
  %9032 = load i16, ptr %9031, align 2, !tbaa !40
  %9033 = insertelement <8 x i16> %9029, i16 %9032, i64 6
  %9034 = extractelement <4 x i64> %9021, i64 3
  %9035 = getelementptr inbounds i16, ptr %input.host, i64 %9034
  %9036 = load i16, ptr %9035, align 2, !tbaa !40
  %9037 = insertelement <8 x i16> %9033, i16 %9036, i64 7
  %9038 = uitofp <8 x i16> %9037 to <8 x float>
  %9039 = fmul <8 x float> %9038, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %9040 = fadd <8 x float> %9039, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %9041 = fmul <8 x float> %8996, %9040
  %a1039 = fdiv <8 x float> %9041, %8990
  %9042 = fcmp olt <8 x float> %a1039, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1038 = select <8 x i1> %9042, <8 x float> %a1039, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9043 = fcmp ogt <8 x float> %a1038, zeroinitializer
  %9044 = fmul <8 x float> %a1038, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %9045 = select <8 x i1> %9043, <8 x float> %9044, <8 x float> zeroinitializer
  %9046 = fptoui <8 x float> %9045 to <8 x i16>
  store <8 x i16> %9046, ptr %lsr.iv393, align 2, !tbaa !74
  %9047 = add nsw i32 %a1041, 1
  %lsr.iv.next391 = add i32 %lsr.iv390, -1
  %scevgep395 = getelementptr i1, ptr %lsr.iv393, i64 %3103
  %.not108 = icmp eq i32 %lsr.iv.next391, 0
  br i1 %.not108, label %"end for local_laplacian.s0.v5107", label %"for local_laplacian.s0.v5106"

"end for local_laplacian.s0.v5107":               ; preds = %"for local_laplacian.s0.v5106", %"for local_laplacian.s0.v3.v3102"
  %9048 = add nsw i32 %local_laplacian.s0.v3.v3104, 1
  %.not107 = icmp eq i32 %9048, %3100
  br i1 %.not107, label %if.then.i268, label %"for local_laplacian.s0.v3.v3102"

"assert failed112":                               ; preds = %false_bb
  %9049 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.28, i64 %120, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded113":                            ; preds = %false_bb
  %9050 = add nuw nsw i64 %120, 4
  %9051 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9050)
  %.not76 = icmp eq ptr %9051, null
  br i1 %.not76, label %"assert failed114", label %"assert succeeded115", !prof !4

"assert failed114":                               ; preds = %"assert succeeded113"
  %9052 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded115":                            ; preds = %"assert succeeded113"
  %a1055 = add nsw i32 %a1120, -6
  %b1057 = add nsw i32 %95, -23
  %9053 = tail call i32 @llvm.smin.i32(i32 %b1057, i32 %a1055)
  %9054 = ashr i32 %9053, 3
  %a1054 = add nsw i32 %9054, -1
  %b1056 = ashr i32 %96, 3
  %.not160 = icmp slt i32 %b1056, %9054
  %f128.v3.min_realized117 = select i1 %.not160, i32 %b1056, i32 %a1054
  %9055 = ashr i32 %a1055, 2
  %9056 = add nsw i32 %95, 5
  %9057 = ashr i32 %9056, 2
  %9058 = sub nsw i32 %9057, %9055
  %9059 = lshr i32 %9058, 3
  %9060 = and i32 %9058, -8
  %a1061 = add nsw i32 %9060, %9055
  %b1063 = ashr i32 %b1057, 2
  %9061 = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %a1061)
  %9062 = add nsw i32 %9061, 9
  %a1060 = ashr i32 %9062, 1
  %b1062 = add nsw i32 %104, 7
  %9063 = tail call i32 @llvm.smax.i32(i32 %a1060, i32 %b1062)
  %f128.v3.extent_realized.s118 = sub nsw i32 %9063, %f128.v3.min_realized117
  %t3094 = and i32 %113, 7
  %9064 = add nuw nsw i32 %t3094, 99
  %9065 = lshr i32 %9064, 3
  %9066 = zext i32 %9065 to i64
  %9067 = add nsw i32 %f128.v3.extent_realized.s118, 1
  %9068 = zext i32 %9067 to i64
  %9069 = shl nuw nsw i64 %9068, 2
  %9070 = mul nuw nsw i64 %9069, %9066
  %9071 = icmp ult i64 %9070, 2147483648
  br i1 %9071, label %"assert succeeded120", label %"assert failed119", !prof !5

"assert failed119":                               ; preds = %"assert succeeded115"
  %9072 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.29, i64 %9070, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded120":                            ; preds = %"assert succeeded115"
  %9073 = add nuw nsw i64 %9070, 4
  %9074 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9073)
  %.not77 = icmp eq ptr %9074, null
  br i1 %.not77, label %"assert failed121", label %"assert succeeded122", !prof !4

"assert failed121":                               ; preds = %"assert succeeded120"
  %9075 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded122":                            ; preds = %"assert succeeded120"
  %9076 = ashr i32 %local_laplacian.s0.v4.v4.base, 1
  %a1064 = add nsw i32 %9076, -1
  %9077 = add nsw i32 %local_laplacian.s0.v4.v4.base, 3
  %b1066 = ashr i32 %9077, 1
  %.not161 = icmp slt i32 %b1066, %9076
  %9078 = select i1 %.not161, i32 %b1066, i32 %a1064
  %9079 = ashr i32 %9078, 1
  %a1063 = add nsw i32 %9079, -1
  %9080 = add nsw i32 %local_laplacian.s0.v4.v4.base, -6
  %b1065 = ashr i32 %9080, 2
  %.not162 = icmp slt i32 %b1065, %9079
  %f127.v4.min_realized124 = select i1 %.not162, i32 %b1065, i32 %a1063
  %9081 = ashr i32 %a1120, 1
  %a1066 = add nsw i32 %9081, -1
  %9082 = add nsw i32 %95, -13
  %b1068 = ashr i32 %9082, 1
  %.not163 = icmp slt i32 %b1068, %9081
  %9083 = select i1 %.not163, i32 %b1068, i32 %a1066
  %9084 = ashr i32 %9083, 1
  %a1065 = add nsw i32 %9084, -1
  %b1067 = ashr i32 %9053, 2
  %.not164 = icmp slt i32 %b1067, %9084
  %f127.v3.min_realized125 = select i1 %.not164, i32 %b1067, i32 %a1065
  %9085 = add nsw i32 %95, 1
  %9086 = ashr i32 %9085, 1
  %9087 = sub nsw i32 %9086, %9081
  %9088 = add nsw i32 %9087, 1
  %9089 = and i32 %9088, -8
  %9090 = add nsw i32 %9089, %9081
  %a1072 = add nsw i32 %9090, -1
  %.not165 = icmp slt i32 %b1068, %9090
  %9091 = select i1 %.not165, i32 %b1068, i32 %a1072
  %9092 = add nsw i32 %9091, 9
  %a1071 = ashr i32 %9092, 1
  %b1073 = add nsw i32 %9061, 7
  %9093 = tail call i32 @llvm.smax.i32(i32 %a1071, i32 %b1073)
  %f127.v3.extent_realized.s126 = sub nsw i32 %9093, %f127.v3.min_realized125
  %9094 = add nsw i32 %local_laplacian.s0.v4.v4.base, 69
  %9095 = ashr i32 %9094, 2
  %t3095 = add nsw i32 %9095, 1
  %9096 = sub nsw i32 %t3095, %f127.v4.min_realized124
  %9097 = zext i32 %9096 to i64
  %9098 = add nsw i32 %f127.v3.extent_realized.s126, 1
  %9099 = zext i32 %9098 to i64
  %9100 = shl nuw nsw i64 %9099, 2
  %9101 = mul i64 %9100, %9097
  %9102 = icmp ult i64 %9101, 2147483648
  %9103 = and i64 %9100, 4294967292
  %9104 = mul nuw i64 %9103, %9097
  %9105 = lshr i64 %9104, 32
  %9106 = lshr i64 %9099, 30
  %9107 = mul nuw nsw i64 %9106, %9097
  %9108 = add nuw nsw i64 %9105, %9107
  %9109 = icmp ult i64 %9108, 4294967296
  %9110 = and i1 %9102, %9109
  br i1 %9110, label %"assert succeeded128", label %"assert failed127", !prof !5

"assert failed127":                               ; preds = %"assert succeeded122"
  %9111 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.30, i64 %9101, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded128":                            ; preds = %"assert succeeded122"
  %9112 = add nuw nsw i64 %9101, 4
  %9113 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9112)
  %.not268 = icmp eq ptr %9113, null
  br i1 %.not268, label %"assert failed129", label %"assert succeeded130", !prof !4

"assert failed129":                               ; preds = %"assert succeeded128"
  %9114 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"assert succeeded130":                            ; preds = %"assert succeeded128"
  %b1078 = add nsw i32 %95, -8
  %9115 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1120)
  %9116 = ashr i32 %9115, 1
  %a1075 = add nsw i32 %9116, -1
  %.not166 = icmp slt i32 %9083, %9116
  %f126.v3.min_realized133 = select i1 %.not166, i32 %9083, i32 %a1075
  %9117 = sub nsw i32 %95, %a1120
  %9118 = add nsw i32 %9117, -1
  %9119 = and i32 %9118, -8
  %a1082 = add nsw i32 %9119, %a1120
  %9120 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1082)
  %9121 = add nsw i32 %9120, 9
  %a1081 = ashr i32 %9121, 1
  %b1083 = add nsw i32 %9091, 7
  %9122 = tail call i32 @llvm.smax.i32(i32 %a1081, i32 %b1083)
  %f126.v3.extent_realized.s134 = sub nsw i32 %9122, %f126.v3.min_realized133
  %9123 = add nsw i32 %local_laplacian.s0.v4.v4.base, 65
  %9124 = ashr i32 %9123, 1
  %t3096 = add nsw i32 %9124, 1
  %9125 = sub i32 %t3096, %9078
  %9126 = zext i32 %9125 to i64
  %9127 = add nsw i32 %f126.v3.extent_realized.s134, 1
  %9128 = zext i32 %9127 to i64
  %9129 = shl nuw nsw i64 %9128, 2
  %9130 = mul i64 %9129, %9126
  %9131 = icmp ult i64 %9130, 2147483648
  %9132 = and i64 %9129, 4294967292
  %9133 = mul nuw i64 %9132, %9126
  %9134 = lshr i64 %9133, 32
  %9135 = lshr i64 %9128, 30
  %9136 = mul nuw nsw i64 %9135, %9126
  %9137 = add nuw nsw i64 %9134, %9136
  %9138 = icmp ult i64 %9137, 4294967296
  %9139 = and i1 %9131, %9138
  br i1 %9139, label %"assert succeeded136", label %"assert failed135", !prof !5

"assert failed135":                               ; preds = %"assert succeeded130"
  %9140 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.31, i64 %9130, i64 2147483647) #4
  br label %destructor_block.thread

"assert succeeded136":                            ; preds = %"assert succeeded130"
  %9141 = add nuw nsw i64 %9130, 4
  %9142 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9141)
  %.not269 = icmp eq ptr %9142, null
  br i1 %.not269, label %"assert failed137", label %"for local_laplacian.s0.v4.v4140.preheader", !prof !4

"assert failed137":                               ; preds = %"assert succeeded136"
  %9143 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block.thread

"for local_laplacian.s0.v4.v4140.preheader":      ; preds = %"assert succeeded136"
  %9144 = sext i32 %local_laplacian.s0.v4.v4.base to i64
  %reass.add = sub nsw i64 %9144, %66
  %reass.mul = mul nsw i64 %reass.add, %73
  %9145 = sub i64 %reass.mul, %62
  %9146 = shl nsw i64 %75, 1
  %9147 = tail call i32 @llvm.smax.i32(i32 %9117, i32 8)
  %t3097 = zext i32 %9147 to i64
  %9148 = shl nuw nsw i64 %t3097, 2
  %9149 = icmp ult i32 %9147, 536870912
  %9150 = add nuw nsw i32 %125, 1
  %9151 = icmp slt i32 %109, 0
  %9152 = add nsw i32 %f75.v3.extent_realized.s, 1
  %9153 = add nsw i32 %levels, -1
  %9154 = sitofp i32 %9153 to float
  %9155 = insertelement <4 x float> undef, float %9154, i64 0
  %9156 = shufflevector <4 x float> %9155, <4 x float> undef, <4 x i32> zeroinitializer
  %9157 = add nsw i32 %levels, -2
  %9158 = insertelement <4 x i32> undef, i32 %9157, i64 0
  %b1087 = shufflevector <4 x i32> %9158, <4 x i32> undef, <4 x i32> zeroinitializer
  %9159 = add nsw i32 %f130.v3.extent_realized.s, 1
  %9160 = add nsw i32 %local_laplacian.min.1.required, -62
  %9161 = ashr i32 %9160, 5
  %9162 = xor i32 %9161, -1
  %9163 = tail call i32 @llvm.smax.i32(i32 %a1139, i32 0)
  %9164 = insertelement <4 x i32> undef, i32 %9163, i64 0
  %9165 = shufflevector <4 x i32> %9164, <4 x i32> undef, <4 x i32> zeroinitializer
  %9166 = add nsw i32 %f8.v3.extent_realized.s, 1
  %9167 = xor i32 %f8.v4.min_realized, -1
  %9168 = insertelement <4 x i32> undef, i32 %f8.stride.2, i64 0
  %9169 = shufflevector <4 x i32> %9168, <4 x i32> undef, <4 x i32> zeroinitializer
  %9170 = add nsw i32 %f7.v3.extent_realized.s, 1
  %9171 = insertelement <4 x i32> undef, i32 %9170, i64 0
  %9172 = shufflevector <4 x i32> %9171, <4 x i32> undef, <4 x i32> zeroinitializer
  %9173 = sext i32 %f129.v3.extent_realized.s to i64
  %9174 = add nsw i64 %9173, 1
  %9175 = add nsw i32 %local_laplacian.s0.v4.v4.base, -30
  %9176 = ashr i32 %9175, 4
  %9177 = sext i32 %9176 to i64
  %narrow = sub nsw i32 0, %f129.v3.min_realized
  %.neg199 = sext i32 %narrow to i64
  %9178 = add nuw nsw i32 %124, 1
  %9179 = icmp slt i32 %102, 0
  %9180 = add nsw i32 %f74.v3.extent_realized.s, 1
  %9181 = xor i32 %9176, -1
  %9182 = xor i32 %f7.v4.min_realized, -1
  %9183 = add nsw i32 %f6.v3.extent_realized.s, 1
  %9184 = insertelement <4 x i32> undef, i32 %9183, i64 0
  %9185 = shufflevector <4 x i32> %9184, <4 x i32> undef, <4 x i32> zeroinitializer
  %9186 = sext i32 %f129.v3.min_realized to i64
  %9187 = sext i32 %f128.v3.extent_realized.s118 to i64
  %9188 = add nsw i64 %9187, 1
  %9189 = add nsw i32 %local_laplacian.s0.v4.v4.base, -14
  %9190 = ashr i32 %9189, 3
  %9191 = sext i32 %9190 to i64
  %narrow270 = sub nsw i32 0, %f128.v3.min_realized117
  %.neg200 = sext i32 %narrow270 to i64
  %9192 = add nuw nsw i32 %9059, 1
  %9193 = icmp slt i32 %9058, 0
  %9194 = add nsw i32 %f73.v3.extent_realized.s, 1
  %9195 = xor i32 %9190, -1
  %9196 = xor i32 %f6.v4.min_realized, -1
  %9197 = add nsw i32 %f5.v3.extent_realized.s, 1
  %9198 = insertelement <4 x i32> undef, i32 %9197, i64 0
  %9199 = shufflevector <4 x i32> %9198, <4 x i32> undef, <4 x i32> zeroinitializer
  %9200 = sext i32 %f128.v3.min_realized117 to i64
  %9201 = sext i32 %f127.v3.extent_realized.s126 to i64
  %9202 = add nsw i64 %9201, 1
  %9203 = sext i32 %f127.v4.min_realized124 to i64
  %9204 = sext i32 %f127.v3.min_realized125 to i64
  %9205 = add nsw i32 %9087, 9
  %9206 = lshr i32 %9205, 3
  %9207 = icmp slt i32 %9087, -1
  %9208 = add nsw i32 %f72.v3.extent_realized.s, 1
  %9209 = xor i32 %f127.v4.min_realized124, -1
  %9210 = xor i32 %f5.v4.min_realized, -1
  %9211 = add nsw i32 %f4.v3.extent_realized.s, 1
  %9212 = insertelement <4 x i32> undef, i32 %9211, i64 0
  %9213 = shufflevector <4 x i32> %9212, <4 x i32> undef, <4 x i32> zeroinitializer
  %9214 = sext i32 %f126.v3.extent_realized.s134 to i64
  %9215 = add nsw i64 %9214, 1
  %9216 = sext i32 %9078 to i64
  %9217 = sext i32 %f126.v3.min_realized133 to i64
  %9218 = add nuw nsw i64 %9148, 4
  %9219 = add nsw i32 %9117, 7
  %9220 = lshr i32 %9219, 3
  %9221 = icmp sgt i32 %9117, 0
  %9222 = add nsw i32 %f2.v3.extent_realized.s, 1
  %9223 = fdiv float 1.000000e+00, %9154
  %9224 = insertelement <4 x float> undef, float %9223, i64 0
  %9225 = shufflevector <4 x float> %9224, <4 x float> undef, <4 x i32> zeroinitializer
  %9226 = xor i32 %9078, -1
  %9227 = insertelement <4 x i32> undef, i32 %f0.v3.min_realized.s, i64 0
  %9228 = sub <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, %9227
  %.neg203 = shufflevector <4 x i32> %9228, <4 x i32> poison, <4 x i32> zeroinitializer
  %9229 = shl nsw i32 %levels, 8
  %9230 = add nsw i32 %9229, -256
  %9231 = insertelement <4 x i32> undef, i32 %9230, i64 0
  %b1132 = shufflevector <4 x i32> %9231, <4 x i32> undef, <4 x i32> zeroinitializer
  %9232 = xor i32 %f4.v4.min_realized, -1
  %9233 = insertelement <4 x float> undef, float %beta, i64 0
  %9234 = shufflevector <4 x float> %9233, <4 x float> undef, <4 x i32> zeroinitializer
  %9235 = sext i32 %9115 to i64
  %9236 = add nsw i32 %local_laplacian.extent.0, 7
  %9237 = ashr i32 %9236, 3
  %9238 = icmp sgt i32 %local_laplacian.extent.0, 0
  %9239 = icmp sgt i32 %local_laplacian.extent.2, 0
  %9240 = add nsw i64 %6, 1
  %9241 = sub nsw i64 %9144, %10
  %9242 = mul nsw i32 %input.stride.2, %b1146
  %9243 = mul nsw i32 %input.stride.1, %b1148
  %9244 = add nsw i32 %9243, %input.min.0
  %9245 = add nsw i32 %9244, %9242
  %9246 = add nsw i32 %b1146, %input.extent.2
  %b1147 = add nsw i32 %9246, -1
  %9247 = add i32 %input.extent.1, -1
  %b1149 = add i32 %9247, %b1148
  %9248 = add nsw i32 %input.min.0, %input.extent.0
  %9249 = add nsw i32 %9248, -1
  %9250 = insertelement <8 x i32> undef, i32 %9249, i64 0
  %b1151 = shufflevector <8 x i32> %9250, <8 x i32> undef, <8 x i32> zeroinitializer
  %9251 = insertelement <8 x i32> undef, i32 %input.min.0, i64 0
  %b1150 = shufflevector <8 x i32> %9251, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"produce f129143"

if.then.i280:                                     ; preds = %if.then.i283
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9051) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9074) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9113) #7
  tail call void @halide_free(ptr %__user_context, ptr nonnull %9142) #7
  br label %destructor_block.thread

"produce f129143":                                ; preds = %if.then.i283, %"for local_laplacian.s0.v4.v4140.preheader"
  %indvars.iv304 = phi i64 [ %indvars.iv.next305, %if.then.i283 ], [ 0, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %lsr.iv446 = phi i64 [ %lsr.iv.next447, %if.then.i283 ], [ %9145, %"for local_laplacian.s0.v4.v4140.preheader" ]
  %9252 = icmp ne i64 %indvars.iv304, 0
  %9253 = trunc i64 %indvars.iv304 to i32
  %9254 = add nsw i32 %local_laplacian.s0.v4.v4.base, %9253
  %9255 = add nsw i32 %9254, 3
  %9256 = ashr i32 %9255, 1
  %9257 = ashr i32 %9254, 1
  %9258 = add nsw i32 %9257, -1
  %9259 = sext i1 %9252 to i32
  %9260 = and i32 %9256, %9259
  %9261 = select i1 %9252, i32 0, i32 %9258
  %f126.s0.v4.min_2 = or i32 %9260, %9261
  %9262 = add nsw i32 %9254, 9
  %9263 = ashr i32 %9262, 2
  %9264 = add nsw i32 %9254, -6
  %9265 = ashr i32 %9264, 2
  %9266 = and i32 %9263, %9259
  %9267 = select i1 %9252, i32 0, i32 %9265
  %f127.s0.v4.min_2 = or i32 %9266, %9267
  %9268 = add nsw i32 %9254, 21
  %9269 = ashr i32 %9268, 3
  %9270 = add nsw i32 %9254, -14
  %9271 = ashr i32 %9270, 3
  %9272 = and i32 %9269, %9259
  %9273 = select i1 %9252, i32 0, i32 %9271
  %f128.s0.v4.min_2 = or i32 %9272, %9273
  %9274 = add nsw i32 %9254, 45
  %9275 = ashr i32 %9274, 4
  %9276 = add nsw i32 %9254, -30
  %9277 = ashr i32 %9276, 4
  %9278 = and i32 %9275, %9259
  %9279 = select i1 %9252, i32 0, i32 %9277
  %f129.s0.v4.min_2 = or i32 %9278, %9279
  %9280 = add nsw i32 %9254, 30
  %9281 = ashr i32 %9280, 4
  %.not78 = icmp sgt i32 %f129.s0.v4.min_2, %9281
  %brmerge = select i1 %.not78, i1 true, i1 %9151
  br i1 %brmerge, label %"produce f128153", label %"for f129.s0.v4145.us.preheader", !prof !27

"for f129.s0.v4145.us.preheader":                 ; preds = %"produce f129143"
  %9282 = sext i32 %f129.s0.v4.min_2 to i64
  %sext = sext i32 %9281 to i64
  br label %"for f129.s0.v4145.us"

"for f129.s0.v4145.us":                           ; preds = %"for f129.s0.v4145.us.preheader", %"end for f129.s0.v3.v3149.loopexit.us"
  %indvars.iv = phi i64 [ %9282, %"for f129.s0.v4145.us.preheader" ], [ %indvars.iv.next, %"end for f129.s0.v3.v3149.loopexit.us" ]
  %9283 = trunc i64 %indvars.iv to i32
  %9284 = shl i32 %9283, 1
  %9285 = and i32 %9284, 2
  %9286 = ashr i32 %9283, 1
  %t2863.us = add nsw i32 %9285, %9286
  %9287 = trunc i64 %indvars.iv to i32
  %9288 = sub i32 %9287, %f75.v4.min_realized
  %9289 = mul i32 %9288, %9152
  %9290 = sub i32 %9289, %f75.v3.min_realized
  %9291 = add nsw i32 %t2863.us, %9162
  %t2870.us = mul nsw i32 %9291, %9159
  %9292 = sub nsw i32 %9286, %9161
  %t2872.us = mul nsw i32 %9292, %9159
  %9293 = add i32 %t2863.us, %9167
  %t2877.us = mul nsw i32 %9293, %9166
  %9294 = sub nsw i32 %9286, %f8.v4.min_realized
  %t2882.us = mul nsw i32 %9294, %9166
  %9295 = sext i32 %t2872.us to i64
  %9296 = add nsw i64 %9295, -1
  %9297 = sext i32 %t2870.us to i64
  %9298 = add nsw i64 %9297, -1
  %9299 = sub nsw i64 %indvars.iv, %9177
  %9300 = mul nsw i64 %9299, %9174
  %9301 = add i64 %9300, %.neg199
  %9302 = trunc i64 %indvars.iv to i32
  %9303 = sub i32 %9302, %f7.v4.min_realized
  %9304 = mul i32 %9303, %f7.stride.1
  br label %"for f129.s0.v3.v3148.us"

"for f129.s0.v3.v3148.us":                        ; preds = %"for f129.s0.v4145.us", %"for f129.s0.v3.v3148.us"
  %lsr.iv426.us = phi i32 [ %lsr.iv.next427.us, %"for f129.s0.v3.v3148.us" ], [ 0, %"for f129.s0.v4145.us" ]
  %lsr.iv424.us = phi i32 [ %lsr.iv.next425.us, %"for f129.s0.v3.v3148.us" ], [ %9150, %"for f129.s0.v4145.us" ]
  %9305 = add i32 %lsr.iv426.us, %106
  %f129.s0.v3.v363.base151.us = tail call i32 @llvm.smin.i32(i32 %b793, i32 %9305)
  %9306 = shl i32 %f129.s0.v3.v363.base151.us, 1
  %9307 = and i32 %9306, 2
  %9308 = ashr i32 %f129.s0.v3.v363.base151.us, 1
  %t2864.us = add nsw i32 %9307, %9308
  %t2865.us = add i32 %9290, %f129.s0.v3.v363.base151.us
  %9309 = sext i32 %t2865.us to i64
  %9310 = getelementptr inbounds float, ptr %f75.host, i64 %9309
  %9311 = load <4 x float>, ptr %9310, align 4, !tbaa !13
  %9312 = add nsw i64 %9309, 4
  %9313 = getelementptr inbounds float, ptr %f75.host, i64 %9312
  %9314 = load <4 x float>, ptr %9313, align 4, !tbaa !13
  %9315 = shufflevector <4 x float> %9311, <4 x float> %9314, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2866.us = fmul <4 x float> %9156, %9315
  %a1085.us = fptosi <4 x float> %t2866.us to <4 x i32>
  %a1088.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1085.us)
  %9316 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1088.us, <4 x i32> zeroinitializer)
  %9317 = sitofp <4 x i32> %9316 to <4 x float>
  %t2868.us = fsub <4 x float> %t2866.us, %9317
  %9318 = sub nsw i32 %f129.s0.v3.v363.base151.us, %f7.v3.min_realized
  %t2873.us = add nsw i32 %9318, %9304
  %t2875.us = sub nsw <4 x i32> %9316, %9165
  %t2879.us = mul nsw <4 x i32> %t2875.us, %9169
  %9319 = add nsw <4 x i32> %t2875.us, <i32 1, i32 1, i32 1, i32 1>
  %t2885.us = mul nsw <4 x i32> %9319, %9169
  %9320 = add nsw i32 %f129.s0.v3.v363.base151.us, 1
  %9321 = shl i32 %9320, 1
  %9322 = and i32 %9321, 2
  %9323 = ashr i32 %9320, 1
  %t2886.us = add nsw i32 %9322, %9323
  %9324 = shufflevector <4 x float> %9311, <4 x float> %9314, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2887.us = fmul <4 x float> %9156, %9324
  %a1089.us = fptosi <4 x float> %t2887.us to <4 x i32>
  %a1092.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1089.us)
  %9325 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1092.us, <4 x i32> zeroinitializer)
  %9326 = sitofp <4 x i32> %9325 to <4 x float>
  %t2889.us = fsub <4 x float> %t2887.us, %9326
  %t2892.us = sub nsw <4 x i32> %9325, %9165
  %t2895.us = mul nsw <4 x i32> %t2892.us, %9169
  %9327 = add nsw <4 x i32> %t2892.us, <i32 1, i32 1, i32 1, i32 1>
  %t2900.us = mul nsw <4 x i32> %9327, %9169
  %9328 = sub nsw i32 %9308, %f8.v3.min_realized
  %9329 = add nsw i32 %9328, %t2882.us
  %9330 = insertelement <4 x i32> undef, i32 %9329, i64 0
  %9331 = shufflevector <4 x i32> %9330, <4 x i32> undef, <4 x i32> zeroinitializer
  %9332 = add nsw <4 x i32> %9331, <i32 0, i32 1, i32 2, i32 3>
  %9333 = add nsw <4 x i32> %t2885.us, %9332
  %9334 = sext <4 x i32> %9333 to <4 x i64>
  %9335 = extractelement <4 x i64> %9334, i64 0
  %9336 = getelementptr inbounds float, ptr %f8.host, i64 %9335
  %9337 = load float, ptr %9336, align 4, !tbaa !36
  %9338 = insertelement <4 x float> undef, float %9337, i64 0
  %9339 = extractelement <4 x i64> %9334, i64 1
  %9340 = getelementptr inbounds float, ptr %f8.host, i64 %9339
  %9341 = load float, ptr %9340, align 4, !tbaa !36
  %9342 = insertelement <4 x float> %9338, float %9341, i64 1
  %9343 = extractelement <4 x i64> %9334, i64 2
  %9344 = getelementptr inbounds float, ptr %f8.host, i64 %9343
  %9345 = load float, ptr %9344, align 4, !tbaa !36
  %9346 = insertelement <4 x float> %9342, float %9345, i64 2
  %9347 = extractelement <4 x i64> %9334, i64 3
  %9348 = getelementptr inbounds float, ptr %f8.host, i64 %9347
  %9349 = load float, ptr %9348, align 4, !tbaa !36
  %9350 = insertelement <4 x float> %9346, float %9349, i64 3
  %9351 = fmul <4 x float> %9350, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9352 = sub nsw i32 %t2864.us, %f8.v3.min_realized
  %9353 = add nsw i32 %9352, %t2882.us
  %9354 = insertelement <4 x i32> undef, i32 %9353, i64 0
  %9355 = shufflevector <4 x i32> %9354, <4 x i32> undef, <4 x i32> zeroinitializer
  %9356 = add <4 x i32> %9355, <i32 -1, i32 0, i32 1, i32 2>
  %9357 = add <4 x i32> %9356, %t2885.us
  %9358 = sext <4 x i32> %9357 to <4 x i64>
  %9359 = extractelement <4 x i64> %9358, i64 0
  %9360 = getelementptr inbounds float, ptr %f8.host, i64 %9359
  %9361 = load float, ptr %9360, align 4, !tbaa !36
  %9362 = insertelement <4 x float> undef, float %9361, i64 0
  %9363 = extractelement <4 x i64> %9358, i64 1
  %9364 = getelementptr inbounds float, ptr %f8.host, i64 %9363
  %9365 = load float, ptr %9364, align 4, !tbaa !36
  %9366 = insertelement <4 x float> %9362, float %9365, i64 1
  %9367 = extractelement <4 x i64> %9358, i64 2
  %9368 = getelementptr inbounds float, ptr %f8.host, i64 %9367
  %9369 = load float, ptr %9368, align 4, !tbaa !36
  %9370 = insertelement <4 x float> %9366, float %9369, i64 2
  %9371 = extractelement <4 x i64> %9358, i64 3
  %9372 = getelementptr inbounds float, ptr %f8.host, i64 %9371
  %9373 = load float, ptr %9372, align 4, !tbaa !36
  %9374 = insertelement <4 x float> %9370, float %9373, i64 3
  %9375 = fmul <4 x float> %9374, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9376 = fadd <4 x float> %9351, %9375
  %9377 = fmul <4 x float> %9376, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9378 = add nsw i32 %9328, %t2877.us
  %9379 = insertelement <4 x i32> undef, i32 %9378, i64 0
  %9380 = shufflevector <4 x i32> %9379, <4 x i32> undef, <4 x i32> zeroinitializer
  %9381 = add nsw <4 x i32> %9380, <i32 0, i32 1, i32 2, i32 3>
  %9382 = add nsw <4 x i32> %t2885.us, %9381
  %9383 = sext <4 x i32> %9382 to <4 x i64>
  %9384 = extractelement <4 x i64> %9383, i64 0
  %9385 = getelementptr inbounds float, ptr %f8.host, i64 %9384
  %9386 = load float, ptr %9385, align 4, !tbaa !36
  %9387 = insertelement <4 x float> undef, float %9386, i64 0
  %9388 = extractelement <4 x i64> %9383, i64 1
  %9389 = getelementptr inbounds float, ptr %f8.host, i64 %9388
  %9390 = load float, ptr %9389, align 4, !tbaa !36
  %9391 = insertelement <4 x float> %9387, float %9390, i64 1
  %9392 = extractelement <4 x i64> %9383, i64 2
  %9393 = getelementptr inbounds float, ptr %f8.host, i64 %9392
  %9394 = load float, ptr %9393, align 4, !tbaa !36
  %9395 = insertelement <4 x float> %9391, float %9394, i64 2
  %9396 = extractelement <4 x i64> %9383, i64 3
  %9397 = getelementptr inbounds float, ptr %f8.host, i64 %9396
  %9398 = load float, ptr %9397, align 4, !tbaa !36
  %9399 = insertelement <4 x float> %9395, float %9398, i64 3
  %9400 = fmul <4 x float> %9399, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9401 = add nsw i32 %9352, %t2877.us
  %9402 = insertelement <4 x i32> undef, i32 %9401, i64 0
  %9403 = shufflevector <4 x i32> %9402, <4 x i32> undef, <4 x i32> zeroinitializer
  %9404 = add <4 x i32> %9403, <i32 -1, i32 0, i32 1, i32 2>
  %9405 = add <4 x i32> %9404, %t2885.us
  %9406 = sext <4 x i32> %9405 to <4 x i64>
  %9407 = extractelement <4 x i64> %9406, i64 0
  %9408 = getelementptr inbounds float, ptr %f8.host, i64 %9407
  %9409 = load float, ptr %9408, align 4, !tbaa !36
  %9410 = insertelement <4 x float> undef, float %9409, i64 0
  %9411 = extractelement <4 x i64> %9406, i64 1
  %9412 = getelementptr inbounds float, ptr %f8.host, i64 %9411
  %9413 = load float, ptr %9412, align 4, !tbaa !36
  %9414 = insertelement <4 x float> %9410, float %9413, i64 1
  %9415 = extractelement <4 x i64> %9406, i64 2
  %9416 = getelementptr inbounds float, ptr %f8.host, i64 %9415
  %9417 = load float, ptr %9416, align 4, !tbaa !36
  %9418 = insertelement <4 x float> %9414, float %9417, i64 2
  %9419 = extractelement <4 x i64> %9406, i64 3
  %9420 = getelementptr inbounds float, ptr %f8.host, i64 %9419
  %9421 = load float, ptr %9420, align 4, !tbaa !36
  %9422 = insertelement <4 x float> %9418, float %9421, i64 3
  %9423 = fmul <4 x float> %9422, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9424 = fadd <4 x float> %9400, %9423
  %9425 = fmul <4 x float> %9424, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9426 = fadd <4 x float> %9377, %9425
  %9427 = mul nsw <4 x i32> %9319, %9172
  %9428 = insertelement <4 x i32> undef, i32 %t2873.us, i64 0
  %9429 = shufflevector <4 x i32> %9428, <4 x i32> undef, <4 x i32> zeroinitializer
  %9430 = add nsw <4 x i32> %9429, <i32 0, i32 2, i32 4, i32 6>
  %9431 = add nsw <4 x i32> %9427, %9430
  %9432 = sext <4 x i32> %9431 to <4 x i64>
  %9433 = extractelement <4 x i64> %9432, i64 0
  %9434 = getelementptr inbounds float, ptr %f7.host, i64 %9433
  %9435 = load float, ptr %9434, align 4, !tbaa !54
  %9436 = insertelement <4 x float> undef, float %9435, i64 0
  %9437 = extractelement <4 x i64> %9432, i64 1
  %9438 = getelementptr inbounds float, ptr %f7.host, i64 %9437
  %9439 = load float, ptr %9438, align 4, !tbaa !54
  %9440 = insertelement <4 x float> %9436, float %9439, i64 1
  %9441 = extractelement <4 x i64> %9432, i64 2
  %9442 = getelementptr inbounds float, ptr %f7.host, i64 %9441
  %9443 = load float, ptr %9442, align 4, !tbaa !54
  %9444 = insertelement <4 x float> %9440, float %9443, i64 2
  %9445 = extractelement <4 x i64> %9432, i64 3
  %9446 = getelementptr inbounds float, ptr %f7.host, i64 %9445
  %9447 = load float, ptr %9446, align 4, !tbaa !54
  %9448 = insertelement <4 x float> %9444, float %9447, i64 3
  %9449 = fsub <4 x float> %9448, %9426
  %9450 = fmul <4 x float> %t2868.us, %9449
  %9451 = add nsw <4 x i32> %t2879.us, %9332
  %9452 = sext <4 x i32> %9451 to <4 x i64>
  %9453 = extractelement <4 x i64> %9452, i64 0
  %9454 = getelementptr inbounds float, ptr %f8.host, i64 %9453
  %9455 = load float, ptr %9454, align 4, !tbaa !36
  %9456 = insertelement <4 x float> undef, float %9455, i64 0
  %9457 = extractelement <4 x i64> %9452, i64 1
  %9458 = getelementptr inbounds float, ptr %f8.host, i64 %9457
  %9459 = load float, ptr %9458, align 4, !tbaa !36
  %9460 = insertelement <4 x float> %9456, float %9459, i64 1
  %9461 = extractelement <4 x i64> %9452, i64 2
  %9462 = getelementptr inbounds float, ptr %f8.host, i64 %9461
  %9463 = load float, ptr %9462, align 4, !tbaa !36
  %9464 = insertelement <4 x float> %9460, float %9463, i64 2
  %9465 = extractelement <4 x i64> %9452, i64 3
  %9466 = getelementptr inbounds float, ptr %f8.host, i64 %9465
  %9467 = load float, ptr %9466, align 4, !tbaa !36
  %9468 = insertelement <4 x float> %9464, float %9467, i64 3
  %9469 = fmul <4 x float> %9468, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9470 = add <4 x i32> %t2879.us, %9355
  %9471 = add <4 x i32> %9470, <i32 -1, i32 0, i32 1, i32 2>
  %9472 = sext <4 x i32> %9471 to <4 x i64>
  %9473 = extractelement <4 x i64> %9472, i64 0
  %9474 = getelementptr inbounds float, ptr %f8.host, i64 %9473
  %9475 = load float, ptr %9474, align 4, !tbaa !36
  %9476 = insertelement <4 x float> undef, float %9475, i64 0
  %9477 = extractelement <4 x i64> %9472, i64 1
  %9478 = getelementptr inbounds float, ptr %f8.host, i64 %9477
  %9479 = load float, ptr %9478, align 4, !tbaa !36
  %9480 = insertelement <4 x float> %9476, float %9479, i64 1
  %9481 = extractelement <4 x i64> %9472, i64 2
  %9482 = getelementptr inbounds float, ptr %f8.host, i64 %9481
  %9483 = load float, ptr %9482, align 4, !tbaa !36
  %9484 = insertelement <4 x float> %9480, float %9483, i64 2
  %9485 = extractelement <4 x i64> %9472, i64 3
  %9486 = getelementptr inbounds float, ptr %f8.host, i64 %9485
  %9487 = load float, ptr %9486, align 4, !tbaa !36
  %9488 = insertelement <4 x float> %9484, float %9487, i64 3
  %9489 = fmul <4 x float> %9488, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9490 = fadd <4 x float> %9469, %9489
  %9491 = fmul <4 x float> %9490, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9492 = add nsw <4 x i32> %t2879.us, %9381
  %9493 = sext <4 x i32> %9492 to <4 x i64>
  %9494 = extractelement <4 x i64> %9493, i64 0
  %9495 = getelementptr inbounds float, ptr %f8.host, i64 %9494
  %9496 = load float, ptr %9495, align 4, !tbaa !36
  %9497 = insertelement <4 x float> undef, float %9496, i64 0
  %9498 = extractelement <4 x i64> %9493, i64 1
  %9499 = getelementptr inbounds float, ptr %f8.host, i64 %9498
  %9500 = load float, ptr %9499, align 4, !tbaa !36
  %9501 = insertelement <4 x float> %9497, float %9500, i64 1
  %9502 = extractelement <4 x i64> %9493, i64 2
  %9503 = getelementptr inbounds float, ptr %f8.host, i64 %9502
  %9504 = load float, ptr %9503, align 4, !tbaa !36
  %9505 = insertelement <4 x float> %9501, float %9504, i64 2
  %9506 = extractelement <4 x i64> %9493, i64 3
  %9507 = getelementptr inbounds float, ptr %f8.host, i64 %9506
  %9508 = load float, ptr %9507, align 4, !tbaa !36
  %9509 = insertelement <4 x float> %9505, float %9508, i64 3
  %9510 = fmul <4 x float> %9509, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9511 = add <4 x i32> %t2879.us, %9403
  %9512 = add <4 x i32> %9511, <i32 -1, i32 0, i32 1, i32 2>
  %9513 = sext <4 x i32> %9512 to <4 x i64>
  %9514 = extractelement <4 x i64> %9513, i64 0
  %9515 = getelementptr inbounds float, ptr %f8.host, i64 %9514
  %9516 = load float, ptr %9515, align 4, !tbaa !36
  %9517 = insertelement <4 x float> undef, float %9516, i64 0
  %9518 = extractelement <4 x i64> %9513, i64 1
  %9519 = getelementptr inbounds float, ptr %f8.host, i64 %9518
  %9520 = load float, ptr %9519, align 4, !tbaa !36
  %9521 = insertelement <4 x float> %9517, float %9520, i64 1
  %9522 = extractelement <4 x i64> %9513, i64 2
  %9523 = getelementptr inbounds float, ptr %f8.host, i64 %9522
  %9524 = load float, ptr %9523, align 4, !tbaa !36
  %9525 = insertelement <4 x float> %9521, float %9524, i64 2
  %9526 = extractelement <4 x i64> %9513, i64 3
  %9527 = getelementptr inbounds float, ptr %f8.host, i64 %9526
  %9528 = load float, ptr %9527, align 4, !tbaa !36
  %9529 = insertelement <4 x float> %9525, float %9528, i64 3
  %9530 = fmul <4 x float> %9529, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9531 = fadd <4 x float> %9510, %9530
  %9532 = fmul <4 x float> %9531, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9533 = fadd <4 x float> %9491, %9532
  %9534 = mul nsw <4 x i32> %t2875.us, %9172
  %9535 = add nsw <4 x i32> %9534, %9430
  %9536 = sext <4 x i32> %9535 to <4 x i64>
  %9537 = extractelement <4 x i64> %9536, i64 0
  %9538 = getelementptr inbounds float, ptr %f7.host, i64 %9537
  %9539 = load float, ptr %9538, align 4, !tbaa !54
  %9540 = insertelement <4 x float> undef, float %9539, i64 0
  %9541 = extractelement <4 x i64> %9536, i64 1
  %9542 = getelementptr inbounds float, ptr %f7.host, i64 %9541
  %9543 = load float, ptr %9542, align 4, !tbaa !54
  %9544 = insertelement <4 x float> %9540, float %9543, i64 1
  %9545 = extractelement <4 x i64> %9536, i64 2
  %9546 = getelementptr inbounds float, ptr %f7.host, i64 %9545
  %9547 = load float, ptr %9546, align 4, !tbaa !54
  %9548 = insertelement <4 x float> %9544, float %9547, i64 2
  %9549 = extractelement <4 x i64> %9536, i64 3
  %9550 = getelementptr inbounds float, ptr %f7.host, i64 %9549
  %9551 = load float, ptr %9550, align 4, !tbaa !54
  %9552 = insertelement <4 x float> %9548, float %9551, i64 3
  %9553 = fsub <4 x float> %9552, %9533
  %9554 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2868.us
  %9555 = fmul <4 x float> %9554, %9553
  %9556 = fadd <4 x float> %9450, %9555
  %9557 = sext i32 %9308 to i64
  %9558 = sub nsw i64 %9557, %4
  %9559 = add nsw i64 %9558, %9295
  %9560 = getelementptr inbounds float, ptr %f130.host, i64 %9559
  %9561 = load <4 x float>, ptr %9560, align 4, !tbaa !38
  %9562 = fmul <4 x float> %9561, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9563 = sext i32 %t2864.us to i64
  %9564 = sub nsw i64 %9563, %4
  %9565 = add nsw i64 %9296, %9564
  %9566 = getelementptr inbounds float, ptr %f130.host, i64 %9565
  %9567 = load <4 x float>, ptr %9566, align 4, !tbaa !38
  %9568 = fmul <4 x float> %9567, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9569 = fadd <4 x float> %9562, %9568
  %9570 = fmul <4 x float> %9569, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9571 = add nsw i64 %9558, %9297
  %9572 = getelementptr inbounds float, ptr %f130.host, i64 %9571
  %9573 = load <4 x float>, ptr %9572, align 4, !tbaa !38
  %9574 = fmul <4 x float> %9573, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9575 = add nsw i64 %9298, %9564
  %9576 = getelementptr inbounds float, ptr %f130.host, i64 %9575
  %9577 = load <4 x float>, ptr %9576, align 4, !tbaa !38
  %9578 = fmul <4 x float> %9577, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9579 = fadd <4 x float> %9574, %9578
  %9580 = fmul <4 x float> %9579, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9581 = fadd <4 x float> %9570, %9580
  %9582 = fadd <4 x float> %9556, %9581
  %9583 = sub nsw i32 %9323, %f8.v3.min_realized
  %9584 = add nsw i32 %9583, %t2882.us
  %9585 = insertelement <4 x i32> undef, i32 %9584, i64 0
  %9586 = shufflevector <4 x i32> %9585, <4 x i32> undef, <4 x i32> zeroinitializer
  %9587 = add nsw <4 x i32> %9586, <i32 0, i32 1, i32 2, i32 3>
  %9588 = add nsw <4 x i32> %t2900.us, %9587
  %9589 = sext <4 x i32> %9588 to <4 x i64>
  %9590 = extractelement <4 x i64> %9589, i64 0
  %9591 = getelementptr inbounds float, ptr %f8.host, i64 %9590
  %9592 = load float, ptr %9591, align 4, !tbaa !36
  %9593 = insertelement <4 x float> undef, float %9592, i64 0
  %9594 = extractelement <4 x i64> %9589, i64 1
  %9595 = getelementptr inbounds float, ptr %f8.host, i64 %9594
  %9596 = load float, ptr %9595, align 4, !tbaa !36
  %9597 = insertelement <4 x float> %9593, float %9596, i64 1
  %9598 = extractelement <4 x i64> %9589, i64 2
  %9599 = getelementptr inbounds float, ptr %f8.host, i64 %9598
  %9600 = load float, ptr %9599, align 4, !tbaa !36
  %9601 = insertelement <4 x float> %9597, float %9600, i64 2
  %9602 = extractelement <4 x i64> %9589, i64 3
  %9603 = getelementptr inbounds float, ptr %f8.host, i64 %9602
  %9604 = load float, ptr %9603, align 4, !tbaa !36
  %9605 = insertelement <4 x float> %9601, float %9604, i64 3
  %9606 = fmul <4 x float> %9605, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9607 = sub nsw i32 %t2886.us, %f8.v3.min_realized
  %9608 = add nsw i32 %9607, %t2882.us
  %9609 = insertelement <4 x i32> undef, i32 %9608, i64 0
  %9610 = shufflevector <4 x i32> %9609, <4 x i32> undef, <4 x i32> zeroinitializer
  %9611 = add nsw <4 x i32> %9610, <i32 0, i32 1, i32 2, i32 3>
  %9612 = add <4 x i32> %t2900.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9613 = add <4 x i32> %9612, %9611
  %9614 = sext <4 x i32> %9613 to <4 x i64>
  %9615 = extractelement <4 x i64> %9614, i64 0
  %9616 = getelementptr inbounds float, ptr %f8.host, i64 %9615
  %9617 = load float, ptr %9616, align 4, !tbaa !36
  %9618 = insertelement <4 x float> undef, float %9617, i64 0
  %9619 = extractelement <4 x i64> %9614, i64 1
  %9620 = getelementptr inbounds float, ptr %f8.host, i64 %9619
  %9621 = load float, ptr %9620, align 4, !tbaa !36
  %9622 = insertelement <4 x float> %9618, float %9621, i64 1
  %9623 = extractelement <4 x i64> %9614, i64 2
  %9624 = getelementptr inbounds float, ptr %f8.host, i64 %9623
  %9625 = load float, ptr %9624, align 4, !tbaa !36
  %9626 = insertelement <4 x float> %9622, float %9625, i64 2
  %9627 = extractelement <4 x i64> %9614, i64 3
  %9628 = getelementptr inbounds float, ptr %f8.host, i64 %9627
  %9629 = load float, ptr %9628, align 4, !tbaa !36
  %9630 = insertelement <4 x float> %9626, float %9629, i64 3
  %9631 = fmul <4 x float> %9630, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9632 = fadd <4 x float> %9606, %9631
  %9633 = fmul <4 x float> %9632, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9634 = add nsw i32 %9583, %t2877.us
  %9635 = insertelement <4 x i32> undef, i32 %9634, i64 0
  %9636 = shufflevector <4 x i32> %9635, <4 x i32> undef, <4 x i32> zeroinitializer
  %9637 = add nsw <4 x i32> %9636, <i32 0, i32 1, i32 2, i32 3>
  %9638 = add nsw <4 x i32> %t2900.us, %9637
  %9639 = sext <4 x i32> %9638 to <4 x i64>
  %9640 = extractelement <4 x i64> %9639, i64 0
  %9641 = getelementptr inbounds float, ptr %f8.host, i64 %9640
  %9642 = load float, ptr %9641, align 4, !tbaa !36
  %9643 = insertelement <4 x float> undef, float %9642, i64 0
  %9644 = extractelement <4 x i64> %9639, i64 1
  %9645 = getelementptr inbounds float, ptr %f8.host, i64 %9644
  %9646 = load float, ptr %9645, align 4, !tbaa !36
  %9647 = insertelement <4 x float> %9643, float %9646, i64 1
  %9648 = extractelement <4 x i64> %9639, i64 2
  %9649 = getelementptr inbounds float, ptr %f8.host, i64 %9648
  %9650 = load float, ptr %9649, align 4, !tbaa !36
  %9651 = insertelement <4 x float> %9647, float %9650, i64 2
  %9652 = extractelement <4 x i64> %9639, i64 3
  %9653 = getelementptr inbounds float, ptr %f8.host, i64 %9652
  %9654 = load float, ptr %9653, align 4, !tbaa !36
  %9655 = insertelement <4 x float> %9651, float %9654, i64 3
  %9656 = fmul <4 x float> %9655, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9657 = add nsw i32 %9607, %t2877.us
  %9658 = insertelement <4 x i32> undef, i32 %9657, i64 0
  %9659 = shufflevector <4 x i32> %9658, <4 x i32> undef, <4 x i32> zeroinitializer
  %9660 = add nsw <4 x i32> %9659, <i32 0, i32 1, i32 2, i32 3>
  %9661 = add <4 x i32> %9612, %9660
  %9662 = sext <4 x i32> %9661 to <4 x i64>
  %9663 = extractelement <4 x i64> %9662, i64 0
  %9664 = getelementptr inbounds float, ptr %f8.host, i64 %9663
  %9665 = load float, ptr %9664, align 4, !tbaa !36
  %9666 = insertelement <4 x float> undef, float %9665, i64 0
  %9667 = extractelement <4 x i64> %9662, i64 1
  %9668 = getelementptr inbounds float, ptr %f8.host, i64 %9667
  %9669 = load float, ptr %9668, align 4, !tbaa !36
  %9670 = insertelement <4 x float> %9666, float %9669, i64 1
  %9671 = extractelement <4 x i64> %9662, i64 2
  %9672 = getelementptr inbounds float, ptr %f8.host, i64 %9671
  %9673 = load float, ptr %9672, align 4, !tbaa !36
  %9674 = insertelement <4 x float> %9670, float %9673, i64 2
  %9675 = extractelement <4 x i64> %9662, i64 3
  %9676 = getelementptr inbounds float, ptr %f8.host, i64 %9675
  %9677 = load float, ptr %9676, align 4, !tbaa !36
  %9678 = insertelement <4 x float> %9674, float %9677, i64 3
  %9679 = fmul <4 x float> %9678, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9680 = fadd <4 x float> %9656, %9679
  %9681 = fmul <4 x float> %9680, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9682 = fadd <4 x float> %9633, %9681
  %9683 = mul nsw <4 x i32> %9327, %9172
  %9684 = add nsw i32 %t2873.us, 1
  %9685 = insertelement <4 x i32> undef, i32 %9684, i64 0
  %9686 = shufflevector <4 x i32> %9685, <4 x i32> undef, <4 x i32> zeroinitializer
  %9687 = add nsw <4 x i32> %9686, <i32 0, i32 2, i32 4, i32 6>
  %9688 = add nsw <4 x i32> %9683, %9687
  %9689 = sext <4 x i32> %9688 to <4 x i64>
  %9690 = extractelement <4 x i64> %9689, i64 0
  %9691 = getelementptr inbounds float, ptr %f7.host, i64 %9690
  %9692 = load float, ptr %9691, align 4, !tbaa !54
  %9693 = insertelement <4 x float> undef, float %9692, i64 0
  %9694 = extractelement <4 x i64> %9689, i64 1
  %9695 = getelementptr inbounds float, ptr %f7.host, i64 %9694
  %9696 = load float, ptr %9695, align 4, !tbaa !54
  %9697 = insertelement <4 x float> %9693, float %9696, i64 1
  %9698 = extractelement <4 x i64> %9689, i64 2
  %9699 = getelementptr inbounds float, ptr %f7.host, i64 %9698
  %9700 = load float, ptr %9699, align 4, !tbaa !54
  %9701 = insertelement <4 x float> %9697, float %9700, i64 2
  %9702 = extractelement <4 x i64> %9689, i64 3
  %9703 = getelementptr inbounds float, ptr %f7.host, i64 %9702
  %9704 = load float, ptr %9703, align 4, !tbaa !54
  %9705 = insertelement <4 x float> %9701, float %9704, i64 3
  %9706 = fsub <4 x float> %9705, %9682
  %9707 = fmul <4 x float> %t2889.us, %9706
  %9708 = add nsw <4 x i32> %t2895.us, %9587
  %9709 = sext <4 x i32> %9708 to <4 x i64>
  %9710 = extractelement <4 x i64> %9709, i64 0
  %9711 = getelementptr inbounds float, ptr %f8.host, i64 %9710
  %9712 = load float, ptr %9711, align 4, !tbaa !36
  %9713 = insertelement <4 x float> undef, float %9712, i64 0
  %9714 = extractelement <4 x i64> %9709, i64 1
  %9715 = getelementptr inbounds float, ptr %f8.host, i64 %9714
  %9716 = load float, ptr %9715, align 4, !tbaa !36
  %9717 = insertelement <4 x float> %9713, float %9716, i64 1
  %9718 = extractelement <4 x i64> %9709, i64 2
  %9719 = getelementptr inbounds float, ptr %f8.host, i64 %9718
  %9720 = load float, ptr %9719, align 4, !tbaa !36
  %9721 = insertelement <4 x float> %9717, float %9720, i64 2
  %9722 = extractelement <4 x i64> %9709, i64 3
  %9723 = getelementptr inbounds float, ptr %f8.host, i64 %9722
  %9724 = load float, ptr %9723, align 4, !tbaa !36
  %9725 = insertelement <4 x float> %9721, float %9724, i64 3
  %9726 = fmul <4 x float> %9725, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9727 = add <4 x i32> %t2895.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %9728 = add <4 x i32> %9727, %9611
  %9729 = sext <4 x i32> %9728 to <4 x i64>
  %9730 = extractelement <4 x i64> %9729, i64 0
  %9731 = getelementptr inbounds float, ptr %f8.host, i64 %9730
  %9732 = load float, ptr %9731, align 4, !tbaa !36
  %9733 = insertelement <4 x float> undef, float %9732, i64 0
  %9734 = extractelement <4 x i64> %9729, i64 1
  %9735 = getelementptr inbounds float, ptr %f8.host, i64 %9734
  %9736 = load float, ptr %9735, align 4, !tbaa !36
  %9737 = insertelement <4 x float> %9733, float %9736, i64 1
  %9738 = extractelement <4 x i64> %9729, i64 2
  %9739 = getelementptr inbounds float, ptr %f8.host, i64 %9738
  %9740 = load float, ptr %9739, align 4, !tbaa !36
  %9741 = insertelement <4 x float> %9737, float %9740, i64 2
  %9742 = extractelement <4 x i64> %9729, i64 3
  %9743 = getelementptr inbounds float, ptr %f8.host, i64 %9742
  %9744 = load float, ptr %9743, align 4, !tbaa !36
  %9745 = insertelement <4 x float> %9741, float %9744, i64 3
  %9746 = fmul <4 x float> %9745, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9747 = fadd <4 x float> %9726, %9746
  %9748 = fmul <4 x float> %9747, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9749 = add nsw <4 x i32> %t2895.us, %9637
  %9750 = sext <4 x i32> %9749 to <4 x i64>
  %9751 = extractelement <4 x i64> %9750, i64 0
  %9752 = getelementptr inbounds float, ptr %f8.host, i64 %9751
  %9753 = load float, ptr %9752, align 4, !tbaa !36
  %9754 = insertelement <4 x float> undef, float %9753, i64 0
  %9755 = extractelement <4 x i64> %9750, i64 1
  %9756 = getelementptr inbounds float, ptr %f8.host, i64 %9755
  %9757 = load float, ptr %9756, align 4, !tbaa !36
  %9758 = insertelement <4 x float> %9754, float %9757, i64 1
  %9759 = extractelement <4 x i64> %9750, i64 2
  %9760 = getelementptr inbounds float, ptr %f8.host, i64 %9759
  %9761 = load float, ptr %9760, align 4, !tbaa !36
  %9762 = insertelement <4 x float> %9758, float %9761, i64 2
  %9763 = extractelement <4 x i64> %9750, i64 3
  %9764 = getelementptr inbounds float, ptr %f8.host, i64 %9763
  %9765 = load float, ptr %9764, align 4, !tbaa !36
  %9766 = insertelement <4 x float> %9762, float %9765, i64 3
  %9767 = fmul <4 x float> %9766, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9768 = add <4 x i32> %9727, %9660
  %9769 = sext <4 x i32> %9768 to <4 x i64>
  %9770 = extractelement <4 x i64> %9769, i64 0
  %9771 = getelementptr inbounds float, ptr %f8.host, i64 %9770
  %9772 = load float, ptr %9771, align 4, !tbaa !36
  %9773 = insertelement <4 x float> undef, float %9772, i64 0
  %9774 = extractelement <4 x i64> %9769, i64 1
  %9775 = getelementptr inbounds float, ptr %f8.host, i64 %9774
  %9776 = load float, ptr %9775, align 4, !tbaa !36
  %9777 = insertelement <4 x float> %9773, float %9776, i64 1
  %9778 = extractelement <4 x i64> %9769, i64 2
  %9779 = getelementptr inbounds float, ptr %f8.host, i64 %9778
  %9780 = load float, ptr %9779, align 4, !tbaa !36
  %9781 = insertelement <4 x float> %9777, float %9780, i64 2
  %9782 = extractelement <4 x i64> %9769, i64 3
  %9783 = getelementptr inbounds float, ptr %f8.host, i64 %9782
  %9784 = load float, ptr %9783, align 4, !tbaa !36
  %9785 = insertelement <4 x float> %9781, float %9784, i64 3
  %9786 = fmul <4 x float> %9785, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9787 = fadd <4 x float> %9767, %9786
  %9788 = fmul <4 x float> %9787, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9789 = fadd <4 x float> %9748, %9788
  %9790 = mul nsw <4 x i32> %t2892.us, %9172
  %9791 = add nsw <4 x i32> %9790, %9687
  %9792 = sext <4 x i32> %9791 to <4 x i64>
  %9793 = extractelement <4 x i64> %9792, i64 0
  %9794 = getelementptr inbounds float, ptr %f7.host, i64 %9793
  %9795 = load float, ptr %9794, align 4, !tbaa !54
  %9796 = insertelement <4 x float> undef, float %9795, i64 0
  %9797 = extractelement <4 x i64> %9792, i64 1
  %9798 = getelementptr inbounds float, ptr %f7.host, i64 %9797
  %9799 = load float, ptr %9798, align 4, !tbaa !54
  %9800 = insertelement <4 x float> %9796, float %9799, i64 1
  %9801 = extractelement <4 x i64> %9792, i64 2
  %9802 = getelementptr inbounds float, ptr %f7.host, i64 %9801
  %9803 = load float, ptr %9802, align 4, !tbaa !54
  %9804 = insertelement <4 x float> %9800, float %9803, i64 2
  %9805 = extractelement <4 x i64> %9792, i64 3
  %9806 = getelementptr inbounds float, ptr %f7.host, i64 %9805
  %9807 = load float, ptr %9806, align 4, !tbaa !54
  %9808 = insertelement <4 x float> %9804, float %9807, i64 3
  %9809 = fsub <4 x float> %9808, %9789
  %9810 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2889.us
  %9811 = fmul <4 x float> %9810, %9809
  %9812 = fadd <4 x float> %9707, %9811
  %9813 = sext i32 %9323 to i64
  %9814 = sub nsw i64 %9813, %4
  %9815 = add nsw i64 %9814, %9295
  %9816 = getelementptr inbounds float, ptr %f130.host, i64 %9815
  %9817 = load <4 x float>, ptr %9816, align 4, !tbaa !38
  %9818 = fmul <4 x float> %9817, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9819 = sext i32 %t2886.us to i64
  %9820 = sub nsw i64 %9819, %4
  %9821 = add nsw i64 %9296, %9820
  %9822 = getelementptr inbounds float, ptr %f130.host, i64 %9821
  %9823 = load <4 x float>, ptr %9822, align 4, !tbaa !38
  %9824 = fmul <4 x float> %9823, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9825 = fadd <4 x float> %9818, %9824
  %9826 = fmul <4 x float> %9825, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9827 = add nsw i64 %9814, %9297
  %9828 = getelementptr inbounds float, ptr %f130.host, i64 %9827
  %9829 = load <4 x float>, ptr %9828, align 4, !tbaa !38
  %9830 = fmul <4 x float> %9829, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9831 = add nsw i64 %9298, %9820
  %9832 = getelementptr inbounds float, ptr %f130.host, i64 %9831
  %9833 = load <4 x float>, ptr %9832, align 4, !tbaa !38
  %9834 = fmul <4 x float> %9833, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9835 = fadd <4 x float> %9830, %9834
  %9836 = fmul <4 x float> %9835, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9837 = fadd <4 x float> %9826, %9836
  %9838 = fadd <4 x float> %9812, %9837
  %9839 = shufflevector <4 x float> %9582, <4 x float> %9838, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %9840 = sext i32 %f129.s0.v3.v363.base151.us to i64
  %9841 = add i64 %9301, %9840
  %9842 = getelementptr inbounds float, ptr %9051, i64 %9841
  store <8 x float> %9839, ptr %9842, align 4, !tbaa !64
  %lsr.iv.next425.us = add nsw i32 %lsr.iv424.us, -1
  %lsr.iv.next427.us = add i32 %lsr.iv426.us, 8
  %.not96.us = icmp eq i32 %lsr.iv.next425.us, 0
  br i1 %.not96.us, label %"end for f129.s0.v3.v3149.loopexit.us", label %"for f129.s0.v3.v3148.us"

"end for f129.s0.v3.v3149.loopexit.us":           ; preds = %"for f129.s0.v3.v3148.us"
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %9843 = icmp eq i64 %indvars.iv, %sext
  br i1 %9843, label %"produce f128153", label %"for f129.s0.v4145.us"

"produce f128153":                                ; preds = %"end for f129.s0.v3.v3149.loopexit.us", %"produce f129143"
  %9844 = add nsw i32 %9254, 14
  %9845 = ashr i32 %9844, 3
  %.not79 = icmp sgt i32 %f128.s0.v4.min_2, %9845
  %brmerge444 = select i1 %.not79, i1 true, i1 %9179
  br i1 %brmerge444, label %"produce f127163", label %"for f128.s0.v4155.us.preheader", !prof !27

"for f128.s0.v4155.us.preheader":                 ; preds = %"produce f128153"
  %9846 = sext i32 %f128.s0.v4.min_2 to i64
  %sext294 = sext i32 %9845 to i64
  br label %"for f128.s0.v4155.us"

"for f128.s0.v4155.us":                           ; preds = %"for f128.s0.v4155.us.preheader", %"end for f128.s0.v3.v3159.loopexit.us"
  %indvars.iv292 = phi i64 [ %9846, %"for f128.s0.v4155.us.preheader" ], [ %indvars.iv.next293, %"end for f128.s0.v3.v3159.loopexit.us" ]
  %9847 = trunc i64 %indvars.iv292 to i32
  %9848 = shl i32 %9847, 1
  %9849 = and i32 %9848, 2
  %9850 = ashr i32 %9847, 1
  %t2901.us = add nsw i32 %9849, %9850
  %9851 = trunc i64 %indvars.iv292 to i32
  %9852 = sub i32 %9851, %f74.v4.min_realized
  %9853 = mul i32 %9852, %9180
  %9854 = sub i32 %9853, %f74.v3.min_realized
  %9855 = add nsw i32 %t2901.us, %9181
  %t2908.us = mul nsw i32 %9855, %117
  %9856 = sub nsw i32 %9850, %9176
  %t2910.us = mul nsw i32 %9856, %117
  %9857 = add i32 %t2901.us, %9182
  %9858 = mul nsw i32 %9857, %f7.stride.1
  %9859 = sub nsw i32 %9850, %f7.v4.min_realized
  %9860 = mul nsw i32 %9859, %f7.stride.1
  %9861 = sext i32 %t2910.us to i64
  %9862 = add nsw i64 %9861, -1
  %9863 = sext i32 %t2908.us to i64
  %9864 = add nsw i64 %9863, -1
  %9865 = sub nsw i64 %indvars.iv292, %9191
  %9866 = mul nsw i64 %9865, %9188
  %9867 = add i64 %9866, %.neg200
  %9868 = trunc i64 %indvars.iv292 to i32
  %9869 = sub i32 %9868, %f6.v4.min_realized
  %9870 = mul i32 %9869, %f6.stride.1
  br label %"for f128.s0.v3.v3158.us"

"for f128.s0.v3.v3158.us":                        ; preds = %"for f128.s0.v4155.us", %"for f128.s0.v3.v3158.us"
  %lsr.iv430.us = phi i32 [ %lsr.iv.next431.us, %"for f128.s0.v3.v3158.us" ], [ 0, %"for f128.s0.v4155.us" ]
  %lsr.iv428.us = phi i32 [ %lsr.iv.next429.us, %"for f128.s0.v3.v3158.us" ], [ %9178, %"for f128.s0.v4155.us" ]
  %9871 = add i32 %lsr.iv430.us, %99
  %f128.s0.v3.v343.base161.us = tail call i32 @llvm.smin.i32(i32 %b792, i32 %9871)
  %9872 = shl i32 %f128.s0.v3.v343.base161.us, 1
  %9873 = and i32 %9872, 2
  %9874 = ashr i32 %f128.s0.v3.v343.base161.us, 1
  %t2902.us = add nsw i32 %9873, %9874
  %t2903.us = add i32 %9854, %f128.s0.v3.v343.base161.us
  %9875 = sext i32 %t2903.us to i64
  %9876 = getelementptr inbounds float, ptr %f74.host, i64 %9875
  %9877 = load <4 x float>, ptr %9876, align 4, !tbaa !56
  %9878 = add nsw i64 %9875, 4
  %9879 = getelementptr inbounds float, ptr %f74.host, i64 %9878
  %9880 = load <4 x float>, ptr %9879, align 4, !tbaa !56
  %9881 = shufflevector <4 x float> %9877, <4 x float> %9880, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2904.us = fmul <4 x float> %9156, %9881
  %a1094.us = fptosi <4 x float> %t2904.us to <4 x i32>
  %a1097.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1094.us)
  %9882 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1097.us, <4 x i32> zeroinitializer)
  %9883 = sitofp <4 x i32> %9882 to <4 x float>
  %t2906.us = fsub <4 x float> %t2904.us, %9883
  %9884 = sub nsw i32 %f128.s0.v3.v343.base161.us, %f6.v3.min_realized
  %t2911.us = add nsw i32 %9884, %9870
  %t2913.us = sub nsw <4 x i32> %9882, %9165
  %9885 = sub nsw i32 %t2902.us, %f7.v3.min_realized
  %t2916.us = add nsw i32 %9885, %9858
  %t2917.us = mul nsw <4 x i32> %t2913.us, %9172
  %9886 = sub nsw i32 %9874, %f7.v3.min_realized
  %t2919.us = add nsw i32 %9886, %9858
  %t2921.us = add nsw i32 %9885, %9860
  %t2922.us = add nsw i32 %9886, %9860
  %9887 = add nsw <4 x i32> %t2913.us, <i32 1, i32 1, i32 1, i32 1>
  %t2923.us = mul nsw <4 x i32> %9887, %9172
  %9888 = add nsw i32 %f128.s0.v3.v343.base161.us, 1
  %9889 = shl i32 %9888, 1
  %9890 = and i32 %9889, 2
  %9891 = ashr i32 %9888, 1
  %t2924.us = add nsw i32 %9890, %9891
  %9892 = shufflevector <4 x float> %9877, <4 x float> %9880, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2925.us = fmul <4 x float> %9156, %9892
  %a1098.us = fptosi <4 x float> %t2925.us to <4 x i32>
  %a1101.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1098.us)
  %9893 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1101.us, <4 x i32> zeroinitializer)
  %9894 = sitofp <4 x i32> %9893 to <4 x float>
  %t2927.us = fsub <4 x float> %t2925.us, %9894
  %t2930.us = sub nsw <4 x i32> %9893, %9165
  %9895 = sub nsw i32 %t2924.us, %f7.v3.min_realized
  %t2932.us = add nsw i32 %9895, %9858
  %t2933.us = mul nsw <4 x i32> %t2930.us, %9172
  %9896 = sub nsw i32 %9891, %f7.v3.min_realized
  %t2935.us = add nsw i32 %9896, %9858
  %t2936.us = add nsw i32 %9895, %9860
  %t2937.us = add nsw i32 %9896, %9860
  %9897 = add nsw <4 x i32> %t2930.us, <i32 1, i32 1, i32 1, i32 1>
  %t2938.us = mul nsw <4 x i32> %9897, %9172
  %9898 = insertelement <4 x i32> undef, i32 %t2922.us, i64 0
  %9899 = shufflevector <4 x i32> %9898, <4 x i32> undef, <4 x i32> zeroinitializer
  %9900 = add nsw <4 x i32> %9899, <i32 0, i32 1, i32 2, i32 3>
  %9901 = add nsw <4 x i32> %t2923.us, %9900
  %9902 = sext <4 x i32> %9901 to <4 x i64>
  %9903 = extractelement <4 x i64> %9902, i64 0
  %9904 = getelementptr inbounds float, ptr %f7.host, i64 %9903
  %9905 = load float, ptr %9904, align 4, !tbaa !54
  %9906 = insertelement <4 x float> undef, float %9905, i64 0
  %9907 = extractelement <4 x i64> %9902, i64 1
  %9908 = getelementptr inbounds float, ptr %f7.host, i64 %9907
  %9909 = load float, ptr %9908, align 4, !tbaa !54
  %9910 = insertelement <4 x float> %9906, float %9909, i64 1
  %9911 = extractelement <4 x i64> %9902, i64 2
  %9912 = getelementptr inbounds float, ptr %f7.host, i64 %9911
  %9913 = load float, ptr %9912, align 4, !tbaa !54
  %9914 = insertelement <4 x float> %9910, float %9913, i64 2
  %9915 = extractelement <4 x i64> %9902, i64 3
  %9916 = getelementptr inbounds float, ptr %f7.host, i64 %9915
  %9917 = load float, ptr %9916, align 4, !tbaa !54
  %9918 = insertelement <4 x float> %9914, float %9917, i64 3
  %9919 = fmul <4 x float> %9918, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9920 = insertelement <4 x i32> undef, i32 %t2921.us, i64 0
  %9921 = shufflevector <4 x i32> %9920, <4 x i32> undef, <4 x i32> zeroinitializer
  %9922 = add <4 x i32> %9921, <i32 -1, i32 0, i32 1, i32 2>
  %9923 = add <4 x i32> %9922, %t2923.us
  %9924 = sext <4 x i32> %9923 to <4 x i64>
  %9925 = extractelement <4 x i64> %9924, i64 0
  %9926 = getelementptr inbounds float, ptr %f7.host, i64 %9925
  %9927 = load float, ptr %9926, align 4, !tbaa !54
  %9928 = insertelement <4 x float> undef, float %9927, i64 0
  %9929 = extractelement <4 x i64> %9924, i64 1
  %9930 = getelementptr inbounds float, ptr %f7.host, i64 %9929
  %9931 = load float, ptr %9930, align 4, !tbaa !54
  %9932 = insertelement <4 x float> %9928, float %9931, i64 1
  %9933 = extractelement <4 x i64> %9924, i64 2
  %9934 = getelementptr inbounds float, ptr %f7.host, i64 %9933
  %9935 = load float, ptr %9934, align 4, !tbaa !54
  %9936 = insertelement <4 x float> %9932, float %9935, i64 2
  %9937 = extractelement <4 x i64> %9924, i64 3
  %9938 = getelementptr inbounds float, ptr %f7.host, i64 %9937
  %9939 = load float, ptr %9938, align 4, !tbaa !54
  %9940 = insertelement <4 x float> %9936, float %9939, i64 3
  %9941 = fmul <4 x float> %9940, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9942 = fadd <4 x float> %9919, %9941
  %9943 = fmul <4 x float> %9942, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9944 = insertelement <4 x i32> undef, i32 %t2919.us, i64 0
  %9945 = shufflevector <4 x i32> %9944, <4 x i32> undef, <4 x i32> zeroinitializer
  %9946 = add nsw <4 x i32> %9945, <i32 0, i32 1, i32 2, i32 3>
  %9947 = add nsw <4 x i32> %t2923.us, %9946
  %9948 = sext <4 x i32> %9947 to <4 x i64>
  %9949 = extractelement <4 x i64> %9948, i64 0
  %9950 = getelementptr inbounds float, ptr %f7.host, i64 %9949
  %9951 = load float, ptr %9950, align 4, !tbaa !54
  %9952 = insertelement <4 x float> undef, float %9951, i64 0
  %9953 = extractelement <4 x i64> %9948, i64 1
  %9954 = getelementptr inbounds float, ptr %f7.host, i64 %9953
  %9955 = load float, ptr %9954, align 4, !tbaa !54
  %9956 = insertelement <4 x float> %9952, float %9955, i64 1
  %9957 = extractelement <4 x i64> %9948, i64 2
  %9958 = getelementptr inbounds float, ptr %f7.host, i64 %9957
  %9959 = load float, ptr %9958, align 4, !tbaa !54
  %9960 = insertelement <4 x float> %9956, float %9959, i64 2
  %9961 = extractelement <4 x i64> %9948, i64 3
  %9962 = getelementptr inbounds float, ptr %f7.host, i64 %9961
  %9963 = load float, ptr %9962, align 4, !tbaa !54
  %9964 = insertelement <4 x float> %9960, float %9963, i64 3
  %9965 = fmul <4 x float> %9964, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %9966 = insertelement <4 x i32> undef, i32 %t2916.us, i64 0
  %9967 = shufflevector <4 x i32> %9966, <4 x i32> undef, <4 x i32> zeroinitializer
  %9968 = add <4 x i32> %9967, <i32 -1, i32 0, i32 1, i32 2>
  %9969 = add <4 x i32> %9968, %t2923.us
  %9970 = sext <4 x i32> %9969 to <4 x i64>
  %9971 = extractelement <4 x i64> %9970, i64 0
  %9972 = getelementptr inbounds float, ptr %f7.host, i64 %9971
  %9973 = load float, ptr %9972, align 4, !tbaa !54
  %9974 = insertelement <4 x float> undef, float %9973, i64 0
  %9975 = extractelement <4 x i64> %9970, i64 1
  %9976 = getelementptr inbounds float, ptr %f7.host, i64 %9975
  %9977 = load float, ptr %9976, align 4, !tbaa !54
  %9978 = insertelement <4 x float> %9974, float %9977, i64 1
  %9979 = extractelement <4 x i64> %9970, i64 2
  %9980 = getelementptr inbounds float, ptr %f7.host, i64 %9979
  %9981 = load float, ptr %9980, align 4, !tbaa !54
  %9982 = insertelement <4 x float> %9978, float %9981, i64 2
  %9983 = extractelement <4 x i64> %9970, i64 3
  %9984 = getelementptr inbounds float, ptr %f7.host, i64 %9983
  %9985 = load float, ptr %9984, align 4, !tbaa !54
  %9986 = insertelement <4 x float> %9982, float %9985, i64 3
  %9987 = fmul <4 x float> %9986, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9988 = fadd <4 x float> %9965, %9987
  %9989 = fmul <4 x float> %9988, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %9990 = fadd <4 x float> %9943, %9989
  %9991 = mul nsw <4 x i32> %9887, %9185
  %9992 = insertelement <4 x i32> undef, i32 %t2911.us, i64 0
  %9993 = shufflevector <4 x i32> %9992, <4 x i32> undef, <4 x i32> zeroinitializer
  %9994 = add nsw <4 x i32> %9993, <i32 0, i32 2, i32 4, i32 6>
  %9995 = add nsw <4 x i32> %9991, %9994
  %9996 = sext <4 x i32> %9995 to <4 x i64>
  %9997 = extractelement <4 x i64> %9996, i64 0
  %9998 = getelementptr inbounds float, ptr %f6.host, i64 %9997
  %9999 = load float, ptr %9998, align 4, !tbaa !50
  %10000 = insertelement <4 x float> undef, float %9999, i64 0
  %10001 = extractelement <4 x i64> %9996, i64 1
  %10002 = getelementptr inbounds float, ptr %f6.host, i64 %10001
  %10003 = load float, ptr %10002, align 4, !tbaa !50
  %10004 = insertelement <4 x float> %10000, float %10003, i64 1
  %10005 = extractelement <4 x i64> %9996, i64 2
  %10006 = getelementptr inbounds float, ptr %f6.host, i64 %10005
  %10007 = load float, ptr %10006, align 4, !tbaa !50
  %10008 = insertelement <4 x float> %10004, float %10007, i64 2
  %10009 = extractelement <4 x i64> %9996, i64 3
  %10010 = getelementptr inbounds float, ptr %f6.host, i64 %10009
  %10011 = load float, ptr %10010, align 4, !tbaa !50
  %10012 = insertelement <4 x float> %10008, float %10011, i64 3
  %10013 = fsub <4 x float> %10012, %9990
  %10014 = fmul <4 x float> %t2906.us, %10013
  %10015 = add nsw <4 x i32> %t2917.us, %9900
  %10016 = sext <4 x i32> %10015 to <4 x i64>
  %10017 = extractelement <4 x i64> %10016, i64 0
  %10018 = getelementptr inbounds float, ptr %f7.host, i64 %10017
  %10019 = load float, ptr %10018, align 4, !tbaa !54
  %10020 = insertelement <4 x float> undef, float %10019, i64 0
  %10021 = extractelement <4 x i64> %10016, i64 1
  %10022 = getelementptr inbounds float, ptr %f7.host, i64 %10021
  %10023 = load float, ptr %10022, align 4, !tbaa !54
  %10024 = insertelement <4 x float> %10020, float %10023, i64 1
  %10025 = extractelement <4 x i64> %10016, i64 2
  %10026 = getelementptr inbounds float, ptr %f7.host, i64 %10025
  %10027 = load float, ptr %10026, align 4, !tbaa !54
  %10028 = insertelement <4 x float> %10024, float %10027, i64 2
  %10029 = extractelement <4 x i64> %10016, i64 3
  %10030 = getelementptr inbounds float, ptr %f7.host, i64 %10029
  %10031 = load float, ptr %10030, align 4, !tbaa !54
  %10032 = insertelement <4 x float> %10028, float %10031, i64 3
  %10033 = fmul <4 x float> %10032, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10034 = add <4 x i32> %t2917.us, %9921
  %10035 = add <4 x i32> %10034, <i32 -1, i32 0, i32 1, i32 2>
  %10036 = sext <4 x i32> %10035 to <4 x i64>
  %10037 = extractelement <4 x i64> %10036, i64 0
  %10038 = getelementptr inbounds float, ptr %f7.host, i64 %10037
  %10039 = load float, ptr %10038, align 4, !tbaa !54
  %10040 = insertelement <4 x float> undef, float %10039, i64 0
  %10041 = extractelement <4 x i64> %10036, i64 1
  %10042 = getelementptr inbounds float, ptr %f7.host, i64 %10041
  %10043 = load float, ptr %10042, align 4, !tbaa !54
  %10044 = insertelement <4 x float> %10040, float %10043, i64 1
  %10045 = extractelement <4 x i64> %10036, i64 2
  %10046 = getelementptr inbounds float, ptr %f7.host, i64 %10045
  %10047 = load float, ptr %10046, align 4, !tbaa !54
  %10048 = insertelement <4 x float> %10044, float %10047, i64 2
  %10049 = extractelement <4 x i64> %10036, i64 3
  %10050 = getelementptr inbounds float, ptr %f7.host, i64 %10049
  %10051 = load float, ptr %10050, align 4, !tbaa !54
  %10052 = insertelement <4 x float> %10048, float %10051, i64 3
  %10053 = fmul <4 x float> %10052, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10054 = fadd <4 x float> %10033, %10053
  %10055 = fmul <4 x float> %10054, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10056 = add nsw <4 x i32> %t2917.us, %9946
  %10057 = sext <4 x i32> %10056 to <4 x i64>
  %10058 = extractelement <4 x i64> %10057, i64 0
  %10059 = getelementptr inbounds float, ptr %f7.host, i64 %10058
  %10060 = load float, ptr %10059, align 4, !tbaa !54
  %10061 = insertelement <4 x float> undef, float %10060, i64 0
  %10062 = extractelement <4 x i64> %10057, i64 1
  %10063 = getelementptr inbounds float, ptr %f7.host, i64 %10062
  %10064 = load float, ptr %10063, align 4, !tbaa !54
  %10065 = insertelement <4 x float> %10061, float %10064, i64 1
  %10066 = extractelement <4 x i64> %10057, i64 2
  %10067 = getelementptr inbounds float, ptr %f7.host, i64 %10066
  %10068 = load float, ptr %10067, align 4, !tbaa !54
  %10069 = insertelement <4 x float> %10065, float %10068, i64 2
  %10070 = extractelement <4 x i64> %10057, i64 3
  %10071 = getelementptr inbounds float, ptr %f7.host, i64 %10070
  %10072 = load float, ptr %10071, align 4, !tbaa !54
  %10073 = insertelement <4 x float> %10069, float %10072, i64 3
  %10074 = fmul <4 x float> %10073, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10075 = add <4 x i32> %t2917.us, %9967
  %10076 = add <4 x i32> %10075, <i32 -1, i32 0, i32 1, i32 2>
  %10077 = sext <4 x i32> %10076 to <4 x i64>
  %10078 = extractelement <4 x i64> %10077, i64 0
  %10079 = getelementptr inbounds float, ptr %f7.host, i64 %10078
  %10080 = load float, ptr %10079, align 4, !tbaa !54
  %10081 = insertelement <4 x float> undef, float %10080, i64 0
  %10082 = extractelement <4 x i64> %10077, i64 1
  %10083 = getelementptr inbounds float, ptr %f7.host, i64 %10082
  %10084 = load float, ptr %10083, align 4, !tbaa !54
  %10085 = insertelement <4 x float> %10081, float %10084, i64 1
  %10086 = extractelement <4 x i64> %10077, i64 2
  %10087 = getelementptr inbounds float, ptr %f7.host, i64 %10086
  %10088 = load float, ptr %10087, align 4, !tbaa !54
  %10089 = insertelement <4 x float> %10085, float %10088, i64 2
  %10090 = extractelement <4 x i64> %10077, i64 3
  %10091 = getelementptr inbounds float, ptr %f7.host, i64 %10090
  %10092 = load float, ptr %10091, align 4, !tbaa !54
  %10093 = insertelement <4 x float> %10089, float %10092, i64 3
  %10094 = fmul <4 x float> %10093, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10095 = fadd <4 x float> %10074, %10094
  %10096 = fmul <4 x float> %10095, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10097 = fadd <4 x float> %10055, %10096
  %10098 = mul nsw <4 x i32> %t2913.us, %9185
  %10099 = add nsw <4 x i32> %10098, %9994
  %10100 = sext <4 x i32> %10099 to <4 x i64>
  %10101 = extractelement <4 x i64> %10100, i64 0
  %10102 = getelementptr inbounds float, ptr %f6.host, i64 %10101
  %10103 = load float, ptr %10102, align 4, !tbaa !50
  %10104 = insertelement <4 x float> undef, float %10103, i64 0
  %10105 = extractelement <4 x i64> %10100, i64 1
  %10106 = getelementptr inbounds float, ptr %f6.host, i64 %10105
  %10107 = load float, ptr %10106, align 4, !tbaa !50
  %10108 = insertelement <4 x float> %10104, float %10107, i64 1
  %10109 = extractelement <4 x i64> %10100, i64 2
  %10110 = getelementptr inbounds float, ptr %f6.host, i64 %10109
  %10111 = load float, ptr %10110, align 4, !tbaa !50
  %10112 = insertelement <4 x float> %10108, float %10111, i64 2
  %10113 = extractelement <4 x i64> %10100, i64 3
  %10114 = getelementptr inbounds float, ptr %f6.host, i64 %10113
  %10115 = load float, ptr %10114, align 4, !tbaa !50
  %10116 = insertelement <4 x float> %10112, float %10115, i64 3
  %10117 = fsub <4 x float> %10116, %10097
  %10118 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2906.us
  %10119 = fmul <4 x float> %10118, %10117
  %10120 = fadd <4 x float> %10014, %10119
  %narrow92.us = sub nsw i32 %9874, %f129.v3.min_realized
  %10121 = sext i32 %narrow92.us to i64
  %10122 = add nsw i64 %10121, %9861
  %10123 = getelementptr inbounds float, ptr %9051, i64 %10122
  %10124 = load <4 x float>, ptr %10123, align 4, !tbaa !64
  %10125 = fmul <4 x float> %10124, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10126 = sext i32 %t2902.us to i64
  %10127 = sub nsw i64 %10126, %9186
  %10128 = add nsw i64 %9862, %10127
  %10129 = getelementptr inbounds float, ptr %9051, i64 %10128
  %10130 = load <4 x float>, ptr %10129, align 4, !tbaa !64
  %10131 = fmul <4 x float> %10130, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10132 = fadd <4 x float> %10125, %10131
  %10133 = fmul <4 x float> %10132, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10134 = add nsw i64 %10121, %9863
  %10135 = getelementptr inbounds float, ptr %9051, i64 %10134
  %10136 = load <4 x float>, ptr %10135, align 4, !tbaa !64
  %10137 = fmul <4 x float> %10136, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10138 = add nsw i64 %9864, %10127
  %10139 = getelementptr inbounds float, ptr %9051, i64 %10138
  %10140 = load <4 x float>, ptr %10139, align 4, !tbaa !64
  %10141 = fmul <4 x float> %10140, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10142 = fadd <4 x float> %10137, %10141
  %10143 = fmul <4 x float> %10142, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10144 = fadd <4 x float> %10133, %10143
  %10145 = fadd <4 x float> %10120, %10144
  %10146 = insertelement <4 x i32> undef, i32 %t2937.us, i64 0
  %10147 = shufflevector <4 x i32> %10146, <4 x i32> undef, <4 x i32> zeroinitializer
  %10148 = add nsw <4 x i32> %10147, <i32 0, i32 1, i32 2, i32 3>
  %10149 = add nsw <4 x i32> %t2938.us, %10148
  %10150 = sext <4 x i32> %10149 to <4 x i64>
  %10151 = extractelement <4 x i64> %10150, i64 0
  %10152 = getelementptr inbounds float, ptr %f7.host, i64 %10151
  %10153 = load float, ptr %10152, align 4, !tbaa !54
  %10154 = insertelement <4 x float> undef, float %10153, i64 0
  %10155 = extractelement <4 x i64> %10150, i64 1
  %10156 = getelementptr inbounds float, ptr %f7.host, i64 %10155
  %10157 = load float, ptr %10156, align 4, !tbaa !54
  %10158 = insertelement <4 x float> %10154, float %10157, i64 1
  %10159 = extractelement <4 x i64> %10150, i64 2
  %10160 = getelementptr inbounds float, ptr %f7.host, i64 %10159
  %10161 = load float, ptr %10160, align 4, !tbaa !54
  %10162 = insertelement <4 x float> %10158, float %10161, i64 2
  %10163 = extractelement <4 x i64> %10150, i64 3
  %10164 = getelementptr inbounds float, ptr %f7.host, i64 %10163
  %10165 = load float, ptr %10164, align 4, !tbaa !54
  %10166 = insertelement <4 x float> %10162, float %10165, i64 3
  %10167 = fmul <4 x float> %10166, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10168 = insertelement <4 x i32> undef, i32 %t2936.us, i64 0
  %10169 = shufflevector <4 x i32> %10168, <4 x i32> undef, <4 x i32> zeroinitializer
  %10170 = add nsw <4 x i32> %10169, <i32 0, i32 1, i32 2, i32 3>
  %10171 = add <4 x i32> %t2938.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10172 = add <4 x i32> %10171, %10170
  %10173 = sext <4 x i32> %10172 to <4 x i64>
  %10174 = extractelement <4 x i64> %10173, i64 0
  %10175 = getelementptr inbounds float, ptr %f7.host, i64 %10174
  %10176 = load float, ptr %10175, align 4, !tbaa !54
  %10177 = insertelement <4 x float> undef, float %10176, i64 0
  %10178 = extractelement <4 x i64> %10173, i64 1
  %10179 = getelementptr inbounds float, ptr %f7.host, i64 %10178
  %10180 = load float, ptr %10179, align 4, !tbaa !54
  %10181 = insertelement <4 x float> %10177, float %10180, i64 1
  %10182 = extractelement <4 x i64> %10173, i64 2
  %10183 = getelementptr inbounds float, ptr %f7.host, i64 %10182
  %10184 = load float, ptr %10183, align 4, !tbaa !54
  %10185 = insertelement <4 x float> %10181, float %10184, i64 2
  %10186 = extractelement <4 x i64> %10173, i64 3
  %10187 = getelementptr inbounds float, ptr %f7.host, i64 %10186
  %10188 = load float, ptr %10187, align 4, !tbaa !54
  %10189 = insertelement <4 x float> %10185, float %10188, i64 3
  %10190 = fmul <4 x float> %10189, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10191 = fadd <4 x float> %10167, %10190
  %10192 = fmul <4 x float> %10191, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10193 = insertelement <4 x i32> undef, i32 %t2935.us, i64 0
  %10194 = shufflevector <4 x i32> %10193, <4 x i32> undef, <4 x i32> zeroinitializer
  %10195 = add nsw <4 x i32> %10194, <i32 0, i32 1, i32 2, i32 3>
  %10196 = add nsw <4 x i32> %t2938.us, %10195
  %10197 = sext <4 x i32> %10196 to <4 x i64>
  %10198 = extractelement <4 x i64> %10197, i64 0
  %10199 = getelementptr inbounds float, ptr %f7.host, i64 %10198
  %10200 = load float, ptr %10199, align 4, !tbaa !54
  %10201 = insertelement <4 x float> undef, float %10200, i64 0
  %10202 = extractelement <4 x i64> %10197, i64 1
  %10203 = getelementptr inbounds float, ptr %f7.host, i64 %10202
  %10204 = load float, ptr %10203, align 4, !tbaa !54
  %10205 = insertelement <4 x float> %10201, float %10204, i64 1
  %10206 = extractelement <4 x i64> %10197, i64 2
  %10207 = getelementptr inbounds float, ptr %f7.host, i64 %10206
  %10208 = load float, ptr %10207, align 4, !tbaa !54
  %10209 = insertelement <4 x float> %10205, float %10208, i64 2
  %10210 = extractelement <4 x i64> %10197, i64 3
  %10211 = getelementptr inbounds float, ptr %f7.host, i64 %10210
  %10212 = load float, ptr %10211, align 4, !tbaa !54
  %10213 = insertelement <4 x float> %10209, float %10212, i64 3
  %10214 = fmul <4 x float> %10213, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10215 = insertelement <4 x i32> undef, i32 %t2932.us, i64 0
  %10216 = shufflevector <4 x i32> %10215, <4 x i32> undef, <4 x i32> zeroinitializer
  %10217 = add nsw <4 x i32> %10216, <i32 0, i32 1, i32 2, i32 3>
  %10218 = add <4 x i32> %10171, %10217
  %10219 = sext <4 x i32> %10218 to <4 x i64>
  %10220 = extractelement <4 x i64> %10219, i64 0
  %10221 = getelementptr inbounds float, ptr %f7.host, i64 %10220
  %10222 = load float, ptr %10221, align 4, !tbaa !54
  %10223 = insertelement <4 x float> undef, float %10222, i64 0
  %10224 = extractelement <4 x i64> %10219, i64 1
  %10225 = getelementptr inbounds float, ptr %f7.host, i64 %10224
  %10226 = load float, ptr %10225, align 4, !tbaa !54
  %10227 = insertelement <4 x float> %10223, float %10226, i64 1
  %10228 = extractelement <4 x i64> %10219, i64 2
  %10229 = getelementptr inbounds float, ptr %f7.host, i64 %10228
  %10230 = load float, ptr %10229, align 4, !tbaa !54
  %10231 = insertelement <4 x float> %10227, float %10230, i64 2
  %10232 = extractelement <4 x i64> %10219, i64 3
  %10233 = getelementptr inbounds float, ptr %f7.host, i64 %10232
  %10234 = load float, ptr %10233, align 4, !tbaa !54
  %10235 = insertelement <4 x float> %10231, float %10234, i64 3
  %10236 = fmul <4 x float> %10235, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10237 = fadd <4 x float> %10214, %10236
  %10238 = fmul <4 x float> %10237, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10239 = fadd <4 x float> %10192, %10238
  %10240 = mul nsw <4 x i32> %9897, %9185
  %10241 = add nsw i32 %t2911.us, 1
  %10242 = insertelement <4 x i32> undef, i32 %10241, i64 0
  %10243 = shufflevector <4 x i32> %10242, <4 x i32> undef, <4 x i32> zeroinitializer
  %10244 = add nsw <4 x i32> %10243, <i32 0, i32 2, i32 4, i32 6>
  %10245 = add nsw <4 x i32> %10240, %10244
  %10246 = sext <4 x i32> %10245 to <4 x i64>
  %10247 = extractelement <4 x i64> %10246, i64 0
  %10248 = getelementptr inbounds float, ptr %f6.host, i64 %10247
  %10249 = load float, ptr %10248, align 4, !tbaa !50
  %10250 = insertelement <4 x float> undef, float %10249, i64 0
  %10251 = extractelement <4 x i64> %10246, i64 1
  %10252 = getelementptr inbounds float, ptr %f6.host, i64 %10251
  %10253 = load float, ptr %10252, align 4, !tbaa !50
  %10254 = insertelement <4 x float> %10250, float %10253, i64 1
  %10255 = extractelement <4 x i64> %10246, i64 2
  %10256 = getelementptr inbounds float, ptr %f6.host, i64 %10255
  %10257 = load float, ptr %10256, align 4, !tbaa !50
  %10258 = insertelement <4 x float> %10254, float %10257, i64 2
  %10259 = extractelement <4 x i64> %10246, i64 3
  %10260 = getelementptr inbounds float, ptr %f6.host, i64 %10259
  %10261 = load float, ptr %10260, align 4, !tbaa !50
  %10262 = insertelement <4 x float> %10258, float %10261, i64 3
  %10263 = fsub <4 x float> %10262, %10239
  %10264 = fmul <4 x float> %t2927.us, %10263
  %10265 = add nsw <4 x i32> %t2933.us, %10148
  %10266 = sext <4 x i32> %10265 to <4 x i64>
  %10267 = extractelement <4 x i64> %10266, i64 0
  %10268 = getelementptr inbounds float, ptr %f7.host, i64 %10267
  %10269 = load float, ptr %10268, align 4, !tbaa !54
  %10270 = insertelement <4 x float> undef, float %10269, i64 0
  %10271 = extractelement <4 x i64> %10266, i64 1
  %10272 = getelementptr inbounds float, ptr %f7.host, i64 %10271
  %10273 = load float, ptr %10272, align 4, !tbaa !54
  %10274 = insertelement <4 x float> %10270, float %10273, i64 1
  %10275 = extractelement <4 x i64> %10266, i64 2
  %10276 = getelementptr inbounds float, ptr %f7.host, i64 %10275
  %10277 = load float, ptr %10276, align 4, !tbaa !54
  %10278 = insertelement <4 x float> %10274, float %10277, i64 2
  %10279 = extractelement <4 x i64> %10266, i64 3
  %10280 = getelementptr inbounds float, ptr %f7.host, i64 %10279
  %10281 = load float, ptr %10280, align 4, !tbaa !54
  %10282 = insertelement <4 x float> %10278, float %10281, i64 3
  %10283 = fmul <4 x float> %10282, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10284 = add <4 x i32> %t2933.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10285 = add <4 x i32> %10284, %10170
  %10286 = sext <4 x i32> %10285 to <4 x i64>
  %10287 = extractelement <4 x i64> %10286, i64 0
  %10288 = getelementptr inbounds float, ptr %f7.host, i64 %10287
  %10289 = load float, ptr %10288, align 4, !tbaa !54
  %10290 = insertelement <4 x float> undef, float %10289, i64 0
  %10291 = extractelement <4 x i64> %10286, i64 1
  %10292 = getelementptr inbounds float, ptr %f7.host, i64 %10291
  %10293 = load float, ptr %10292, align 4, !tbaa !54
  %10294 = insertelement <4 x float> %10290, float %10293, i64 1
  %10295 = extractelement <4 x i64> %10286, i64 2
  %10296 = getelementptr inbounds float, ptr %f7.host, i64 %10295
  %10297 = load float, ptr %10296, align 4, !tbaa !54
  %10298 = insertelement <4 x float> %10294, float %10297, i64 2
  %10299 = extractelement <4 x i64> %10286, i64 3
  %10300 = getelementptr inbounds float, ptr %f7.host, i64 %10299
  %10301 = load float, ptr %10300, align 4, !tbaa !54
  %10302 = insertelement <4 x float> %10298, float %10301, i64 3
  %10303 = fmul <4 x float> %10302, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10304 = fadd <4 x float> %10283, %10303
  %10305 = fmul <4 x float> %10304, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10306 = add nsw <4 x i32> %t2933.us, %10195
  %10307 = sext <4 x i32> %10306 to <4 x i64>
  %10308 = extractelement <4 x i64> %10307, i64 0
  %10309 = getelementptr inbounds float, ptr %f7.host, i64 %10308
  %10310 = load float, ptr %10309, align 4, !tbaa !54
  %10311 = insertelement <4 x float> undef, float %10310, i64 0
  %10312 = extractelement <4 x i64> %10307, i64 1
  %10313 = getelementptr inbounds float, ptr %f7.host, i64 %10312
  %10314 = load float, ptr %10313, align 4, !tbaa !54
  %10315 = insertelement <4 x float> %10311, float %10314, i64 1
  %10316 = extractelement <4 x i64> %10307, i64 2
  %10317 = getelementptr inbounds float, ptr %f7.host, i64 %10316
  %10318 = load float, ptr %10317, align 4, !tbaa !54
  %10319 = insertelement <4 x float> %10315, float %10318, i64 2
  %10320 = extractelement <4 x i64> %10307, i64 3
  %10321 = getelementptr inbounds float, ptr %f7.host, i64 %10320
  %10322 = load float, ptr %10321, align 4, !tbaa !54
  %10323 = insertelement <4 x float> %10319, float %10322, i64 3
  %10324 = fmul <4 x float> %10323, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10325 = add <4 x i32> %10284, %10217
  %10326 = sext <4 x i32> %10325 to <4 x i64>
  %10327 = extractelement <4 x i64> %10326, i64 0
  %10328 = getelementptr inbounds float, ptr %f7.host, i64 %10327
  %10329 = load float, ptr %10328, align 4, !tbaa !54
  %10330 = insertelement <4 x float> undef, float %10329, i64 0
  %10331 = extractelement <4 x i64> %10326, i64 1
  %10332 = getelementptr inbounds float, ptr %f7.host, i64 %10331
  %10333 = load float, ptr %10332, align 4, !tbaa !54
  %10334 = insertelement <4 x float> %10330, float %10333, i64 1
  %10335 = extractelement <4 x i64> %10326, i64 2
  %10336 = getelementptr inbounds float, ptr %f7.host, i64 %10335
  %10337 = load float, ptr %10336, align 4, !tbaa !54
  %10338 = insertelement <4 x float> %10334, float %10337, i64 2
  %10339 = extractelement <4 x i64> %10326, i64 3
  %10340 = getelementptr inbounds float, ptr %f7.host, i64 %10339
  %10341 = load float, ptr %10340, align 4, !tbaa !54
  %10342 = insertelement <4 x float> %10338, float %10341, i64 3
  %10343 = fmul <4 x float> %10342, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10344 = fadd <4 x float> %10324, %10343
  %10345 = fmul <4 x float> %10344, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10346 = fadd <4 x float> %10305, %10345
  %10347 = mul nsw <4 x i32> %t2930.us, %9185
  %10348 = add nsw <4 x i32> %10347, %10244
  %10349 = sext <4 x i32> %10348 to <4 x i64>
  %10350 = extractelement <4 x i64> %10349, i64 0
  %10351 = getelementptr inbounds float, ptr %f6.host, i64 %10350
  %10352 = load float, ptr %10351, align 4, !tbaa !50
  %10353 = insertelement <4 x float> undef, float %10352, i64 0
  %10354 = extractelement <4 x i64> %10349, i64 1
  %10355 = getelementptr inbounds float, ptr %f6.host, i64 %10354
  %10356 = load float, ptr %10355, align 4, !tbaa !50
  %10357 = insertelement <4 x float> %10353, float %10356, i64 1
  %10358 = extractelement <4 x i64> %10349, i64 2
  %10359 = getelementptr inbounds float, ptr %f6.host, i64 %10358
  %10360 = load float, ptr %10359, align 4, !tbaa !50
  %10361 = insertelement <4 x float> %10357, float %10360, i64 2
  %10362 = extractelement <4 x i64> %10349, i64 3
  %10363 = getelementptr inbounds float, ptr %f6.host, i64 %10362
  %10364 = load float, ptr %10363, align 4, !tbaa !50
  %10365 = insertelement <4 x float> %10361, float %10364, i64 3
  %10366 = fsub <4 x float> %10365, %10346
  %10367 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2927.us
  %10368 = fmul <4 x float> %10367, %10366
  %10369 = fadd <4 x float> %10264, %10368
  %narrow93.us = sub nsw i32 %9891, %f129.v3.min_realized
  %10370 = sext i32 %narrow93.us to i64
  %10371 = add nsw i64 %10370, %9861
  %10372 = getelementptr inbounds float, ptr %9051, i64 %10371
  %10373 = load <4 x float>, ptr %10372, align 4, !tbaa !64
  %10374 = fmul <4 x float> %10373, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10375 = sext i32 %t2924.us to i64
  %10376 = sub nsw i64 %10375, %9186
  %10377 = add nsw i64 %9862, %10376
  %10378 = getelementptr inbounds float, ptr %9051, i64 %10377
  %10379 = load <4 x float>, ptr %10378, align 4, !tbaa !64
  %10380 = fmul <4 x float> %10379, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10381 = fadd <4 x float> %10374, %10380
  %10382 = fmul <4 x float> %10381, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10383 = add nsw i64 %10370, %9863
  %10384 = getelementptr inbounds float, ptr %9051, i64 %10383
  %10385 = load <4 x float>, ptr %10384, align 4, !tbaa !64
  %10386 = fmul <4 x float> %10385, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10387 = add nsw i64 %9864, %10376
  %10388 = getelementptr inbounds float, ptr %9051, i64 %10387
  %10389 = load <4 x float>, ptr %10388, align 4, !tbaa !64
  %10390 = fmul <4 x float> %10389, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10391 = fadd <4 x float> %10386, %10390
  %10392 = fmul <4 x float> %10391, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10393 = fadd <4 x float> %10382, %10392
  %10394 = fadd <4 x float> %10369, %10393
  %10395 = shufflevector <4 x float> %10145, <4 x float> %10394, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10396 = sext i32 %f128.s0.v3.v343.base161.us to i64
  %10397 = add i64 %9867, %10396
  %10398 = getelementptr inbounds float, ptr %9074, i64 %10397
  store <8 x float> %10395, ptr %10398, align 4, !tbaa !66
  %lsr.iv.next429.us = add nsw i32 %lsr.iv428.us, -1
  %lsr.iv.next431.us = add i32 %lsr.iv430.us, 8
  %.not94.us = icmp eq i32 %lsr.iv.next429.us, 0
  br i1 %.not94.us, label %"end for f128.s0.v3.v3159.loopexit.us", label %"for f128.s0.v3.v3158.us"

"end for f128.s0.v3.v3159.loopexit.us":           ; preds = %"for f128.s0.v3.v3158.us"
  %indvars.iv.next293 = add nsw i64 %indvars.iv292, 1
  %10399 = icmp eq i64 %indvars.iv292, %sext294
  br i1 %10399, label %"produce f127163", label %"for f128.s0.v4155.us"

"produce f127163":                                ; preds = %"end for f128.s0.v3.v3159.loopexit.us", %"produce f128153"
  %10400 = add nsw i32 %9254, 6
  %10401 = ashr i32 %10400, 2
  %.not80 = icmp sgt i32 %f127.s0.v4.min_2, %10401
  %brmerge446 = select i1 %.not80, i1 true, i1 %9193
  br i1 %brmerge446, label %"produce f126173", label %"for f127.s0.v4165.us.preheader", !prof !27

"for f127.s0.v4165.us.preheader":                 ; preds = %"produce f127163"
  %10402 = sext i32 %f127.s0.v4.min_2 to i64
  %sext298 = sext i32 %10401 to i64
  br label %"for f127.s0.v4165.us"

"for f127.s0.v4165.us":                           ; preds = %"for f127.s0.v4165.us.preheader", %"end for f127.s0.v3.v3169.loopexit.us"
  %indvars.iv296 = phi i64 [ %10402, %"for f127.s0.v4165.us.preheader" ], [ %indvars.iv.next297, %"end for f127.s0.v3.v3169.loopexit.us" ]
  %10403 = trunc i64 %indvars.iv296 to i32
  %10404 = shl i32 %10403, 1
  %10405 = and i32 %10404, 2
  %10406 = ashr i32 %10403, 1
  %t2939.us = add nsw i32 %10405, %10406
  %10407 = trunc i64 %indvars.iv296 to i32
  %10408 = sub i32 %10407, %f73.v4.min_realized
  %10409 = mul i32 %10408, %9194
  %10410 = sub i32 %10409, %f73.v3.min_realized
  %10411 = add nsw i32 %t2939.us, %9195
  %t2946.us = mul nsw i32 %10411, %9067
  %10412 = sub nsw i32 %10406, %9190
  %t2948.us = mul nsw i32 %10412, %9067
  %10413 = add i32 %t2939.us, %9196
  %10414 = mul nsw i32 %10413, %f6.stride.1
  %10415 = sub nsw i32 %10406, %f6.v4.min_realized
  %10416 = mul nsw i32 %10415, %f6.stride.1
  %10417 = sext i32 %t2948.us to i64
  %10418 = add nsw i64 %10417, -1
  %10419 = sext i32 %t2946.us to i64
  %10420 = add nsw i64 %10419, -1
  %10421 = sub nsw i64 %indvars.iv296, %9203
  %10422 = mul nsw i64 %10421, %9202
  %10423 = sub i64 %10422, %9204
  %10424 = trunc i64 %indvars.iv296 to i32
  %10425 = sub i32 %10424, %f5.v4.min_realized
  %10426 = mul i32 %10425, %f5.stride.1
  br label %"for f127.s0.v3.v3168.us"

"for f127.s0.v3.v3168.us":                        ; preds = %"for f127.s0.v4165.us", %"for f127.s0.v3.v3168.us"
  %lsr.iv434.us = phi i32 [ %lsr.iv.next435.us, %"for f127.s0.v3.v3168.us" ], [ 0, %"for f127.s0.v4165.us" ]
  %lsr.iv432.us = phi i32 [ %lsr.iv.next433.us, %"for f127.s0.v3.v3168.us" ], [ %9192, %"for f127.s0.v4165.us" ]
  %10427 = add i32 %lsr.iv434.us, %9055
  %f127.s0.v3.v323.base171.us = tail call i32 @llvm.smin.i32(i32 %b1063, i32 %10427)
  %10428 = shl i32 %f127.s0.v3.v323.base171.us, 1
  %10429 = and i32 %10428, 2
  %10430 = ashr i32 %f127.s0.v3.v323.base171.us, 1
  %t2940.us = add nsw i32 %10429, %10430
  %t2941.us = add i32 %10410, %f127.s0.v3.v323.base171.us
  %10431 = sext i32 %t2941.us to i64
  %10432 = getelementptr inbounds float, ptr %f73.host, i64 %10431
  %10433 = load <4 x float>, ptr %10432, align 4, !tbaa !52
  %10434 = add nsw i64 %10431, 4
  %10435 = getelementptr inbounds float, ptr %f73.host, i64 %10434
  %10436 = load <4 x float>, ptr %10435, align 4, !tbaa !52
  %10437 = shufflevector <4 x float> %10433, <4 x float> %10436, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2942.us = fmul <4 x float> %9156, %10437
  %a1103.us = fptosi <4 x float> %t2942.us to <4 x i32>
  %a1106.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1103.us)
  %10438 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1106.us, <4 x i32> zeroinitializer)
  %10439 = sitofp <4 x i32> %10438 to <4 x float>
  %t2944.us = fsub <4 x float> %t2942.us, %10439
  %10440 = sub nsw i32 %f127.s0.v3.v323.base171.us, %f5.v3.min_realized
  %t2949.us = add nsw i32 %10440, %10426
  %t2951.us = sub nsw <4 x i32> %10438, %9165
  %10441 = sub nsw i32 %t2940.us, %f6.v3.min_realized
  %t2954.us = add nsw i32 %10441, %10414
  %t2955.us = mul nsw <4 x i32> %t2951.us, %9185
  %10442 = sub nsw i32 %10430, %f6.v3.min_realized
  %t2957.us = add nsw i32 %10442, %10414
  %t2959.us = add nsw i32 %10441, %10416
  %t2960.us = add nsw i32 %10442, %10416
  %10443 = add nsw <4 x i32> %t2951.us, <i32 1, i32 1, i32 1, i32 1>
  %t2961.us = mul nsw <4 x i32> %10443, %9185
  %10444 = add nsw i32 %f127.s0.v3.v323.base171.us, 1
  %10445 = shl i32 %10444, 1
  %10446 = and i32 %10445, 2
  %10447 = ashr i32 %10444, 1
  %t2962.us = add nsw i32 %10446, %10447
  %10448 = shufflevector <4 x float> %10433, <4 x float> %10436, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t2963.us = fmul <4 x float> %9156, %10448
  %a1107.us = fptosi <4 x float> %t2963.us to <4 x i32>
  %a1110.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1107.us)
  %10449 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1110.us, <4 x i32> zeroinitializer)
  %10450 = sitofp <4 x i32> %10449 to <4 x float>
  %t2965.us = fsub <4 x float> %t2963.us, %10450
  %t2968.us = sub nsw <4 x i32> %10449, %9165
  %10451 = sub nsw i32 %t2962.us, %f6.v3.min_realized
  %t2970.us = add nsw i32 %10451, %10414
  %t2971.us = mul nsw <4 x i32> %t2968.us, %9185
  %10452 = sub nsw i32 %10447, %f6.v3.min_realized
  %t2973.us = add nsw i32 %10452, %10414
  %t2974.us = add nsw i32 %10451, %10416
  %t2975.us = add nsw i32 %10452, %10416
  %10453 = add nsw <4 x i32> %t2968.us, <i32 1, i32 1, i32 1, i32 1>
  %t2976.us = mul nsw <4 x i32> %10453, %9185
  %10454 = insertelement <4 x i32> undef, i32 %t2960.us, i64 0
  %10455 = shufflevector <4 x i32> %10454, <4 x i32> undef, <4 x i32> zeroinitializer
  %10456 = add nsw <4 x i32> %10455, <i32 0, i32 1, i32 2, i32 3>
  %10457 = add nsw <4 x i32> %t2961.us, %10456
  %10458 = sext <4 x i32> %10457 to <4 x i64>
  %10459 = extractelement <4 x i64> %10458, i64 0
  %10460 = getelementptr inbounds float, ptr %f6.host, i64 %10459
  %10461 = load float, ptr %10460, align 4, !tbaa !50
  %10462 = insertelement <4 x float> undef, float %10461, i64 0
  %10463 = extractelement <4 x i64> %10458, i64 1
  %10464 = getelementptr inbounds float, ptr %f6.host, i64 %10463
  %10465 = load float, ptr %10464, align 4, !tbaa !50
  %10466 = insertelement <4 x float> %10462, float %10465, i64 1
  %10467 = extractelement <4 x i64> %10458, i64 2
  %10468 = getelementptr inbounds float, ptr %f6.host, i64 %10467
  %10469 = load float, ptr %10468, align 4, !tbaa !50
  %10470 = insertelement <4 x float> %10466, float %10469, i64 2
  %10471 = extractelement <4 x i64> %10458, i64 3
  %10472 = getelementptr inbounds float, ptr %f6.host, i64 %10471
  %10473 = load float, ptr %10472, align 4, !tbaa !50
  %10474 = insertelement <4 x float> %10470, float %10473, i64 3
  %10475 = fmul <4 x float> %10474, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10476 = insertelement <4 x i32> undef, i32 %t2959.us, i64 0
  %10477 = shufflevector <4 x i32> %10476, <4 x i32> undef, <4 x i32> zeroinitializer
  %10478 = add <4 x i32> %10477, <i32 -1, i32 0, i32 1, i32 2>
  %10479 = add <4 x i32> %10478, %t2961.us
  %10480 = sext <4 x i32> %10479 to <4 x i64>
  %10481 = extractelement <4 x i64> %10480, i64 0
  %10482 = getelementptr inbounds float, ptr %f6.host, i64 %10481
  %10483 = load float, ptr %10482, align 4, !tbaa !50
  %10484 = insertelement <4 x float> undef, float %10483, i64 0
  %10485 = extractelement <4 x i64> %10480, i64 1
  %10486 = getelementptr inbounds float, ptr %f6.host, i64 %10485
  %10487 = load float, ptr %10486, align 4, !tbaa !50
  %10488 = insertelement <4 x float> %10484, float %10487, i64 1
  %10489 = extractelement <4 x i64> %10480, i64 2
  %10490 = getelementptr inbounds float, ptr %f6.host, i64 %10489
  %10491 = load float, ptr %10490, align 4, !tbaa !50
  %10492 = insertelement <4 x float> %10488, float %10491, i64 2
  %10493 = extractelement <4 x i64> %10480, i64 3
  %10494 = getelementptr inbounds float, ptr %f6.host, i64 %10493
  %10495 = load float, ptr %10494, align 4, !tbaa !50
  %10496 = insertelement <4 x float> %10492, float %10495, i64 3
  %10497 = fmul <4 x float> %10496, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10498 = fadd <4 x float> %10475, %10497
  %10499 = fmul <4 x float> %10498, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10500 = insertelement <4 x i32> undef, i32 %t2957.us, i64 0
  %10501 = shufflevector <4 x i32> %10500, <4 x i32> undef, <4 x i32> zeroinitializer
  %10502 = add nsw <4 x i32> %10501, <i32 0, i32 1, i32 2, i32 3>
  %10503 = add nsw <4 x i32> %t2961.us, %10502
  %10504 = sext <4 x i32> %10503 to <4 x i64>
  %10505 = extractelement <4 x i64> %10504, i64 0
  %10506 = getelementptr inbounds float, ptr %f6.host, i64 %10505
  %10507 = load float, ptr %10506, align 4, !tbaa !50
  %10508 = insertelement <4 x float> undef, float %10507, i64 0
  %10509 = extractelement <4 x i64> %10504, i64 1
  %10510 = getelementptr inbounds float, ptr %f6.host, i64 %10509
  %10511 = load float, ptr %10510, align 4, !tbaa !50
  %10512 = insertelement <4 x float> %10508, float %10511, i64 1
  %10513 = extractelement <4 x i64> %10504, i64 2
  %10514 = getelementptr inbounds float, ptr %f6.host, i64 %10513
  %10515 = load float, ptr %10514, align 4, !tbaa !50
  %10516 = insertelement <4 x float> %10512, float %10515, i64 2
  %10517 = extractelement <4 x i64> %10504, i64 3
  %10518 = getelementptr inbounds float, ptr %f6.host, i64 %10517
  %10519 = load float, ptr %10518, align 4, !tbaa !50
  %10520 = insertelement <4 x float> %10516, float %10519, i64 3
  %10521 = fmul <4 x float> %10520, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10522 = insertelement <4 x i32> undef, i32 %t2954.us, i64 0
  %10523 = shufflevector <4 x i32> %10522, <4 x i32> undef, <4 x i32> zeroinitializer
  %10524 = add <4 x i32> %10523, <i32 -1, i32 0, i32 1, i32 2>
  %10525 = add <4 x i32> %10524, %t2961.us
  %10526 = sext <4 x i32> %10525 to <4 x i64>
  %10527 = extractelement <4 x i64> %10526, i64 0
  %10528 = getelementptr inbounds float, ptr %f6.host, i64 %10527
  %10529 = load float, ptr %10528, align 4, !tbaa !50
  %10530 = insertelement <4 x float> undef, float %10529, i64 0
  %10531 = extractelement <4 x i64> %10526, i64 1
  %10532 = getelementptr inbounds float, ptr %f6.host, i64 %10531
  %10533 = load float, ptr %10532, align 4, !tbaa !50
  %10534 = insertelement <4 x float> %10530, float %10533, i64 1
  %10535 = extractelement <4 x i64> %10526, i64 2
  %10536 = getelementptr inbounds float, ptr %f6.host, i64 %10535
  %10537 = load float, ptr %10536, align 4, !tbaa !50
  %10538 = insertelement <4 x float> %10534, float %10537, i64 2
  %10539 = extractelement <4 x i64> %10526, i64 3
  %10540 = getelementptr inbounds float, ptr %f6.host, i64 %10539
  %10541 = load float, ptr %10540, align 4, !tbaa !50
  %10542 = insertelement <4 x float> %10538, float %10541, i64 3
  %10543 = fmul <4 x float> %10542, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10544 = fadd <4 x float> %10521, %10543
  %10545 = fmul <4 x float> %10544, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10546 = fadd <4 x float> %10499, %10545
  %10547 = mul nsw <4 x i32> %10443, %9199
  %10548 = insertelement <4 x i32> undef, i32 %t2949.us, i64 0
  %10549 = shufflevector <4 x i32> %10548, <4 x i32> undef, <4 x i32> zeroinitializer
  %10550 = add nsw <4 x i32> %10549, <i32 0, i32 2, i32 4, i32 6>
  %10551 = add nsw <4 x i32> %10547, %10550
  %10552 = sext <4 x i32> %10551 to <4 x i64>
  %10553 = extractelement <4 x i64> %10552, i64 0
  %10554 = getelementptr inbounds float, ptr %f5.host, i64 %10553
  %10555 = load float, ptr %10554, align 4, !tbaa !46
  %10556 = insertelement <4 x float> undef, float %10555, i64 0
  %10557 = extractelement <4 x i64> %10552, i64 1
  %10558 = getelementptr inbounds float, ptr %f5.host, i64 %10557
  %10559 = load float, ptr %10558, align 4, !tbaa !46
  %10560 = insertelement <4 x float> %10556, float %10559, i64 1
  %10561 = extractelement <4 x i64> %10552, i64 2
  %10562 = getelementptr inbounds float, ptr %f5.host, i64 %10561
  %10563 = load float, ptr %10562, align 4, !tbaa !46
  %10564 = insertelement <4 x float> %10560, float %10563, i64 2
  %10565 = extractelement <4 x i64> %10552, i64 3
  %10566 = getelementptr inbounds float, ptr %f5.host, i64 %10565
  %10567 = load float, ptr %10566, align 4, !tbaa !46
  %10568 = insertelement <4 x float> %10564, float %10567, i64 3
  %10569 = fsub <4 x float> %10568, %10546
  %10570 = fmul <4 x float> %t2944.us, %10569
  %10571 = add nsw <4 x i32> %t2955.us, %10456
  %10572 = sext <4 x i32> %10571 to <4 x i64>
  %10573 = extractelement <4 x i64> %10572, i64 0
  %10574 = getelementptr inbounds float, ptr %f6.host, i64 %10573
  %10575 = load float, ptr %10574, align 4, !tbaa !50
  %10576 = insertelement <4 x float> undef, float %10575, i64 0
  %10577 = extractelement <4 x i64> %10572, i64 1
  %10578 = getelementptr inbounds float, ptr %f6.host, i64 %10577
  %10579 = load float, ptr %10578, align 4, !tbaa !50
  %10580 = insertelement <4 x float> %10576, float %10579, i64 1
  %10581 = extractelement <4 x i64> %10572, i64 2
  %10582 = getelementptr inbounds float, ptr %f6.host, i64 %10581
  %10583 = load float, ptr %10582, align 4, !tbaa !50
  %10584 = insertelement <4 x float> %10580, float %10583, i64 2
  %10585 = extractelement <4 x i64> %10572, i64 3
  %10586 = getelementptr inbounds float, ptr %f6.host, i64 %10585
  %10587 = load float, ptr %10586, align 4, !tbaa !50
  %10588 = insertelement <4 x float> %10584, float %10587, i64 3
  %10589 = fmul <4 x float> %10588, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10590 = add <4 x i32> %t2955.us, %10477
  %10591 = add <4 x i32> %10590, <i32 -1, i32 0, i32 1, i32 2>
  %10592 = sext <4 x i32> %10591 to <4 x i64>
  %10593 = extractelement <4 x i64> %10592, i64 0
  %10594 = getelementptr inbounds float, ptr %f6.host, i64 %10593
  %10595 = load float, ptr %10594, align 4, !tbaa !50
  %10596 = insertelement <4 x float> undef, float %10595, i64 0
  %10597 = extractelement <4 x i64> %10592, i64 1
  %10598 = getelementptr inbounds float, ptr %f6.host, i64 %10597
  %10599 = load float, ptr %10598, align 4, !tbaa !50
  %10600 = insertelement <4 x float> %10596, float %10599, i64 1
  %10601 = extractelement <4 x i64> %10592, i64 2
  %10602 = getelementptr inbounds float, ptr %f6.host, i64 %10601
  %10603 = load float, ptr %10602, align 4, !tbaa !50
  %10604 = insertelement <4 x float> %10600, float %10603, i64 2
  %10605 = extractelement <4 x i64> %10592, i64 3
  %10606 = getelementptr inbounds float, ptr %f6.host, i64 %10605
  %10607 = load float, ptr %10606, align 4, !tbaa !50
  %10608 = insertelement <4 x float> %10604, float %10607, i64 3
  %10609 = fmul <4 x float> %10608, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10610 = fadd <4 x float> %10589, %10609
  %10611 = fmul <4 x float> %10610, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10612 = add nsw <4 x i32> %t2955.us, %10502
  %10613 = sext <4 x i32> %10612 to <4 x i64>
  %10614 = extractelement <4 x i64> %10613, i64 0
  %10615 = getelementptr inbounds float, ptr %f6.host, i64 %10614
  %10616 = load float, ptr %10615, align 4, !tbaa !50
  %10617 = insertelement <4 x float> undef, float %10616, i64 0
  %10618 = extractelement <4 x i64> %10613, i64 1
  %10619 = getelementptr inbounds float, ptr %f6.host, i64 %10618
  %10620 = load float, ptr %10619, align 4, !tbaa !50
  %10621 = insertelement <4 x float> %10617, float %10620, i64 1
  %10622 = extractelement <4 x i64> %10613, i64 2
  %10623 = getelementptr inbounds float, ptr %f6.host, i64 %10622
  %10624 = load float, ptr %10623, align 4, !tbaa !50
  %10625 = insertelement <4 x float> %10621, float %10624, i64 2
  %10626 = extractelement <4 x i64> %10613, i64 3
  %10627 = getelementptr inbounds float, ptr %f6.host, i64 %10626
  %10628 = load float, ptr %10627, align 4, !tbaa !50
  %10629 = insertelement <4 x float> %10625, float %10628, i64 3
  %10630 = fmul <4 x float> %10629, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10631 = add <4 x i32> %t2955.us, %10523
  %10632 = add <4 x i32> %10631, <i32 -1, i32 0, i32 1, i32 2>
  %10633 = sext <4 x i32> %10632 to <4 x i64>
  %10634 = extractelement <4 x i64> %10633, i64 0
  %10635 = getelementptr inbounds float, ptr %f6.host, i64 %10634
  %10636 = load float, ptr %10635, align 4, !tbaa !50
  %10637 = insertelement <4 x float> undef, float %10636, i64 0
  %10638 = extractelement <4 x i64> %10633, i64 1
  %10639 = getelementptr inbounds float, ptr %f6.host, i64 %10638
  %10640 = load float, ptr %10639, align 4, !tbaa !50
  %10641 = insertelement <4 x float> %10637, float %10640, i64 1
  %10642 = extractelement <4 x i64> %10633, i64 2
  %10643 = getelementptr inbounds float, ptr %f6.host, i64 %10642
  %10644 = load float, ptr %10643, align 4, !tbaa !50
  %10645 = insertelement <4 x float> %10641, float %10644, i64 2
  %10646 = extractelement <4 x i64> %10633, i64 3
  %10647 = getelementptr inbounds float, ptr %f6.host, i64 %10646
  %10648 = load float, ptr %10647, align 4, !tbaa !50
  %10649 = insertelement <4 x float> %10645, float %10648, i64 3
  %10650 = fmul <4 x float> %10649, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10651 = fadd <4 x float> %10630, %10650
  %10652 = fmul <4 x float> %10651, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10653 = fadd <4 x float> %10611, %10652
  %10654 = mul nsw <4 x i32> %t2951.us, %9199
  %10655 = add nsw <4 x i32> %10654, %10550
  %10656 = sext <4 x i32> %10655 to <4 x i64>
  %10657 = extractelement <4 x i64> %10656, i64 0
  %10658 = getelementptr inbounds float, ptr %f5.host, i64 %10657
  %10659 = load float, ptr %10658, align 4, !tbaa !46
  %10660 = insertelement <4 x float> undef, float %10659, i64 0
  %10661 = extractelement <4 x i64> %10656, i64 1
  %10662 = getelementptr inbounds float, ptr %f5.host, i64 %10661
  %10663 = load float, ptr %10662, align 4, !tbaa !46
  %10664 = insertelement <4 x float> %10660, float %10663, i64 1
  %10665 = extractelement <4 x i64> %10656, i64 2
  %10666 = getelementptr inbounds float, ptr %f5.host, i64 %10665
  %10667 = load float, ptr %10666, align 4, !tbaa !46
  %10668 = insertelement <4 x float> %10664, float %10667, i64 2
  %10669 = extractelement <4 x i64> %10656, i64 3
  %10670 = getelementptr inbounds float, ptr %f5.host, i64 %10669
  %10671 = load float, ptr %10670, align 4, !tbaa !46
  %10672 = insertelement <4 x float> %10668, float %10671, i64 3
  %10673 = fsub <4 x float> %10672, %10653
  %10674 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2944.us
  %10675 = fmul <4 x float> %10674, %10673
  %10676 = fadd <4 x float> %10570, %10675
  %narrow.us = sub nsw i32 %10430, %f128.v3.min_realized117
  %10677 = sext i32 %narrow.us to i64
  %10678 = add nsw i64 %10677, %10417
  %10679 = getelementptr inbounds float, ptr %9074, i64 %10678
  %10680 = load <4 x float>, ptr %10679, align 4, !tbaa !66
  %10681 = fmul <4 x float> %10680, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10682 = sext i32 %t2940.us to i64
  %10683 = sub nsw i64 %10682, %9200
  %10684 = add nsw i64 %10418, %10683
  %10685 = getelementptr inbounds float, ptr %9074, i64 %10684
  %10686 = load <4 x float>, ptr %10685, align 4, !tbaa !66
  %10687 = fmul <4 x float> %10686, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10688 = fadd <4 x float> %10681, %10687
  %10689 = fmul <4 x float> %10688, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10690 = add nsw i64 %10677, %10419
  %10691 = getelementptr inbounds float, ptr %9074, i64 %10690
  %10692 = load <4 x float>, ptr %10691, align 4, !tbaa !66
  %10693 = fmul <4 x float> %10692, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10694 = add nsw i64 %10420, %10683
  %10695 = getelementptr inbounds float, ptr %9074, i64 %10694
  %10696 = load <4 x float>, ptr %10695, align 4, !tbaa !66
  %10697 = fmul <4 x float> %10696, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10698 = fadd <4 x float> %10693, %10697
  %10699 = fmul <4 x float> %10698, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10700 = fadd <4 x float> %10689, %10699
  %10701 = fadd <4 x float> %10676, %10700
  %10702 = insertelement <4 x i32> undef, i32 %t2975.us, i64 0
  %10703 = shufflevector <4 x i32> %10702, <4 x i32> undef, <4 x i32> zeroinitializer
  %10704 = add nsw <4 x i32> %10703, <i32 0, i32 1, i32 2, i32 3>
  %10705 = add nsw <4 x i32> %t2976.us, %10704
  %10706 = sext <4 x i32> %10705 to <4 x i64>
  %10707 = extractelement <4 x i64> %10706, i64 0
  %10708 = getelementptr inbounds float, ptr %f6.host, i64 %10707
  %10709 = load float, ptr %10708, align 4, !tbaa !50
  %10710 = insertelement <4 x float> undef, float %10709, i64 0
  %10711 = extractelement <4 x i64> %10706, i64 1
  %10712 = getelementptr inbounds float, ptr %f6.host, i64 %10711
  %10713 = load float, ptr %10712, align 4, !tbaa !50
  %10714 = insertelement <4 x float> %10710, float %10713, i64 1
  %10715 = extractelement <4 x i64> %10706, i64 2
  %10716 = getelementptr inbounds float, ptr %f6.host, i64 %10715
  %10717 = load float, ptr %10716, align 4, !tbaa !50
  %10718 = insertelement <4 x float> %10714, float %10717, i64 2
  %10719 = extractelement <4 x i64> %10706, i64 3
  %10720 = getelementptr inbounds float, ptr %f6.host, i64 %10719
  %10721 = load float, ptr %10720, align 4, !tbaa !50
  %10722 = insertelement <4 x float> %10718, float %10721, i64 3
  %10723 = fmul <4 x float> %10722, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10724 = insertelement <4 x i32> undef, i32 %t2974.us, i64 0
  %10725 = shufflevector <4 x i32> %10724, <4 x i32> undef, <4 x i32> zeroinitializer
  %10726 = add nsw <4 x i32> %10725, <i32 0, i32 1, i32 2, i32 3>
  %10727 = add <4 x i32> %t2976.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10728 = add <4 x i32> %10727, %10726
  %10729 = sext <4 x i32> %10728 to <4 x i64>
  %10730 = extractelement <4 x i64> %10729, i64 0
  %10731 = getelementptr inbounds float, ptr %f6.host, i64 %10730
  %10732 = load float, ptr %10731, align 4, !tbaa !50
  %10733 = insertelement <4 x float> undef, float %10732, i64 0
  %10734 = extractelement <4 x i64> %10729, i64 1
  %10735 = getelementptr inbounds float, ptr %f6.host, i64 %10734
  %10736 = load float, ptr %10735, align 4, !tbaa !50
  %10737 = insertelement <4 x float> %10733, float %10736, i64 1
  %10738 = extractelement <4 x i64> %10729, i64 2
  %10739 = getelementptr inbounds float, ptr %f6.host, i64 %10738
  %10740 = load float, ptr %10739, align 4, !tbaa !50
  %10741 = insertelement <4 x float> %10737, float %10740, i64 2
  %10742 = extractelement <4 x i64> %10729, i64 3
  %10743 = getelementptr inbounds float, ptr %f6.host, i64 %10742
  %10744 = load float, ptr %10743, align 4, !tbaa !50
  %10745 = insertelement <4 x float> %10741, float %10744, i64 3
  %10746 = fmul <4 x float> %10745, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10747 = fadd <4 x float> %10723, %10746
  %10748 = fmul <4 x float> %10747, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10749 = insertelement <4 x i32> undef, i32 %t2973.us, i64 0
  %10750 = shufflevector <4 x i32> %10749, <4 x i32> undef, <4 x i32> zeroinitializer
  %10751 = add nsw <4 x i32> %10750, <i32 0, i32 1, i32 2, i32 3>
  %10752 = add nsw <4 x i32> %t2976.us, %10751
  %10753 = sext <4 x i32> %10752 to <4 x i64>
  %10754 = extractelement <4 x i64> %10753, i64 0
  %10755 = getelementptr inbounds float, ptr %f6.host, i64 %10754
  %10756 = load float, ptr %10755, align 4, !tbaa !50
  %10757 = insertelement <4 x float> undef, float %10756, i64 0
  %10758 = extractelement <4 x i64> %10753, i64 1
  %10759 = getelementptr inbounds float, ptr %f6.host, i64 %10758
  %10760 = load float, ptr %10759, align 4, !tbaa !50
  %10761 = insertelement <4 x float> %10757, float %10760, i64 1
  %10762 = extractelement <4 x i64> %10753, i64 2
  %10763 = getelementptr inbounds float, ptr %f6.host, i64 %10762
  %10764 = load float, ptr %10763, align 4, !tbaa !50
  %10765 = insertelement <4 x float> %10761, float %10764, i64 2
  %10766 = extractelement <4 x i64> %10753, i64 3
  %10767 = getelementptr inbounds float, ptr %f6.host, i64 %10766
  %10768 = load float, ptr %10767, align 4, !tbaa !50
  %10769 = insertelement <4 x float> %10765, float %10768, i64 3
  %10770 = fmul <4 x float> %10769, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10771 = insertelement <4 x i32> undef, i32 %t2970.us, i64 0
  %10772 = shufflevector <4 x i32> %10771, <4 x i32> undef, <4 x i32> zeroinitializer
  %10773 = add nsw <4 x i32> %10772, <i32 0, i32 1, i32 2, i32 3>
  %10774 = add <4 x i32> %10727, %10773
  %10775 = sext <4 x i32> %10774 to <4 x i64>
  %10776 = extractelement <4 x i64> %10775, i64 0
  %10777 = getelementptr inbounds float, ptr %f6.host, i64 %10776
  %10778 = load float, ptr %10777, align 4, !tbaa !50
  %10779 = insertelement <4 x float> undef, float %10778, i64 0
  %10780 = extractelement <4 x i64> %10775, i64 1
  %10781 = getelementptr inbounds float, ptr %f6.host, i64 %10780
  %10782 = load float, ptr %10781, align 4, !tbaa !50
  %10783 = insertelement <4 x float> %10779, float %10782, i64 1
  %10784 = extractelement <4 x i64> %10775, i64 2
  %10785 = getelementptr inbounds float, ptr %f6.host, i64 %10784
  %10786 = load float, ptr %10785, align 4, !tbaa !50
  %10787 = insertelement <4 x float> %10783, float %10786, i64 2
  %10788 = extractelement <4 x i64> %10775, i64 3
  %10789 = getelementptr inbounds float, ptr %f6.host, i64 %10788
  %10790 = load float, ptr %10789, align 4, !tbaa !50
  %10791 = insertelement <4 x float> %10787, float %10790, i64 3
  %10792 = fmul <4 x float> %10791, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10793 = fadd <4 x float> %10770, %10792
  %10794 = fmul <4 x float> %10793, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10795 = fadd <4 x float> %10748, %10794
  %10796 = mul nsw <4 x i32> %10453, %9199
  %10797 = add nsw i32 %t2949.us, 1
  %10798 = insertelement <4 x i32> undef, i32 %10797, i64 0
  %10799 = shufflevector <4 x i32> %10798, <4 x i32> undef, <4 x i32> zeroinitializer
  %10800 = add nsw <4 x i32> %10799, <i32 0, i32 2, i32 4, i32 6>
  %10801 = add nsw <4 x i32> %10796, %10800
  %10802 = sext <4 x i32> %10801 to <4 x i64>
  %10803 = extractelement <4 x i64> %10802, i64 0
  %10804 = getelementptr inbounds float, ptr %f5.host, i64 %10803
  %10805 = load float, ptr %10804, align 4, !tbaa !46
  %10806 = insertelement <4 x float> undef, float %10805, i64 0
  %10807 = extractelement <4 x i64> %10802, i64 1
  %10808 = getelementptr inbounds float, ptr %f5.host, i64 %10807
  %10809 = load float, ptr %10808, align 4, !tbaa !46
  %10810 = insertelement <4 x float> %10806, float %10809, i64 1
  %10811 = extractelement <4 x i64> %10802, i64 2
  %10812 = getelementptr inbounds float, ptr %f5.host, i64 %10811
  %10813 = load float, ptr %10812, align 4, !tbaa !46
  %10814 = insertelement <4 x float> %10810, float %10813, i64 2
  %10815 = extractelement <4 x i64> %10802, i64 3
  %10816 = getelementptr inbounds float, ptr %f5.host, i64 %10815
  %10817 = load float, ptr %10816, align 4, !tbaa !46
  %10818 = insertelement <4 x float> %10814, float %10817, i64 3
  %10819 = fsub <4 x float> %10818, %10795
  %10820 = fmul <4 x float> %t2965.us, %10819
  %10821 = add nsw <4 x i32> %t2971.us, %10704
  %10822 = sext <4 x i32> %10821 to <4 x i64>
  %10823 = extractelement <4 x i64> %10822, i64 0
  %10824 = getelementptr inbounds float, ptr %f6.host, i64 %10823
  %10825 = load float, ptr %10824, align 4, !tbaa !50
  %10826 = insertelement <4 x float> undef, float %10825, i64 0
  %10827 = extractelement <4 x i64> %10822, i64 1
  %10828 = getelementptr inbounds float, ptr %f6.host, i64 %10827
  %10829 = load float, ptr %10828, align 4, !tbaa !50
  %10830 = insertelement <4 x float> %10826, float %10829, i64 1
  %10831 = extractelement <4 x i64> %10822, i64 2
  %10832 = getelementptr inbounds float, ptr %f6.host, i64 %10831
  %10833 = load float, ptr %10832, align 4, !tbaa !50
  %10834 = insertelement <4 x float> %10830, float %10833, i64 2
  %10835 = extractelement <4 x i64> %10822, i64 3
  %10836 = getelementptr inbounds float, ptr %f6.host, i64 %10835
  %10837 = load float, ptr %10836, align 4, !tbaa !50
  %10838 = insertelement <4 x float> %10834, float %10837, i64 3
  %10839 = fmul <4 x float> %10838, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10840 = add <4 x i32> %t2971.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10841 = add <4 x i32> %10840, %10726
  %10842 = sext <4 x i32> %10841 to <4 x i64>
  %10843 = extractelement <4 x i64> %10842, i64 0
  %10844 = getelementptr inbounds float, ptr %f6.host, i64 %10843
  %10845 = load float, ptr %10844, align 4, !tbaa !50
  %10846 = insertelement <4 x float> undef, float %10845, i64 0
  %10847 = extractelement <4 x i64> %10842, i64 1
  %10848 = getelementptr inbounds float, ptr %f6.host, i64 %10847
  %10849 = load float, ptr %10848, align 4, !tbaa !50
  %10850 = insertelement <4 x float> %10846, float %10849, i64 1
  %10851 = extractelement <4 x i64> %10842, i64 2
  %10852 = getelementptr inbounds float, ptr %f6.host, i64 %10851
  %10853 = load float, ptr %10852, align 4, !tbaa !50
  %10854 = insertelement <4 x float> %10850, float %10853, i64 2
  %10855 = extractelement <4 x i64> %10842, i64 3
  %10856 = getelementptr inbounds float, ptr %f6.host, i64 %10855
  %10857 = load float, ptr %10856, align 4, !tbaa !50
  %10858 = insertelement <4 x float> %10854, float %10857, i64 3
  %10859 = fmul <4 x float> %10858, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10860 = fadd <4 x float> %10839, %10859
  %10861 = fmul <4 x float> %10860, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10862 = add nsw <4 x i32> %t2971.us, %10751
  %10863 = sext <4 x i32> %10862 to <4 x i64>
  %10864 = extractelement <4 x i64> %10863, i64 0
  %10865 = getelementptr inbounds float, ptr %f6.host, i64 %10864
  %10866 = load float, ptr %10865, align 4, !tbaa !50
  %10867 = insertelement <4 x float> undef, float %10866, i64 0
  %10868 = extractelement <4 x i64> %10863, i64 1
  %10869 = getelementptr inbounds float, ptr %f6.host, i64 %10868
  %10870 = load float, ptr %10869, align 4, !tbaa !50
  %10871 = insertelement <4 x float> %10867, float %10870, i64 1
  %10872 = extractelement <4 x i64> %10863, i64 2
  %10873 = getelementptr inbounds float, ptr %f6.host, i64 %10872
  %10874 = load float, ptr %10873, align 4, !tbaa !50
  %10875 = insertelement <4 x float> %10871, float %10874, i64 2
  %10876 = extractelement <4 x i64> %10863, i64 3
  %10877 = getelementptr inbounds float, ptr %f6.host, i64 %10876
  %10878 = load float, ptr %10877, align 4, !tbaa !50
  %10879 = insertelement <4 x float> %10875, float %10878, i64 3
  %10880 = fmul <4 x float> %10879, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10881 = add <4 x i32> %10840, %10773
  %10882 = sext <4 x i32> %10881 to <4 x i64>
  %10883 = extractelement <4 x i64> %10882, i64 0
  %10884 = getelementptr inbounds float, ptr %f6.host, i64 %10883
  %10885 = load float, ptr %10884, align 4, !tbaa !50
  %10886 = insertelement <4 x float> undef, float %10885, i64 0
  %10887 = extractelement <4 x i64> %10882, i64 1
  %10888 = getelementptr inbounds float, ptr %f6.host, i64 %10887
  %10889 = load float, ptr %10888, align 4, !tbaa !50
  %10890 = insertelement <4 x float> %10886, float %10889, i64 1
  %10891 = extractelement <4 x i64> %10882, i64 2
  %10892 = getelementptr inbounds float, ptr %f6.host, i64 %10891
  %10893 = load float, ptr %10892, align 4, !tbaa !50
  %10894 = insertelement <4 x float> %10890, float %10893, i64 2
  %10895 = extractelement <4 x i64> %10882, i64 3
  %10896 = getelementptr inbounds float, ptr %f6.host, i64 %10895
  %10897 = load float, ptr %10896, align 4, !tbaa !50
  %10898 = insertelement <4 x float> %10894, float %10897, i64 3
  %10899 = fmul <4 x float> %10898, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10900 = fadd <4 x float> %10880, %10899
  %10901 = fmul <4 x float> %10900, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10902 = fadd <4 x float> %10861, %10901
  %10903 = mul nsw <4 x i32> %t2968.us, %9199
  %10904 = add nsw <4 x i32> %10903, %10800
  %10905 = sext <4 x i32> %10904 to <4 x i64>
  %10906 = extractelement <4 x i64> %10905, i64 0
  %10907 = getelementptr inbounds float, ptr %f5.host, i64 %10906
  %10908 = load float, ptr %10907, align 4, !tbaa !46
  %10909 = insertelement <4 x float> undef, float %10908, i64 0
  %10910 = extractelement <4 x i64> %10905, i64 1
  %10911 = getelementptr inbounds float, ptr %f5.host, i64 %10910
  %10912 = load float, ptr %10911, align 4, !tbaa !46
  %10913 = insertelement <4 x float> %10909, float %10912, i64 1
  %10914 = extractelement <4 x i64> %10905, i64 2
  %10915 = getelementptr inbounds float, ptr %f5.host, i64 %10914
  %10916 = load float, ptr %10915, align 4, !tbaa !46
  %10917 = insertelement <4 x float> %10913, float %10916, i64 2
  %10918 = extractelement <4 x i64> %10905, i64 3
  %10919 = getelementptr inbounds float, ptr %f5.host, i64 %10918
  %10920 = load float, ptr %10919, align 4, !tbaa !46
  %10921 = insertelement <4 x float> %10917, float %10920, i64 3
  %10922 = fsub <4 x float> %10921, %10902
  %10923 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2965.us
  %10924 = fmul <4 x float> %10923, %10922
  %10925 = fadd <4 x float> %10820, %10924
  %narrow89.us = sub nsw i32 %10447, %f128.v3.min_realized117
  %10926 = sext i32 %narrow89.us to i64
  %10927 = add nsw i64 %10926, %10417
  %10928 = getelementptr inbounds float, ptr %9074, i64 %10927
  %10929 = load <4 x float>, ptr %10928, align 4, !tbaa !66
  %10930 = fmul <4 x float> %10929, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10931 = sext i32 %t2962.us to i64
  %10932 = sub nsw i64 %10931, %9200
  %10933 = add nsw i64 %10418, %10932
  %10934 = getelementptr inbounds float, ptr %9074, i64 %10933
  %10935 = load <4 x float>, ptr %10934, align 4, !tbaa !66
  %10936 = fmul <4 x float> %10935, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10937 = fadd <4 x float> %10930, %10936
  %10938 = fmul <4 x float> %10937, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10939 = add nsw i64 %10926, %10419
  %10940 = getelementptr inbounds float, ptr %9074, i64 %10939
  %10941 = load <4 x float>, ptr %10940, align 4, !tbaa !66
  %10942 = fmul <4 x float> %10941, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %10943 = add nsw i64 %10420, %10932
  %10944 = getelementptr inbounds float, ptr %9074, i64 %10943
  %10945 = load <4 x float>, ptr %10944, align 4, !tbaa !66
  %10946 = fmul <4 x float> %10945, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10947 = fadd <4 x float> %10942, %10946
  %10948 = fmul <4 x float> %10947, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %10949 = fadd <4 x float> %10938, %10948
  %10950 = fadd <4 x float> %10925, %10949
  %10951 = shufflevector <4 x float> %10701, <4 x float> %10950, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %10952 = sext i32 %f127.s0.v3.v323.base171.us to i64
  %10953 = add i64 %10423, %10952
  %10954 = getelementptr inbounds float, ptr %9113, i64 %10953
  store <8 x float> %10951, ptr %10954, align 4, !tbaa !68
  %lsr.iv.next433.us = add nsw i32 %lsr.iv432.us, -1
  %lsr.iv.next435.us = add i32 %lsr.iv434.us, 8
  %.not90.us = icmp eq i32 %lsr.iv.next433.us, 0
  br i1 %.not90.us, label %"end for f127.s0.v3.v3169.loopexit.us", label %"for f127.s0.v3.v3168.us"

"end for f127.s0.v3.v3169.loopexit.us":           ; preds = %"for f127.s0.v3.v3168.us"
  %indvars.iv.next297 = add nsw i64 %indvars.iv296, 1
  %10955 = icmp eq i64 %indvars.iv296, %sext298
  br i1 %10955, label %"produce f126173", label %"for f127.s0.v4165.us"

"produce f126173":                                ; preds = %"end for f127.s0.v3.v3169.loopexit.us", %"produce f127163"
  %10956 = add nsw i32 %9257, 2
  %10957 = icmp sge i32 %f126.s0.v4.min_2, %10956
  %brmerge449 = select i1 %10957, i1 true, i1 %9207
  br i1 %brmerge449, label %"consume f126182", label %"for f126.s0.v4175.us.preheader", !prof !27

"for f126.s0.v4175.us.preheader":                 ; preds = %"produce f126173"
  %10958 = sext i32 %f126.s0.v4.min_2 to i64
  %sext302 = sext i32 %10956 to i64
  br label %"for f126.s0.v4175.us"

"for f126.s0.v4175.us":                           ; preds = %"for f126.s0.v4175.us.preheader", %"end for f126.s0.v3.v3179.loopexit.us"
  %indvars.iv300 = phi i64 [ %10958, %"for f126.s0.v4175.us.preheader" ], [ %indvars.iv.next301, %"end for f126.s0.v3.v3179.loopexit.us" ]
  %10959 = trunc i64 %indvars.iv300 to i32
  %10960 = shl i32 %10959, 1
  %10961 = and i32 %10960, 2
  %10962 = ashr i32 %10959, 1
  %t2977.us = add nsw i32 %10961, %10962
  %10963 = trunc i64 %indvars.iv300 to i32
  %10964 = sub i32 %10963, %f72.v4.min_realized
  %10965 = mul i32 %10964, %9208
  %10966 = sub i32 %10965, %f72.v3.min_realized
  %10967 = add nsw i32 %t2977.us, %9209
  %t2984.us = mul nsw i32 %10967, %9098
  %10968 = sub nsw i32 %10962, %f127.v4.min_realized124
  %t2986.us = mul nsw i32 %10968, %9098
  %10969 = add i32 %t2977.us, %9210
  %10970 = mul nsw i32 %10969, %f5.stride.1
  %10971 = sub nsw i32 %10962, %f5.v4.min_realized
  %10972 = mul nsw i32 %10971, %f5.stride.1
  %10973 = sext i32 %t2986.us to i64
  %10974 = add nsw i64 %10973, -1
  %10975 = sext i32 %t2984.us to i64
  %10976 = add nsw i64 %10975, -1
  %10977 = sub nsw i64 %indvars.iv300, %9216
  %10978 = mul nsw i64 %10977, %9215
  %10979 = sub i64 %10978, %9217
  %10980 = trunc i64 %indvars.iv300 to i32
  %10981 = sub i32 %10980, %f4.v4.min_realized
  %10982 = mul i32 %10981, %f4.stride.1
  br label %"for f126.s0.v3.v3178.us"

"for f126.s0.v3.v3178.us":                        ; preds = %"for f126.s0.v4175.us", %"for f126.s0.v3.v3178.us"
  %lsr.iv438.us = phi i32 [ %lsr.iv.next439.us, %"for f126.s0.v3.v3178.us" ], [ -1, %"for f126.s0.v4175.us" ]
  %lsr.iv436.us = phi i32 [ %lsr.iv.next437.us, %"for f126.s0.v3.v3178.us" ], [ %9206, %"for f126.s0.v4175.us" ]
  %10983 = add i32 %lsr.iv438.us, %9081
  %f126.s0.v3.v303.base181.us = tail call i32 @llvm.smin.i32(i32 %b1068, i32 %10983)
  %10984 = shl i32 %f126.s0.v3.v303.base181.us, 1
  %10985 = and i32 %10984, 2
  %10986 = ashr i32 %f126.s0.v3.v303.base181.us, 1
  %t2978.us = add nsw i32 %10985, %10986
  %t2979.us = add i32 %10966, %f126.s0.v3.v303.base181.us
  %10987 = sext i32 %t2979.us to i64
  %10988 = getelementptr inbounds float, ptr %f72.host, i64 %10987
  %10989 = load <4 x float>, ptr %10988, align 4, !tbaa !48
  %10990 = add nsw i64 %10987, 4
  %10991 = getelementptr inbounds float, ptr %f72.host, i64 %10990
  %10992 = load <4 x float>, ptr %10991, align 4, !tbaa !48
  %10993 = shufflevector <4 x float> %10989, <4 x float> %10992, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t2980.us = fmul <4 x float> %9156, %10993
  %a1112.us = fptosi <4 x float> %t2980.us to <4 x i32>
  %a1115.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1112.us)
  %10994 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1115.us, <4 x i32> zeroinitializer)
  %10995 = sitofp <4 x i32> %10994 to <4 x float>
  %t2982.us = fsub <4 x float> %t2980.us, %10995
  %10996 = sub nsw i32 %f126.s0.v3.v303.base181.us, %f4.v3.min_realized
  %t2987.us = add nsw i32 %10996, %10982
  %t2989.us = sub nsw <4 x i32> %10994, %9165
  %10997 = sub nsw i32 %t2978.us, %f5.v3.min_realized
  %t2992.us = add nsw i32 %10997, %10970
  %t2993.us = mul nsw <4 x i32> %t2989.us, %9199
  %10998 = sub nsw i32 %10986, %f5.v3.min_realized
  %t2995.us = add nsw i32 %10998, %10970
  %t2997.us = add nsw i32 %10997, %10972
  %t2998.us = add nsw i32 %10998, %10972
  %10999 = add nsw <4 x i32> %t2989.us, <i32 1, i32 1, i32 1, i32 1>
  %t2999.us = mul nsw <4 x i32> %10999, %9199
  %11000 = add nsw i32 %f126.s0.v3.v303.base181.us, 1
  %11001 = shl i32 %11000, 1
  %11002 = and i32 %11001, 2
  %11003 = ashr i32 %11000, 1
  %t3000.us = add nsw i32 %11002, %11003
  %11004 = shufflevector <4 x float> %10989, <4 x float> %10992, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3001.us = fmul <4 x float> %9156, %11004
  %a1116.us = fptosi <4 x float> %t3001.us to <4 x i32>
  %a1119.us = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1116.us)
  %11005 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1119.us, <4 x i32> zeroinitializer)
  %11006 = sitofp <4 x i32> %11005 to <4 x float>
  %t3003.us = fsub <4 x float> %t3001.us, %11006
  %t3006.us = sub nsw <4 x i32> %11005, %9165
  %11007 = sub nsw i32 %t3000.us, %f5.v3.min_realized
  %t3008.us = add nsw i32 %11007, %10970
  %t3009.us = mul nsw <4 x i32> %t3006.us, %9199
  %11008 = sub nsw i32 %11003, %f5.v3.min_realized
  %t3011.us = add nsw i32 %11008, %10970
  %t3012.us = add nsw i32 %11007, %10972
  %t3013.us = add nsw i32 %11008, %10972
  %11009 = add nsw <4 x i32> %t3006.us, <i32 1, i32 1, i32 1, i32 1>
  %t3014.us = mul nsw <4 x i32> %11009, %9199
  %11010 = insertelement <4 x i32> undef, i32 %t2998.us, i64 0
  %11011 = shufflevector <4 x i32> %11010, <4 x i32> undef, <4 x i32> zeroinitializer
  %11012 = add nsw <4 x i32> %11011, <i32 0, i32 1, i32 2, i32 3>
  %11013 = add nsw <4 x i32> %t2999.us, %11012
  %11014 = sext <4 x i32> %11013 to <4 x i64>
  %11015 = extractelement <4 x i64> %11014, i64 0
  %11016 = getelementptr inbounds float, ptr %f5.host, i64 %11015
  %11017 = load float, ptr %11016, align 4, !tbaa !46
  %11018 = insertelement <4 x float> undef, float %11017, i64 0
  %11019 = extractelement <4 x i64> %11014, i64 1
  %11020 = getelementptr inbounds float, ptr %f5.host, i64 %11019
  %11021 = load float, ptr %11020, align 4, !tbaa !46
  %11022 = insertelement <4 x float> %11018, float %11021, i64 1
  %11023 = extractelement <4 x i64> %11014, i64 2
  %11024 = getelementptr inbounds float, ptr %f5.host, i64 %11023
  %11025 = load float, ptr %11024, align 4, !tbaa !46
  %11026 = insertelement <4 x float> %11022, float %11025, i64 2
  %11027 = extractelement <4 x i64> %11014, i64 3
  %11028 = getelementptr inbounds float, ptr %f5.host, i64 %11027
  %11029 = load float, ptr %11028, align 4, !tbaa !46
  %11030 = insertelement <4 x float> %11026, float %11029, i64 3
  %11031 = fmul <4 x float> %11030, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11032 = insertelement <4 x i32> undef, i32 %t2997.us, i64 0
  %11033 = shufflevector <4 x i32> %11032, <4 x i32> undef, <4 x i32> zeroinitializer
  %11034 = add <4 x i32> %11033, <i32 -1, i32 0, i32 1, i32 2>
  %11035 = add <4 x i32> %11034, %t2999.us
  %11036 = sext <4 x i32> %11035 to <4 x i64>
  %11037 = extractelement <4 x i64> %11036, i64 0
  %11038 = getelementptr inbounds float, ptr %f5.host, i64 %11037
  %11039 = load float, ptr %11038, align 4, !tbaa !46
  %11040 = insertelement <4 x float> undef, float %11039, i64 0
  %11041 = extractelement <4 x i64> %11036, i64 1
  %11042 = getelementptr inbounds float, ptr %f5.host, i64 %11041
  %11043 = load float, ptr %11042, align 4, !tbaa !46
  %11044 = insertelement <4 x float> %11040, float %11043, i64 1
  %11045 = extractelement <4 x i64> %11036, i64 2
  %11046 = getelementptr inbounds float, ptr %f5.host, i64 %11045
  %11047 = load float, ptr %11046, align 4, !tbaa !46
  %11048 = insertelement <4 x float> %11044, float %11047, i64 2
  %11049 = extractelement <4 x i64> %11036, i64 3
  %11050 = getelementptr inbounds float, ptr %f5.host, i64 %11049
  %11051 = load float, ptr %11050, align 4, !tbaa !46
  %11052 = insertelement <4 x float> %11048, float %11051, i64 3
  %11053 = fmul <4 x float> %11052, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11054 = fadd <4 x float> %11031, %11053
  %11055 = fmul <4 x float> %11054, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11056 = insertelement <4 x i32> undef, i32 %t2995.us, i64 0
  %11057 = shufflevector <4 x i32> %11056, <4 x i32> undef, <4 x i32> zeroinitializer
  %11058 = add nsw <4 x i32> %11057, <i32 0, i32 1, i32 2, i32 3>
  %11059 = add nsw <4 x i32> %t2999.us, %11058
  %11060 = sext <4 x i32> %11059 to <4 x i64>
  %11061 = extractelement <4 x i64> %11060, i64 0
  %11062 = getelementptr inbounds float, ptr %f5.host, i64 %11061
  %11063 = load float, ptr %11062, align 4, !tbaa !46
  %11064 = insertelement <4 x float> undef, float %11063, i64 0
  %11065 = extractelement <4 x i64> %11060, i64 1
  %11066 = getelementptr inbounds float, ptr %f5.host, i64 %11065
  %11067 = load float, ptr %11066, align 4, !tbaa !46
  %11068 = insertelement <4 x float> %11064, float %11067, i64 1
  %11069 = extractelement <4 x i64> %11060, i64 2
  %11070 = getelementptr inbounds float, ptr %f5.host, i64 %11069
  %11071 = load float, ptr %11070, align 4, !tbaa !46
  %11072 = insertelement <4 x float> %11068, float %11071, i64 2
  %11073 = extractelement <4 x i64> %11060, i64 3
  %11074 = getelementptr inbounds float, ptr %f5.host, i64 %11073
  %11075 = load float, ptr %11074, align 4, !tbaa !46
  %11076 = insertelement <4 x float> %11072, float %11075, i64 3
  %11077 = fmul <4 x float> %11076, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11078 = insertelement <4 x i32> undef, i32 %t2992.us, i64 0
  %11079 = shufflevector <4 x i32> %11078, <4 x i32> undef, <4 x i32> zeroinitializer
  %11080 = add <4 x i32> %11079, <i32 -1, i32 0, i32 1, i32 2>
  %11081 = add <4 x i32> %11080, %t2999.us
  %11082 = sext <4 x i32> %11081 to <4 x i64>
  %11083 = extractelement <4 x i64> %11082, i64 0
  %11084 = getelementptr inbounds float, ptr %f5.host, i64 %11083
  %11085 = load float, ptr %11084, align 4, !tbaa !46
  %11086 = insertelement <4 x float> undef, float %11085, i64 0
  %11087 = extractelement <4 x i64> %11082, i64 1
  %11088 = getelementptr inbounds float, ptr %f5.host, i64 %11087
  %11089 = load float, ptr %11088, align 4, !tbaa !46
  %11090 = insertelement <4 x float> %11086, float %11089, i64 1
  %11091 = extractelement <4 x i64> %11082, i64 2
  %11092 = getelementptr inbounds float, ptr %f5.host, i64 %11091
  %11093 = load float, ptr %11092, align 4, !tbaa !46
  %11094 = insertelement <4 x float> %11090, float %11093, i64 2
  %11095 = extractelement <4 x i64> %11082, i64 3
  %11096 = getelementptr inbounds float, ptr %f5.host, i64 %11095
  %11097 = load float, ptr %11096, align 4, !tbaa !46
  %11098 = insertelement <4 x float> %11094, float %11097, i64 3
  %11099 = fmul <4 x float> %11098, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11100 = fadd <4 x float> %11077, %11099
  %11101 = fmul <4 x float> %11100, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11102 = fadd <4 x float> %11055, %11101
  %11103 = mul nsw <4 x i32> %10999, %9213
  %11104 = insertelement <4 x i32> undef, i32 %t2987.us, i64 0
  %11105 = shufflevector <4 x i32> %11104, <4 x i32> undef, <4 x i32> zeroinitializer
  %11106 = add nsw <4 x i32> %11105, <i32 0, i32 2, i32 4, i32 6>
  %11107 = add nsw <4 x i32> %11103, %11106
  %11108 = sext <4 x i32> %11107 to <4 x i64>
  %11109 = extractelement <4 x i64> %11108, i64 0
  %11110 = getelementptr inbounds float, ptr %f4.host, i64 %11109
  %11111 = load float, ptr %11110, align 4, !tbaa !44
  %11112 = insertelement <4 x float> undef, float %11111, i64 0
  %11113 = extractelement <4 x i64> %11108, i64 1
  %11114 = getelementptr inbounds float, ptr %f4.host, i64 %11113
  %11115 = load float, ptr %11114, align 4, !tbaa !44
  %11116 = insertelement <4 x float> %11112, float %11115, i64 1
  %11117 = extractelement <4 x i64> %11108, i64 2
  %11118 = getelementptr inbounds float, ptr %f4.host, i64 %11117
  %11119 = load float, ptr %11118, align 4, !tbaa !44
  %11120 = insertelement <4 x float> %11116, float %11119, i64 2
  %11121 = extractelement <4 x i64> %11108, i64 3
  %11122 = getelementptr inbounds float, ptr %f4.host, i64 %11121
  %11123 = load float, ptr %11122, align 4, !tbaa !44
  %11124 = insertelement <4 x float> %11120, float %11123, i64 3
  %11125 = fsub <4 x float> %11124, %11102
  %11126 = fmul <4 x float> %t2982.us, %11125
  %11127 = add nsw <4 x i32> %t2993.us, %11012
  %11128 = sext <4 x i32> %11127 to <4 x i64>
  %11129 = extractelement <4 x i64> %11128, i64 0
  %11130 = getelementptr inbounds float, ptr %f5.host, i64 %11129
  %11131 = load float, ptr %11130, align 4, !tbaa !46
  %11132 = insertelement <4 x float> undef, float %11131, i64 0
  %11133 = extractelement <4 x i64> %11128, i64 1
  %11134 = getelementptr inbounds float, ptr %f5.host, i64 %11133
  %11135 = load float, ptr %11134, align 4, !tbaa !46
  %11136 = insertelement <4 x float> %11132, float %11135, i64 1
  %11137 = extractelement <4 x i64> %11128, i64 2
  %11138 = getelementptr inbounds float, ptr %f5.host, i64 %11137
  %11139 = load float, ptr %11138, align 4, !tbaa !46
  %11140 = insertelement <4 x float> %11136, float %11139, i64 2
  %11141 = extractelement <4 x i64> %11128, i64 3
  %11142 = getelementptr inbounds float, ptr %f5.host, i64 %11141
  %11143 = load float, ptr %11142, align 4, !tbaa !46
  %11144 = insertelement <4 x float> %11140, float %11143, i64 3
  %11145 = fmul <4 x float> %11144, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11146 = add <4 x i32> %t2993.us, %11033
  %11147 = add <4 x i32> %11146, <i32 -1, i32 0, i32 1, i32 2>
  %11148 = sext <4 x i32> %11147 to <4 x i64>
  %11149 = extractelement <4 x i64> %11148, i64 0
  %11150 = getelementptr inbounds float, ptr %f5.host, i64 %11149
  %11151 = load float, ptr %11150, align 4, !tbaa !46
  %11152 = insertelement <4 x float> undef, float %11151, i64 0
  %11153 = extractelement <4 x i64> %11148, i64 1
  %11154 = getelementptr inbounds float, ptr %f5.host, i64 %11153
  %11155 = load float, ptr %11154, align 4, !tbaa !46
  %11156 = insertelement <4 x float> %11152, float %11155, i64 1
  %11157 = extractelement <4 x i64> %11148, i64 2
  %11158 = getelementptr inbounds float, ptr %f5.host, i64 %11157
  %11159 = load float, ptr %11158, align 4, !tbaa !46
  %11160 = insertelement <4 x float> %11156, float %11159, i64 2
  %11161 = extractelement <4 x i64> %11148, i64 3
  %11162 = getelementptr inbounds float, ptr %f5.host, i64 %11161
  %11163 = load float, ptr %11162, align 4, !tbaa !46
  %11164 = insertelement <4 x float> %11160, float %11163, i64 3
  %11165 = fmul <4 x float> %11164, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11166 = fadd <4 x float> %11145, %11165
  %11167 = fmul <4 x float> %11166, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11168 = add nsw <4 x i32> %t2993.us, %11058
  %11169 = sext <4 x i32> %11168 to <4 x i64>
  %11170 = extractelement <4 x i64> %11169, i64 0
  %11171 = getelementptr inbounds float, ptr %f5.host, i64 %11170
  %11172 = load float, ptr %11171, align 4, !tbaa !46
  %11173 = insertelement <4 x float> undef, float %11172, i64 0
  %11174 = extractelement <4 x i64> %11169, i64 1
  %11175 = getelementptr inbounds float, ptr %f5.host, i64 %11174
  %11176 = load float, ptr %11175, align 4, !tbaa !46
  %11177 = insertelement <4 x float> %11173, float %11176, i64 1
  %11178 = extractelement <4 x i64> %11169, i64 2
  %11179 = getelementptr inbounds float, ptr %f5.host, i64 %11178
  %11180 = load float, ptr %11179, align 4, !tbaa !46
  %11181 = insertelement <4 x float> %11177, float %11180, i64 2
  %11182 = extractelement <4 x i64> %11169, i64 3
  %11183 = getelementptr inbounds float, ptr %f5.host, i64 %11182
  %11184 = load float, ptr %11183, align 4, !tbaa !46
  %11185 = insertelement <4 x float> %11181, float %11184, i64 3
  %11186 = fmul <4 x float> %11185, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11187 = add <4 x i32> %t2993.us, %11079
  %11188 = add <4 x i32> %11187, <i32 -1, i32 0, i32 1, i32 2>
  %11189 = sext <4 x i32> %11188 to <4 x i64>
  %11190 = extractelement <4 x i64> %11189, i64 0
  %11191 = getelementptr inbounds float, ptr %f5.host, i64 %11190
  %11192 = load float, ptr %11191, align 4, !tbaa !46
  %11193 = insertelement <4 x float> undef, float %11192, i64 0
  %11194 = extractelement <4 x i64> %11189, i64 1
  %11195 = getelementptr inbounds float, ptr %f5.host, i64 %11194
  %11196 = load float, ptr %11195, align 4, !tbaa !46
  %11197 = insertelement <4 x float> %11193, float %11196, i64 1
  %11198 = extractelement <4 x i64> %11189, i64 2
  %11199 = getelementptr inbounds float, ptr %f5.host, i64 %11198
  %11200 = load float, ptr %11199, align 4, !tbaa !46
  %11201 = insertelement <4 x float> %11197, float %11200, i64 2
  %11202 = extractelement <4 x i64> %11189, i64 3
  %11203 = getelementptr inbounds float, ptr %f5.host, i64 %11202
  %11204 = load float, ptr %11203, align 4, !tbaa !46
  %11205 = insertelement <4 x float> %11201, float %11204, i64 3
  %11206 = fmul <4 x float> %11205, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11207 = fadd <4 x float> %11186, %11206
  %11208 = fmul <4 x float> %11207, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11209 = fadd <4 x float> %11167, %11208
  %11210 = mul nsw <4 x i32> %t2989.us, %9213
  %11211 = add nsw <4 x i32> %11210, %11106
  %11212 = sext <4 x i32> %11211 to <4 x i64>
  %11213 = extractelement <4 x i64> %11212, i64 0
  %11214 = getelementptr inbounds float, ptr %f4.host, i64 %11213
  %11215 = load float, ptr %11214, align 4, !tbaa !44
  %11216 = insertelement <4 x float> undef, float %11215, i64 0
  %11217 = extractelement <4 x i64> %11212, i64 1
  %11218 = getelementptr inbounds float, ptr %f4.host, i64 %11217
  %11219 = load float, ptr %11218, align 4, !tbaa !44
  %11220 = insertelement <4 x float> %11216, float %11219, i64 1
  %11221 = extractelement <4 x i64> %11212, i64 2
  %11222 = getelementptr inbounds float, ptr %f4.host, i64 %11221
  %11223 = load float, ptr %11222, align 4, !tbaa !44
  %11224 = insertelement <4 x float> %11220, float %11223, i64 2
  %11225 = extractelement <4 x i64> %11212, i64 3
  %11226 = getelementptr inbounds float, ptr %f4.host, i64 %11225
  %11227 = load float, ptr %11226, align 4, !tbaa !44
  %11228 = insertelement <4 x float> %11224, float %11227, i64 3
  %11229 = fsub <4 x float> %11228, %11209
  %11230 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t2982.us
  %11231 = fmul <4 x float> %11230, %11229
  %11232 = fadd <4 x float> %11126, %11231
  %11233 = sext i32 %10986 to i64
  %11234 = sub nsw i64 %11233, %9204
  %11235 = add nsw i64 %11234, %10973
  %11236 = getelementptr inbounds float, ptr %9113, i64 %11235
  %11237 = load <4 x float>, ptr %11236, align 4, !tbaa !68
  %11238 = fmul <4 x float> %11237, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11239 = sext i32 %t2978.us to i64
  %11240 = sub nsw i64 %11239, %9204
  %11241 = add nsw i64 %10974, %11240
  %11242 = getelementptr inbounds float, ptr %9113, i64 %11241
  %11243 = load <4 x float>, ptr %11242, align 4, !tbaa !68
  %11244 = fmul <4 x float> %11243, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11245 = fadd <4 x float> %11238, %11244
  %11246 = fmul <4 x float> %11245, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11247 = add nsw i64 %11234, %10975
  %11248 = getelementptr inbounds float, ptr %9113, i64 %11247
  %11249 = load <4 x float>, ptr %11248, align 4, !tbaa !68
  %11250 = fmul <4 x float> %11249, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11251 = add nsw i64 %10976, %11240
  %11252 = getelementptr inbounds float, ptr %9113, i64 %11251
  %11253 = load <4 x float>, ptr %11252, align 4, !tbaa !68
  %11254 = fmul <4 x float> %11253, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11255 = fadd <4 x float> %11250, %11254
  %11256 = fmul <4 x float> %11255, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11257 = fadd <4 x float> %11246, %11256
  %11258 = fadd <4 x float> %11232, %11257
  %11259 = insertelement <4 x i32> undef, i32 %t3013.us, i64 0
  %11260 = shufflevector <4 x i32> %11259, <4 x i32> undef, <4 x i32> zeroinitializer
  %11261 = add nsw <4 x i32> %11260, <i32 0, i32 1, i32 2, i32 3>
  %11262 = add nsw <4 x i32> %t3014.us, %11261
  %11263 = sext <4 x i32> %11262 to <4 x i64>
  %11264 = extractelement <4 x i64> %11263, i64 0
  %11265 = getelementptr inbounds float, ptr %f5.host, i64 %11264
  %11266 = load float, ptr %11265, align 4, !tbaa !46
  %11267 = insertelement <4 x float> undef, float %11266, i64 0
  %11268 = extractelement <4 x i64> %11263, i64 1
  %11269 = getelementptr inbounds float, ptr %f5.host, i64 %11268
  %11270 = load float, ptr %11269, align 4, !tbaa !46
  %11271 = insertelement <4 x float> %11267, float %11270, i64 1
  %11272 = extractelement <4 x i64> %11263, i64 2
  %11273 = getelementptr inbounds float, ptr %f5.host, i64 %11272
  %11274 = load float, ptr %11273, align 4, !tbaa !46
  %11275 = insertelement <4 x float> %11271, float %11274, i64 2
  %11276 = extractelement <4 x i64> %11263, i64 3
  %11277 = getelementptr inbounds float, ptr %f5.host, i64 %11276
  %11278 = load float, ptr %11277, align 4, !tbaa !46
  %11279 = insertelement <4 x float> %11275, float %11278, i64 3
  %11280 = fmul <4 x float> %11279, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11281 = insertelement <4 x i32> undef, i32 %t3012.us, i64 0
  %11282 = shufflevector <4 x i32> %11281, <4 x i32> undef, <4 x i32> zeroinitializer
  %11283 = add nsw <4 x i32> %11282, <i32 0, i32 1, i32 2, i32 3>
  %11284 = add <4 x i32> %t3014.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11285 = add <4 x i32> %11284, %11283
  %11286 = sext <4 x i32> %11285 to <4 x i64>
  %11287 = extractelement <4 x i64> %11286, i64 0
  %11288 = getelementptr inbounds float, ptr %f5.host, i64 %11287
  %11289 = load float, ptr %11288, align 4, !tbaa !46
  %11290 = insertelement <4 x float> undef, float %11289, i64 0
  %11291 = extractelement <4 x i64> %11286, i64 1
  %11292 = getelementptr inbounds float, ptr %f5.host, i64 %11291
  %11293 = load float, ptr %11292, align 4, !tbaa !46
  %11294 = insertelement <4 x float> %11290, float %11293, i64 1
  %11295 = extractelement <4 x i64> %11286, i64 2
  %11296 = getelementptr inbounds float, ptr %f5.host, i64 %11295
  %11297 = load float, ptr %11296, align 4, !tbaa !46
  %11298 = insertelement <4 x float> %11294, float %11297, i64 2
  %11299 = extractelement <4 x i64> %11286, i64 3
  %11300 = getelementptr inbounds float, ptr %f5.host, i64 %11299
  %11301 = load float, ptr %11300, align 4, !tbaa !46
  %11302 = insertelement <4 x float> %11298, float %11301, i64 3
  %11303 = fmul <4 x float> %11302, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11304 = fadd <4 x float> %11280, %11303
  %11305 = fmul <4 x float> %11304, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11306 = insertelement <4 x i32> undef, i32 %t3011.us, i64 0
  %11307 = shufflevector <4 x i32> %11306, <4 x i32> undef, <4 x i32> zeroinitializer
  %11308 = add nsw <4 x i32> %11307, <i32 0, i32 1, i32 2, i32 3>
  %11309 = add nsw <4 x i32> %t3014.us, %11308
  %11310 = sext <4 x i32> %11309 to <4 x i64>
  %11311 = extractelement <4 x i64> %11310, i64 0
  %11312 = getelementptr inbounds float, ptr %f5.host, i64 %11311
  %11313 = load float, ptr %11312, align 4, !tbaa !46
  %11314 = insertelement <4 x float> undef, float %11313, i64 0
  %11315 = extractelement <4 x i64> %11310, i64 1
  %11316 = getelementptr inbounds float, ptr %f5.host, i64 %11315
  %11317 = load float, ptr %11316, align 4, !tbaa !46
  %11318 = insertelement <4 x float> %11314, float %11317, i64 1
  %11319 = extractelement <4 x i64> %11310, i64 2
  %11320 = getelementptr inbounds float, ptr %f5.host, i64 %11319
  %11321 = load float, ptr %11320, align 4, !tbaa !46
  %11322 = insertelement <4 x float> %11318, float %11321, i64 2
  %11323 = extractelement <4 x i64> %11310, i64 3
  %11324 = getelementptr inbounds float, ptr %f5.host, i64 %11323
  %11325 = load float, ptr %11324, align 4, !tbaa !46
  %11326 = insertelement <4 x float> %11322, float %11325, i64 3
  %11327 = fmul <4 x float> %11326, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11328 = insertelement <4 x i32> undef, i32 %t3008.us, i64 0
  %11329 = shufflevector <4 x i32> %11328, <4 x i32> undef, <4 x i32> zeroinitializer
  %11330 = add nsw <4 x i32> %11329, <i32 0, i32 1, i32 2, i32 3>
  %11331 = add <4 x i32> %11284, %11330
  %11332 = sext <4 x i32> %11331 to <4 x i64>
  %11333 = extractelement <4 x i64> %11332, i64 0
  %11334 = getelementptr inbounds float, ptr %f5.host, i64 %11333
  %11335 = load float, ptr %11334, align 4, !tbaa !46
  %11336 = insertelement <4 x float> undef, float %11335, i64 0
  %11337 = extractelement <4 x i64> %11332, i64 1
  %11338 = getelementptr inbounds float, ptr %f5.host, i64 %11337
  %11339 = load float, ptr %11338, align 4, !tbaa !46
  %11340 = insertelement <4 x float> %11336, float %11339, i64 1
  %11341 = extractelement <4 x i64> %11332, i64 2
  %11342 = getelementptr inbounds float, ptr %f5.host, i64 %11341
  %11343 = load float, ptr %11342, align 4, !tbaa !46
  %11344 = insertelement <4 x float> %11340, float %11343, i64 2
  %11345 = extractelement <4 x i64> %11332, i64 3
  %11346 = getelementptr inbounds float, ptr %f5.host, i64 %11345
  %11347 = load float, ptr %11346, align 4, !tbaa !46
  %11348 = insertelement <4 x float> %11344, float %11347, i64 3
  %11349 = fmul <4 x float> %11348, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11350 = fadd <4 x float> %11327, %11349
  %11351 = fmul <4 x float> %11350, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11352 = fadd <4 x float> %11305, %11351
  %11353 = mul nsw <4 x i32> %11009, %9213
  %11354 = add nsw i32 %t2987.us, 1
  %11355 = insertelement <4 x i32> undef, i32 %11354, i64 0
  %11356 = shufflevector <4 x i32> %11355, <4 x i32> undef, <4 x i32> zeroinitializer
  %11357 = add nsw <4 x i32> %11356, <i32 0, i32 2, i32 4, i32 6>
  %11358 = add nsw <4 x i32> %11353, %11357
  %11359 = sext <4 x i32> %11358 to <4 x i64>
  %11360 = extractelement <4 x i64> %11359, i64 0
  %11361 = getelementptr inbounds float, ptr %f4.host, i64 %11360
  %11362 = load float, ptr %11361, align 4, !tbaa !44
  %11363 = insertelement <4 x float> undef, float %11362, i64 0
  %11364 = extractelement <4 x i64> %11359, i64 1
  %11365 = getelementptr inbounds float, ptr %f4.host, i64 %11364
  %11366 = load float, ptr %11365, align 4, !tbaa !44
  %11367 = insertelement <4 x float> %11363, float %11366, i64 1
  %11368 = extractelement <4 x i64> %11359, i64 2
  %11369 = getelementptr inbounds float, ptr %f4.host, i64 %11368
  %11370 = load float, ptr %11369, align 4, !tbaa !44
  %11371 = insertelement <4 x float> %11367, float %11370, i64 2
  %11372 = extractelement <4 x i64> %11359, i64 3
  %11373 = getelementptr inbounds float, ptr %f4.host, i64 %11372
  %11374 = load float, ptr %11373, align 4, !tbaa !44
  %11375 = insertelement <4 x float> %11371, float %11374, i64 3
  %11376 = fsub <4 x float> %11375, %11352
  %11377 = fmul <4 x float> %t3003.us, %11376
  %11378 = add nsw <4 x i32> %t3009.us, %11261
  %11379 = sext <4 x i32> %11378 to <4 x i64>
  %11380 = extractelement <4 x i64> %11379, i64 0
  %11381 = getelementptr inbounds float, ptr %f5.host, i64 %11380
  %11382 = load float, ptr %11381, align 4, !tbaa !46
  %11383 = insertelement <4 x float> undef, float %11382, i64 0
  %11384 = extractelement <4 x i64> %11379, i64 1
  %11385 = getelementptr inbounds float, ptr %f5.host, i64 %11384
  %11386 = load float, ptr %11385, align 4, !tbaa !46
  %11387 = insertelement <4 x float> %11383, float %11386, i64 1
  %11388 = extractelement <4 x i64> %11379, i64 2
  %11389 = getelementptr inbounds float, ptr %f5.host, i64 %11388
  %11390 = load float, ptr %11389, align 4, !tbaa !46
  %11391 = insertelement <4 x float> %11387, float %11390, i64 2
  %11392 = extractelement <4 x i64> %11379, i64 3
  %11393 = getelementptr inbounds float, ptr %f5.host, i64 %11392
  %11394 = load float, ptr %11393, align 4, !tbaa !46
  %11395 = insertelement <4 x float> %11391, float %11394, i64 3
  %11396 = fmul <4 x float> %11395, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11397 = add <4 x i32> %t3009.us, <i32 -1, i32 -1, i32 -1, i32 -1>
  %11398 = add <4 x i32> %11397, %11283
  %11399 = sext <4 x i32> %11398 to <4 x i64>
  %11400 = extractelement <4 x i64> %11399, i64 0
  %11401 = getelementptr inbounds float, ptr %f5.host, i64 %11400
  %11402 = load float, ptr %11401, align 4, !tbaa !46
  %11403 = insertelement <4 x float> undef, float %11402, i64 0
  %11404 = extractelement <4 x i64> %11399, i64 1
  %11405 = getelementptr inbounds float, ptr %f5.host, i64 %11404
  %11406 = load float, ptr %11405, align 4, !tbaa !46
  %11407 = insertelement <4 x float> %11403, float %11406, i64 1
  %11408 = extractelement <4 x i64> %11399, i64 2
  %11409 = getelementptr inbounds float, ptr %f5.host, i64 %11408
  %11410 = load float, ptr %11409, align 4, !tbaa !46
  %11411 = insertelement <4 x float> %11407, float %11410, i64 2
  %11412 = extractelement <4 x i64> %11399, i64 3
  %11413 = getelementptr inbounds float, ptr %f5.host, i64 %11412
  %11414 = load float, ptr %11413, align 4, !tbaa !46
  %11415 = insertelement <4 x float> %11411, float %11414, i64 3
  %11416 = fmul <4 x float> %11415, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11417 = fadd <4 x float> %11396, %11416
  %11418 = fmul <4 x float> %11417, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11419 = add nsw <4 x i32> %t3009.us, %11308
  %11420 = sext <4 x i32> %11419 to <4 x i64>
  %11421 = extractelement <4 x i64> %11420, i64 0
  %11422 = getelementptr inbounds float, ptr %f5.host, i64 %11421
  %11423 = load float, ptr %11422, align 4, !tbaa !46
  %11424 = insertelement <4 x float> undef, float %11423, i64 0
  %11425 = extractelement <4 x i64> %11420, i64 1
  %11426 = getelementptr inbounds float, ptr %f5.host, i64 %11425
  %11427 = load float, ptr %11426, align 4, !tbaa !46
  %11428 = insertelement <4 x float> %11424, float %11427, i64 1
  %11429 = extractelement <4 x i64> %11420, i64 2
  %11430 = getelementptr inbounds float, ptr %f5.host, i64 %11429
  %11431 = load float, ptr %11430, align 4, !tbaa !46
  %11432 = insertelement <4 x float> %11428, float %11431, i64 2
  %11433 = extractelement <4 x i64> %11420, i64 3
  %11434 = getelementptr inbounds float, ptr %f5.host, i64 %11433
  %11435 = load float, ptr %11434, align 4, !tbaa !46
  %11436 = insertelement <4 x float> %11432, float %11435, i64 3
  %11437 = fmul <4 x float> %11436, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11438 = add <4 x i32> %11397, %11330
  %11439 = sext <4 x i32> %11438 to <4 x i64>
  %11440 = extractelement <4 x i64> %11439, i64 0
  %11441 = getelementptr inbounds float, ptr %f5.host, i64 %11440
  %11442 = load float, ptr %11441, align 4, !tbaa !46
  %11443 = insertelement <4 x float> undef, float %11442, i64 0
  %11444 = extractelement <4 x i64> %11439, i64 1
  %11445 = getelementptr inbounds float, ptr %f5.host, i64 %11444
  %11446 = load float, ptr %11445, align 4, !tbaa !46
  %11447 = insertelement <4 x float> %11443, float %11446, i64 1
  %11448 = extractelement <4 x i64> %11439, i64 2
  %11449 = getelementptr inbounds float, ptr %f5.host, i64 %11448
  %11450 = load float, ptr %11449, align 4, !tbaa !46
  %11451 = insertelement <4 x float> %11447, float %11450, i64 2
  %11452 = extractelement <4 x i64> %11439, i64 3
  %11453 = getelementptr inbounds float, ptr %f5.host, i64 %11452
  %11454 = load float, ptr %11453, align 4, !tbaa !46
  %11455 = insertelement <4 x float> %11451, float %11454, i64 3
  %11456 = fmul <4 x float> %11455, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11457 = fadd <4 x float> %11437, %11456
  %11458 = fmul <4 x float> %11457, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11459 = fadd <4 x float> %11418, %11458
  %11460 = mul nsw <4 x i32> %t3006.us, %9213
  %11461 = add nsw <4 x i32> %11460, %11357
  %11462 = sext <4 x i32> %11461 to <4 x i64>
  %11463 = extractelement <4 x i64> %11462, i64 0
  %11464 = getelementptr inbounds float, ptr %f4.host, i64 %11463
  %11465 = load float, ptr %11464, align 4, !tbaa !44
  %11466 = insertelement <4 x float> undef, float %11465, i64 0
  %11467 = extractelement <4 x i64> %11462, i64 1
  %11468 = getelementptr inbounds float, ptr %f4.host, i64 %11467
  %11469 = load float, ptr %11468, align 4, !tbaa !44
  %11470 = insertelement <4 x float> %11466, float %11469, i64 1
  %11471 = extractelement <4 x i64> %11462, i64 2
  %11472 = getelementptr inbounds float, ptr %f4.host, i64 %11471
  %11473 = load float, ptr %11472, align 4, !tbaa !44
  %11474 = insertelement <4 x float> %11470, float %11473, i64 2
  %11475 = extractelement <4 x i64> %11462, i64 3
  %11476 = getelementptr inbounds float, ptr %f4.host, i64 %11475
  %11477 = load float, ptr %11476, align 4, !tbaa !44
  %11478 = insertelement <4 x float> %11474, float %11477, i64 3
  %11479 = fsub <4 x float> %11478, %11459
  %11480 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %t3003.us
  %11481 = fmul <4 x float> %11480, %11479
  %11482 = fadd <4 x float> %11377, %11481
  %11483 = sext i32 %11003 to i64
  %11484 = sub nsw i64 %11483, %9204
  %11485 = add nsw i64 %11484, %10973
  %11486 = getelementptr inbounds float, ptr %9113, i64 %11485
  %11487 = load <4 x float>, ptr %11486, align 4, !tbaa !68
  %11488 = fmul <4 x float> %11487, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11489 = sext i32 %t3000.us to i64
  %11490 = sub nsw i64 %11489, %9204
  %11491 = add nsw i64 %10974, %11490
  %11492 = getelementptr inbounds float, ptr %9113, i64 %11491
  %11493 = load <4 x float>, ptr %11492, align 4, !tbaa !68
  %11494 = fmul <4 x float> %11493, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11495 = fadd <4 x float> %11488, %11494
  %11496 = fmul <4 x float> %11495, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11497 = add nsw i64 %11484, %10975
  %11498 = getelementptr inbounds float, ptr %9113, i64 %11497
  %11499 = load <4 x float>, ptr %11498, align 4, !tbaa !68
  %11500 = fmul <4 x float> %11499, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11501 = add nsw i64 %10976, %11490
  %11502 = getelementptr inbounds float, ptr %9113, i64 %11501
  %11503 = load <4 x float>, ptr %11502, align 4, !tbaa !68
  %11504 = fmul <4 x float> %11503, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11505 = fadd <4 x float> %11500, %11504
  %11506 = fmul <4 x float> %11505, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11507 = fadd <4 x float> %11496, %11506
  %11508 = fadd <4 x float> %11482, %11507
  %11509 = shufflevector <4 x float> %11258, <4 x float> %11508, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %11510 = sext i32 %f126.s0.v3.v303.base181.us to i64
  %11511 = add i64 %10979, %11510
  %11512 = getelementptr inbounds float, ptr %9142, i64 %11511
  store <8 x float> %11509, ptr %11512, align 4, !tbaa !70
  %lsr.iv.next437.us = add i32 %lsr.iv436.us, -1
  %lsr.iv.next439.us = add i32 %lsr.iv438.us, 8
  %.not87.us = icmp eq i32 %lsr.iv.next437.us, 0
  br i1 %.not87.us, label %"end for f126.s0.v3.v3179.loopexit.us", label %"for f126.s0.v3.v3178.us"

"end for f126.s0.v3.v3179.loopexit.us":           ; preds = %"for f126.s0.v3.v3178.us"
  %indvars.iv.next301 = add nsw i64 %indvars.iv300, 1
  %11513 = icmp eq i64 %indvars.iv.next301, %sext302
  br i1 %11513, label %"consume f126182", label %"for f126.s0.v4175.us"

"consume f126182":                                ; preds = %"end for f126.s0.v3.v3179.loopexit.us", %"produce f126173"
  br i1 %9149, label %"assert succeeded185", label %"assert failed184", !prof !5

"assert failed184":                               ; preds = %"consume f126182"
  %11514 = tail call i32 @halide_error_buffer_allocation_too_large(ptr %__user_context, ptr nonnull @str.32, i64 %9148, i64 2147483647) #4
  br label %destructor_block

"assert succeeded185":                            ; preds = %"consume f126182"
  %11515 = tail call ptr @halide_malloc(ptr %__user_context, i64 %9218)
  %.not81 = icmp eq ptr %11515, null
  br i1 %.not81, label %"assert failed186", label %"produce f125189", !prof !4

"assert failed186":                               ; preds = %"assert succeeded185"
  %11516 = tail call i32 @halide_error_out_of_memory(ptr %__user_context) #4
  br label %destructor_block

"produce f125189":                                ; preds = %"assert succeeded185"
  br i1 %9221, label %"for f125.s0.v3.v3190.preheader", label %"consume f125194", !prof !5

"for f125.s0.v3.v3190.preheader":                 ; preds = %"produce f125189"
  %11517 = shl i32 %9254, 1
  %11518 = and i32 %11517, 2
  %t3016 = add nsw i32 %11518, %9257
  %11519 = sub nsw i32 %9254, %f2.v4.min_realized
  %11520 = mul nsw i32 %11519, %9222
  %11521 = sub i32 %11520, %f2.v3.min_realized
  %11522 = add i32 %t3016, %9226
  %t3028 = mul nsw i32 %11522, %9127
  %11523 = sub nsw i32 %9257, %9078
  %t3030 = mul nsw i32 %11523, %9127
  %11524 = add i32 %t3016, %9232
  %11525 = mul nsw i32 %11524, %f4.stride.1
  %11526 = sub nsw i32 %9257, %f4.v4.min_realized
  %11527 = mul nsw i32 %11526, %f4.stride.1
  %11528 = sext i32 %t3030 to i64
  %11529 = add nsw i64 %11528, -1
  %11530 = sext i32 %t3028 to i64
  %11531 = add nsw i64 %11530, -1
  br label %"for f125.s0.v3.v3190"

"for f125.s0.v3.v3190":                           ; preds = %"for f125.s0.v3.v3190.preheader", %"for f125.s0.v3.v3190"
  %lsr.iv442 = phi i32 [ %lsr.iv.next443, %"for f125.s0.v3.v3190" ], [ %a1120, %"for f125.s0.v3.v3190.preheader" ]
  %lsr.iv440 = phi i32 [ %lsr.iv.next441, %"for f125.s0.v3.v3190" ], [ %9220, %"for f125.s0.v3.v3190.preheader" ]
  %f125.s0.v3.v366.base193 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %lsr.iv442)
  %11532 = shl i32 %f125.s0.v3.v366.base193, 1
  %11533 = and i32 %11532, 2
  %11534 = ashr i32 %f125.s0.v3.v366.base193, 1
  %t3017 = add nsw i32 %11533, %11534
  %t3018 = add i32 %11521, %f125.s0.v3.v366.base193
  %11535 = sext i32 %t3018 to i64
  %11536 = getelementptr inbounds float, ptr %f2.host, i64 %11535
  %11537 = load <4 x float>, ptr %11536, align 4, !tbaa !42
  %11538 = add nsw i64 %11535, 4
  %11539 = getelementptr inbounds float, ptr %f2.host, i64 %11538
  %11540 = load <4 x float>, ptr %11539, align 4, !tbaa !42
  %t3019 = shufflevector <4 x float> %11537, <4 x float> %11540, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %t3020 = shufflevector <4 x float> %11537, <4 x float> %11540, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %t3021 = fmul <4 x float> %9156, %t3019
  %t3022 = fmul <4 x float> %9156, %t3020
  %a1125 = fptosi <4 x float> %t3022 to <4 x i32>
  %a1132 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1125)
  %11541 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1132, <4 x i32> zeroinitializer)
  %t3024 = sitofp <4 x i32> %11541 to <4 x float>
  %t3025 = fmul <4 x float> %9225, %t3024
  %11542 = add nuw nsw <4 x i32> %11541, <i32 1, i32 1, i32 1, i32 1>
  %11543 = sitofp <4 x i32> %11542 to <4 x float>
  %t3026 = fmul <4 x float> %9225, %11543
  %11544 = fmul <4 x float> %t3022, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1130 = fptosi <4 x float> %11544 to <4 x i32>
  %a1129 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1130)
  %11545 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1129, <4 x i32> zeroinitializer)
  %11546 = shl <4 x i32> %11541, <i32 8, i32 8, i32 8, i32 8>
  %.neg205 = sub <4 x i32> %.neg203, %11546
  %t3031 = add <4 x i32> %.neg205, %11545
  %11547 = sub nsw i32 %t3017, %f4.v3.min_realized
  %t3034 = add nsw i32 %11547, %11525
  %t3036 = sub nsw <4 x i32> %11541, %9165
  %t3037 = mul nsw <4 x i32> %t3036, %9213
  %11548 = sub nsw i32 %11534, %f4.v3.min_realized
  %t3039 = add nsw i32 %11548, %11525
  %t3041 = add nsw i32 %11547, %11527
  %t3042 = add nsw i32 %11548, %11527
  %11549 = add nsw <4 x i32> %t3036, <i32 1, i32 1, i32 1, i32 1>
  %t3043 = mul nsw <4 x i32> %11549, %9213
  %11550 = add nsw i32 %f125.s0.v3.v366.base193, 1
  %11551 = shl i32 %11550, 1
  %11552 = and i32 %11551, 2
  %11553 = ashr i32 %11550, 1
  %t3044 = add nsw i32 %11552, %11553
  %a1133 = fptosi <4 x float> %t3021 to <4 x i32>
  %a1140 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1087, <4 x i32> %a1133)
  %11554 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1140, <4 x i32> zeroinitializer)
  %t3046 = sitofp <4 x i32> %11554 to <4 x float>
  %t3047 = fmul <4 x float> %9225, %t3046
  %11555 = add nuw nsw <4 x i32> %11554, <i32 1, i32 1, i32 1, i32 1>
  %11556 = sitofp <4 x i32> %11555 to <4 x float>
  %t3048 = fmul <4 x float> %9225, %11556
  %11557 = fmul <4 x float> %t3021, <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>
  %a1138 = fptosi <4 x float> %11557 to <4 x i32>
  %a1137 = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %b1132, <4 x i32> %a1138)
  %11558 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %a1137, <4 x i32> zeroinitializer)
  %11559 = shl <4 x i32> %11554, <i32 8, i32 8, i32 8, i32 8>
  %.neg207 = sub <4 x i32> %.neg203, %11559
  %t3051 = add <4 x i32> %.neg207, %11558
  %11560 = sub nsw i32 %t3044, %f4.v3.min_realized
  %t3053 = add nsw i32 %11560, %11525
  %t3054 = sub nsw <4 x i32> %11554, %9165
  %t3055 = mul nsw <4 x i32> %t3054, %9213
  %11561 = sub nsw i32 %11553, %f4.v3.min_realized
  %t3057 = add nsw i32 %11561, %11525
  %t3058 = add nsw i32 %11560, %11527
  %t3059 = add nsw i32 %11561, %11527
  %11562 = add nsw <4 x i32> %t3054, <i32 1, i32 1, i32 1, i32 1>
  %t3060 = mul nsw <4 x i32> %11562, %9213
  %11563 = insertelement <4 x i32> undef, i32 %t3042, i64 0
  %11564 = shufflevector <4 x i32> %11563, <4 x i32> undef, <4 x i32> zeroinitializer
  %11565 = add nsw <4 x i32> %11564, <i32 0, i32 1, i32 2, i32 3>
  %11566 = add nsw <4 x i32> %t3043, %11565
  %11567 = sext <4 x i32> %11566 to <4 x i64>
  %11568 = extractelement <4 x i64> %11567, i64 0
  %11569 = getelementptr inbounds float, ptr %f4.host, i64 %11568
  %11570 = load float, ptr %11569, align 4, !tbaa !44
  %11571 = insertelement <4 x float> undef, float %11570, i64 0
  %11572 = extractelement <4 x i64> %11567, i64 1
  %11573 = getelementptr inbounds float, ptr %f4.host, i64 %11572
  %11574 = load float, ptr %11573, align 4, !tbaa !44
  %11575 = insertelement <4 x float> %11571, float %11574, i64 1
  %11576 = extractelement <4 x i64> %11567, i64 2
  %11577 = getelementptr inbounds float, ptr %f4.host, i64 %11576
  %11578 = load float, ptr %11577, align 4, !tbaa !44
  %11579 = insertelement <4 x float> %11575, float %11578, i64 2
  %11580 = extractelement <4 x i64> %11567, i64 3
  %11581 = getelementptr inbounds float, ptr %f4.host, i64 %11580
  %11582 = load float, ptr %11581, align 4, !tbaa !44
  %11583 = insertelement <4 x float> %11579, float %11582, i64 3
  %11584 = fmul <4 x float> %11583, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11585 = insertelement <4 x i32> undef, i32 %t3041, i64 0
  %11586 = shufflevector <4 x i32> %11585, <4 x i32> undef, <4 x i32> zeroinitializer
  %11587 = add <4 x i32> %11586, <i32 -1, i32 0, i32 1, i32 2>
  %11588 = add <4 x i32> %11587, %t3043
  %11589 = sext <4 x i32> %11588 to <4 x i64>
  %11590 = extractelement <4 x i64> %11589, i64 0
  %11591 = getelementptr inbounds float, ptr %f4.host, i64 %11590
  %11592 = load float, ptr %11591, align 4, !tbaa !44
  %11593 = insertelement <4 x float> undef, float %11592, i64 0
  %11594 = extractelement <4 x i64> %11589, i64 1
  %11595 = getelementptr inbounds float, ptr %f4.host, i64 %11594
  %11596 = load float, ptr %11595, align 4, !tbaa !44
  %11597 = insertelement <4 x float> %11593, float %11596, i64 1
  %11598 = extractelement <4 x i64> %11589, i64 2
  %11599 = getelementptr inbounds float, ptr %f4.host, i64 %11598
  %11600 = load float, ptr %11599, align 4, !tbaa !44
  %11601 = insertelement <4 x float> %11597, float %11600, i64 2
  %11602 = extractelement <4 x i64> %11589, i64 3
  %11603 = getelementptr inbounds float, ptr %f4.host, i64 %11602
  %11604 = load float, ptr %11603, align 4, !tbaa !44
  %11605 = insertelement <4 x float> %11601, float %11604, i64 3
  %11606 = fmul <4 x float> %11605, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11607 = fadd <4 x float> %11584, %11606
  %11608 = fmul <4 x float> %11607, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11609 = insertelement <4 x i32> undef, i32 %t3039, i64 0
  %11610 = shufflevector <4 x i32> %11609, <4 x i32> undef, <4 x i32> zeroinitializer
  %11611 = add nsw <4 x i32> %11610, <i32 0, i32 1, i32 2, i32 3>
  %11612 = add nsw <4 x i32> %t3043, %11611
  %11613 = sext <4 x i32> %11612 to <4 x i64>
  %11614 = extractelement <4 x i64> %11613, i64 0
  %11615 = getelementptr inbounds float, ptr %f4.host, i64 %11614
  %11616 = load float, ptr %11615, align 4, !tbaa !44
  %11617 = insertelement <4 x float> undef, float %11616, i64 0
  %11618 = extractelement <4 x i64> %11613, i64 1
  %11619 = getelementptr inbounds float, ptr %f4.host, i64 %11618
  %11620 = load float, ptr %11619, align 4, !tbaa !44
  %11621 = insertelement <4 x float> %11617, float %11620, i64 1
  %11622 = extractelement <4 x i64> %11613, i64 2
  %11623 = getelementptr inbounds float, ptr %f4.host, i64 %11622
  %11624 = load float, ptr %11623, align 4, !tbaa !44
  %11625 = insertelement <4 x float> %11621, float %11624, i64 2
  %11626 = extractelement <4 x i64> %11613, i64 3
  %11627 = getelementptr inbounds float, ptr %f4.host, i64 %11626
  %11628 = load float, ptr %11627, align 4, !tbaa !44
  %11629 = insertelement <4 x float> %11625, float %11628, i64 3
  %11630 = fmul <4 x float> %11629, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11631 = insertelement <4 x i32> undef, i32 %t3034, i64 0
  %11632 = shufflevector <4 x i32> %11631, <4 x i32> undef, <4 x i32> zeroinitializer
  %11633 = add <4 x i32> %11632, <i32 -1, i32 0, i32 1, i32 2>
  %11634 = add <4 x i32> %11633, %t3043
  %11635 = sext <4 x i32> %11634 to <4 x i64>
  %11636 = extractelement <4 x i64> %11635, i64 0
  %11637 = getelementptr inbounds float, ptr %f4.host, i64 %11636
  %11638 = load float, ptr %11637, align 4, !tbaa !44
  %11639 = insertelement <4 x float> undef, float %11638, i64 0
  %11640 = extractelement <4 x i64> %11635, i64 1
  %11641 = getelementptr inbounds float, ptr %f4.host, i64 %11640
  %11642 = load float, ptr %11641, align 4, !tbaa !44
  %11643 = insertelement <4 x float> %11639, float %11642, i64 1
  %11644 = extractelement <4 x i64> %11635, i64 2
  %11645 = getelementptr inbounds float, ptr %f4.host, i64 %11644
  %11646 = load float, ptr %11645, align 4, !tbaa !44
  %11647 = insertelement <4 x float> %11643, float %11646, i64 2
  %11648 = extractelement <4 x i64> %11635, i64 3
  %11649 = getelementptr inbounds float, ptr %f4.host, i64 %11648
  %11650 = load float, ptr %11649, align 4, !tbaa !44
  %11651 = insertelement <4 x float> %11647, float %11650, i64 3
  %11652 = fmul <4 x float> %11651, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11653 = fadd <4 x float> %11630, %11652
  %11654 = fmul <4 x float> %11653, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11655 = fadd <4 x float> %11608, %11654
  %11656 = sext <4 x i32> %t3031 to <4 x i64>
  %11657 = extractelement <4 x i64> %11656, i64 0
  %11658 = getelementptr inbounds float, ptr %f0.host, i64 %11657
  %11659 = load float, ptr %11658, align 4, !tbaa !6
  %11660 = insertelement <4 x float> undef, float %11659, i64 0
  %11661 = extractelement <4 x i64> %11656, i64 1
  %11662 = getelementptr inbounds float, ptr %f0.host, i64 %11661
  %11663 = load float, ptr %11662, align 4, !tbaa !6
  %11664 = insertelement <4 x float> %11660, float %11663, i64 1
  %11665 = extractelement <4 x i64> %11656, i64 2
  %11666 = getelementptr inbounds float, ptr %f0.host, i64 %11665
  %11667 = load float, ptr %11666, align 4, !tbaa !6
  %11668 = insertelement <4 x float> %11664, float %11667, i64 2
  %11669 = extractelement <4 x i64> %11656, i64 3
  %11670 = getelementptr inbounds float, ptr %f0.host, i64 %11669
  %11671 = load float, ptr %11670, align 4, !tbaa !6
  %11672 = insertelement <4 x float> %11668, float %11671, i64 3
  %11673 = fsub <4 x float> %t3020, %t3026
  %11674 = fmul <4 x float> %9234, %11673
  %11675 = fadd <4 x float> %t3026, %11674
  %11676 = fadd <4 x float> %11675, %11672
  %11677 = fsub <4 x float> %11676, %11655
  %11678 = fsub <4 x float> %t3022, %t3024
  %11679 = fmul <4 x float> %11678, %11677
  %11680 = add nsw <4 x i32> %t3037, %11565
  %11681 = sext <4 x i32> %11680 to <4 x i64>
  %11682 = extractelement <4 x i64> %11681, i64 0
  %11683 = getelementptr inbounds float, ptr %f4.host, i64 %11682
  %11684 = load float, ptr %11683, align 4, !tbaa !44
  %11685 = insertelement <4 x float> undef, float %11684, i64 0
  %11686 = extractelement <4 x i64> %11681, i64 1
  %11687 = getelementptr inbounds float, ptr %f4.host, i64 %11686
  %11688 = load float, ptr %11687, align 4, !tbaa !44
  %11689 = insertelement <4 x float> %11685, float %11688, i64 1
  %11690 = extractelement <4 x i64> %11681, i64 2
  %11691 = getelementptr inbounds float, ptr %f4.host, i64 %11690
  %11692 = load float, ptr %11691, align 4, !tbaa !44
  %11693 = insertelement <4 x float> %11689, float %11692, i64 2
  %11694 = extractelement <4 x i64> %11681, i64 3
  %11695 = getelementptr inbounds float, ptr %f4.host, i64 %11694
  %11696 = load float, ptr %11695, align 4, !tbaa !44
  %11697 = insertelement <4 x float> %11693, float %11696, i64 3
  %11698 = fmul <4 x float> %11697, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11699 = add <4 x i32> %11587, %t3037
  %11700 = sext <4 x i32> %11699 to <4 x i64>
  %11701 = extractelement <4 x i64> %11700, i64 0
  %11702 = getelementptr inbounds float, ptr %f4.host, i64 %11701
  %11703 = load float, ptr %11702, align 4, !tbaa !44
  %11704 = insertelement <4 x float> undef, float %11703, i64 0
  %11705 = extractelement <4 x i64> %11700, i64 1
  %11706 = getelementptr inbounds float, ptr %f4.host, i64 %11705
  %11707 = load float, ptr %11706, align 4, !tbaa !44
  %11708 = insertelement <4 x float> %11704, float %11707, i64 1
  %11709 = extractelement <4 x i64> %11700, i64 2
  %11710 = getelementptr inbounds float, ptr %f4.host, i64 %11709
  %11711 = load float, ptr %11710, align 4, !tbaa !44
  %11712 = insertelement <4 x float> %11708, float %11711, i64 2
  %11713 = extractelement <4 x i64> %11700, i64 3
  %11714 = getelementptr inbounds float, ptr %f4.host, i64 %11713
  %11715 = load float, ptr %11714, align 4, !tbaa !44
  %11716 = insertelement <4 x float> %11712, float %11715, i64 3
  %11717 = fmul <4 x float> %11716, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11718 = fadd <4 x float> %11698, %11717
  %11719 = fmul <4 x float> %11718, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11720 = add nsw <4 x i32> %t3037, %11611
  %11721 = sext <4 x i32> %11720 to <4 x i64>
  %11722 = extractelement <4 x i64> %11721, i64 0
  %11723 = getelementptr inbounds float, ptr %f4.host, i64 %11722
  %11724 = load float, ptr %11723, align 4, !tbaa !44
  %11725 = insertelement <4 x float> undef, float %11724, i64 0
  %11726 = extractelement <4 x i64> %11721, i64 1
  %11727 = getelementptr inbounds float, ptr %f4.host, i64 %11726
  %11728 = load float, ptr %11727, align 4, !tbaa !44
  %11729 = insertelement <4 x float> %11725, float %11728, i64 1
  %11730 = extractelement <4 x i64> %11721, i64 2
  %11731 = getelementptr inbounds float, ptr %f4.host, i64 %11730
  %11732 = load float, ptr %11731, align 4, !tbaa !44
  %11733 = insertelement <4 x float> %11729, float %11732, i64 2
  %11734 = extractelement <4 x i64> %11721, i64 3
  %11735 = getelementptr inbounds float, ptr %f4.host, i64 %11734
  %11736 = load float, ptr %11735, align 4, !tbaa !44
  %11737 = insertelement <4 x float> %11733, float %11736, i64 3
  %11738 = fmul <4 x float> %11737, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11739 = add <4 x i32> %11633, %t3037
  %11740 = sext <4 x i32> %11739 to <4 x i64>
  %11741 = extractelement <4 x i64> %11740, i64 0
  %11742 = getelementptr inbounds float, ptr %f4.host, i64 %11741
  %11743 = load float, ptr %11742, align 4, !tbaa !44
  %11744 = insertelement <4 x float> undef, float %11743, i64 0
  %11745 = extractelement <4 x i64> %11740, i64 1
  %11746 = getelementptr inbounds float, ptr %f4.host, i64 %11745
  %11747 = load float, ptr %11746, align 4, !tbaa !44
  %11748 = insertelement <4 x float> %11744, float %11747, i64 1
  %11749 = extractelement <4 x i64> %11740, i64 2
  %11750 = getelementptr inbounds float, ptr %f4.host, i64 %11749
  %11751 = load float, ptr %11750, align 4, !tbaa !44
  %11752 = insertelement <4 x float> %11748, float %11751, i64 2
  %11753 = extractelement <4 x i64> %11740, i64 3
  %11754 = getelementptr inbounds float, ptr %f4.host, i64 %11753
  %11755 = load float, ptr %11754, align 4, !tbaa !44
  %11756 = insertelement <4 x float> %11752, float %11755, i64 3
  %11757 = fmul <4 x float> %11756, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11758 = fadd <4 x float> %11738, %11757
  %11759 = fmul <4 x float> %11758, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11760 = fadd <4 x float> %11719, %11759
  %11761 = add nsw <4 x i32> %t3031, <i32 256, i32 256, i32 256, i32 256>
  %11762 = sext <4 x i32> %11761 to <4 x i64>
  %11763 = extractelement <4 x i64> %11762, i64 0
  %11764 = getelementptr inbounds float, ptr %f0.host, i64 %11763
  %11765 = load float, ptr %11764, align 4, !tbaa !6
  %11766 = insertelement <4 x float> undef, float %11765, i64 0
  %11767 = extractelement <4 x i64> %11762, i64 1
  %11768 = getelementptr inbounds float, ptr %f0.host, i64 %11767
  %11769 = load float, ptr %11768, align 4, !tbaa !6
  %11770 = insertelement <4 x float> %11766, float %11769, i64 1
  %11771 = extractelement <4 x i64> %11762, i64 2
  %11772 = getelementptr inbounds float, ptr %f0.host, i64 %11771
  %11773 = load float, ptr %11772, align 4, !tbaa !6
  %11774 = insertelement <4 x float> %11770, float %11773, i64 2
  %11775 = extractelement <4 x i64> %11762, i64 3
  %11776 = getelementptr inbounds float, ptr %f0.host, i64 %11775
  %11777 = load float, ptr %11776, align 4, !tbaa !6
  %11778 = insertelement <4 x float> %11774, float %11777, i64 3
  %11779 = fsub <4 x float> %t3020, %t3025
  %11780 = fmul <4 x float> %9234, %11779
  %11781 = fadd <4 x float> %t3025, %11780
  %11782 = fadd <4 x float> %11781, %11778
  %11783 = fsub <4 x float> %11782, %11760
  %11784 = fsub <4 x float> %t3024, %t3022
  %11785 = fadd <4 x float> %11784, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11786 = fmul <4 x float> %11785, %11783
  %11787 = fadd <4 x float> %11679, %11786
  %11788 = sext i32 %11534 to i64
  %11789 = sub nsw i64 %11788, %9217
  %11790 = add nsw i64 %11789, %11528
  %11791 = getelementptr inbounds float, ptr %9142, i64 %11790
  %11792 = load <4 x float>, ptr %11791, align 4, !tbaa !70
  %11793 = fmul <4 x float> %11792, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11794 = sext i32 %t3017 to i64
  %11795 = sub nsw i64 %11794, %9217
  %11796 = add nsw i64 %11529, %11795
  %11797 = getelementptr inbounds float, ptr %9142, i64 %11796
  %11798 = load <4 x float>, ptr %11797, align 4, !tbaa !70
  %11799 = fmul <4 x float> %11798, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11800 = fadd <4 x float> %11793, %11799
  %11801 = fmul <4 x float> %11800, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11802 = add nsw i64 %11789, %11530
  %11803 = getelementptr inbounds float, ptr %9142, i64 %11802
  %11804 = load <4 x float>, ptr %11803, align 4, !tbaa !70
  %11805 = fmul <4 x float> %11804, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11806 = add nsw i64 %11531, %11795
  %11807 = getelementptr inbounds float, ptr %9142, i64 %11806
  %11808 = load <4 x float>, ptr %11807, align 4, !tbaa !70
  %11809 = fmul <4 x float> %11808, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11810 = fadd <4 x float> %11805, %11809
  %11811 = fmul <4 x float> %11810, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11812 = fadd <4 x float> %11801, %11811
  %11813 = fadd <4 x float> %11787, %11812
  %11814 = insertelement <4 x i32> undef, i32 %t3059, i64 0
  %11815 = shufflevector <4 x i32> %11814, <4 x i32> undef, <4 x i32> zeroinitializer
  %11816 = add nsw <4 x i32> %11815, <i32 0, i32 1, i32 2, i32 3>
  %11817 = add nsw <4 x i32> %t3060, %11816
  %11818 = sext <4 x i32> %11817 to <4 x i64>
  %11819 = extractelement <4 x i64> %11818, i64 0
  %11820 = getelementptr inbounds float, ptr %f4.host, i64 %11819
  %11821 = load float, ptr %11820, align 4, !tbaa !44
  %11822 = insertelement <4 x float> undef, float %11821, i64 0
  %11823 = extractelement <4 x i64> %11818, i64 1
  %11824 = getelementptr inbounds float, ptr %f4.host, i64 %11823
  %11825 = load float, ptr %11824, align 4, !tbaa !44
  %11826 = insertelement <4 x float> %11822, float %11825, i64 1
  %11827 = extractelement <4 x i64> %11818, i64 2
  %11828 = getelementptr inbounds float, ptr %f4.host, i64 %11827
  %11829 = load float, ptr %11828, align 4, !tbaa !44
  %11830 = insertelement <4 x float> %11826, float %11829, i64 2
  %11831 = extractelement <4 x i64> %11818, i64 3
  %11832 = getelementptr inbounds float, ptr %f4.host, i64 %11831
  %11833 = load float, ptr %11832, align 4, !tbaa !44
  %11834 = insertelement <4 x float> %11830, float %11833, i64 3
  %11835 = fmul <4 x float> %11834, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11836 = insertelement <4 x i32> undef, i32 %t3058, i64 0
  %11837 = shufflevector <4 x i32> %11836, <4 x i32> undef, <4 x i32> zeroinitializer
  %11838 = add <4 x i32> %11837, <i32 -1, i32 0, i32 1, i32 2>
  %11839 = add <4 x i32> %11838, %t3060
  %11840 = sext <4 x i32> %11839 to <4 x i64>
  %11841 = extractelement <4 x i64> %11840, i64 0
  %11842 = getelementptr inbounds float, ptr %f4.host, i64 %11841
  %11843 = load float, ptr %11842, align 4, !tbaa !44
  %11844 = insertelement <4 x float> undef, float %11843, i64 0
  %11845 = extractelement <4 x i64> %11840, i64 1
  %11846 = getelementptr inbounds float, ptr %f4.host, i64 %11845
  %11847 = load float, ptr %11846, align 4, !tbaa !44
  %11848 = insertelement <4 x float> %11844, float %11847, i64 1
  %11849 = extractelement <4 x i64> %11840, i64 2
  %11850 = getelementptr inbounds float, ptr %f4.host, i64 %11849
  %11851 = load float, ptr %11850, align 4, !tbaa !44
  %11852 = insertelement <4 x float> %11848, float %11851, i64 2
  %11853 = extractelement <4 x i64> %11840, i64 3
  %11854 = getelementptr inbounds float, ptr %f4.host, i64 %11853
  %11855 = load float, ptr %11854, align 4, !tbaa !44
  %11856 = insertelement <4 x float> %11852, float %11855, i64 3
  %11857 = fmul <4 x float> %11856, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11858 = fadd <4 x float> %11835, %11857
  %11859 = fmul <4 x float> %11858, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11860 = insertelement <4 x i32> undef, i32 %t3057, i64 0
  %11861 = shufflevector <4 x i32> %11860, <4 x i32> undef, <4 x i32> zeroinitializer
  %11862 = add nsw <4 x i32> %11861, <i32 0, i32 1, i32 2, i32 3>
  %11863 = add nsw <4 x i32> %t3060, %11862
  %11864 = sext <4 x i32> %11863 to <4 x i64>
  %11865 = extractelement <4 x i64> %11864, i64 0
  %11866 = getelementptr inbounds float, ptr %f4.host, i64 %11865
  %11867 = load float, ptr %11866, align 4, !tbaa !44
  %11868 = insertelement <4 x float> undef, float %11867, i64 0
  %11869 = extractelement <4 x i64> %11864, i64 1
  %11870 = getelementptr inbounds float, ptr %f4.host, i64 %11869
  %11871 = load float, ptr %11870, align 4, !tbaa !44
  %11872 = insertelement <4 x float> %11868, float %11871, i64 1
  %11873 = extractelement <4 x i64> %11864, i64 2
  %11874 = getelementptr inbounds float, ptr %f4.host, i64 %11873
  %11875 = load float, ptr %11874, align 4, !tbaa !44
  %11876 = insertelement <4 x float> %11872, float %11875, i64 2
  %11877 = extractelement <4 x i64> %11864, i64 3
  %11878 = getelementptr inbounds float, ptr %f4.host, i64 %11877
  %11879 = load float, ptr %11878, align 4, !tbaa !44
  %11880 = insertelement <4 x float> %11876, float %11879, i64 3
  %11881 = fmul <4 x float> %11880, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11882 = insertelement <4 x i32> undef, i32 %t3053, i64 0
  %11883 = shufflevector <4 x i32> %11882, <4 x i32> undef, <4 x i32> zeroinitializer
  %11884 = add <4 x i32> %11883, <i32 -1, i32 0, i32 1, i32 2>
  %11885 = add <4 x i32> %11884, %t3060
  %11886 = sext <4 x i32> %11885 to <4 x i64>
  %11887 = extractelement <4 x i64> %11886, i64 0
  %11888 = getelementptr inbounds float, ptr %f4.host, i64 %11887
  %11889 = load float, ptr %11888, align 4, !tbaa !44
  %11890 = insertelement <4 x float> undef, float %11889, i64 0
  %11891 = extractelement <4 x i64> %11886, i64 1
  %11892 = getelementptr inbounds float, ptr %f4.host, i64 %11891
  %11893 = load float, ptr %11892, align 4, !tbaa !44
  %11894 = insertelement <4 x float> %11890, float %11893, i64 1
  %11895 = extractelement <4 x i64> %11886, i64 2
  %11896 = getelementptr inbounds float, ptr %f4.host, i64 %11895
  %11897 = load float, ptr %11896, align 4, !tbaa !44
  %11898 = insertelement <4 x float> %11894, float %11897, i64 2
  %11899 = extractelement <4 x i64> %11886, i64 3
  %11900 = getelementptr inbounds float, ptr %f4.host, i64 %11899
  %11901 = load float, ptr %11900, align 4, !tbaa !44
  %11902 = insertelement <4 x float> %11898, float %11901, i64 3
  %11903 = fmul <4 x float> %11902, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11904 = fadd <4 x float> %11881, %11903
  %11905 = fmul <4 x float> %11904, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11906 = fadd <4 x float> %11859, %11905
  %11907 = sext <4 x i32> %t3051 to <4 x i64>
  %11908 = extractelement <4 x i64> %11907, i64 0
  %11909 = getelementptr inbounds float, ptr %f0.host, i64 %11908
  %11910 = load float, ptr %11909, align 4, !tbaa !6
  %11911 = insertelement <4 x float> undef, float %11910, i64 0
  %11912 = extractelement <4 x i64> %11907, i64 1
  %11913 = getelementptr inbounds float, ptr %f0.host, i64 %11912
  %11914 = load float, ptr %11913, align 4, !tbaa !6
  %11915 = insertelement <4 x float> %11911, float %11914, i64 1
  %11916 = extractelement <4 x i64> %11907, i64 2
  %11917 = getelementptr inbounds float, ptr %f0.host, i64 %11916
  %11918 = load float, ptr %11917, align 4, !tbaa !6
  %11919 = insertelement <4 x float> %11915, float %11918, i64 2
  %11920 = extractelement <4 x i64> %11907, i64 3
  %11921 = getelementptr inbounds float, ptr %f0.host, i64 %11920
  %11922 = load float, ptr %11921, align 4, !tbaa !6
  %11923 = insertelement <4 x float> %11919, float %11922, i64 3
  %11924 = fsub <4 x float> %t3019, %t3048
  %11925 = fmul <4 x float> %9234, %11924
  %11926 = fadd <4 x float> %t3048, %11925
  %11927 = fadd <4 x float> %11926, %11923
  %11928 = fsub <4 x float> %11927, %11906
  %11929 = fsub <4 x float> %t3021, %t3046
  %11930 = fmul <4 x float> %11929, %11928
  %11931 = add nsw <4 x i32> %t3055, %11816
  %11932 = sext <4 x i32> %11931 to <4 x i64>
  %11933 = extractelement <4 x i64> %11932, i64 0
  %11934 = getelementptr inbounds float, ptr %f4.host, i64 %11933
  %11935 = load float, ptr %11934, align 4, !tbaa !44
  %11936 = insertelement <4 x float> undef, float %11935, i64 0
  %11937 = extractelement <4 x i64> %11932, i64 1
  %11938 = getelementptr inbounds float, ptr %f4.host, i64 %11937
  %11939 = load float, ptr %11938, align 4, !tbaa !44
  %11940 = insertelement <4 x float> %11936, float %11939, i64 1
  %11941 = extractelement <4 x i64> %11932, i64 2
  %11942 = getelementptr inbounds float, ptr %f4.host, i64 %11941
  %11943 = load float, ptr %11942, align 4, !tbaa !44
  %11944 = insertelement <4 x float> %11940, float %11943, i64 2
  %11945 = extractelement <4 x i64> %11932, i64 3
  %11946 = getelementptr inbounds float, ptr %f4.host, i64 %11945
  %11947 = load float, ptr %11946, align 4, !tbaa !44
  %11948 = insertelement <4 x float> %11944, float %11947, i64 3
  %11949 = fmul <4 x float> %11948, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11950 = add <4 x i32> %t3055, %11837
  %11951 = add <4 x i32> %11950, <i32 -1, i32 0, i32 1, i32 2>
  %11952 = sext <4 x i32> %11951 to <4 x i64>
  %11953 = extractelement <4 x i64> %11952, i64 0
  %11954 = getelementptr inbounds float, ptr %f4.host, i64 %11953
  %11955 = load float, ptr %11954, align 4, !tbaa !44
  %11956 = insertelement <4 x float> undef, float %11955, i64 0
  %11957 = extractelement <4 x i64> %11952, i64 1
  %11958 = getelementptr inbounds float, ptr %f4.host, i64 %11957
  %11959 = load float, ptr %11958, align 4, !tbaa !44
  %11960 = insertelement <4 x float> %11956, float %11959, i64 1
  %11961 = extractelement <4 x i64> %11952, i64 2
  %11962 = getelementptr inbounds float, ptr %f4.host, i64 %11961
  %11963 = load float, ptr %11962, align 4, !tbaa !44
  %11964 = insertelement <4 x float> %11960, float %11963, i64 2
  %11965 = extractelement <4 x i64> %11952, i64 3
  %11966 = getelementptr inbounds float, ptr %f4.host, i64 %11965
  %11967 = load float, ptr %11966, align 4, !tbaa !44
  %11968 = insertelement <4 x float> %11964, float %11967, i64 3
  %11969 = fmul <4 x float> %11968, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %11970 = fadd <4 x float> %11949, %11969
  %11971 = fmul <4 x float> %11970, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11972 = add nsw <4 x i32> %t3055, %11862
  %11973 = sext <4 x i32> %11972 to <4 x i64>
  %11974 = extractelement <4 x i64> %11973, i64 0
  %11975 = getelementptr inbounds float, ptr %f4.host, i64 %11974
  %11976 = load float, ptr %11975, align 4, !tbaa !44
  %11977 = insertelement <4 x float> undef, float %11976, i64 0
  %11978 = extractelement <4 x i64> %11973, i64 1
  %11979 = getelementptr inbounds float, ptr %f4.host, i64 %11978
  %11980 = load float, ptr %11979, align 4, !tbaa !44
  %11981 = insertelement <4 x float> %11977, float %11980, i64 1
  %11982 = extractelement <4 x i64> %11973, i64 2
  %11983 = getelementptr inbounds float, ptr %f4.host, i64 %11982
  %11984 = load float, ptr %11983, align 4, !tbaa !44
  %11985 = insertelement <4 x float> %11981, float %11984, i64 2
  %11986 = extractelement <4 x i64> %11973, i64 3
  %11987 = getelementptr inbounds float, ptr %f4.host, i64 %11986
  %11988 = load float, ptr %11987, align 4, !tbaa !44
  %11989 = insertelement <4 x float> %11985, float %11988, i64 3
  %11990 = fmul <4 x float> %11989, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %11991 = add <4 x i32> %t3055, %11883
  %11992 = add <4 x i32> %11991, <i32 -1, i32 0, i32 1, i32 2>
  %11993 = sext <4 x i32> %11992 to <4 x i64>
  %11994 = extractelement <4 x i64> %11993, i64 0
  %11995 = getelementptr inbounds float, ptr %f4.host, i64 %11994
  %11996 = load float, ptr %11995, align 4, !tbaa !44
  %11997 = insertelement <4 x float> undef, float %11996, i64 0
  %11998 = extractelement <4 x i64> %11993, i64 1
  %11999 = getelementptr inbounds float, ptr %f4.host, i64 %11998
  %12000 = load float, ptr %11999, align 4, !tbaa !44
  %12001 = insertelement <4 x float> %11997, float %12000, i64 1
  %12002 = extractelement <4 x i64> %11993, i64 2
  %12003 = getelementptr inbounds float, ptr %f4.host, i64 %12002
  %12004 = load float, ptr %12003, align 4, !tbaa !44
  %12005 = insertelement <4 x float> %12001, float %12004, i64 2
  %12006 = extractelement <4 x i64> %11993, i64 3
  %12007 = getelementptr inbounds float, ptr %f4.host, i64 %12006
  %12008 = load float, ptr %12007, align 4, !tbaa !44
  %12009 = insertelement <4 x float> %12005, float %12008, i64 3
  %12010 = fmul <4 x float> %12009, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12011 = fadd <4 x float> %11990, %12010
  %12012 = fmul <4 x float> %12011, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12013 = fadd <4 x float> %11971, %12012
  %12014 = add nsw <4 x i32> %t3051, <i32 256, i32 256, i32 256, i32 256>
  %12015 = sext <4 x i32> %12014 to <4 x i64>
  %12016 = extractelement <4 x i64> %12015, i64 0
  %12017 = getelementptr inbounds float, ptr %f0.host, i64 %12016
  %12018 = load float, ptr %12017, align 4, !tbaa !6
  %12019 = insertelement <4 x float> undef, float %12018, i64 0
  %12020 = extractelement <4 x i64> %12015, i64 1
  %12021 = getelementptr inbounds float, ptr %f0.host, i64 %12020
  %12022 = load float, ptr %12021, align 4, !tbaa !6
  %12023 = insertelement <4 x float> %12019, float %12022, i64 1
  %12024 = extractelement <4 x i64> %12015, i64 2
  %12025 = getelementptr inbounds float, ptr %f0.host, i64 %12024
  %12026 = load float, ptr %12025, align 4, !tbaa !6
  %12027 = insertelement <4 x float> %12023, float %12026, i64 2
  %12028 = extractelement <4 x i64> %12015, i64 3
  %12029 = getelementptr inbounds float, ptr %f0.host, i64 %12028
  %12030 = load float, ptr %12029, align 4, !tbaa !6
  %12031 = insertelement <4 x float> %12027, float %12030, i64 3
  %12032 = fsub <4 x float> %t3019, %t3047
  %12033 = fmul <4 x float> %9234, %12032
  %12034 = fadd <4 x float> %t3047, %12033
  %12035 = fadd <4 x float> %12034, %12031
  %12036 = fsub <4 x float> %12035, %12013
  %12037 = fsub <4 x float> %t3046, %t3021
  %12038 = fadd <4 x float> %12037, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12039 = fmul <4 x float> %12038, %12036
  %12040 = fadd <4 x float> %11930, %12039
  %12041 = sext i32 %11553 to i64
  %12042 = sub nsw i64 %12041, %9217
  %12043 = add nsw i64 %12042, %11528
  %12044 = getelementptr inbounds float, ptr %9142, i64 %12043
  %12045 = load <4 x float>, ptr %12044, align 4, !tbaa !70
  %12046 = fmul <4 x float> %12045, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12047 = sext i32 %t3044 to i64
  %12048 = sub nsw i64 %12047, %9217
  %12049 = add nsw i64 %11529, %12048
  %12050 = getelementptr inbounds float, ptr %9142, i64 %12049
  %12051 = load <4 x float>, ptr %12050, align 4, !tbaa !70
  %12052 = fmul <4 x float> %12051, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12053 = fadd <4 x float> %12046, %12052
  %12054 = fmul <4 x float> %12053, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12055 = add nsw i64 %12042, %11530
  %12056 = getelementptr inbounds float, ptr %9142, i64 %12055
  %12057 = load <4 x float>, ptr %12056, align 4, !tbaa !70
  %12058 = fmul <4 x float> %12057, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %12059 = add nsw i64 %11531, %12048
  %12060 = getelementptr inbounds float, ptr %9142, i64 %12059
  %12061 = load <4 x float>, ptr %12060, align 4, !tbaa !70
  %12062 = fmul <4 x float> %12061, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12063 = fadd <4 x float> %12058, %12062
  %12064 = fmul <4 x float> %12063, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %12065 = fadd <4 x float> %12054, %12064
  %12066 = fadd <4 x float> %12040, %12065
  %12067 = shufflevector <4 x float> %11813, <4 x float> %12066, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  %12068 = sext i32 %f125.s0.v3.v366.base193 to i64
  %12069 = sub nsw i64 %12068, %9235
  %12070 = getelementptr inbounds float, ptr %11515, i64 %12069
  store <8 x float> %12067, ptr %12070, align 4, !tbaa !72
  %lsr.iv.next441 = add i32 %lsr.iv440, -1
  %lsr.iv.next443 = add i32 %lsr.iv442, 8
  %.not85 = icmp eq i32 %lsr.iv.next441, 0
  br i1 %.not85, label %"consume f125194", label %"for f125.s0.v3.v3190"

"consume f125194":                                ; preds = %"for f125.s0.v3.v3190", %"produce f125189"
  br i1 %9238, label %"for local_laplacian.s0.v3.v3195.preheader", label %if.then.i283, !prof !5

"for local_laplacian.s0.v3.v3195.preheader":      ; preds = %"consume f125194"
  %12071 = add nsw i64 %9241, %indvars.iv304
  %12072 = mul nsw i64 %12071, %9240
  %12073 = sub i64 %12072, %8
  %a1146 = tail call i32 @llvm.smin.i32(i32 %b1149, i32 %9254)
  %12074 = tail call i32 @llvm.smax.i32(i32 %a1146, i32 %b1148)
  %12075 = mul nsw i32 %12074, %input.stride.1
  br label %"for local_laplacian.s0.v3.v3195"

"for local_laplacian.s0.v3.v3195":                ; preds = %"for local_laplacian.s0.v3.v3195.preheader", %"end for local_laplacian.s0.v5200"
  %local_laplacian.s0.v3.v3197 = phi i32 [ %12140, %"end for local_laplacian.s0.v5200" ], [ 0, %"for local_laplacian.s0.v3.v3195.preheader" ]
  br i1 %9239, label %"for local_laplacian.s0.v5199.preheader", label %"end for local_laplacian.s0.v5200", !prof !5

"for local_laplacian.s0.v5199.preheader":         ; preds = %"for local_laplacian.s0.v3.v3195"
  %12076 = shl nsw i32 %local_laplacian.s0.v3.v3197, 3
  %a1141 = add nsw i32 %12076, %local_laplacian.min.0
  %local_laplacian.s0.v3.v277.base198 = tail call i32 @llvm.smin.i32(i32 %b1078, i32 %a1141)
  %12077 = sext i32 %local_laplacian.s0.v3.v277.base198 to i64
  %12078 = add i64 %lsr.iv446, %12077
  %scevgep448 = getelementptr i16, ptr %local_laplacian.host, i64 %12078
  %12079 = add i64 %12073, %12077
  %12080 = getelementptr inbounds float, ptr %f2.host, i64 %12079
  %12081 = load <8 x float>, ptr %12080, align 4, !tbaa !42
  %12082 = fadd <8 x float> %12081, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12083 = insertelement <8 x i32> undef, i32 %local_laplacian.s0.v3.v277.base198, i64 0
  %12084 = shufflevector <8 x i32> %12083, <8 x i32> undef, <8 x i32> zeroinitializer
  %a1149 = add nsw <8 x i32> %12084, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %a1148 = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %b1151, <8 x i32> %a1149)
  %12085 = tail call <8 x i32> @llvm.smax.v8i32(<8 x i32> %a1148, <8 x i32> %b1150)
  %12086 = sub nsw i64 %12077, %9235
  %12087 = getelementptr inbounds float, ptr %11515, i64 %12086
  %12088 = load <8 x float>, ptr %12087, align 4, !tbaa !72
  br label %"for local_laplacian.s0.v5199"

if.then.i283:                                     ; preds = %"end for local_laplacian.s0.v5200", %"consume f125194"
  tail call void @halide_free(ptr %__user_context, ptr nonnull %11515) #7
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 1
  %lsr.iv.next447 = add i64 %lsr.iv446, %73
  %.not82 = icmp eq i64 %indvars.iv.next305, 64
  br i1 %.not82, label %if.then.i280, label %"produce f129143"

"for local_laplacian.s0.v5199":                   ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v5199.preheader"
  %lsr.iv449 = phi ptr [ %scevgep448, %"for local_laplacian.s0.v5199.preheader" ], [ %scevgep451, %"for local_laplacian.s0.v5199" ]
  %lsr.iv444 = phi i32 [ %local_laplacian.extent.2, %"for local_laplacian.s0.v5199.preheader" ], [ %lsr.iv.next445, %"for local_laplacian.s0.v5199" ]
  %a1145 = phi i32 [ %b1028, %"for local_laplacian.s0.v5199.preheader" ], [ %12139, %"for local_laplacian.s0.v5199" ]
  %a1144 = tail call i32 @llvm.smin.i32(i32 %b1147, i32 %a1145)
  %12089 = tail call i32 @llvm.smax.i32(i32 %a1144, i32 %b1146)
  %12090 = mul nsw i32 %12089, %input.stride.2
  %.scalar331 = add i32 %12090, %12075
  %.scalar332 = sub i32 %.scalar331, %9245
  %12091 = insertelement <8 x i32> undef, i32 %.scalar332, i64 0
  %12092 = shufflevector <8 x i32> %12091, <8 x i32> poison, <8 x i32> zeroinitializer
  %12093 = add <8 x i32> %12092, %12085
  %12094 = shufflevector <8 x i32> %12093, <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12095 = sext <4 x i32> %12094 to <4 x i64>
  %12096 = extractelement <4 x i64> %12095, i64 0
  %12097 = getelementptr inbounds i16, ptr %input.host, i64 %12096
  %12098 = load i16, ptr %12097, align 2, !tbaa !40
  %12099 = insertelement <8 x i16> undef, i16 %12098, i64 0
  %12100 = extractelement <4 x i64> %12095, i64 1
  %12101 = getelementptr inbounds i16, ptr %input.host, i64 %12100
  %12102 = load i16, ptr %12101, align 2, !tbaa !40
  %12103 = insertelement <8 x i16> %12099, i16 %12102, i64 1
  %12104 = extractelement <4 x i64> %12095, i64 2
  %12105 = getelementptr inbounds i16, ptr %input.host, i64 %12104
  %12106 = load i16, ptr %12105, align 2, !tbaa !40
  %12107 = insertelement <8 x i16> %12103, i16 %12106, i64 2
  %12108 = extractelement <4 x i64> %12095, i64 3
  %12109 = getelementptr inbounds i16, ptr %input.host, i64 %12108
  %12110 = load i16, ptr %12109, align 2, !tbaa !40
  %12111 = insertelement <8 x i16> %12107, i16 %12110, i64 3
  %12112 = shufflevector <8 x i32> %12093, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12113 = sext <4 x i32> %12112 to <4 x i64>
  %12114 = extractelement <4 x i64> %12113, i64 0
  %12115 = getelementptr inbounds i16, ptr %input.host, i64 %12114
  %12116 = load i16, ptr %12115, align 2, !tbaa !40
  %12117 = insertelement <8 x i16> %12111, i16 %12116, i64 4
  %12118 = extractelement <4 x i64> %12113, i64 1
  %12119 = getelementptr inbounds i16, ptr %input.host, i64 %12118
  %12120 = load i16, ptr %12119, align 2, !tbaa !40
  %12121 = insertelement <8 x i16> %12117, i16 %12120, i64 5
  %12122 = extractelement <4 x i64> %12113, i64 2
  %12123 = getelementptr inbounds i16, ptr %input.host, i64 %12122
  %12124 = load i16, ptr %12123, align 2, !tbaa !40
  %12125 = insertelement <8 x i16> %12121, i16 %12124, i64 6
  %12126 = extractelement <4 x i64> %12113, i64 3
  %12127 = getelementptr inbounds i16, ptr %input.host, i64 %12126
  %12128 = load i16, ptr %12127, align 2, !tbaa !40
  %12129 = insertelement <8 x i16> %12125, i16 %12128, i64 7
  %12130 = uitofp <8 x i16> %12129 to <8 x float>
  %12131 = fmul <8 x float> %12130, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %12132 = fadd <8 x float> %12131, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  %12133 = fmul <8 x float> %12088, %12132
  %a1143 = fdiv <8 x float> %12133, %12082
  %12134 = fcmp olt <8 x float> %a1143, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %a1142 = select <8 x i1> %12134, <8 x float> %a1143, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12135 = fcmp ogt <8 x float> %a1142, zeroinitializer
  %12136 = fmul <8 x float> %a1142, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %12137 = select <8 x i1> %12135, <8 x float> %12136, <8 x float> zeroinitializer
  %12138 = fptoui <8 x float> %12137 to <8 x i16>
  store <8 x i16> %12138, ptr %lsr.iv449, align 2, !tbaa !74
  %12139 = add nsw i32 %a1145, 1
  %lsr.iv.next445 = add i32 %lsr.iv444, -1
  %scevgep451 = getelementptr i1, ptr %lsr.iv449, i64 %9146
  %.not84 = icmp eq i32 %lsr.iv.next445, 0
  br i1 %.not84, label %"end for local_laplacian.s0.v5200", label %"for local_laplacian.s0.v5199"

"end for local_laplacian.s0.v5200":               ; preds = %"for local_laplacian.s0.v5199", %"for local_laplacian.s0.v3.v3195"
  %12140 = add nuw nsw i32 %local_laplacian.s0.v3.v3197, 1
  %.not83 = icmp eq i32 %12140, %9237
  br i1 %.not83, label %if.then.i283, label %"for local_laplacian.s0.v3.v3195"
}

; Function Attrs: nounwind
define i32 @local_laplacian(i32 %levels, float %alpha, float %beta, ptr noalias %input.buffer, ptr noalias %local_laplacian.buffer) local_unnamed_addr #4 {
entry:
  %.not = icmp eq ptr %input.buffer, null
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !4

"assert failed":                                  ; preds = %entry
  %0 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str) #4
  br label %destructor_block

"assert succeeded":                               ; preds = %entry
  %.not1 = icmp eq ptr %local_laplacian.buffer, null
  br i1 %.not1, label %"assert failed10", label %"assert succeeded11", !prof !4

destructor_block:                                 ; preds = %"assert succeeded11", %"assert failed10", %"assert failed"
  %1 = phi i32 [ %0, %"assert failed" ], [ %2, %"assert failed10" ], [ %__local_laplacian_result, %"assert succeeded11" ]
  ret i32 %1

"assert failed10":                                ; preds = %"assert succeeded"
  %2 = tail call i32 @halide_error_buffer_argument_is_null(ptr null, ptr nonnull @str.2) #4
  br label %destructor_block

"assert succeeded11":                             ; preds = %"assert succeeded"
  %__local_laplacian_result = tail call i32 @__local_laplacian(i32 %levels, float %alpha, float %beta, ptr nonnull %input.buffer, ptr nonnull %local_laplacian.buffer) #4
  br label %destructor_block
}

; Function Attrs: nounwind
define i32 @local_laplacian_argv(ptr nocapture readonly %0) local_unnamed_addr #4 {
entry:
  %1 = load ptr, ptr %0, align 8
  %2 = load i32, ptr %1, align 4
  %3 = getelementptr ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8
  %5 = load float, ptr %4, align 4
  %6 = getelementptr ptr, ptr %0, i64 2
  %7 = load ptr, ptr %6, align 8
  %8 = load float, ptr %7, align 4
  %9 = getelementptr ptr, ptr %0, i64 3
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %0, i64 4
  %12 = load ptr, ptr %11, align 8
  %13 = tail call i32 @local_laplacian(i32 %2, float %5, float %8, ptr %10, ptr %12) #9
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define nonnull ptr @local_laplacian_metadata() local_unnamed_addr #5 {
entry:
  ret ptr @local_laplacian_metadata_storage
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smin.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.smax.v8i32(<8 x i32>, <8 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smin.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smax.v4i32(<4 x i32>, <4 x i32>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #6

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #3 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #4 = { nounwind }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nounwind memory(none) }
attributes #9 = { noinline }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 3.9.1 "}
!1 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!2 = !{i32 2, !"halide_mcpu", !"haswell"}
!3 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!4 = !{!"branch_weights", i32 0, i32 1073741824}
!5 = !{!"branch_weights", i32 1073741824, i32 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"f0", !8, i64 0}
!8 = !{!"Halide buffer"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !11, !10}
!13 = !{!14, !14, i64 0}
!14 = !{!"f75", !8, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"f76", !8, i64 0}
!17 = distinct !{!17, !10, !11}
!18 = distinct !{!18, !10}
!19 = !{!20, !20, i64 0}
!20 = !{!"f77", !8, i64 0}
!21 = distinct !{!21, !10, !11}
!22 = distinct !{!22, !10}
!23 = !{!24, !24, i64 0}
!24 = !{!"f78", !8, i64 0}
!25 = distinct !{!25, !10, !11}
!26 = distinct !{!26, !10}
!27 = !{!"branch_weights", i32 0, i32 -2147483648}
!28 = !{!29, !29, i64 0}
!29 = !{!"f10", !8, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"f132", !8, i64 0}
!32 = !{!33, !33, i64 0}
!33 = !{!"f9", !8, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"f131", !8, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"f8", !8, i64 0}
!38 = !{!39, !39, i64 0}
!39 = !{!"f130", !8, i64 0}
!40 = !{!41, !41, i64 0}
!41 = !{!"input", !8, i64 0}
!42 = !{!43, !43, i64 0}
!43 = !{!"f2", !8, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"f4", !8, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"f5", !8, i64 0}
!48 = !{!49, !49, i64 0}
!49 = !{!"f72", !8, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"f6", !8, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"f73", !8, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"f7", !8, i64 0}
!56 = !{!57, !57, i64 0}
!57 = !{!"f74", !8, i64 0}
!58 = distinct !{!58, !10, !11}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !10, !11}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !10, !11}
!63 = distinct !{!63, !10}
!64 = !{!65, !65, i64 0}
!65 = !{!"f129", !8, i64 0}
!66 = !{!67, !67, i64 0}
!67 = !{!"f128", !8, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"f127", !8, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"f126", !8, i64 0}
!72 = !{!73, !73, i64 0}
!73 = !{!"f125", !8, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"local_laplacian", !8, i64 0}
