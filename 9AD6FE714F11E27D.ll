; ModuleID = '/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_loop_invariant.cpp'
source_filename = "/usr/local/google/home/aeubanks/repos/test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_loop_invariant.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.one_result = type { double, ptr }

$_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc = comdat any

$_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc = comdat any

$_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc = comdat any

$_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc = comdat any

$_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc = comdat any

$_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc = comdat any

$_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc = comdat any

$_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc = comdat any

$_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc = comdat any

@results = dso_local local_unnamed_addr global ptr null, align 8
@current_test = dso_local local_unnamed_addr global i32 0, align 4
@allocated_results = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"\0Atest %*s description   absolute\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"number %*s time\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", align 1
@start_time = dso_local local_unnamed_addr global i64 0, align 8
@end_time = dso_local local_unnamed_addr global i64 0, align 8
@iterations = dso_local local_unnamed_addr global i32 1000, align 4
@init_value = dso_local local_unnamed_addr global double 1.000000e+00, align 8
@dataDouble = dso_local global [8000 x double] zeroinitializer, align 16
@dataFloat = dso_local global [8000 x float] zeroinitializer, align 16
@data64unsigned = dso_local global [8000 x i64] zeroinitializer, align 16
@data64 = dso_local global [8000 x i64] zeroinitializer, align 16
@data32unsigned = dso_local global [8000 x i32] zeroinitializer, align 16
@data32 = dso_local global [8000 x i32] zeroinitializer, align 16
@data16unsigned = dso_local global [8000 x i16] zeroinitializer, align 16
@data16 = dso_local global [8000 x i16] zeroinitializer, align 16
@data8unsigned = dso_local global [8000 x i8] zeroinitializer, align 16
@data8 = dso_local global [8000 x i8] zeroinitializer, align 16
@.str.11 = private unnamed_addr constant [20 x i8] c"int8_t variable add\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"int8_t variable add hoisted\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"int8_t multiple variable adds\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"int8_t variable subtract\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"int8_t multiple variable subtracts\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"int8_t variable multiply\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"int8_t multiple variable multiplies\00", align 1
@.str.18 = private unnamed_addr constant [37 x i8] c"int8_t multiple variable multiplies2\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"int8_t variable divide\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"int8_t multiple variable divides\00", align 1
@.str.21 = private unnamed_addr constant [34 x i8] c"int8_t multiple variable divides2\00", align 1
@.str.22 = private unnamed_addr constant [31 x i8] c"int8_t multiple variable mixed\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"int8_t variable and\00", align 1
@.str.24 = private unnamed_addr constant [29 x i8] c"int8_t multiple variable and\00", align 1
@.str.25 = private unnamed_addr constant [19 x i8] c"int8_t variable or\00", align 1
@.str.26 = private unnamed_addr constant [28 x i8] c"int8_t multiple variable or\00", align 1
@.str.27 = private unnamed_addr constant [20 x i8] c"int8_t variable xor\00", align 1
@.str.28 = private unnamed_addr constant [29 x i8] c"int8_t multiple variable xor\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c"uint8_t variable add\00", align 1
@.str.30 = private unnamed_addr constant [29 x i8] c"uint8_t variable add hoisted\00", align 1
@.str.31 = private unnamed_addr constant [31 x i8] c"uint8_t multiple variable adds\00", align 1
@.str.32 = private unnamed_addr constant [26 x i8] c"uint8_t variable subtract\00", align 1
@.str.33 = private unnamed_addr constant [36 x i8] c"uint8_t multiple variable subtracts\00", align 1
@.str.34 = private unnamed_addr constant [26 x i8] c"uint8_t variable multiply\00", align 1
@.str.35 = private unnamed_addr constant [37 x i8] c"uint8_t multiple variable multiplies\00", align 1
@.str.36 = private unnamed_addr constant [38 x i8] c"uint8_t multiple variable multiplies2\00", align 1
@.str.37 = private unnamed_addr constant [24 x i8] c"uint8_t variable divide\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"uint8_t multiple variable divides\00", align 1
@.str.39 = private unnamed_addr constant [35 x i8] c"uint8_t multiple variable divides2\00", align 1
@.str.40 = private unnamed_addr constant [32 x i8] c"uint8_t multiple variable mixed\00", align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"uint8_t variable and\00", align 1
@.str.42 = private unnamed_addr constant [30 x i8] c"uint8_t multiple variable and\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c"uint8_t variable or\00", align 1
@.str.44 = private unnamed_addr constant [29 x i8] c"uint8_t multiple variable or\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"uint8_t variable xor\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"uint8_t multiple variable xor\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"int16_t variable add\00", align 1
@.str.48 = private unnamed_addr constant [29 x i8] c"int16_t variable add hoisted\00", align 1
@.str.49 = private unnamed_addr constant [31 x i8] c"int16_t multiple variable adds\00", align 1
@.str.50 = private unnamed_addr constant [26 x i8] c"int16_t variable subtract\00", align 1
@.str.51 = private unnamed_addr constant [36 x i8] c"int16_t multiple variable subtracts\00", align 1
@.str.52 = private unnamed_addr constant [26 x i8] c"int16_t variable multiply\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"int16_t multiple variable multiplies\00", align 1
@.str.54 = private unnamed_addr constant [38 x i8] c"int16_t multiple variable multiplies2\00", align 1
@.str.55 = private unnamed_addr constant [24 x i8] c"int16_t variable divide\00", align 1
@.str.56 = private unnamed_addr constant [34 x i8] c"int16_t multiple variable divides\00", align 1
@.str.57 = private unnamed_addr constant [35 x i8] c"int16_t multiple variable divides2\00", align 1
@.str.58 = private unnamed_addr constant [32 x i8] c"int16_t multiple variable mixed\00", align 1
@.str.59 = private unnamed_addr constant [21 x i8] c"int16_t variable and\00", align 1
@.str.60 = private unnamed_addr constant [30 x i8] c"int16_t multiple variable and\00", align 1
@.str.61 = private unnamed_addr constant [20 x i8] c"int16_t variable or\00", align 1
@.str.62 = private unnamed_addr constant [29 x i8] c"int16_t multiple variable or\00", align 1
@.str.63 = private unnamed_addr constant [21 x i8] c"int16_t variable xor\00", align 1
@.str.64 = private unnamed_addr constant [30 x i8] c"int16_t multiple variable xor\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"uint16_t variable add\00", align 1
@.str.66 = private unnamed_addr constant [30 x i8] c"uint16_t variable add hoisted\00", align 1
@.str.67 = private unnamed_addr constant [32 x i8] c"uint16_t multiple variable adds\00", align 1
@.str.68 = private unnamed_addr constant [27 x i8] c"uint16_t variable subtract\00", align 1
@.str.69 = private unnamed_addr constant [37 x i8] c"uint16_t multiple variable subtracts\00", align 1
@.str.70 = private unnamed_addr constant [27 x i8] c"uint16_t variable multiply\00", align 1
@.str.71 = private unnamed_addr constant [38 x i8] c"uint16_t multiple variable multiplies\00", align 1
@.str.72 = private unnamed_addr constant [39 x i8] c"uint16_t multiple variable multiplies2\00", align 1
@.str.73 = private unnamed_addr constant [25 x i8] c"uint16_t variable divide\00", align 1
@.str.74 = private unnamed_addr constant [35 x i8] c"uint16_t multiple variable divides\00", align 1
@.str.75 = private unnamed_addr constant [36 x i8] c"uint16_t multiple variable divides2\00", align 1
@.str.76 = private unnamed_addr constant [33 x i8] c"uint16_t multiple variable mixed\00", align 1
@.str.77 = private unnamed_addr constant [22 x i8] c"uint16_t variable and\00", align 1
@.str.78 = private unnamed_addr constant [31 x i8] c"uint16_t multiple variable and\00", align 1
@.str.79 = private unnamed_addr constant [21 x i8] c"uint16_t variable or\00", align 1
@.str.80 = private unnamed_addr constant [30 x i8] c"uint16_t multiple variable or\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"uint16_t variable xor\00", align 1
@.str.82 = private unnamed_addr constant [31 x i8] c"uint16_t multiple variable xor\00", align 1
@.str.83 = private unnamed_addr constant [21 x i8] c"int32_t variable add\00", align 1
@.str.84 = private unnamed_addr constant [29 x i8] c"int32_t variable add hoisted\00", align 1
@.str.85 = private unnamed_addr constant [31 x i8] c"int32_t multiple variable adds\00", align 1
@.str.86 = private unnamed_addr constant [26 x i8] c"int32_t variable subtract\00", align 1
@.str.87 = private unnamed_addr constant [36 x i8] c"int32_t multiple variable subtracts\00", align 1
@.str.88 = private unnamed_addr constant [26 x i8] c"int32_t variable multiply\00", align 1
@.str.89 = private unnamed_addr constant [37 x i8] c"int32_t multiple variable multiplies\00", align 1
@.str.90 = private unnamed_addr constant [38 x i8] c"int32_t multiple variable multiplies2\00", align 1
@.str.91 = private unnamed_addr constant [24 x i8] c"int32_t variable divide\00", align 1
@.str.92 = private unnamed_addr constant [34 x i8] c"int32_t multiple variable divides\00", align 1
@.str.93 = private unnamed_addr constant [35 x i8] c"int32_t multiple variable divides2\00", align 1
@.str.94 = private unnamed_addr constant [32 x i8] c"int32_t multiple variable mixed\00", align 1
@.str.95 = private unnamed_addr constant [21 x i8] c"int32_t variable and\00", align 1
@.str.96 = private unnamed_addr constant [30 x i8] c"int32_t multiple variable and\00", align 1
@.str.97 = private unnamed_addr constant [20 x i8] c"int32_t variable or\00", align 1
@.str.98 = private unnamed_addr constant [29 x i8] c"int32_t multiple variable or\00", align 1
@.str.99 = private unnamed_addr constant [21 x i8] c"int32_t variable xor\00", align 1
@.str.100 = private unnamed_addr constant [30 x i8] c"int32_t multiple variable xor\00", align 1
@.str.101 = private unnamed_addr constant [22 x i8] c"uint32_t variable add\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"uint32_t variable add hoisted\00", align 1
@.str.103 = private unnamed_addr constant [32 x i8] c"uint32_t multiple variable adds\00", align 1
@.str.104 = private unnamed_addr constant [27 x i8] c"uint32_t variable subtract\00", align 1
@.str.105 = private unnamed_addr constant [37 x i8] c"uint32_t multiple variable subtracts\00", align 1
@.str.106 = private unnamed_addr constant [27 x i8] c"uint32_t variable multiply\00", align 1
@.str.107 = private unnamed_addr constant [38 x i8] c"uint32_t multiple variable multiplies\00", align 1
@.str.108 = private unnamed_addr constant [39 x i8] c"uint32_t multiple variable multiplies2\00", align 1
@.str.109 = private unnamed_addr constant [25 x i8] c"uint32_t variable divide\00", align 1
@.str.110 = private unnamed_addr constant [35 x i8] c"uint32_t multiple variable divides\00", align 1
@.str.111 = private unnamed_addr constant [36 x i8] c"uint32_t multiple variable divides2\00", align 1
@.str.112 = private unnamed_addr constant [33 x i8] c"uint32_t multiple variable mixed\00", align 1
@.str.113 = private unnamed_addr constant [22 x i8] c"uint32_t variable and\00", align 1
@.str.114 = private unnamed_addr constant [31 x i8] c"uint32_t multiple variable and\00", align 1
@.str.115 = private unnamed_addr constant [21 x i8] c"uint32_t variable or\00", align 1
@.str.116 = private unnamed_addr constant [30 x i8] c"uint32_t multiple variable or\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"uint32_t variable xor\00", align 1
@.str.118 = private unnamed_addr constant [31 x i8] c"uint32_t multiple variable xor\00", align 1
@.str.119 = private unnamed_addr constant [21 x i8] c"int64_t variable add\00", align 1
@.str.120 = private unnamed_addr constant [29 x i8] c"int64_t variable add hoisted\00", align 1
@.str.121 = private unnamed_addr constant [31 x i8] c"int64_t multiple variable adds\00", align 1
@.str.122 = private unnamed_addr constant [26 x i8] c"int64_t variable subtract\00", align 1
@.str.123 = private unnamed_addr constant [36 x i8] c"int64_t multiple variable subtracts\00", align 1
@.str.124 = private unnamed_addr constant [26 x i8] c"int64_t variable multiply\00", align 1
@.str.125 = private unnamed_addr constant [37 x i8] c"int64_t multiple variable multiplies\00", align 1
@.str.126 = private unnamed_addr constant [38 x i8] c"int64_t multiple variable multiplies2\00", align 1
@.str.127 = private unnamed_addr constant [24 x i8] c"int64_t variable divide\00", align 1
@.str.128 = private unnamed_addr constant [34 x i8] c"int64_t multiple variable divides\00", align 1
@.str.129 = private unnamed_addr constant [35 x i8] c"int64_t multiple variable divides2\00", align 1
@.str.130 = private unnamed_addr constant [32 x i8] c"int64_t multiple variable mixed\00", align 1
@.str.131 = private unnamed_addr constant [21 x i8] c"int64_t variable and\00", align 1
@.str.132 = private unnamed_addr constant [30 x i8] c"int64_t multiple variable and\00", align 1
@.str.133 = private unnamed_addr constant [20 x i8] c"int64_t variable or\00", align 1
@.str.134 = private unnamed_addr constant [29 x i8] c"int64_t multiple variable or\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"int64_t variable xor\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"int64_t multiple variable xor\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"uint64_t variable add\00", align 1
@.str.138 = private unnamed_addr constant [30 x i8] c"uint64_t variable add hoisted\00", align 1
@.str.139 = private unnamed_addr constant [32 x i8] c"uint64_t multiple variable adds\00", align 1
@.str.140 = private unnamed_addr constant [27 x i8] c"uint64_t variable subtract\00", align 1
@.str.141 = private unnamed_addr constant [37 x i8] c"uint64_t multiple variable subtracts\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"uint64_t variable multiply\00", align 1
@.str.143 = private unnamed_addr constant [38 x i8] c"uint64_t multiple variable multiplies\00", align 1
@.str.144 = private unnamed_addr constant [39 x i8] c"uint64_t multiple variable multiplies2\00", align 1
@.str.145 = private unnamed_addr constant [25 x i8] c"uint64_t variable divide\00", align 1
@.str.146 = private unnamed_addr constant [35 x i8] c"uint64_t multiple variable divides\00", align 1
@.str.147 = private unnamed_addr constant [36 x i8] c"uint64_t multiple variable divides2\00", align 1
@.str.148 = private unnamed_addr constant [33 x i8] c"uint64_t multiple variable mixed\00", align 1
@.str.149 = private unnamed_addr constant [22 x i8] c"uint64_t variable and\00", align 1
@.str.150 = private unnamed_addr constant [31 x i8] c"uint64_t multiple variable and\00", align 1
@.str.151 = private unnamed_addr constant [21 x i8] c"uint64_t variable or\00", align 1
@.str.152 = private unnamed_addr constant [30 x i8] c"uint64_t multiple variable or\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"uint64_t variable xor\00", align 1
@.str.154 = private unnamed_addr constant [31 x i8] c"uint64_t multiple variable xor\00", align 1
@.str.155 = private unnamed_addr constant [19 x i8] c"float variable add\00", align 1
@.str.156 = private unnamed_addr constant [27 x i8] c"float variable add hoisted\00", align 1
@.str.157 = private unnamed_addr constant [29 x i8] c"float multiple variable adds\00", align 1
@.str.158 = private unnamed_addr constant [24 x i8] c"float variable subtract\00", align 1
@.str.159 = private unnamed_addr constant [34 x i8] c"float multiple variable subtracts\00", align 1
@.str.160 = private unnamed_addr constant [24 x i8] c"float variable multiply\00", align 1
@.str.161 = private unnamed_addr constant [35 x i8] c"float multiple variable multiplies\00", align 1
@.str.162 = private unnamed_addr constant [36 x i8] c"float multiple variable multiplies2\00", align 1
@.str.163 = private unnamed_addr constant [22 x i8] c"float variable divide\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"float multiple variable divides\00", align 1
@.str.165 = private unnamed_addr constant [33 x i8] c"float multiple variable divides2\00", align 1
@.str.166 = private unnamed_addr constant [30 x i8] c"float multiple variable mixed\00", align 1
@.str.167 = private unnamed_addr constant [20 x i8] c"double variable add\00", align 1
@.str.168 = private unnamed_addr constant [28 x i8] c"double variable add hoisted\00", align 1
@.str.169 = private unnamed_addr constant [30 x i8] c"double multiple variable adds\00", align 1
@.str.170 = private unnamed_addr constant [25 x i8] c"double variable subtract\00", align 1
@.str.171 = private unnamed_addr constant [35 x i8] c"double multiple variable subtracts\00", align 1
@.str.172 = private unnamed_addr constant [25 x i8] c"double variable multiply\00", align 1
@.str.173 = private unnamed_addr constant [36 x i8] c"double multiple variable multiplies\00", align 1
@.str.174 = private unnamed_addr constant [37 x i8] c"double multiple variable multiplies2\00", align 1
@.str.175 = private unnamed_addr constant [23 x i8] c"double variable divide\00", align 1
@.str.176 = private unnamed_addr constant [33 x i8] c"double multiple variable divides\00", align 1
@.str.177 = private unnamed_addr constant [34 x i8] c"double multiple variable divides2\00", align 1
@.str.178 = private unnamed_addr constant [31 x i8] c"double multiple variable mixed\00", align 1
@.str.179 = private unnamed_addr constant [16 x i8] c"test %i failed\0A\00", align 1

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z13record_resultdPKc(double noundef %time, ptr noundef %label) local_unnamed_addr #0 {
entry:
  %0 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %entry.if.then_crit_edge, label %lor.lhs.false

entry.if.then_crit_edge:                          ; preds = %entry
  %.pre = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, ptr @current_test, align 4, !tbaa !9
  %2 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not = icmp slt i32 %1, %2
  br i1 %cmp1.not, label %if.end5, label %if.then

if.then:                                          ; preds = %entry.if.then_crit_edge, %lor.lhs.false
  %3 = phi i32 [ %.pre, %entry.if.then_crit_edge ], [ %2, %lor.lhs.false ]
  %add = add nsw i32 %3, 10
  store i32 %add, ptr @allocated_results, align 4, !tbaa !9
  %conv = sext i32 %add to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call ptr @realloc(ptr noundef %0, i64 noundef %mul) #14
  store ptr %call, ptr @results, align 8, !tbaa !5
  %cmp2 = icmp eq ptr %call, null
  br i1 %cmp2, label %if.then3, label %if.then.if.end5_crit_edge

if.then.if.end5_crit_edge:                        ; preds = %if.then
  %.pre10 = load i32, ptr @current_test, align 4, !tbaa !9
  br label %if.end5

if.then3:                                         ; preds = %if.then
  %4 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %4)
  tail call void @exit(i32 noundef -1) #15
  unreachable

if.end5:                                          ; preds = %if.then.if.end5_crit_edge, %lor.lhs.false
  %5 = phi i32 [ %.pre10, %if.then.if.end5_crit_edge ], [ %1, %lor.lhs.false ]
  %6 = phi ptr [ %call, %if.then.if.end5_crit_edge ], [ %0, %lor.lhs.false ]
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.one_result, ptr %6, i64 %idxprom
  store double %time, ptr %arrayidx, align 8, !tbaa !11
  %label9 = getelementptr inbounds %struct.one_result, ptr %6, i64 %idxprom, i32 1
  store ptr %label, ptr %label9, align 8, !tbaa !14
  %inc = add nsw i32 %5, 1
  store i32 %inc, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z9summarizePKciiii(ptr noundef %name, i32 noundef %size, i32 noundef %iterations, i32 noundef %show_gmeans, i32 noundef %show_penalty) local_unnamed_addr #4 {
entry:
  %conv = sitofp i32 %size to double
  %conv1 = sitofp i32 %iterations to double
  %mul = fmul double %conv, %conv1
  %div = fdiv double %mul, 1.000000e+06
  %0 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp91 = icmp sgt i32 %0, 0
  br i1 %cmp91, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %longest_label_len.092 = phi i32 [ 12, %for.body.lr.ph ], [ %spec.select, %for.body ]
  %label = getelementptr inbounds %struct.one_result, ptr %1, i64 %indvars.iv, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !14
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #16
  %conv2 = trunc i64 %call to i32
  %spec.select = tail call i32 @llvm.smax.i32(i32 %longest_label_len.092, i32 %conv2)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !15

for.end:                                          ; preds = %for.body, %entry
  %longest_label_len.0.lcssa = phi i32 [ 12, %entry ], [ %spec.select, %for.body ]
  %sub = add nsw i32 %longest_label_len.0.lcssa, -12
  %call4 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %sub, ptr noundef nonnull @.str.2)
  %call5 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef %longest_label_len.0.lcssa, ptr noundef nonnull @.str.2)
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp794 = icmp sgt i32 %3, 0
  br i1 %cmp794, label %for.body8, label %for.end43

for.cond35.preheader:                             ; preds = %for.body8
  %cmp3697 = icmp sgt i32 %12, 0
  br i1 %cmp3697, label %for.body37.lr.ph, label %for.end43

for.body37.lr.ph:                                 ; preds = %for.cond35.preheader
  %4 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count115 = zext i32 %12 to i64
  %xtraiter = and i64 %wide.trip.count115, 3
  %5 = icmp ult i32 %12, 4
  br i1 %5, label %for.end43.loopexit.unr-lcssa, label %for.body37.lr.ph.new

for.body37.lr.ph.new:                             ; preds = %for.body37.lr.ph
  %unroll_iter = and i64 %wide.trip.count115, 4294967292
  br label %for.body37

for.body8:                                        ; preds = %for.end, %for.body8
  %indvars.iv109 = phi i64 [ %indvars.iv.next110, %for.body8 ], [ 0, %for.end ]
  %6 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx11 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv109
  %label12 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv109, i32 1
  %7 = load ptr, ptr %label12, align 8, !tbaa !14
  %call13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #16
  %8 = trunc i64 %call13 to i32
  %conv15 = sub i32 %longest_label_len.0.lcssa, %8
  %9 = load double, ptr %arrayidx11, align 8, !tbaa !11
  %div24 = fdiv double %div, %9
  %10 = load double, ptr %6, align 8, !tbaa !11
  %div30 = fdiv double %9, %10
  %11 = trunc i64 %indvars.iv109 to i32
  %call31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef %11, i32 noundef %conv15, ptr noundef nonnull @.str.5, ptr noundef %7, double noundef %9, double noundef %div24, double noundef %div30)
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %13 = sext i32 %12 to i64
  %cmp7 = icmp slt i64 %indvars.iv.next110, %13
  br i1 %cmp7, label %for.body8, label %for.cond35.preheader, !llvm.loop !17

for.body37:                                       ; preds = %for.body37, %for.body37.lr.ph.new
  %indvars.iv112 = phi i64 [ 0, %for.body37.lr.ph.new ], [ %indvars.iv.next113.3, %for.body37 ]
  %total_absolute_times.098 = phi double [ 0.000000e+00, %for.body37.lr.ph.new ], [ %add.3, %for.body37 ]
  %niter = phi i64 [ 0, %for.body37.lr.ph.new ], [ %niter.next.3, %for.body37 ]
  %arrayidx39 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv112
  %14 = load double, ptr %arrayidx39, align 8, !tbaa !11
  %add = fadd double %total_absolute_times.098, %14
  %indvars.iv.next113 = or i64 %indvars.iv112, 1
  %arrayidx39.1 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113
  %15 = load double, ptr %arrayidx39.1, align 8, !tbaa !11
  %add.1 = fadd double %add, %15
  %indvars.iv.next113.1 = or i64 %indvars.iv112, 2
  %arrayidx39.2 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113.1
  %16 = load double, ptr %arrayidx39.2, align 8, !tbaa !11
  %add.2 = fadd double %add.1, %16
  %indvars.iv.next113.2 = or i64 %indvars.iv112, 3
  %arrayidx39.3 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next113.2
  %17 = load double, ptr %arrayidx39.3, align 8, !tbaa !11
  %add.3 = fadd double %add.2, %17
  %indvars.iv.next113.3 = add nuw nsw i64 %indvars.iv112, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.end43.loopexit.unr-lcssa, label %for.body37, !llvm.loop !18

for.end43.loopexit.unr-lcssa:                     ; preds = %for.body37, %for.body37.lr.ph
  %add.lcssa.ph = phi double [ undef, %for.body37.lr.ph ], [ %add.3, %for.body37 ]
  %indvars.iv112.unr = phi i64 [ 0, %for.body37.lr.ph ], [ %indvars.iv.next113.3, %for.body37 ]
  %total_absolute_times.098.unr = phi double [ 0.000000e+00, %for.body37.lr.ph ], [ %add.3, %for.body37 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end43, label %for.body37.epil

for.body37.epil:                                  ; preds = %for.end43.loopexit.unr-lcssa, %for.body37.epil
  %indvars.iv112.epil = phi i64 [ %indvars.iv.next113.epil, %for.body37.epil ], [ %indvars.iv112.unr, %for.end43.loopexit.unr-lcssa ]
  %total_absolute_times.098.epil = phi double [ %add.epil, %for.body37.epil ], [ %total_absolute_times.098.unr, %for.end43.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body37.epil ], [ 0, %for.end43.loopexit.unr-lcssa ]
  %arrayidx39.epil = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv112.epil
  %18 = load double, ptr %arrayidx39.epil, align 8, !tbaa !11
  %add.epil = fadd double %total_absolute_times.098.epil, %18
  %indvars.iv.next113.epil = add nuw nsw i64 %indvars.iv112.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.end43, label %for.body37.epil, !llvm.loop !19

for.end43:                                        ; preds = %for.end43.loopexit.unr-lcssa, %for.body37.epil, %for.end, %for.cond35.preheader
  %total_absolute_times.0.lcssa = phi double [ 0.000000e+00, %for.cond35.preheader ], [ 0.000000e+00, %for.end ], [ %add.lcssa.ph, %for.end43.loopexit.unr-lcssa ], [ %add.epil, %for.body37.epil ]
  %call44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef %name, double noundef %total_absolute_times.0.lcssa)
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp45 = icmp sgt i32 %19, 1
  %tobool = icmp ne i32 %show_penalty, 0
  %or.cond = and i1 %tobool, %cmp45
  br i1 %or.cond, label %for.body49, label %if.end66

for.body49:                                       ; preds = %for.end43, %for.body49
  %indvars.iv117 = phi i64 [ %indvars.iv.next118, %for.body49 ], [ 1, %for.end43 ]
  %gmean_ratio.0102 = phi double [ %add57, %for.body49 ], [ 0.000000e+00, %for.end43 ]
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx51 = getelementptr inbounds %struct.one_result, ptr %20, i64 %indvars.iv117
  %21 = load double, ptr %arrayidx51, align 8, !tbaa !11
  %22 = load double, ptr %20, align 8, !tbaa !11
  %div55 = fdiv double %21, %22
  %call56 = tail call double @log(double noundef %div55) #17
  %add57 = fadd double %gmean_ratio.0102, %call56
  %indvars.iv.next118 = add nuw nsw i64 %indvars.iv117, 1
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = sext i32 %23 to i64
  %cmp48 = icmp slt i64 %indvars.iv.next118, %24
  br i1 %cmp48, label %for.body49, label %for.end60, !llvm.loop !21

for.end60:                                        ; preds = %for.body49
  %sub61 = add nsw i32 %23, -1
  %conv62 = sitofp i32 %sub61 to double
  %div63 = fdiv double %add57, %conv62
  %call64 = tail call double @exp(double noundef %div63) #17
  %call65 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef %name, double noundef %call64)
  br label %if.end66

if.end66:                                         ; preds = %for.end60, %for.end43
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z17summarize_simplefP8_IO_FILEPKc(ptr nocapture noundef %output, ptr noundef %name) local_unnamed_addr #4 {
entry:
  %0 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp52 = icmp sgt i32 %0, 0
  br i1 %cmp52, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %longest_label_len.053 = phi i32 [ 12, %for.body.lr.ph ], [ %spec.select, %for.body ]
  %label = getelementptr inbounds %struct.one_result, ptr %1, i64 %indvars.iv, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !14
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #16
  %conv = trunc i64 %call to i32
  %spec.select = tail call i32 @llvm.smax.i32(i32 %longest_label_len.053, i32 %conv)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !22

for.end:                                          ; preds = %for.body, %entry
  %longest_label_len.0.lcssa = phi i32 [ 12, %entry ], [ %spec.select, %for.body ]
  %sub = add nsw i32 %longest_label_len.0.lcssa, -12
  %call2 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.8, i32 noundef %sub, ptr noundef nonnull @.str.2)
  %call3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.9, i32 noundef %longest_label_len.0.lcssa, ptr noundef nonnull @.str.2)
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %cmp555 = icmp sgt i32 %3, 0
  br i1 %cmp555, label %for.body6, label %for.end31

for.cond23.preheader:                             ; preds = %for.body6
  %cmp2458 = icmp sgt i32 %11, 0
  br i1 %cmp2458, label %for.body25.lr.ph, label %for.end31

for.body25.lr.ph:                                 ; preds = %for.cond23.preheader
  %4 = load ptr, ptr @results, align 8, !tbaa !5
  %wide.trip.count70 = zext i32 %11 to i64
  %xtraiter = and i64 %wide.trip.count70, 3
  %5 = icmp ult i32 %11, 4
  br i1 %5, label %for.end31.loopexit.unr-lcssa, label %for.body25.lr.ph.new

for.body25.lr.ph.new:                             ; preds = %for.body25.lr.ph
  %unroll_iter = and i64 %wide.trip.count70, 4294967292
  br label %for.body25

for.body6:                                        ; preds = %for.end, %for.body6
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %for.body6 ], [ 0, %for.end ]
  %6 = load ptr, ptr @results, align 8, !tbaa !5
  %arrayidx9 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv64
  %label10 = getelementptr inbounds %struct.one_result, ptr %6, i64 %indvars.iv64, i32 1
  %7 = load ptr, ptr %label10, align 8, !tbaa !14
  %call11 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #16
  %8 = trunc i64 %call11 to i32
  %conv13 = sub i32 %longest_label_len.0.lcssa, %8
  %9 = load double, ptr %arrayidx9, align 8, !tbaa !11
  %10 = trunc i64 %indvars.iv64 to i32
  %call19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.10, i32 noundef %10, i32 noundef %conv13, ptr noundef nonnull @.str.5, ptr noundef %7, double noundef %9)
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %12 = sext i32 %11 to i64
  %cmp5 = icmp slt i64 %indvars.iv.next65, %12
  br i1 %cmp5, label %for.body6, label %for.cond23.preheader, !llvm.loop !23

for.body25:                                       ; preds = %for.body25, %for.body25.lr.ph.new
  %indvars.iv67 = phi i64 [ 0, %for.body25.lr.ph.new ], [ %indvars.iv.next68.3, %for.body25 ]
  %total_absolute_times.059 = phi double [ 0.000000e+00, %for.body25.lr.ph.new ], [ %add.3, %for.body25 ]
  %niter = phi i64 [ 0, %for.body25.lr.ph.new ], [ %niter.next.3, %for.body25 ]
  %arrayidx27 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv67
  %13 = load double, ptr %arrayidx27, align 8, !tbaa !11
  %add = fadd double %total_absolute_times.059, %13
  %indvars.iv.next68 = or i64 %indvars.iv67, 1
  %arrayidx27.1 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68
  %14 = load double, ptr %arrayidx27.1, align 8, !tbaa !11
  %add.1 = fadd double %add, %14
  %indvars.iv.next68.1 = or i64 %indvars.iv67, 2
  %arrayidx27.2 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68.1
  %15 = load double, ptr %arrayidx27.2, align 8, !tbaa !11
  %add.2 = fadd double %add.1, %15
  %indvars.iv.next68.2 = or i64 %indvars.iv67, 3
  %arrayidx27.3 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv.next68.2
  %16 = load double, ptr %arrayidx27.3, align 8, !tbaa !11
  %add.3 = fadd double %add.2, %16
  %indvars.iv.next68.3 = add nuw nsw i64 %indvars.iv67, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.end31.loopexit.unr-lcssa, label %for.body25, !llvm.loop !24

for.end31.loopexit.unr-lcssa:                     ; preds = %for.body25, %for.body25.lr.ph
  %add.lcssa.ph = phi double [ undef, %for.body25.lr.ph ], [ %add.3, %for.body25 ]
  %indvars.iv67.unr = phi i64 [ 0, %for.body25.lr.ph ], [ %indvars.iv.next68.3, %for.body25 ]
  %total_absolute_times.059.unr = phi double [ 0.000000e+00, %for.body25.lr.ph ], [ %add.3, %for.body25 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end31, label %for.body25.epil

for.body25.epil:                                  ; preds = %for.end31.loopexit.unr-lcssa, %for.body25.epil
  %indvars.iv67.epil = phi i64 [ %indvars.iv.next68.epil, %for.body25.epil ], [ %indvars.iv67.unr, %for.end31.loopexit.unr-lcssa ]
  %total_absolute_times.059.epil = phi double [ %add.epil, %for.body25.epil ], [ %total_absolute_times.059.unr, %for.end31.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body25.epil ], [ 0, %for.end31.loopexit.unr-lcssa ]
  %arrayidx27.epil = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv67.epil
  %17 = load double, ptr %arrayidx27.epil, align 8, !tbaa !11
  %add.epil = fadd double %total_absolute_times.059.epil, %17
  %indvars.iv.next68.epil = add nuw nsw i64 %indvars.iv67.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.end31, label %for.body25.epil, !llvm.loop !25

for.end31:                                        ; preds = %for.end31.loopexit.unr-lcssa, %for.body25.epil, %for.end, %for.cond23.preheader
  %total_absolute_times.0.lcssa = phi double [ 0.000000e+00, %for.cond23.preheader ], [ 0.000000e+00, %for.end ], [ %add.lcssa.ph, %for.end31.loopexit.unr-lcssa ], [ %add.epil, %for.body25.epil ]
  %call32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %output, ptr noundef nonnull @.str.6, ptr noundef %name, double noundef %total_absolute_times.0.lcssa)
  store i32 0, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z11start_timerv() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @clock() #17
  store i64 %call, ptr @start_time, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #7

; Function Attrs: mustprogress nounwind uwtable
define dso_local noundef double @_Z5timerv() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @clock() #17
  store i64 %call, ptr @end_time, align 8, !tbaa !26
  %0 = load i64, ptr @start_time, align 8, !tbaa !26
  %sub = sub nsw i64 %call, %0
  %conv = sitofp i64 %sub to double
  %div = fdiv double %conv, 1.000000e+06
  ret double %div
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main(i32 noundef %argc, ptr nocapture noundef readonly %argv) local_unnamed_addr #8 {
entry:
  %cmp = icmp sgt i32 %argc, 1
  br i1 %cmp, label %if.end, label %if.end10

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds ptr, ptr %argv, i64 1
  %0 = load ptr, ptr %arrayidx, align 8, !tbaa !5
  %call.i = tail call i64 @strtol(ptr nocapture noundef nonnull %0, ptr noundef null, i32 noundef 10) #17
  %conv.i = trunc i64 %call.i to i32
  store i32 %conv.i, ptr @iterations, align 4, !tbaa !9
  %cmp1.not = icmp eq i32 %argc, 2
  br i1 %cmp1.not, label %if.end10, label %if.end5

if.end5:                                          ; preds = %if.end
  %arrayidx3 = getelementptr inbounds ptr, ptr %argv, i64 2
  %1 = load ptr, ptr %arrayidx3, align 8, !tbaa !5
  %call.i572 = tail call double @strtod(ptr nocapture noundef nonnull %1, ptr noundef null) #17
  store double %call.i572, ptr @init_value, align 8, !tbaa !28
  %cmp6 = icmp ugt i32 %argc, 3
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end5
  %arrayidx8 = getelementptr inbounds ptr, ptr %argv, i64 3
  %2 = load ptr, ptr %arrayidx8, align 8, !tbaa !5
  %call.i573 = tail call double @strtod(ptr nocapture noundef nonnull %2, ptr noundef null) #17
  br label %if.end10

if.end10:                                         ; preds = %entry, %if.end, %if.then7, %if.end5
  %temp.0 = phi double [ %call.i573, %if.then7 ], [ 1.000000e+00, %if.end5 ], [ 1.000000e+00, %if.end ], [ 1.000000e+00, %entry ]
  %3 = load double, ptr @init_value, align 8, !tbaa !28
  %conv = fptosi double %3 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8, i8 %conv, i64 8000, i1 false), !tbaa !29
  %conv11 = fptosi double %temp.0 to i8
  %mul = shl i8 %conv11, 1
  %add = add i8 %conv11, 2
  %div.lhs.trunc = sext i8 %mul to i16
  %div.rhs.trunc = sext i8 %add to i16
  %div604 = sdiv i16 %div.lhs.trunc, %div.rhs.trunc
  %4 = trunc i16 %div604 to i8
  %conv20 = add i8 %4, %conv11
  tail call void @_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.11)
  tail call void @_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.12)
  tail call void @_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.13)
  tail call void @_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.14)
  tail call void @_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.15)
  tail call void @_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.16)
  tail call void @_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.17)
  tail call void @_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.18)
  tail call void @_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.19)
  tail call void @_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.20)
  tail call void @_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.21)
  tail call void @_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.22)
  tail call void @_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.23)
  tail call void @_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.24)
  tail call void @_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.25)
  tail call void @_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.26)
  tail call void @_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, ptr noundef nonnull @.str.27)
  tail call void @_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8, i32 noundef 8000, i8 noundef signext %conv11, i8 noundef signext %mul, i8 noundef signext %add, i8 noundef signext %conv20, ptr noundef nonnull @.str.28)
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv21 = fptoui double %5 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(8000) @data8unsigned, i8 %conv21, i64 8000, i1 false), !tbaa !29
  %conv22 = fptoui double %temp.0 to i8
  %mul24 = shl i8 %conv22, 1
  %add27 = add i8 %conv22, 2
  %6 = udiv i8 %mul24, %add27
  %add33 = add i8 %6, %conv22
  tail call void @_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.29)
  tail call void @_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.30)
  tail call void @_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.31)
  tail call void @_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.32)
  tail call void @_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.33)
  tail call void @_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.34)
  tail call void @_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.35)
  tail call void @_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.36)
  tail call void @_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.37)
  tail call void @_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.38)
  tail call void @_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.39)
  tail call void @_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.40)
  tail call void @_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.41)
  tail call void @_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.42)
  tail call void @_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.43)
  tail call void @_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.44)
  tail call void @_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, ptr noundef nonnull @.str.45)
  tail call void @_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, i8 noundef zeroext %conv22, i8 noundef zeroext %mul24, i8 noundef zeroext %add27, i8 noundef zeroext %add33, ptr noundef nonnull @.str.46)
  %7 = load double, ptr @init_value, align 8, !tbaa !28
  %conv35 = fptosi double %7 to i16
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %conv35, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert606 = insertelement <8 x i16> poison, i16 %conv35, i64 0
  %broadcast.splat607 = shufflevector <8 x i16> %broadcast.splatinsert606, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %if.end10
  %index = phi i64 [ 0, %if.end10 ], [ %index.next.4, %vector.body ]
  %8 = shl nuw i64 %index, 1
  %next.gep = getelementptr i8, ptr @data16, i64 %8
  store <8 x i16> %broadcast.splat, ptr %next.gep, align 16, !tbaa !30
  %9 = getelementptr i16, ptr %next.gep, i64 8
  store <8 x i16> %broadcast.splat607, ptr %9, align 16, !tbaa !30
  %index.next = shl nuw i64 %index, 1
  %10 = add i64 %index.next, 32
  %next.gep.1 = getelementptr i8, ptr @data16, i64 %10
  store <8 x i16> %broadcast.splat, ptr %next.gep.1, align 16, !tbaa !30
  %11 = getelementptr i16, ptr %next.gep.1, i64 8
  store <8 x i16> %broadcast.splat607, ptr %11, align 16, !tbaa !30
  %index.next.1 = shl nuw i64 %index, 1
  %12 = add i64 %index.next.1, 64
  %next.gep.2 = getelementptr i8, ptr @data16, i64 %12
  store <8 x i16> %broadcast.splat, ptr %next.gep.2, align 16, !tbaa !30
  %13 = getelementptr i16, ptr %next.gep.2, i64 8
  store <8 x i16> %broadcast.splat607, ptr %13, align 16, !tbaa !30
  %index.next.2 = shl nuw i64 %index, 1
  %14 = add i64 %index.next.2, 96
  %next.gep.3 = getelementptr i8, ptr @data16, i64 %14
  store <8 x i16> %broadcast.splat, ptr %next.gep.3, align 16, !tbaa !30
  %15 = getelementptr i16, ptr %next.gep.3, i64 8
  store <8 x i16> %broadcast.splat607, ptr %15, align 16, !tbaa !30
  %index.next.3 = shl nuw i64 %index, 1
  %16 = add i64 %index.next.3, 128
  %next.gep.4 = getelementptr i8, ptr @data16, i64 %16
  store <8 x i16> %broadcast.splat, ptr %next.gep.4, align 16, !tbaa !30
  %17 = getelementptr i16, ptr %next.gep.4, i64 8
  store <8 x i16> %broadcast.splat607, ptr %17, align 16, !tbaa !30
  %index.next.4 = add nuw nsw i64 %index, 80
  %18 = icmp eq i64 %index.next.4, 8000
  br i1 %18, label %_Z4fillIPssEvT_S1_T0_.exit, label %vector.body, !llvm.loop !32

_Z4fillIPssEvT_S1_T0_.exit:                       ; preds = %vector.body
  %conv36 = fptosi double %temp.0 to i16
  %mul38 = shl i16 %conv36, 1
  %add41 = add i16 %conv36, 2
  %conv44 = sext i16 %mul38 to i32
  %conv45 = sext i16 %add41 to i32
  %div46 = sdiv i32 %conv44, %conv45
  %19 = trunc i32 %div46 to i16
  %conv48 = add i16 %19, %conv36
  tail call void @_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.47)
  tail call void @_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.48)
  tail call void @_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.49)
  tail call void @_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.50)
  tail call void @_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.51)
  tail call void @_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.52)
  tail call void @_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.53)
  tail call void @_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.54)
  tail call void @_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.55)
  tail call void @_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.56)
  tail call void @_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.57)
  tail call void @_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.58)
  tail call void @_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.59)
  tail call void @_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.60)
  tail call void @_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.61)
  tail call void @_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.62)
  tail call void @_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, ptr noundef nonnull @.str.63)
  tail call void @_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16, i32 noundef 8000, i16 noundef signext %conv36, i16 noundef signext %mul38, i16 noundef signext %add41, i16 noundef signext %conv48, ptr noundef nonnull @.str.64)
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv49 = fptoui double %20 to i16
  %broadcast.splatinsert617 = insertelement <8 x i16> poison, i16 %conv49, i64 0
  %broadcast.splat618 = shufflevector <8 x i16> %broadcast.splatinsert617, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert619 = insertelement <8 x i16> poison, i16 %conv49, i64 0
  %broadcast.splat620 = shufflevector <8 x i16> %broadcast.splatinsert619, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %vector.body613

vector.body613:                                   ; preds = %vector.body613, %_Z4fillIPssEvT_S1_T0_.exit
  %index614 = phi i64 [ 0, %_Z4fillIPssEvT_S1_T0_.exit ], [ %index.next621.4, %vector.body613 ]
  %21 = shl nuw i64 %index614, 1
  %next.gep615 = getelementptr i8, ptr @data16unsigned, i64 %21
  store <8 x i16> %broadcast.splat618, ptr %next.gep615, align 16, !tbaa !30
  %22 = getelementptr i16, ptr %next.gep615, i64 8
  store <8 x i16> %broadcast.splat620, ptr %22, align 16, !tbaa !30
  %index.next621 = shl nuw i64 %index614, 1
  %23 = add i64 %index.next621, 32
  %next.gep615.1 = getelementptr i8, ptr @data16unsigned, i64 %23
  store <8 x i16> %broadcast.splat618, ptr %next.gep615.1, align 16, !tbaa !30
  %24 = getelementptr i16, ptr %next.gep615.1, i64 8
  store <8 x i16> %broadcast.splat620, ptr %24, align 16, !tbaa !30
  %index.next621.1 = shl nuw i64 %index614, 1
  %25 = add i64 %index.next621.1, 64
  %next.gep615.2 = getelementptr i8, ptr @data16unsigned, i64 %25
  store <8 x i16> %broadcast.splat618, ptr %next.gep615.2, align 16, !tbaa !30
  %26 = getelementptr i16, ptr %next.gep615.2, i64 8
  store <8 x i16> %broadcast.splat620, ptr %26, align 16, !tbaa !30
  %index.next621.2 = shl nuw i64 %index614, 1
  %27 = add i64 %index.next621.2, 96
  %next.gep615.3 = getelementptr i8, ptr @data16unsigned, i64 %27
  store <8 x i16> %broadcast.splat618, ptr %next.gep615.3, align 16, !tbaa !30
  %28 = getelementptr i16, ptr %next.gep615.3, i64 8
  store <8 x i16> %broadcast.splat620, ptr %28, align 16, !tbaa !30
  %index.next621.3 = shl nuw i64 %index614, 1
  %29 = add i64 %index.next621.3, 128
  %next.gep615.4 = getelementptr i8, ptr @data16unsigned, i64 %29
  store <8 x i16> %broadcast.splat618, ptr %next.gep615.4, align 16, !tbaa !30
  %30 = getelementptr i16, ptr %next.gep615.4, i64 8
  store <8 x i16> %broadcast.splat620, ptr %30, align 16, !tbaa !30
  %index.next621.4 = add nuw nsw i64 %index614, 80
  %31 = icmp eq i64 %index.next621.4, 8000
  br i1 %31, label %_Z4fillIPttEvT_S1_T0_.exit, label %vector.body613, !llvm.loop !35

_Z4fillIPttEvT_S1_T0_.exit:                       ; preds = %vector.body613
  %conv50 = fptoui double %temp.0 to i16
  %mul52 = shl i16 %conv50, 1
  %add55 = add i16 %conv50, 2
  %32 = udiv i16 %mul52, %add55
  %add61 = add i16 %32, %conv50
  tail call void @_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.65)
  tail call void @_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.66)
  tail call void @_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.67)
  tail call void @_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.68)
  tail call void @_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.69)
  tail call void @_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.70)
  tail call void @_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.71)
  tail call void @_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.72)
  tail call void @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.73)
  tail call void @_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.74)
  tail call void @_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.75)
  tail call void @_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.76)
  tail call void @_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.77)
  tail call void @_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.78)
  tail call void @_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.79)
  tail call void @_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.80)
  tail call void @_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, ptr noundef nonnull @.str.81)
  tail call void @_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, i16 noundef zeroext %conv50, i16 noundef zeroext %mul52, i16 noundef zeroext %add55, i16 noundef zeroext %add61, ptr noundef nonnull @.str.82)
  %33 = load double, ptr @init_value, align 8, !tbaa !28
  %conv63 = fptosi double %33 to i32
  %broadcast.splatinsert631 = insertelement <4 x i32> poison, i32 %conv63, i64 0
  %broadcast.splat632 = shufflevector <4 x i32> %broadcast.splatinsert631, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert633 = insertelement <4 x i32> poison, i32 %conv63, i64 0
  %broadcast.splat634 = shufflevector <4 x i32> %broadcast.splatinsert633, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %vector.body627

vector.body627:                                   ; preds = %vector.body627, %_Z4fillIPttEvT_S1_T0_.exit
  %index628 = phi i64 [ 0, %_Z4fillIPttEvT_S1_T0_.exit ], [ %index.next635.4, %vector.body627 ]
  %34 = shl i64 %index628, 2
  %next.gep629 = getelementptr i8, ptr @data32, i64 %34
  store <4 x i32> %broadcast.splat632, ptr %next.gep629, align 16, !tbaa !9
  %35 = getelementptr i32, ptr %next.gep629, i64 4
  store <4 x i32> %broadcast.splat634, ptr %35, align 16, !tbaa !9
  %index.next635 = shl i64 %index628, 2
  %36 = add i64 %index.next635, 32
  %next.gep629.1 = getelementptr i8, ptr @data32, i64 %36
  store <4 x i32> %broadcast.splat632, ptr %next.gep629.1, align 16, !tbaa !9
  %37 = getelementptr i32, ptr %next.gep629.1, i64 4
  store <4 x i32> %broadcast.splat634, ptr %37, align 16, !tbaa !9
  %index.next635.1 = shl i64 %index628, 2
  %38 = add i64 %index.next635.1, 64
  %next.gep629.2 = getelementptr i8, ptr @data32, i64 %38
  store <4 x i32> %broadcast.splat632, ptr %next.gep629.2, align 16, !tbaa !9
  %39 = getelementptr i32, ptr %next.gep629.2, i64 4
  store <4 x i32> %broadcast.splat634, ptr %39, align 16, !tbaa !9
  %index.next635.2 = shl i64 %index628, 2
  %40 = add i64 %index.next635.2, 96
  %next.gep629.3 = getelementptr i8, ptr @data32, i64 %40
  store <4 x i32> %broadcast.splat632, ptr %next.gep629.3, align 16, !tbaa !9
  %41 = getelementptr i32, ptr %next.gep629.3, i64 4
  store <4 x i32> %broadcast.splat634, ptr %41, align 16, !tbaa !9
  %index.next635.3 = shl i64 %index628, 2
  %42 = add i64 %index.next635.3, 128
  %next.gep629.4 = getelementptr i8, ptr @data32, i64 %42
  store <4 x i32> %broadcast.splat632, ptr %next.gep629.4, align 16, !tbaa !9
  %43 = getelementptr i32, ptr %next.gep629.4, i64 4
  store <4 x i32> %broadcast.splat634, ptr %43, align 16, !tbaa !9
  %index.next635.4 = add nuw nsw i64 %index628, 40
  %44 = icmp eq i64 %index.next635.4, 8000
  br i1 %44, label %_Z4fillIPiiEvT_S1_T0_.exit, label %vector.body627, !llvm.loop !36

_Z4fillIPiiEvT_S1_T0_.exit:                       ; preds = %vector.body627
  %conv64 = fptosi double %temp.0 to i32
  %mul65 = shl nsw i32 %conv64, 1
  %add66 = add nsw i32 %conv64, 2
  %div67 = sdiv i32 %mul65, %add66
  %add68 = add nsw i32 %div67, %conv64
  tail call void @_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.83)
  tail call void @_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.84)
  tail call void @_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.85)
  tail call void @_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.86)
  tail call void @_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.87)
  tail call void @_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.88)
  tail call void @_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.89)
  tail call void @_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.90)
  tail call void @_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.91)
  tail call void @_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.92)
  tail call void @_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.93)
  tail call void @_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.94)
  tail call void @_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.95)
  tail call void @_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.96)
  tail call void @_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.97)
  tail call void @_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.98)
  tail call void @_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, ptr noundef nonnull @.str.99)
  tail call void @_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32, i32 noundef 8000, i32 noundef %conv64, i32 noundef %mul65, i32 noundef %add66, i32 noundef %add68, ptr noundef nonnull @.str.100)
  %45 = load double, ptr @init_value, align 8, !tbaa !28
  %conv69 = fptoui double %45 to i32
  %broadcast.splatinsert645 = insertelement <4 x i32> poison, i32 %conv69, i64 0
  %broadcast.splat646 = shufflevector <4 x i32> %broadcast.splatinsert645, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert647 = insertelement <4 x i32> poison, i32 %conv69, i64 0
  %broadcast.splat648 = shufflevector <4 x i32> %broadcast.splatinsert647, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %vector.body641

vector.body641:                                   ; preds = %vector.body641, %_Z4fillIPiiEvT_S1_T0_.exit
  %index642 = phi i64 [ 0, %_Z4fillIPiiEvT_S1_T0_.exit ], [ %index.next649.4, %vector.body641 ]
  %46 = shl i64 %index642, 2
  %next.gep643 = getelementptr i8, ptr @data32unsigned, i64 %46
  store <4 x i32> %broadcast.splat646, ptr %next.gep643, align 16, !tbaa !9
  %47 = getelementptr i32, ptr %next.gep643, i64 4
  store <4 x i32> %broadcast.splat648, ptr %47, align 16, !tbaa !9
  %index.next649 = shl i64 %index642, 2
  %48 = add i64 %index.next649, 32
  %next.gep643.1 = getelementptr i8, ptr @data32unsigned, i64 %48
  store <4 x i32> %broadcast.splat646, ptr %next.gep643.1, align 16, !tbaa !9
  %49 = getelementptr i32, ptr %next.gep643.1, i64 4
  store <4 x i32> %broadcast.splat648, ptr %49, align 16, !tbaa !9
  %index.next649.1 = shl i64 %index642, 2
  %50 = add i64 %index.next649.1, 64
  %next.gep643.2 = getelementptr i8, ptr @data32unsigned, i64 %50
  store <4 x i32> %broadcast.splat646, ptr %next.gep643.2, align 16, !tbaa !9
  %51 = getelementptr i32, ptr %next.gep643.2, i64 4
  store <4 x i32> %broadcast.splat648, ptr %51, align 16, !tbaa !9
  %index.next649.2 = shl i64 %index642, 2
  %52 = add i64 %index.next649.2, 96
  %next.gep643.3 = getelementptr i8, ptr @data32unsigned, i64 %52
  store <4 x i32> %broadcast.splat646, ptr %next.gep643.3, align 16, !tbaa !9
  %53 = getelementptr i32, ptr %next.gep643.3, i64 4
  store <4 x i32> %broadcast.splat648, ptr %53, align 16, !tbaa !9
  %index.next649.3 = shl i64 %index642, 2
  %54 = add i64 %index.next649.3, 128
  %next.gep643.4 = getelementptr i8, ptr @data32unsigned, i64 %54
  store <4 x i32> %broadcast.splat646, ptr %next.gep643.4, align 16, !tbaa !9
  %55 = getelementptr i32, ptr %next.gep643.4, i64 4
  store <4 x i32> %broadcast.splat648, ptr %55, align 16, !tbaa !9
  %index.next649.4 = add nuw nsw i64 %index642, 40
  %56 = icmp eq i64 %index.next649.4, 8000
  br i1 %56, label %_Z4fillIPjjEvT_S1_T0_.exit, label %vector.body641, !llvm.loop !37

_Z4fillIPjjEvT_S1_T0_.exit:                       ; preds = %vector.body641
  %conv70 = fptoui double %temp.0 to i32
  %mul71 = shl i32 %conv70, 1
  %add72 = add i32 %conv70, 2
  %div73 = udiv i32 %mul71, %add72
  %add74 = add i32 %div73, %conv70
  tail call void @_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.101)
  tail call void @_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.102)
  tail call void @_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.103)
  tail call void @_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.104)
  tail call void @_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.105)
  tail call void @_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.106)
  tail call void @_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.107)
  tail call void @_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.108)
  tail call void @_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.109)
  tail call void @_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.110)
  tail call void @_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.111)
  tail call void @_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.112)
  tail call void @_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.113)
  tail call void @_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.114)
  tail call void @_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.115)
  tail call void @_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.116)
  tail call void @_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, ptr noundef nonnull @.str.117)
  tail call void @_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, i32 noundef %conv70, i32 noundef %mul71, i32 noundef %add72, i32 noundef %add74, ptr noundef nonnull @.str.118)
  %57 = load double, ptr @init_value, align 8, !tbaa !28
  %conv75 = fptosi double %57 to i64
  %broadcast.splatinsert659 = insertelement <2 x i64> poison, i64 %conv75, i64 0
  %broadcast.splat660 = shufflevector <2 x i64> %broadcast.splatinsert659, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert661 = insertelement <2 x i64> poison, i64 %conv75, i64 0
  %broadcast.splat662 = shufflevector <2 x i64> %broadcast.splatinsert661, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %vector.body655

vector.body655:                                   ; preds = %vector.body655, %_Z4fillIPjjEvT_S1_T0_.exit
  %index656 = phi i64 [ 0, %_Z4fillIPjjEvT_S1_T0_.exit ], [ %index.next663.4, %vector.body655 ]
  %58 = shl i64 %index656, 3
  %next.gep657 = getelementptr i8, ptr @data64, i64 %58
  store <2 x i64> %broadcast.splat660, ptr %next.gep657, align 16, !tbaa !26
  %59 = getelementptr i64, ptr %next.gep657, i64 2
  store <2 x i64> %broadcast.splat662, ptr %59, align 16, !tbaa !26
  %index.next663 = shl i64 %index656, 3
  %60 = add i64 %index.next663, 32
  %next.gep657.1 = getelementptr i8, ptr @data64, i64 %60
  store <2 x i64> %broadcast.splat660, ptr %next.gep657.1, align 16, !tbaa !26
  %61 = getelementptr i64, ptr %next.gep657.1, i64 2
  store <2 x i64> %broadcast.splat662, ptr %61, align 16, !tbaa !26
  %index.next663.1 = shl i64 %index656, 3
  %62 = add i64 %index.next663.1, 64
  %next.gep657.2 = getelementptr i8, ptr @data64, i64 %62
  store <2 x i64> %broadcast.splat660, ptr %next.gep657.2, align 16, !tbaa !26
  %63 = getelementptr i64, ptr %next.gep657.2, i64 2
  store <2 x i64> %broadcast.splat662, ptr %63, align 16, !tbaa !26
  %index.next663.2 = shl i64 %index656, 3
  %64 = add i64 %index.next663.2, 96
  %next.gep657.3 = getelementptr i8, ptr @data64, i64 %64
  store <2 x i64> %broadcast.splat660, ptr %next.gep657.3, align 16, !tbaa !26
  %65 = getelementptr i64, ptr %next.gep657.3, i64 2
  store <2 x i64> %broadcast.splat662, ptr %65, align 16, !tbaa !26
  %index.next663.3 = shl i64 %index656, 3
  %66 = add i64 %index.next663.3, 128
  %next.gep657.4 = getelementptr i8, ptr @data64, i64 %66
  store <2 x i64> %broadcast.splat660, ptr %next.gep657.4, align 16, !tbaa !26
  %67 = getelementptr i64, ptr %next.gep657.4, i64 2
  store <2 x i64> %broadcast.splat662, ptr %67, align 16, !tbaa !26
  %index.next663.4 = add nuw nsw i64 %index656, 20
  %68 = icmp eq i64 %index.next663.4, 8000
  br i1 %68, label %_Z4fillIPllEvT_S1_T0_.exit, label %vector.body655, !llvm.loop !38

_Z4fillIPllEvT_S1_T0_.exit:                       ; preds = %vector.body655
  %conv76 = fptosi double %temp.0 to i64
  %mul77 = shl nsw i64 %conv76, 1
  %add78 = add nsw i64 %conv76, 2
  %div79 = sdiv i64 %mul77, %add78
  %add80 = add nsw i64 %div79, %conv76
  tail call void @_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.119)
  tail call void @_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.120)
  tail call void @_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.121)
  tail call void @_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.122)
  tail call void @_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.123)
  tail call void @_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.124)
  tail call void @_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.125)
  tail call void @_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.126)
  tail call void @_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.127)
  tail call void @_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.128)
  tail call void @_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.129)
  tail call void @_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.130)
  tail call void @_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.131)
  tail call void @_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.132)
  tail call void @_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.133)
  tail call void @_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.134)
  tail call void @_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, ptr noundef nonnull @.str.135)
  tail call void @_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64, i32 noundef 8000, i64 noundef %conv76, i64 noundef %mul77, i64 noundef %add78, i64 noundef %add80, ptr noundef nonnull @.str.136)
  %69 = load double, ptr @init_value, align 8, !tbaa !28
  %conv81 = fptoui double %69 to i64
  %broadcast.splatinsert673 = insertelement <2 x i64> poison, i64 %conv81, i64 0
  %broadcast.splat674 = shufflevector <2 x i64> %broadcast.splatinsert673, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert675 = insertelement <2 x i64> poison, i64 %conv81, i64 0
  %broadcast.splat676 = shufflevector <2 x i64> %broadcast.splatinsert675, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %vector.body669

vector.body669:                                   ; preds = %vector.body669, %_Z4fillIPllEvT_S1_T0_.exit
  %index670 = phi i64 [ 0, %_Z4fillIPllEvT_S1_T0_.exit ], [ %index.next677.4, %vector.body669 ]
  %70 = shl i64 %index670, 3
  %next.gep671 = getelementptr i8, ptr @data64unsigned, i64 %70
  store <2 x i64> %broadcast.splat674, ptr %next.gep671, align 16, !tbaa !26
  %71 = getelementptr i64, ptr %next.gep671, i64 2
  store <2 x i64> %broadcast.splat676, ptr %71, align 16, !tbaa !26
  %index.next677 = shl i64 %index670, 3
  %72 = add i64 %index.next677, 32
  %next.gep671.1 = getelementptr i8, ptr @data64unsigned, i64 %72
  store <2 x i64> %broadcast.splat674, ptr %next.gep671.1, align 16, !tbaa !26
  %73 = getelementptr i64, ptr %next.gep671.1, i64 2
  store <2 x i64> %broadcast.splat676, ptr %73, align 16, !tbaa !26
  %index.next677.1 = shl i64 %index670, 3
  %74 = add i64 %index.next677.1, 64
  %next.gep671.2 = getelementptr i8, ptr @data64unsigned, i64 %74
  store <2 x i64> %broadcast.splat674, ptr %next.gep671.2, align 16, !tbaa !26
  %75 = getelementptr i64, ptr %next.gep671.2, i64 2
  store <2 x i64> %broadcast.splat676, ptr %75, align 16, !tbaa !26
  %index.next677.2 = shl i64 %index670, 3
  %76 = add i64 %index.next677.2, 96
  %next.gep671.3 = getelementptr i8, ptr @data64unsigned, i64 %76
  store <2 x i64> %broadcast.splat674, ptr %next.gep671.3, align 16, !tbaa !26
  %77 = getelementptr i64, ptr %next.gep671.3, i64 2
  store <2 x i64> %broadcast.splat676, ptr %77, align 16, !tbaa !26
  %index.next677.3 = shl i64 %index670, 3
  %78 = add i64 %index.next677.3, 128
  %next.gep671.4 = getelementptr i8, ptr @data64unsigned, i64 %78
  store <2 x i64> %broadcast.splat674, ptr %next.gep671.4, align 16, !tbaa !26
  %79 = getelementptr i64, ptr %next.gep671.4, i64 2
  store <2 x i64> %broadcast.splat676, ptr %79, align 16, !tbaa !26
  %index.next677.4 = add nuw nsw i64 %index670, 20
  %80 = icmp eq i64 %index.next677.4, 8000
  br i1 %80, label %_Z4fillIPmmEvT_S1_T0_.exit, label %vector.body669, !llvm.loop !39

_Z4fillIPmmEvT_S1_T0_.exit:                       ; preds = %vector.body669
  %conv82 = fptoui double %temp.0 to i64
  %mul83 = shl i64 %conv82, 1
  %add84 = add i64 %conv82, 2
  %div85 = udiv i64 %mul83, %add84
  %add86 = add i64 %div85, %conv82
  tail call void @_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.137)
  tail call void @_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.138)
  tail call void @_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.139)
  tail call void @_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.140)
  tail call void @_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.141)
  tail call void @_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.142)
  tail call void @_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.143)
  tail call void @_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.144)
  tail call void @_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.145)
  tail call void @_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.146)
  tail call void @_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.147)
  tail call void @_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.148)
  tail call void @_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.149)
  tail call void @_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.150)
  tail call void @_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.151)
  tail call void @_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.152)
  tail call void @_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, ptr noundef nonnull @.str.153)
  tail call void @_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, i64 noundef %conv82, i64 noundef %mul83, i64 noundef %add84, i64 noundef %add86, ptr noundef nonnull @.str.154)
  %81 = load double, ptr @init_value, align 8, !tbaa !28
  %conv87 = fptrunc double %81 to float
  %broadcast.splatinsert687 = insertelement <4 x float> poison, float %conv87, i64 0
  %broadcast.splat688 = shufflevector <4 x float> %broadcast.splatinsert687, <4 x float> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert689 = insertelement <4 x float> poison, float %conv87, i64 0
  %broadcast.splat690 = shufflevector <4 x float> %broadcast.splatinsert689, <4 x float> poison, <4 x i32> zeroinitializer
  br label %vector.body683

vector.body683:                                   ; preds = %vector.body683, %_Z4fillIPmmEvT_S1_T0_.exit
  %index684 = phi i64 [ 0, %_Z4fillIPmmEvT_S1_T0_.exit ], [ %index.next691.4, %vector.body683 ]
  %82 = shl i64 %index684, 2
  %next.gep685 = getelementptr i8, ptr @dataFloat, i64 %82
  store <4 x float> %broadcast.splat688, ptr %next.gep685, align 16, !tbaa !40
  %83 = getelementptr float, ptr %next.gep685, i64 4
  store <4 x float> %broadcast.splat690, ptr %83, align 16, !tbaa !40
  %index.next691 = shl i64 %index684, 2
  %84 = add i64 %index.next691, 32
  %next.gep685.1 = getelementptr i8, ptr @dataFloat, i64 %84
  store <4 x float> %broadcast.splat688, ptr %next.gep685.1, align 16, !tbaa !40
  %85 = getelementptr float, ptr %next.gep685.1, i64 4
  store <4 x float> %broadcast.splat690, ptr %85, align 16, !tbaa !40
  %index.next691.1 = shl i64 %index684, 2
  %86 = add i64 %index.next691.1, 64
  %next.gep685.2 = getelementptr i8, ptr @dataFloat, i64 %86
  store <4 x float> %broadcast.splat688, ptr %next.gep685.2, align 16, !tbaa !40
  %87 = getelementptr float, ptr %next.gep685.2, i64 4
  store <4 x float> %broadcast.splat690, ptr %87, align 16, !tbaa !40
  %index.next691.2 = shl i64 %index684, 2
  %88 = add i64 %index.next691.2, 96
  %next.gep685.3 = getelementptr i8, ptr @dataFloat, i64 %88
  store <4 x float> %broadcast.splat688, ptr %next.gep685.3, align 16, !tbaa !40
  %89 = getelementptr float, ptr %next.gep685.3, i64 4
  store <4 x float> %broadcast.splat690, ptr %89, align 16, !tbaa !40
  %index.next691.3 = shl i64 %index684, 2
  %90 = add i64 %index.next691.3, 128
  %next.gep685.4 = getelementptr i8, ptr @dataFloat, i64 %90
  store <4 x float> %broadcast.splat688, ptr %next.gep685.4, align 16, !tbaa !40
  %91 = getelementptr float, ptr %next.gep685.4, i64 4
  store <4 x float> %broadcast.splat690, ptr %91, align 16, !tbaa !40
  %index.next691.4 = add nuw nsw i64 %index684, 40
  %92 = icmp eq i64 %index.next691.4, 8000
  br i1 %92, label %_Z4fillIPffEvT_S1_T0_.exit, label %vector.body683, !llvm.loop !42

_Z4fillIPffEvT_S1_T0_.exit:                       ; preds = %vector.body683
  %conv88 = fptrunc double %temp.0 to float
  %mul89 = fmul float %conv88, 2.000000e+00
  %add90 = fadd float %conv88, 2.000000e+00
  %div91 = fdiv float %mul89, %add90
  %add92 = fadd float %div91, %conv88
  tail call void @_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, ptr noundef nonnull @.str.155)
  tail call void @_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, ptr noundef nonnull @.str.156)
  tail call void @_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.157)
  tail call void @_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, ptr noundef nonnull @.str.158)
  tail call void @_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.159)
  tail call void @_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, ptr noundef nonnull @.str.160)
  tail call void @_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.161)
  tail call void @_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.162)
  tail call void @_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, ptr noundef nonnull @.str.163)
  tail call void @_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.164)
  tail call void @_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.165)
  tail call void @_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, float noundef %conv88, float noundef %mul89, float noundef %add90, float noundef %add92, ptr noundef nonnull @.str.166)
  %93 = load double, ptr @init_value, align 8, !tbaa !28
  %broadcast.splatinsert701 = insertelement <2 x double> poison, double %93, i64 0
  %broadcast.splat702 = shufflevector <2 x double> %broadcast.splatinsert701, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert703 = insertelement <2 x double> poison, double %93, i64 0
  %broadcast.splat704 = shufflevector <2 x double> %broadcast.splatinsert703, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body697

vector.body697:                                   ; preds = %vector.body697, %_Z4fillIPffEvT_S1_T0_.exit
  %index698 = phi i64 [ 0, %_Z4fillIPffEvT_S1_T0_.exit ], [ %index.next705.4, %vector.body697 ]
  %94 = shl i64 %index698, 3
  %next.gep699 = getelementptr i8, ptr @dataDouble, i64 %94
  store <2 x double> %broadcast.splat702, ptr %next.gep699, align 16, !tbaa !28
  %95 = getelementptr double, ptr %next.gep699, i64 2
  store <2 x double> %broadcast.splat704, ptr %95, align 16, !tbaa !28
  %index.next705 = shl i64 %index698, 3
  %96 = add i64 %index.next705, 32
  %next.gep699.1 = getelementptr i8, ptr @dataDouble, i64 %96
  store <2 x double> %broadcast.splat702, ptr %next.gep699.1, align 16, !tbaa !28
  %97 = getelementptr double, ptr %next.gep699.1, i64 2
  store <2 x double> %broadcast.splat704, ptr %97, align 16, !tbaa !28
  %index.next705.1 = shl i64 %index698, 3
  %98 = add i64 %index.next705.1, 64
  %next.gep699.2 = getelementptr i8, ptr @dataDouble, i64 %98
  store <2 x double> %broadcast.splat702, ptr %next.gep699.2, align 16, !tbaa !28
  %99 = getelementptr double, ptr %next.gep699.2, i64 2
  store <2 x double> %broadcast.splat704, ptr %99, align 16, !tbaa !28
  %index.next705.2 = shl i64 %index698, 3
  %100 = add i64 %index.next705.2, 96
  %next.gep699.3 = getelementptr i8, ptr @dataDouble, i64 %100
  store <2 x double> %broadcast.splat702, ptr %next.gep699.3, align 16, !tbaa !28
  %101 = getelementptr double, ptr %next.gep699.3, i64 2
  store <2 x double> %broadcast.splat704, ptr %101, align 16, !tbaa !28
  %index.next705.3 = shl i64 %index698, 3
  %102 = add i64 %index.next705.3, 128
  %next.gep699.4 = getelementptr i8, ptr @dataDouble, i64 %102
  store <2 x double> %broadcast.splat702, ptr %next.gep699.4, align 16, !tbaa !28
  %103 = getelementptr double, ptr %next.gep699.4, i64 2
  store <2 x double> %broadcast.splat704, ptr %103, align 16, !tbaa !28
  %index.next705.4 = add nuw nsw i64 %index698, 20
  %104 = icmp eq i64 %index.next705.4, 8000
  br i1 %104, label %_Z4fillIPddEvT_S1_T0_.exit, label %vector.body697, !llvm.loop !43

_Z4fillIPddEvT_S1_T0_.exit:                       ; preds = %vector.body697
  %mul93 = fmul double %temp.0, 2.000000e+00
  %add94 = fadd double %temp.0, 2.000000e+00
  %div95 = fdiv double %mul93, %add94
  %add96 = fadd double %temp.0, %div95
  tail call void @_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, ptr noundef nonnull @.str.167)
  tail call void @_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, ptr noundef nonnull @.str.168)
  tail call void @_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.169)
  tail call void @_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, ptr noundef nonnull @.str.170)
  tail call void @_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.171)
  tail call void @_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, ptr noundef nonnull @.str.172)
  tail call void @_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.173)
  tail call void @_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.174)
  tail call void @_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, ptr noundef nonnull @.str.175)
  tail call void @_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.176)
  tail call void @_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.177)
  tail call void @_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, double noundef %temp.0, double noundef %mul93, double noundef %add94, double noundef %add96, ptr noundef nonnull @.str.178)
  ret i32 0
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, %broadcast.splat
  %5 = add <16 x i8> %vec.phi35, %broadcast.splat38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load36
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !44

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi43, %broadcast.splat46
  %13 = add <8 x i8> %12, %wide.load44
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !45

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !46

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.024.us, %v1
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !47

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add.i.i.us = add i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add.i.i = add i8 %conv.i, %v1
  %mul.i.mask = and i8 %add.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !46

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i17 = add nsw i32 %29, 10
  store i32 %add.i17, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i17 to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp32 = icmp sgt i32 %0, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.end12

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp229 = icmp sgt i32 %count, 0
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, %v1
  br i1 %cmp229, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre35 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check40 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec44 = and i64 %wide.trip.count, 4294967288
  %cmp.n45 = icmp eq i64 %n.vec44, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us
  %3 = phi i32 [ %16, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.033.us = phi i32 [ %inc11.us, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check40, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi41 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %4 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %4, align 1, !tbaa !29
  %5 = getelementptr inbounds i8, ptr %4, i64 16
  %wide.load42 = load <16 x i8>, ptr %5, align 1, !tbaa !29
  %6 = add <16 x i8> %wide.load, %vec.phi
  %7 = add <16 x i8> %wide.load42, %vec.phi41
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !48

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index46 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next49, %vec.epilog.vector.body ]
  %vec.phi47 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %12, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index46
  %wide.load48 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %wide.load48, %vec.phi47
  %index.next49 = add nuw i64 %index46, 8
  %13 = icmp eq i64 %index.next49, %n.vec44
  br i1 %13, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !49

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %14 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %12)
  br i1 %cmp.n45, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec44, %vec.epilog.middle.block ]
  %result.030.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %14, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %15)
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = phi i32 [ %.pre37, %if.then.i.us ], [ %3, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc11.us = add nuw nsw i32 %i.033.us, 1
  %cmp.us = icmp slt i32 %inc11.us, %16
  br i1 %cmp.us, label %iter.check, label %for.end12, !llvm.loop !50

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.030.us = phi i8 [ %add.us, %for.body3.us ], [ %result.030.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %17 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.us = add i8 %17, %result.030.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !51

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %14, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %conv9.us = add i8 %add.us.lcssa, %2
  %18 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %18 to i8
  %add.i.i.us = add i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %conv9.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit
  %19 = phi i32 [ %22, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %20 = phi double [ %23, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ %.pre35, %for.cond1.preheader.preheader ]
  %i.033 = phi i32 [ %inc11, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %20 to i8
  %add.i.i = add i8 %conv.i, %v1
  %mul.i = shl i8 %add.i.i, 6
  %cmp.i.i = icmp eq i8 %mul.i, %2
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %21)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %22 = phi i32 [ %19, %for.cond1.preheader ], [ %.pre36, %if.then.i ]
  %23 = phi double [ %20, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc11 = add nuw nsw i32 %i.033, 1
  %cmp = icmp slt i32 %inc11, %22
  br i1 %cmp, label %for.cond1.preheader, label %for.end12, !llvm.loop !50

for.end12:                                        ; preds = %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa19custom_add_variableIaEEvT_S2_.exit.us, %entry
  %call.i22 = tail call i64 @clock() #17
  store i64 %call.i22, ptr @end_time, align 8, !tbaa !26
  %24 = load i64, ptr @start_time, align 8, !tbaa !26
  %25 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %25, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end12
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i27

lor.lhs.false.i:                                  ; preds = %for.end12
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %26, %27
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i27

if.then.i27:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %28 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %add.i = add nsw i32 %28, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i24 = sext i32 %add.i to i64
  %mul.i25 = shl nsw i64 %conv.i24, 4
  %call.i26 = tail call ptr @realloc(ptr noundef %25, i64 noundef %mul.i25) #14
  store ptr %call.i26, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i26, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i27
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i27
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i28 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %29)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %30 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %31 = phi ptr [ %call.i26, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i22, %24
  %conv.i23 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i23, 1.000000e+06
  %idxprom.i = sext i32 %30 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %30, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %add.i = add i8 %v2, %v1
  %add3.i = add i8 %add.i, %v3
  %add5.i = add i8 %add3.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check37 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <16 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat41 = shufflevector <16 x i8> %broadcast.splatinsert40, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec43 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert48 = insertelement <8 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat49 = shufflevector <8 x i8> %broadcast.splatinsert48, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n44 = icmp eq i64 %n.vec43, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check37, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi38 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load39 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %broadcast.splat, %vec.phi
  %5 = add <16 x i8> %broadcast.splat41, %vec.phi38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load39
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !52

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index45 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next50, %vec.epilog.vector.body ]
  %vec.phi46 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index45
  %wide.load47 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %broadcast.splat49, %vec.phi46
  %13 = add <8 x i8> %12, %wide.load47
  %index.next50 = add nuw i64 %index45, 8
  %14 = icmp eq i64 %index.next50, %n.vec43
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !53

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n44, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec43, %vec.epilog.middle.block ]
  %result.027.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !54

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i8 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add7.i.us = add i8 %add5.i, %result.027.us
  %add.us = add i8 %add7.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !55

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add7.i.i.us = add i8 %add5.i, %conv.i.us
  %mul.i.us = shl i8 %add7.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add7.i.i = add i8 %add5.i, %conv.i
  %mul.i.mask = and i8 %add7.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !54

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa28custom_add_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %29, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %25
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = sub <16 x i8> %vec.phi, %broadcast.splat
  %5 = sub <16 x i8> %vec.phi35, %broadcast.splat38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load36
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !56

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = sub <8 x i8> %vec.phi43, %broadcast.splat46
  %13 = add <8 x i8> %12, %wide.load44
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !57

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !58

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub.i.us = sub i8 %result.024.us, %v1
  %add.us = add i8 %sub.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !59

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %sub.i.i.us = sub i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %sub.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %sub.i.i = sub i8 %conv.i, %v1
  %mul.i.mask = and i8 %sub.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !58

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa19custom_sub_variableIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i16 = sub nsw i64 %call.i15, %25
  %conv.i17 = sitofp i64 %sub.i16 to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %1 = add i8 %v2, %v1
  %2 = add i8 %1, %v3
  %3 = add i8 %2, %v4
  br i1 %cmp230, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check41 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat45 = shufflevector <16 x i8> %broadcast.splatinsert44, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec47 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert52 = insertelement <8 x i8> poison, i8 %3, i64 0
  %broadcast.splat53 = shufflevector <8 x i8> %broadcast.splatinsert52, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n48 = icmp eq i64 %n.vec47, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %20, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.034.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check41, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %9, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi42 = phi <16 x i8> [ %10, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %5 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %5, align 1, !tbaa !29
  %6 = getelementptr inbounds i8, ptr %5, i64 16
  %wide.load43 = load <16 x i8>, ptr %6, align 1, !tbaa !29
  %7 = sub <16 x i8> %vec.phi, %broadcast.splat
  %8 = sub <16 x i8> %vec.phi42, %broadcast.splat45
  %9 = add <16 x i8> %7, %wide.load
  %10 = add <16 x i8> %8, %wide.load43
  %index.next = add nuw i64 %index, 32
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !60

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %10, %9
  %12 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %12, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %13 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index49 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next54, %vec.epilog.vector.body ]
  %vec.phi50 = phi <8 x i8> [ %13, %vec.epilog.ph ], [ %16, %vec.epilog.vector.body ]
  %14 = getelementptr inbounds i8, ptr %first, i64 %index49
  %wide.load51 = load <8 x i8>, ptr %14, align 1, !tbaa !29
  %15 = sub <8 x i8> %vec.phi50, %broadcast.splat53
  %16 = add <8 x i8> %15, %wide.load51
  %index.next54 = add nuw i64 %index49, 8
  %17 = icmp eq i64 %index.next54, %n.vec47
  br i1 %17, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !61

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %18 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %16)
  br i1 %cmp.n48, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec47, %vec.epilog.middle.block ]
  %result.031.us.ph = phi i8 [ 0, %iter.check ], [ %12, %vec.epilog.iter.check ], [ %18, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %20 = phi i32 [ %.pre38, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %20
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !62

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i8 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %21 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub7.i.us = sub i8 %result.031.us, %3
  %add.us = add i8 %sub7.i.us, %21
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !63

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %12, %middle.block ], [ %18, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %22 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %22 to i8
  %sub7.i.i.us = sub i8 %conv.i.us, %3
  %mul.i.us = shl i8 %sub7.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
  %23 = phi i32 [ %26, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %24 = phi double [ %27, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %24 to i8
  %sub7.i.i = sub i8 %conv.i, %3
  %mul.i.mask = and i8 %sub7.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %23, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %27 = phi double [ %24, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !62

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa28custom_sub_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %28
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i.i = shl i8 %v1, 6
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, %broadcast.splat
  %5 = mul <16 x i8> %wide.load36, %broadcast.splat38
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !64

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load44, %broadcast.splat46
  %13 = add <8 x i8> %12, %vec.phi43
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !65

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !66

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul.i15.us = mul i8 %18, %v1
  %add.us = add i8 %mul.i15.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !67

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %mul.i.us = mul i8 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %mul.i = mul i8 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i8 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !66

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa24custom_multiply_variableIaEEvT_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %25
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i18 = mul i8 %v3, %v2
  %mul3.i = mul i8 %mul.i18, %v1
  %mul5.i = mul i8 %mul3.i, %v4
  %mul3.i.i = shl i8 %mul.i18, 6
  %mul5.i.i = mul i8 %mul3.i.i, %v1
  %mul7.i.i = mul i8 %mul5.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check37 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <16 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat41 = shufflevector <16 x i8> %broadcast.splatinsert40, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec43 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert48 = insertelement <8 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat49 = shufflevector <8 x i8> %broadcast.splatinsert48, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n44 = icmp eq i64 %n.vec43, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check37, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi38 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load39 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %broadcast.splat, %wide.load
  %5 = mul <16 x i8> %broadcast.splat41, %wide.load39
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi38
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !68

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index45 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next50, %vec.epilog.vector.body ]
  %vec.phi46 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index45
  %wide.load47 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %broadcast.splat49, %wide.load47
  %13 = add <8 x i8> %12, %vec.phi46
  %index.next50 = add nuw i64 %index45, 8
  %14 = icmp eq i64 %index.next50, %n.vec43
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !69

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n44, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec43, %vec.epilog.middle.block ]
  %result.027.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !70

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i8 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul7.i.us = mul i8 %mul5.i, %18
  %add.us = add i8 %mul7.i.us, %result.027.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !71

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %mul.i.us = mul i8 %mul7.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %mul.i = mul i8 %mul7.i.i, %conv.i
  %cmp.i.i = icmp eq i8 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !70

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa33custom_multiply_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %25
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %mul.i18 = mul i8 %v2, %v1
  %mul4.i = mul i8 %mul.i18, %v3
  %mul6.i = mul i8 %mul4.i, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check38 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <16 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat42 = shufflevector <16 x i8> %broadcast.splatinsert41, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec44 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert49 = insertelement <8 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat50 = shufflevector <8 x i8> %broadcast.splatinsert49, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n45 = icmp eq i64 %n.vec44, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check38, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi39 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load40 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, %broadcast.splat
  %5 = add <16 x i8> %vec.phi39, %broadcast.splat42
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load40
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !72

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index46 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next51, %vec.epilog.vector.body ]
  %vec.phi47 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index46
  %wide.load48 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi47, %broadcast.splat50
  %13 = add <8 x i8> %12, %wide.load48
  %index.next51 = add nuw i64 %index46, 8
  %14 = icmp eq i64 %index.next51, %n.vec44
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !73

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n45, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec44, %vec.epilog.middle.block ]
  %result.028.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !74

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i8 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.028.us, %mul6.i
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !75

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %add.i.i.us = add i8 %mul6.i, %conv.i.us
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %add.i.i = add i8 %mul6.i, %conv.i
  %mul.i.mask = and i8 %add.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !74

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa34custom_multiply_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %29, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %25
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %div.rhs.trunc.i = sext i8 %v1 to i16
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !76

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi i8 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %5 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %div.lhs.trunc.i.us = sext i8 %5 to i16
  %div3.i.us = sdiv i16 %div.lhs.trunc.i.us, %div.rhs.trunc.i
  %conv2.i.us = trunc i16 %div3.i.us to i8
  %add.us = add i8 %result.023.us, %conv2.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i8, ptr %first, i64 %indvars.iv.next
  %6 = load i8, ptr %arrayidx.us.1, align 1, !tbaa !29
  %div.lhs.trunc.i.us.1 = sext i8 %6 to i16
  %div3.i.us.1 = sdiv i16 %div.lhs.trunc.i.us.1, %div.rhs.trunc.i
  %conv2.i.us.1 = trunc i16 %div3.i.us.1 to i8
  %add.us.1 = add i8 %add.us, %conv2.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !77

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i8 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi i8 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i8, ptr %first, i64 %indvars.iv.unr
  %7 = load i8, ptr %arrayidx.us.epil, align 1, !tbaa !29
  %div.lhs.trunc.i.us.epil = sext i8 %7 to i16
  %div3.i.us.epil = sdiv i16 %div.lhs.trunc.i.us.epil, %div.rhs.trunc.i
  %conv2.i.us.epil = trunc i16 %div3.i.us.epil to i8
  %add.us.epil = add i8 %result.023.us.unr, %conv2.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i8 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i8
  %div.lhs.trunc.i.i.us = sext i8 %conv.i.us to i16
  %div3.i.i.us = sdiv i16 %div.lhs.trunc.i.i.us, %div.rhs.trunc.i
  %conv2.i.i.us = trunc i16 %div3.i.i.us to i8
  %mul.i.us = shl i8 %conv2.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i8
  %div.lhs.trunc.i.i = sext i8 %conv.i to i16
  %div3.i.i = sdiv i16 %div.lhs.trunc.i.i, %div.rhs.trunc.i
  %mul.i.mask27 = and i16 %div3.i.i, 3
  %cmp.i.i = icmp eq i16 %mul.i.mask27, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !76

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa22custom_divide_variableIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %14
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %div.rhs.trunc.i = sext i8 %v1 to i16
  %div3.rhs.trunc.i = sext i8 %v2 to i16
  %div5.rhs.trunc.i = sext i8 %v3 to i16
  %div7.rhs.trunc.i = sext i8 %v4 to i16
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !78

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.026.us = phi i8 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %4 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %div.lhs.trunc.i.us = sext i8 %4 to i16
  %div9.i.us = sdiv i16 %div.lhs.trunc.i.us, %div.rhs.trunc.i
  %div310.i.us = sdiv i16 %div9.i.us, %div3.rhs.trunc.i
  %div511.i.us = sdiv i16 %div310.i.us, %div5.rhs.trunc.i
  %div712.i.us = sdiv i16 %div511.i.us, %div7.rhs.trunc.i
  %conv8.i.us = trunc i16 %div712.i.us to i8
  %add.us = add i8 %result.026.us, %conv8.i.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !79

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %5 to i8
  %div.lhs.trunc.i.i.us = sext i8 %conv.i.us to i16
  %div9.i.i.us = sdiv i16 %div.lhs.trunc.i.i.us, %div.rhs.trunc.i
  %div310.i.i.us = sdiv i16 %div9.i.i.us, %div3.rhs.trunc.i
  %div511.i.i.us = sdiv i16 %div310.i.i.us, %div5.rhs.trunc.i
  %div712.i.i.us = sdiv i16 %div511.i.i.us, %div7.rhs.trunc.i
  %conv8.i.i.us = trunc i16 %div712.i.i.us to i8
  %mul.i.us = shl i8 %conv8.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %7 to i8
  %div.lhs.trunc.i.i = sext i8 %conv.i to i16
  %div9.i.i = sdiv i16 %div.lhs.trunc.i.i, %div.rhs.trunc.i
  %div310.i.i = sdiv i16 %div9.i.i, %div3.rhs.trunc.i
  %div511.i.i = sdiv i16 %div310.i.i, %div5.rhs.trunc.i
  %div712.i.i = sdiv i16 %div511.i.i, %div7.rhs.trunc.i
  %mul.i.mask30 = and i16 %div712.i.i, 3
  %cmp.i.i = icmp eq i16 %mul.i.mask30, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !78

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa31custom_divide_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %11
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %div.lhs.trunc.i.i = sext i8 %v1 to i16
  %div.rhs.trunc.i.i = sext i8 %v2 to i16
  %div9.i.i = sdiv i16 %div.lhs.trunc.i.i, %div.rhs.trunc.i.i
  %div4.rhs.trunc.i.i = sext i8 %v3 to i16
  %div410.i.i = sdiv i16 %div9.i.i, %div4.rhs.trunc.i.i
  %div6.rhs.trunc.i.i = sext i8 %v4 to i16
  %div611.i.i = sdiv i16 %div410.i.i, %div6.rhs.trunc.i.i
  %1 = trunc i16 %div611.i.i to i8
  br i1 %cmp225, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <16 x i8> poison, i8 %1, i64 0
  %broadcast.splat40 = shufflevector <16 x i8> %broadcast.splatinsert39, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec42 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert47 = insertelement <8 x i8> poison, i8 %1, i64 0
  %broadcast.splat48 = shufflevector <8 x i8> %broadcast.splatinsert47, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n43 = icmp eq i64 %n.vec42, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %2 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %18, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us ]
  %i.029.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %8, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %3 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = getelementptr inbounds i8, ptr %3, i64 16
  %wide.load38 = load <16 x i8>, ptr %4, align 1, !tbaa !29
  %5 = add <16 x i8> %wide.load, %vec.phi
  %6 = add <16 x i8> %wide.load38, %vec.phi37
  %7 = add <16 x i8> %5, %broadcast.splat
  %8 = add <16 x i8> %6, %broadcast.splat40
  %index.next = add nuw i64 %index, 32
  %9 = icmp eq i64 %index.next, %n.vec
  br i1 %9, label %middle.block, label %vector.body, !llvm.loop !80

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %8, %7
  %10 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %10, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %11 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index44 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next49, %vec.epilog.vector.body ]
  %vec.phi45 = phi <8 x i8> [ %11, %vec.epilog.ph ], [ %14, %vec.epilog.vector.body ]
  %12 = getelementptr inbounds i8, ptr %first, i64 %index44
  %wide.load46 = load <8 x i8>, ptr %12, align 1, !tbaa !29
  %13 = add <8 x i8> %wide.load46, %vec.phi45
  %14 = add <8 x i8> %13, %broadcast.splat48
  %index.next49 = add nuw i64 %index44, 8
  %15 = icmp eq i64 %index.next49, %n.vec42
  br i1 %15, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !81

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %16 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %14)
  br i1 %cmp.n43, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec42, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %10, %vec.epilog.iter.check ], [ %16, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !82

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %19 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %conv7.i.us = add i8 %19, %result.026.us
  %add.us = add i8 %conv7.i.us, %1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !83

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %10, %middle.block ], [ %16, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i8
  %conv7.i.i.us = add i8 %1, %conv.i.us
  %mul.i.us = shl i8 %conv7.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit
  %21 = phi i32 [ %24, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %22 = phi double [ %25, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %22 to i8
  %conv7.i.i = add i8 %1, %conv.i
  %mul.i.mask = and i8 %conv7.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %23)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %24 = phi i32 [ %21, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %25 = phi double [ %22, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %24
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !82

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa32custom_divide_multiple_variable2IaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %26 = load i64, ptr @start_time, align 8, !tbaa !26
  %27 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %27, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %28 = load i32, ptr @current_test, align 4, !tbaa !9
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %28, %29
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %30 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %add.i = add nsw i32 %30, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %27, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %31)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %32 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %33 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %26
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %32 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %32, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp31 = icmp sgt i32 %0, 0
  br i1 %cmp31, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp228 = icmp sgt i32 %count, 0
  %conv2.i.i = sext i8 %v2 to i16
  %conv3.i.i = sext i8 %v3 to i16
  %mul.i.i = mul nsw i16 %conv3.i.i, %conv2.i.i
  %div.rhs.trunc.i.i = sext i8 %v4 to i16
  %div8.i.i = sdiv i16 %mul.i.i, %div.rhs.trunc.i.i
  %div.sext.i.i = trunc i16 %div8.i.i to i8
  br i1 %cmp228, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre34 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check39 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat43 = shufflevector <16 x i8> %broadcast.splatinsert42, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <16 x i8> poison, i8 %div.sext.i.i, i64 0
  %broadcast.splat45 = shufflevector <16 x i8> %broadcast.splatinsert44, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert46 = insertelement <16 x i8> poison, i8 %div.sext.i.i, i64 0
  %broadcast.splat47 = shufflevector <16 x i8> %broadcast.splatinsert46, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec49 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert54 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat55 = shufflevector <8 x i8> %broadcast.splatinsert54, <8 x i8> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert56 = insertelement <8 x i8> poison, i8 %div.sext.i.i, i64 0
  %broadcast.splat57 = shufflevector <8 x i8> %broadcast.splatinsert56, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n50 = icmp eq i64 %n.vec49, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %20, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ]
  %i.032.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check39, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %8, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi40 = phi <16 x i8> [ %9, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load41 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, %broadcast.splat
  %5 = add <16 x i8> %vec.phi40, %broadcast.splat43
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load41
  %8 = sub <16 x i8> %6, %broadcast.splat45
  %9 = sub <16 x i8> %7, %broadcast.splat47
  %index.next = add nuw i64 %index, 32
  %10 = icmp eq i64 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !84

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %9, %8
  %11 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %11, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %12 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index51 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next58, %vec.epilog.vector.body ]
  %vec.phi52 = phi <8 x i8> [ %12, %vec.epilog.ph ], [ %16, %vec.epilog.vector.body ]
  %13 = getelementptr inbounds i8, ptr %first, i64 %index51
  %wide.load53 = load <8 x i8>, ptr %13, align 1, !tbaa !29
  %14 = add <8 x i8> %vec.phi52, %broadcast.splat55
  %15 = add <8 x i8> %14, %wide.load53
  %16 = sub <8 x i8> %15, %broadcast.splat57
  %index.next58 = add nuw i64 %index51, 8
  %17 = icmp eq i64 %index.next58, %n.vec49
  br i1 %17, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !85

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %18 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %16)
  br i1 %cmp.n50, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec49, %vec.epilog.middle.block ]
  %result.029.us.ph = phi i8 [ 0, %iter.check ], [ %11, %vec.epilog.iter.check ], [ %18, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %20 = phi i32 [ %.pre36, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.032.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %20
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !86

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.029.us = phi i8 [ %add.us, %for.body3.us ], [ %result.029.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %21 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.029.us, %v1
  %sub.i.us = add i8 %add.i.us, %21
  %add.us = sub i8 %sub.i.us, %div.sext.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !87

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %11, %middle.block ], [ %18, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %22 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %22 to i8
  %add.i.i.us = add i8 %conv.i.us, %v1
  %sub.i.i.us = sub i8 %add.i.i.us, %div.sext.i.i
  %mul.i.us = shl i8 %sub.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit
  %23 = phi i32 [ %26, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %24 = phi double [ %27, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre34, %for.cond1.preheader.preheader ]
  %i.032 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %24 to i8
  %add.i.i = add i8 %conv.i, %v1
  %sub.i.i = sub i8 %add.i.i, %div.sext.i.i
  %mul.i.mask = and i8 %sub.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %23, %for.cond1.preheader ], [ %.pre35, %if.then.i ]
  %27 = phi double [ %24, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.032, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !86

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa30custom_mixed_multiple_variableIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i26

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i26

if.then.i26:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i22 = add nsw i32 %32, 10
  store i32 %add.i22, ptr @allocated_results, align 4, !tbaa !9
  %conv.i23 = sext i32 %add.i22 to i64
  %mul.i24 = shl nsw i64 %conv.i23, 4
  %call.i25 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i24) #14
  store ptr %call.i25, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i25, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i26
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i26
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i25, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i20 = sub nsw i64 %call.i19, %28
  %conv.i21 = sitofp i64 %sub.i20 to double
  %div.i = fdiv double %conv.i21, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, %broadcast.splat
  %5 = and <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !88

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !89

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !90

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %and3.i.us = and i8 %18, %v1
  %add.us = add i8 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !91

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %and3.i.i.us = and i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %and3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %and3.i.i = and i8 %conv.i, %v1
  %mul.i.mask = and i8 %and3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !90

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa19custom_variable_andIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = and i8 %v2, %v1
  %2 = and i8 %1, %v3
  %3 = and i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = and i8 %v2, %v1
  %.scalar69 = and i8 %v2, %v1
  %.scalar70 = and i8 %.scalar, %v3
  %.scalar71 = and i8 %.scalar69, %v3
  %.scalar72 = and i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = and i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = and i8 %v2, %v1
  %.scalar75 = and i8 %.scalar74, %v3
  %.scalar76 = and i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = and <16 x i8> %5, %wide.load
  %14 = and <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !92

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = and <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !93

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !94

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = and i8 %27, %v1
  %29 = and i8 %28, %v2
  %30 = and i8 %29, %v3
  %and712.i.us = and i8 %30, %v4
  %add.us = add i8 %and712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !95

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %31 to i8
  %and712.i.i.us = and i8 %3, %conv.i.us
  %mul.i.us = shl i8 %and712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %33 to i8
  %and712.i.i = and i8 %3, %conv.i
  %mul.i.mask = and i8 %and712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !94

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_andIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, %broadcast.splat
  %5 = or <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !96

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !97

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !98

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %or3.i.us = or i8 %18, %v1
  %add.us = add i8 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !99

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %or3.i.i.us = or i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %or3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %or3.i.i = or i8 %conv.i, %v1
  %mul.i.mask = and i8 %or3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !98

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa18custom_variable_orIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = or i8 %v2, %v1
  %2 = or i8 %1, %v3
  %3 = or i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = or i8 %v2, %v1
  %.scalar69 = or i8 %v2, %v1
  %.scalar70 = or i8 %.scalar, %v3
  %.scalar71 = or i8 %.scalar69, %v3
  %.scalar72 = or i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = or i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = or i8 %v2, %v1
  %.scalar75 = or i8 %.scalar74, %v3
  %.scalar76 = or i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = or <16 x i8> %5, %wide.load
  %14 = or <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !100

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = or <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !101

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !102

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = or i8 %27, %v1
  %29 = or i8 %28, %v2
  %30 = or i8 %29, %v3
  %or712.i.us = or i8 %30, %v4
  %add.us = add i8 %or712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !103

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %31 to i8
  %or712.i.i.us = or i8 %3, %conv.i.us
  %mul.i.us = shl i8 %or712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %33 to i8
  %or712.i.i = or i8 %3, %conv.i
  %mul.i.mask = and i8 %or712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !102

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa27custom_multiple_variable_orIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, %broadcast.splat
  %5 = xor <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !104

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !105

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !106

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %xor3.i.us = xor i8 %18, %v1
  %add.us = add i8 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !107

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %19 to i8
  %xor3.i.i.us = xor i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %xor3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %21 to i8
  %xor3.i.i = xor i8 %conv.i, %v1
  %mul.i.mask = and i8 %xor3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit

_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !106

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit, %_Z26check_shifted_variable_sumIa19custom_variable_xorIaEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef signext %v1, i8 noundef signext %v2, i8 noundef signext %v3, i8 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = xor i8 %v2, %v1
  %2 = xor i8 %1, %v3
  %3 = xor i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = xor i8 %v2, %v1
  %.scalar69 = xor i8 %v2, %v1
  %.scalar70 = xor i8 %.scalar, %v3
  %.scalar71 = xor i8 %.scalar69, %v3
  %.scalar72 = xor i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = xor i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = xor i8 %v2, %v1
  %.scalar75 = xor i8 %.scalar74, %v3
  %.scalar76 = xor i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = xor <16 x i8> %5, %wide.load
  %14 = xor <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !108

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = xor <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !109

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !110

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = xor i8 %27, %v1
  %29 = xor i8 %28, %v2
  %30 = xor i8 %29, %v3
  %xor712.i.us = xor i8 %30, %v4
  %add.us = add i8 %xor712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !111

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %31 to i8
  %xor712.i.i.us = xor i8 %3, %conv.i.us
  %mul.i.us = shl i8 %xor712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %33 to i8
  %xor712.i.i = xor i8 %3, %conv.i
  %mul.i.mask = and i8 %xor712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !110

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIa28custom_multiple_variable_xorIaEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, %broadcast.splat
  %5 = add <16 x i8> %vec.phi35, %broadcast.splat38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load36
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !112

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi43, %broadcast.splat46
  %13 = add <8 x i8> %12, %wide.load44
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !113

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !114

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.024.us, %v1
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !115

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add.i.i.us = add i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add.i.i = add i8 %conv.i, %v1
  %mul.i.mask = and i8 %add.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !114

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i17 = add nsw i32 %29, 10
  store i32 %add.i17, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i17 to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end12

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = trunc i32 %count to i8
  %2 = mul i8 %1, %v1
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check38 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec42 = and i64 %wide.trip.count, 4294967288
  %cmp.n43 = icmp eq i64 %n.vec42, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us
  %3 = phi i32 [ %16, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc11.us, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check38, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi39 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %4 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %4, align 1, !tbaa !29
  %5 = getelementptr inbounds i8, ptr %4, i64 16
  %wide.load40 = load <16 x i8>, ptr %5, align 1, !tbaa !29
  %6 = add <16 x i8> %wide.load, %vec.phi
  %7 = add <16 x i8> %wide.load40, %vec.phi39
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !116

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index44 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi45 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %12, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index44
  %wide.load46 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %wide.load46, %vec.phi45
  %index.next47 = add nuw i64 %index44, 8
  %13 = icmp eq i64 %index.next47, %n.vec42
  br i1 %13, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !117

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %14 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %12)
  br i1 %cmp.n43, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec42, %vec.epilog.middle.block ]
  %result.028.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %14, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %15 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %15)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = phi i32 [ %.pre35, %if.then.i.us ], [ %3, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc11.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc11.us, %16
  br i1 %cmp.us, label %iter.check, label %for.end12, !llvm.loop !118

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i8 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %17 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.us = add i8 %17, %result.028.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !119

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %14, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %conv9.us = add i8 %add.us.lcssa, %2
  %18 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %18 to i8
  %add.i.i.us = add i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %conv9.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit
  %19 = phi i32 [ %22, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %20 = phi double [ %23, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc11, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %20 to i8
  %add.i.i = add i8 %conv.i, %v1
  %mul.i = shl i8 %add.i.i, 6
  %cmp.i.i = icmp eq i8 %mul.i, %2
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %21)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %22 = phi i32 [ %19, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %23 = phi double [ %20, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc11 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc11, %22
  br i1 %cmp, label %for.cond1.preheader, label %for.end12, !llvm.loop !118

for.end12:                                        ; preds = %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh19custom_add_variableIhEEvT_S2_.exit.us, %entry
  %call.i20 = tail call i64 @clock() #17
  store i64 %call.i20, ptr @end_time, align 8, !tbaa !26
  %24 = load i64, ptr @start_time, align 8, !tbaa !26
  %25 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %25, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end12
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end12
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %26, %27
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %28 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %add.i = add nsw i32 %28, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %25, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %29)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %30 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %31 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i20, %24
  %conv.i21 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i21, 1.000000e+06
  %idxprom.i = sext i32 %30 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %31, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %30, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %add.i = add i8 %v2, %v1
  %add3.i = add i8 %add.i, %v3
  %add5.i = add i8 %add3.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check37 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <16 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat41 = shufflevector <16 x i8> %broadcast.splatinsert40, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec43 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert48 = insertelement <8 x i8> poison, i8 %add5.i, i64 0
  %broadcast.splat49 = shufflevector <8 x i8> %broadcast.splatinsert48, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n44 = icmp eq i64 %n.vec43, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check37, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi38 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load39 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %broadcast.splat, %vec.phi
  %5 = add <16 x i8> %broadcast.splat41, %vec.phi38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load39
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !120

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index45 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next50, %vec.epilog.vector.body ]
  %vec.phi46 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index45
  %wide.load47 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %broadcast.splat49, %vec.phi46
  %13 = add <8 x i8> %12, %wide.load47
  %index.next50 = add nuw i64 %index45, 8
  %14 = icmp eq i64 %index.next50, %n.vec43
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !121

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n44, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec43, %vec.epilog.middle.block ]
  %result.027.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !122

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i8 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add7.i.us = add i8 %add5.i, %result.027.us
  %add.us = add i8 %add7.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !123

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add7.i.i.us = add i8 %add5.i, %conv.i.us
  %mul.i.us = shl i8 %add7.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add7.i.i = add i8 %add5.i, %conv.i
  %mul.i.mask = and i8 %add7.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !122

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh28custom_add_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %29, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %25
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = sub <16 x i8> %vec.phi, %broadcast.splat
  %5 = sub <16 x i8> %vec.phi35, %broadcast.splat38
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load36
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !124

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = sub <8 x i8> %vec.phi43, %broadcast.splat46
  %13 = add <8 x i8> %12, %wide.load44
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !125

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !126

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub.i.us = sub i8 %result.024.us, %v1
  %add.us = add i8 %sub.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !127

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %sub.i.i.us = sub i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %sub.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %sub.i.i = sub i8 %conv.i, %v1
  %mul.i.mask = and i8 %sub.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !126

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh19custom_sub_variableIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i16 = sub nsw i64 %call.i15, %25
  %conv.i17 = sitofp i64 %sub.i16 to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %1 = add i8 %v2, %v1
  %2 = add i8 %1, %v3
  %3 = add i8 %2, %v4
  br i1 %cmp230, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check41 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat45 = shufflevector <16 x i8> %broadcast.splatinsert44, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec47 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert52 = insertelement <8 x i8> poison, i8 %3, i64 0
  %broadcast.splat53 = shufflevector <8 x i8> %broadcast.splatinsert52, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n48 = icmp eq i64 %n.vec47, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %20, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.034.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check41, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %9, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi42 = phi <16 x i8> [ %10, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %5 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %5, align 1, !tbaa !29
  %6 = getelementptr inbounds i8, ptr %5, i64 16
  %wide.load43 = load <16 x i8>, ptr %6, align 1, !tbaa !29
  %7 = sub <16 x i8> %vec.phi, %broadcast.splat
  %8 = sub <16 x i8> %vec.phi42, %broadcast.splat45
  %9 = add <16 x i8> %7, %wide.load
  %10 = add <16 x i8> %8, %wide.load43
  %index.next = add nuw i64 %index, 32
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !128

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %10, %9
  %12 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %12, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %13 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index49 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next54, %vec.epilog.vector.body ]
  %vec.phi50 = phi <8 x i8> [ %13, %vec.epilog.ph ], [ %16, %vec.epilog.vector.body ]
  %14 = getelementptr inbounds i8, ptr %first, i64 %index49
  %wide.load51 = load <8 x i8>, ptr %14, align 1, !tbaa !29
  %15 = sub <8 x i8> %vec.phi50, %broadcast.splat53
  %16 = add <8 x i8> %15, %wide.load51
  %index.next54 = add nuw i64 %index49, 8
  %17 = icmp eq i64 %index.next54, %n.vec47
  br i1 %17, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !129

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %18 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %16)
  br i1 %cmp.n48, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec47, %vec.epilog.middle.block ]
  %result.031.us.ph = phi i8 [ 0, %iter.check ], [ %12, %vec.epilog.iter.check ], [ %18, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %20 = phi i32 [ %.pre38, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %20
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !130

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i8 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %21 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %sub7.i.us = sub i8 %result.031.us, %3
  %add.us = add i8 %sub7.i.us, %21
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !131

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %12, %middle.block ], [ %18, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %22 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %22 to i8
  %sub7.i.i.us = sub i8 %conv.i.us, %3
  %mul.i.us = shl i8 %sub7.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
  %23 = phi i32 [ %26, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %24 = phi double [ %27, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %24 to i8
  %sub7.i.i = sub i8 %conv.i, %3
  %mul.i.mask = and i8 %sub7.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %23, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %27 = phi double [ %24, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !130

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh28custom_sub_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %28
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i.i = shl i8 %v1, 6
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check34 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat38 = shufflevector <16 x i8> %broadcast.splatinsert37, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec40 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert45 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat46 = shufflevector <8 x i8> %broadcast.splatinsert45, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n41 = icmp eq i64 %n.vec40, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check34, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi35 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load36 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %wide.load, %broadcast.splat
  %5 = mul <16 x i8> %wide.load36, %broadcast.splat38
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi35
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !132

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index42 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next47, %vec.epilog.vector.body ]
  %vec.phi43 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index42
  %wide.load44 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %wide.load44, %broadcast.splat46
  %13 = add <8 x i8> %12, %vec.phi43
  %index.next47 = add nuw i64 %index42, 8
  %14 = icmp eq i64 %index.next47, %n.vec40
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !133

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n41, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec40, %vec.epilog.middle.block ]
  %result.024.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !134

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i8 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul.i15.us = mul i8 %18, %v1
  %add.us = add i8 %mul.i15.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !135

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %mul.i.us = mul i8 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %mul.i = mul i8 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i8 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !134

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh24custom_multiply_variableIhEEvT_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %25
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i18 = mul i8 %v3, %v2
  %mul3.i = mul i8 %mul.i18, %v1
  %mul5.i = mul i8 %mul3.i, %v4
  %mul3.i.i = shl i8 %mul.i18, 6
  %mul5.i.i = mul i8 %mul3.i.i, %v1
  %mul7.i.i = mul i8 %mul5.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check37 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <16 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat41 = shufflevector <16 x i8> %broadcast.splatinsert40, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec43 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert48 = insertelement <8 x i8> poison, i8 %mul5.i, i64 0
  %broadcast.splat49 = shufflevector <8 x i8> %broadcast.splatinsert48, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n44 = icmp eq i64 %n.vec43, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check37, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi38 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load39 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = mul <16 x i8> %broadcast.splat, %wide.load
  %5 = mul <16 x i8> %broadcast.splat41, %wide.load39
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi38
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !136

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index45 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next50, %vec.epilog.vector.body ]
  %vec.phi46 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index45
  %wide.load47 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = mul <8 x i8> %broadcast.splat49, %wide.load47
  %13 = add <8 x i8> %12, %vec.phi46
  %index.next50 = add nuw i64 %index45, 8
  %14 = icmp eq i64 %index.next50, %n.vec43
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !137

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n44, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec43, %vec.epilog.middle.block ]
  %result.027.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !138

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i8 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %mul7.i.us = mul i8 %mul5.i, %18
  %add.us = add i8 %mul7.i.us, %result.027.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !139

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %mul.i.us = mul i8 %mul7.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %mul.i = mul i8 %mul7.i.i, %conv.i
  %cmp.i.i = icmp eq i8 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !138

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh33custom_multiply_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %25
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %mul.i18 = mul i8 %v2, %v1
  %mul4.i = mul i8 %mul.i18, %v3
  %mul6.i = mul i8 %mul4.i, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check38 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <16 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat42 = shufflevector <16 x i8> %broadcast.splatinsert41, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec44 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert49 = insertelement <8 x i8> poison, i8 %mul6.i, i64 0
  %broadcast.splat50 = shufflevector <8 x i8> %broadcast.splatinsert49, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n45 = icmp eq i64 %n.vec44, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check38, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi39 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load40 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = add <16 x i8> %vec.phi, %broadcast.splat
  %5 = add <16 x i8> %vec.phi39, %broadcast.splat42
  %6 = add <16 x i8> %4, %wide.load
  %7 = add <16 x i8> %5, %wide.load40
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !140

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index46 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next51, %vec.epilog.vector.body ]
  %vec.phi47 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index46
  %wide.load48 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = add <8 x i8> %vec.phi47, %broadcast.splat50
  %13 = add <8 x i8> %12, %wide.load48
  %index.next51 = add nuw i64 %index46, 8
  %14 = icmp eq i64 %index.next51, %n.vec44
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !141

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n45, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec44, %vec.epilog.middle.block ]
  %result.028.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !142

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i8 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %result.028.us, %mul6.i
  %add.us = add i8 %add.i.us, %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !143

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %add.i.i.us = add i8 %mul6.i, %conv.i.us
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %add.i.i = add i8 %mul6.i, %conv.i
  %mul.i.mask = and i8 %add.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !142

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh34custom_multiply_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %29, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %25
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre30, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !144

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi i8 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %5 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %6 = udiv i8 %5, %v1
  %add.us = add i8 %6, %result.023.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i8, ptr %first, i64 %indvars.iv.next
  %7 = load i8, ptr %arrayidx.us.1, align 1, !tbaa !29
  %8 = udiv i8 %7, %v1
  %add.us.1 = add i8 %8, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !145

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i8 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi i8 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i8, ptr %first, i64 %indvars.iv.unr
  %9 = load i8, ptr %arrayidx.us.epil, align 1, !tbaa !29
  %10 = udiv i8 %9, %v1
  %add.us.epil = add i8 %10, %result.023.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i8 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i8
  %12 = udiv i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %12, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %14 to i8
  %15 = udiv i8 %conv.i, %v1
  %mul.i.mask = and i8 %15, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !144

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh22custom_divide_variableIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !146

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.026.us = phi i8 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %4 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %5 = udiv i8 %4, %v1
  %6 = udiv i8 %5, %v2
  %7 = udiv i8 %6, %v3
  %8 = udiv i8 %7, %v4
  %add.us = add i8 %8, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !147

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %9 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %9 to i8
  %10 = udiv i8 %conv.i.us, %v1
  %11 = udiv i8 %10, %v2
  %12 = udiv i8 %11, %v3
  %13 = udiv i8 %12, %v4
  %mul.i.us = shl i8 %13, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %21, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %22, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i8
  %16 = udiv i8 %conv.i, %v1
  %17 = udiv i8 %16, %v2
  %18 = udiv i8 %17, %v3
  %19 = udiv i8 %18, %v4
  %mul.i.mask = and i8 %19, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %20)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %21 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %22 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %21
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !146

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh31custom_divide_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %23 = load i64, ptr @start_time, align 8, !tbaa !26
  %24 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %24, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %25, %26
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %27 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %add.i = add nsw i32 %27, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %24, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %28)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %29 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %30 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %23
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %29 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %30, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %30, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %29, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %1 = udiv i8 %v1, %v2
  %2 = udiv i8 %1, %v3
  %3 = udiv i8 %2, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check37 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <16 x i8> poison, i8 %3, i64 0
  %broadcast.splat41 = shufflevector <16 x i8> %broadcast.splatinsert40, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec43 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert48 = insertelement <8 x i8> poison, i8 %3, i64 0
  %broadcast.splat49 = shufflevector <8 x i8> %broadcast.splatinsert48, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n44 = icmp eq i64 %n.vec43, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %4 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %20, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check37, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %9, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi38 = phi <16 x i8> [ %10, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %5 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %5, align 1, !tbaa !29
  %6 = getelementptr inbounds i8, ptr %5, i64 16
  %wide.load39 = load <16 x i8>, ptr %6, align 1, !tbaa !29
  %7 = add <16 x i8> %wide.load, %vec.phi
  %8 = add <16 x i8> %wide.load39, %vec.phi38
  %9 = add <16 x i8> %7, %broadcast.splat
  %10 = add <16 x i8> %8, %broadcast.splat41
  %index.next = add nuw i64 %index, 32
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !148

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %10, %9
  %12 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %12, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %13 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index45 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next50, %vec.epilog.vector.body ]
  %vec.phi46 = phi <8 x i8> [ %13, %vec.epilog.ph ], [ %16, %vec.epilog.vector.body ]
  %14 = getelementptr inbounds i8, ptr %first, i64 %index45
  %wide.load47 = load <8 x i8>, ptr %14, align 1, !tbaa !29
  %15 = add <8 x i8> %wide.load47, %vec.phi46
  %16 = add <8 x i8> %15, %broadcast.splat49
  %index.next50 = add nuw i64 %index45, 8
  %17 = icmp eq i64 %index.next50, %n.vec43
  br i1 %17, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !149

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %18 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %16)
  br i1 %cmp.n44, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec43, %vec.epilog.middle.block ]
  %result.027.us.ph = phi i8 [ 0, %iter.check ], [ %12, %vec.epilog.iter.check ], [ %18, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %20 = phi i32 [ %.pre34, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %20
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !150

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i8 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %21 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %add.i.us = add i8 %21, %result.027.us
  %add.us = add i8 %add.i.us, %3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !151

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %12, %middle.block ], [ %18, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %22 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %22 to i8
  %add.i.i.us = add i8 %3, %conv.i.us
  %mul.i.us = shl i8 %add.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit
  %23 = phi i32 [ %26, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %24 = phi double [ %27, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %24 to i8
  %add.i.i = add i8 %3, %conv.i
  %mul.i.mask = and i8 %add.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %23, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %27 = phi double [ %24, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !150

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh32custom_divide_multiple_variable2IhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %32, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %28
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %conv1.i = zext i8 %v1 to i16
  %conv2.i.i = zext i8 %v2 to i16
  %conv3.i.i = zext i8 %v3 to i16
  %mul.i.i = mul nuw i16 %conv3.i.i, %conv2.i.i
  %conv4.i.i = zext i8 %v4 to i16
  %div.i.i = udiv i16 %mul.i.i, %conv4.i.i
  %1 = trunc i16 %div.i.i to i8
  br i1 %cmp230, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check41 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i16> poison, i16 %conv1.i, i64 0
  %broadcast.splat = shufflevector <16 x i16> %broadcast.splatinsert, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <16 x i16> poison, i16 %conv1.i, i64 0
  %broadcast.splat45 = shufflevector <16 x i16> %broadcast.splatinsert44, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert46 = insertelement <16 x i16> poison, i16 %div.i.i, i64 0
  %broadcast.splat47 = shufflevector <16 x i16> %broadcast.splatinsert46, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert48 = insertelement <16 x i16> poison, i16 %div.i.i, i64 0
  %broadcast.splat49 = shufflevector <16 x i16> %broadcast.splatinsert48, <16 x i16> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec51 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert56 = insertelement <8 x i16> poison, i16 %conv1.i, i64 0
  %broadcast.splat57 = shufflevector <8 x i16> %broadcast.splatinsert56, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert58 = insertelement <8 x i16> poison, i16 %div.i.i, i64 0
  %broadcast.splat59 = shufflevector <8 x i16> %broadcast.splatinsert58, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n52 = icmp eq i64 %n.vec51, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %2 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %27, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ]
  %i.034.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check41, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %13, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi42 = phi <16 x i8> [ %14, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %3 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = getelementptr inbounds i8, ptr %3, i64 16
  %wide.load43 = load <16 x i8>, ptr %4, align 1, !tbaa !29
  %5 = zext <16 x i8> %wide.load to <16 x i16>
  %6 = zext <16 x i8> %wide.load43 to <16 x i16>
  %7 = add nuw nsw <16 x i16> %broadcast.splat, %5
  %8 = add nuw nsw <16 x i16> %broadcast.splat45, %6
  %9 = sub <16 x i16> %7, %broadcast.splat47
  %10 = sub <16 x i16> %8, %broadcast.splat49
  %11 = trunc <16 x i16> %9 to <16 x i8>
  %12 = trunc <16 x i16> %10 to <16 x i8>
  %13 = add <16 x i8> %vec.phi, %11
  %14 = add <16 x i8> %vec.phi42, %12
  %index.next = add nuw i64 %index, 32
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !152

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %14, %13
  %16 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %16, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %17 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index53 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next60, %vec.epilog.vector.body ]
  %vec.phi54 = phi <8 x i8> [ %17, %vec.epilog.ph ], [ %23, %vec.epilog.vector.body ]
  %18 = getelementptr inbounds i8, ptr %first, i64 %index53
  %wide.load55 = load <8 x i8>, ptr %18, align 1, !tbaa !29
  %19 = zext <8 x i8> %wide.load55 to <8 x i16>
  %20 = add nuw nsw <8 x i16> %broadcast.splat57, %19
  %21 = sub <8 x i16> %20, %broadcast.splat59
  %22 = trunc <8 x i16> %21 to <8 x i8>
  %23 = add <8 x i8> %vec.phi54, %22
  %index.next60 = add nuw i64 %index53, 8
  %24 = icmp eq i64 %index.next60, %n.vec51
  br i1 %24, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !153

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %25 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %23)
  br i1 %cmp.n52, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec51, %vec.epilog.middle.block ]
  %result.031.us.ph = phi i8 [ 0, %iter.check ], [ %16, %vec.epilog.iter.check ], [ %25, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %27 = phi i32 [ %.pre38, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %27
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !154

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i8 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %28 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %conv.i18.us = zext i8 %28 to i16
  %add.i.us = add nuw nsw i16 %conv.i18.us, %conv1.i
  %sub.i.us = sub i16 %add.i.us, %div.i.i
  %conv5.i.us = trunc i16 %sub.i.us to i8
  %add.us = add i8 %result.031.us, %conv5.i.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !155

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %16, %middle.block ], [ %25, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %29 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %29 to i8
  %30 = add i8 %conv.i.us, %v1
  %conv5.i.i.us = sub i8 %30, %1
  %mul.i.us = shl i8 %conv5.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit
  %31 = phi i32 [ %35, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %32 = phi double [ %36, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %32 to i8
  %33 = add i8 %conv.i, %v1
  %conv5.i.i = sub i8 %33, %1
  %mul.i.mask = and i8 %conv5.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %31, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %36 = phi double [ %32, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !154

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh30custom_mixed_multiple_variableIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i20 = tail call i64 @clock() #17
  store i64 %call.i20, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i28

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i28

if.then.i28:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i24 = add nsw i32 %41, 10
  store i32 %add.i24, ptr @allocated_results, align 4, !tbaa !9
  %conv.i25 = sext i32 %add.i24 to i64
  %mul.i26 = shl nsw i64 %conv.i25, 4
  %call.i27 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i26) #14
  store ptr %call.i27, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i27, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i28
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i28
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i29 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i27, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i21 = sub nsw i64 %call.i20, %37
  %conv.i22 = sitofp i64 %sub.i21 to double
  %div.i23 = fdiv double %conv.i22, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i23, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = and <16 x i8> %wide.load, %broadcast.splat
  %5 = and <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !156

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = and <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !157

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !158

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %and3.i.us = and i8 %18, %v1
  %add.us = add i8 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !159

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %and3.i.i.us = and i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %and3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %and3.i.i = and i8 %conv.i, %v1
  %mul.i.mask = and i8 %and3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !158

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh19custom_variable_andIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = and i8 %v2, %v1
  %2 = and i8 %1, %v3
  %3 = and i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = and i8 %v2, %v1
  %.scalar69 = and i8 %v2, %v1
  %.scalar70 = and i8 %.scalar, %v3
  %.scalar71 = and i8 %.scalar69, %v3
  %.scalar72 = and i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = and i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = and i8 %v2, %v1
  %.scalar75 = and i8 %.scalar74, %v3
  %.scalar76 = and i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = and <16 x i8> %5, %wide.load
  %14 = and <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !160

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = and <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !161

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !162

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = and i8 %27, %v1
  %29 = and i8 %28, %v2
  %30 = and i8 %29, %v3
  %and712.i.us = and i8 %30, %v4
  %add.us = add i8 %and712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !163

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %31 to i8
  %and712.i.i.us = and i8 %3, %conv.i.us
  %mul.i.us = shl i8 %and712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %33 to i8
  %and712.i.i = and i8 %3, %conv.i
  %mul.i.mask = and i8 %and712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !162

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_andIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = or <16 x i8> %wide.load, %broadcast.splat
  %5 = or <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !164

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = or <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !165

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !166

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %or3.i.us = or i8 %18, %v1
  %add.us = add i8 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !167

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %or3.i.i.us = or i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %or3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %or3.i.i = or i8 %conv.i, %v1
  %mul.i.mask = and i8 %or3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !166

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh18custom_variable_orIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = or i8 %v2, %v1
  %2 = or i8 %1, %v3
  %3 = or i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = or i8 %v2, %v1
  %.scalar69 = or i8 %v2, %v1
  %.scalar70 = or i8 %.scalar, %v3
  %.scalar71 = or i8 %.scalar69, %v3
  %.scalar72 = or i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = or i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = or i8 %v2, %v1
  %.scalar75 = or i8 %.scalar74, %v3
  %.scalar76 = or i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = or <16 x i8> %5, %wide.load
  %14 = or <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !168

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = or <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !169

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !170

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = or i8 %27, %v1
  %29 = or i8 %28, %v2
  %30 = or i8 %29, %v3
  %or712.i.us = or i8 %30, %v4
  %add.us = add i8 %or712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !171

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %31 to i8
  %or712.i.i.us = or i8 %3, %conv.i.us
  %mul.i.us = shl i8 %or712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %33 to i8
  %or712.i.i = or i8 %3, %conv.i
  %mul.i.mask = and i8 %or712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !170

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh27custom_multiple_variable_orIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check33 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %broadcast.splatinsert = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat = shufflevector <16 x i8> %broadcast.splatinsert, <16 x i8> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <16 x i8> poison, i8 %v1, i64 0
  %broadcast.splat37 = shufflevector <16 x i8> %broadcast.splatinsert36, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec39 = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert44 = insertelement <8 x i8> poison, i8 %v1, i64 0
  %broadcast.splat45 = shufflevector <8 x i8> %broadcast.splatinsert44, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n40 = icmp eq i64 %n.vec39, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us
  %1 = phi i32 [ %17, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check33, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %6, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi34 = phi <16 x i8> [ %7, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %2 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %2, align 1, !tbaa !29
  %3 = getelementptr inbounds i8, ptr %2, i64 16
  %wide.load35 = load <16 x i8>, ptr %3, align 1, !tbaa !29
  %4 = xor <16 x i8> %wide.load, %broadcast.splat
  %5 = xor <16 x i8> %wide.load35, %broadcast.splat37
  %6 = add <16 x i8> %4, %vec.phi
  %7 = add <16 x i8> %5, %vec.phi34
  %index.next = add nuw i64 %index, 32
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !172

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %7, %6
  %9 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %9, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %10 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index41 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next46, %vec.epilog.vector.body ]
  %vec.phi42 = phi <8 x i8> [ %10, %vec.epilog.ph ], [ %13, %vec.epilog.vector.body ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index41
  %wide.load43 = load <8 x i8>, ptr %11, align 1, !tbaa !29
  %12 = xor <8 x i8> %wide.load43, %broadcast.splat45
  %13 = add <8 x i8> %12, %vec.phi42
  %index.next46 = add nuw i64 %index41, 8
  %14 = icmp eq i64 %index.next46, %n.vec39
  br i1 %14, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !173

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %15 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %13)
  br i1 %cmp.n40, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec39, %vec.epilog.middle.block ]
  %result.023.us.ph = phi i8 [ 0, %iter.check ], [ %9, %vec.epilog.iter.check ], [ %15, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %17
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !174

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i8 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %18 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %xor3.i.us = xor i8 %18, %v1
  %add.us = add i8 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !175

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %9, %middle.block ], [ %15, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %19 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %19 to i8
  %xor3.i.i.us = xor i8 %conv.i.us, %v1
  %mul.i.us = shl i8 %xor3.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit
  %20 = phi i32 [ %23, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %24, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %21 to i8
  %xor3.i.i = xor i8 %conv.i, %v1
  %mul.i.mask = and i8 %xor3.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %22)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit

_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %23 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %24 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %23
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !174

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit, %_Z26check_shifted_variable_sumIh19custom_variable_xorIhEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %25 = load i64, ptr @start_time, align 8, !tbaa !26
  %26 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %26, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %27 = load i32, ptr @current_test, align 4, !tbaa !9
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %27, %28
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %29 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %add.i = add nsw i32 %29, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %26, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %30 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %30)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %31 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %32 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %25
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %31 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %32, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i8 noundef zeroext %v1, i8 noundef zeroext %v2, i8 noundef zeroext %v3, i8 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = xor i8 %v2, %v1
  %2 = xor i8 %1, %v3
  %3 = xor i8 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %min.iters.check36 = icmp ult i32 %count, 32
  %n.vec = and i64 %wide.trip.count, 4294967264
  %.scalar = xor i8 %v2, %v1
  %.scalar69 = xor i8 %v2, %v1
  %.scalar70 = xor i8 %.scalar, %v3
  %.scalar71 = xor i8 %.scalar69, %v3
  %.scalar72 = xor i8 %.scalar70, %v4
  %4 = insertelement <16 x i8> poison, i8 %.scalar72, i64 0
  %5 = shufflevector <16 x i8> %4, <16 x i8> poison, <16 x i32> zeroinitializer
  %.scalar73 = xor i8 %.scalar71, %v4
  %6 = insertelement <16 x i8> poison, i8 %.scalar73, i64 0
  %7 = shufflevector <16 x i8> %6, <16 x i8> poison, <16 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  %n.vec.remaining = and i64 %wide.trip.count, 24
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec54 = and i64 %wide.trip.count, 4294967288
  %.scalar74 = xor i8 %v2, %v1
  %.scalar75 = xor i8 %.scalar74, %v3
  %.scalar76 = xor i8 %.scalar75, %v4
  %8 = insertelement <8 x i8> poison, i8 %.scalar76, i64 0
  %9 = shufflevector <8 x i8> %8, <8 x i8> poison, <8 x i32> zeroinitializer
  %cmp.n55 = icmp eq i64 %n.vec54, %wide.trip.count
  br label %iter.check

iter.check:                                       ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us
  %10 = phi i32 [ %26, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check36, label %vec.epilog.ph, label %vector.body

vector.body:                                      ; preds = %vector.main.loop.iter.check, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.main.loop.iter.check ]
  %vec.phi = phi <16 x i8> [ %15, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %vec.phi37 = phi <16 x i8> [ %16, %vector.body ], [ zeroinitializer, %vector.main.loop.iter.check ]
  %11 = getelementptr inbounds i8, ptr %first, i64 %index
  %wide.load = load <16 x i8>, ptr %11, align 1, !tbaa !29
  %12 = getelementptr inbounds i8, ptr %11, i64 16
  %wide.load38 = load <16 x i8>, ptr %12, align 1, !tbaa !29
  %13 = xor <16 x i8> %5, %wide.load
  %14 = xor <16 x i8> %7, %wide.load38
  %15 = add <16 x i8> %13, %vec.phi
  %16 = add <16 x i8> %14, %vec.phi37
  %index.next = add nuw i64 %index, 32
  %17 = icmp eq i64 %index.next, %n.vec
  br i1 %17, label %middle.block, label %vector.body, !llvm.loop !176

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <16 x i8> %16, %15
  %18 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block
  br i1 %min.epilog.iters.check, label %for.body3.us.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %bc.merge.rdx = phi i8 [ 0, %vector.main.loop.iter.check ], [ %18, %vec.epilog.iter.check ]
  %vec.epilog.resume.val = phi i64 [ 0, %vector.main.loop.iter.check ], [ %n.vec, %vec.epilog.iter.check ]
  %19 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %bc.merge.rdx, i64 0
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index56 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next67, %vec.epilog.vector.body ]
  %vec.phi57 = phi <8 x i8> [ %19, %vec.epilog.ph ], [ %22, %vec.epilog.vector.body ]
  %20 = getelementptr inbounds i8, ptr %first, i64 %index56
  %wide.load58 = load <8 x i8>, ptr %20, align 1, !tbaa !29
  %21 = xor <8 x i8> %9, %wide.load58
  %22 = add <8 x i8> %21, %vec.phi57
  %index.next67 = add nuw i64 %index56, 8
  %23 = icmp eq i64 %index.next67, %n.vec54
  br i1 %23, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !177

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %24 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %22)
  br i1 %cmp.n55, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv.ph = phi i64 [ 0, %iter.check ], [ %n.vec, %vec.epilog.iter.check ], [ %n.vec54, %vec.epilog.middle.block ]
  %result.026.us.ph = phi i8 [ 0, %iter.check ], [ %18, %vec.epilog.iter.check ], [ %24, %vec.epilog.middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %26 = phi i32 [ %.pre33, %if.then.i.us ], [ %10, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %26
  br i1 %cmp.us, label %iter.check, label %for.end8, !llvm.loop !178

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i8 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8, ptr %first, i64 %indvars.iv
  %27 = load i8, ptr %arrayidx.us, align 1, !tbaa !29
  %28 = xor i8 %27, %v1
  %29 = xor i8 %28, %v2
  %30 = xor i8 %29, %v3
  %xor712.i.us = xor i8 %30, %v4
  %add.us = add i8 %xor712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !179

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %vec.epilog.middle.block, %middle.block
  %add.us.lcssa = phi i8 [ %18, %middle.block ], [ %24, %vec.epilog.middle.block ], [ %add.us, %for.body3.us ]
  %31 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %31 to i8
  %xor712.i.i.us = xor i8 %3, %conv.i.us
  %mul.i.us = shl i8 %xor712.i.i.us, 6
  %cmp.i.i.us = icmp eq i8 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit
  %32 = phi i32 [ %35, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %33 = phi double [ %36, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %33 to i8
  %xor712.i.i = xor i8 %3, %conv.i
  %mul.i.mask = and i8 %xor712.i.i, 3
  %cmp.i.i = icmp eq i8 %mul.i.mask, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %34 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %34)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %35 = phi i32 [ %32, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %36 = phi double [ %33, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %35
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !178

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIh28custom_multiple_variable_xorIhEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %37 = load i64, ptr @start_time, align 8, !tbaa !26
  %38 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %38, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %39 = load i32, ptr @current_test, align 4, !tbaa !9
  %40 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %39, %40
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %41 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %40, %lor.lhs.false.i ]
  %add.i = add nsw i32 %41, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %38, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %42 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %42)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %43 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %39, %lor.lhs.false.i ]
  %44 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %38, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %37
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %43 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %44, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %43, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, %broadcast.splat
  %5 = add <8 x i16> %vec.phi34, %broadcast.splat37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load35
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !180

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !181

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.024.us, %v1
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !182

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %add.i.i.us = add i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %add.i.i = add i16 %conv.i, %v1
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !181

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i17 = add nsw i32 %23, 10
  store i32 %add.i17, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i17 to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp32 = icmp sgt i32 %0, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.end12

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp229 = icmp sgt i32 %count, 0
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, %v1
  br i1 %cmp229, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre35 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us
  %3 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.033.us = phi i32 [ %inc11.us, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi40 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %4 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %4, align 2, !tbaa !30
  %5 = getelementptr inbounds i16, ptr %4, i64 8
  %wide.load41 = load <8 x i16>, ptr %5, align 2, !tbaa !30
  %6 = add <8 x i16> %wide.load, %vec.phi
  %7 = add <8 x i16> %wide.load41, %vec.phi40
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !183

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.030.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre37, %if.then.i.us ], [ %3, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc11.us = add nuw nsw i32 %i.033.us, 1
  %cmp.us = icmp slt i32 %inc11.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end12, !llvm.loop !184

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.030.us = phi i16 [ %add.us, %for.body3.us ], [ %result.030.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.us = add i16 %12, %result.030.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !185

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %conv9.us = add i16 %add.us.lcssa, %2
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %add.i.i.us = add i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %conv9.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ %.pre35, %for.cond1.preheader.preheader ]
  %i.033 = phi i32 [ %inc11, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %add.i.i = add i16 %conv.i, %v1
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, %2
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre36, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc11 = add nuw nsw i32 %i.033, 1
  %cmp = icmp slt i32 %inc11, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end12, !llvm.loop !184

for.end12:                                        ; preds = %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs19custom_add_variableIsEEvT_S2_.exit.us, %entry
  %call.i22 = tail call i64 @clock() #17
  store i64 %call.i22, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end12
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i27

lor.lhs.false.i:                                  ; preds = %for.end12
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i27

if.then.i27:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i24 = sext i32 %add.i to i64
  %mul.i25 = shl nsw i64 %conv.i24, 4
  %call.i26 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i25) #14
  store ptr %call.i26, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i26, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i27
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i27
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i28 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i26, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i22, %19
  %conv.i23 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i23, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %add.i = add i16 %v2, %v1
  %add3.i = add i16 %add.i, %v3
  %add5.i = add i16 %add3.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %add5.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %add5.i, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load38 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %broadcast.splat, %vec.phi
  %5 = add <8 x i16> %broadcast.splat40, %vec.phi37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load38
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !186

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !187

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add7.i.us = add i16 %add5.i, %result.027.us
  %add.us = add i16 %add7.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !188

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %add7.i.i.us = add i16 %add5.i, %conv.i.us
  %mul.i.us = mul i16 %add7.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %add7.i.i = add i16 %add5.i, %conv.i
  %mul.i = mul i16 %add7.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !187

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs28custom_add_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %23, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %19
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = sub <8 x i16> %vec.phi, %broadcast.splat
  %5 = sub <8 x i16> %vec.phi34, %broadcast.splat37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load35
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !189

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !190

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub.i.us = sub i16 %result.024.us, %v1
  %add.us = add i16 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !191

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %sub.i.i.us = sub i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %sub.i.i = sub i16 %conv.i, %v1
  %mul.i = mul i16 %sub.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !190

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs19custom_sub_variableIsEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i16 = sub nsw i64 %call.i15, %19
  %conv.i17 = sitofp i64 %sub.i16 to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %1 = add i16 %v2, %v1
  %2 = add i16 %1, %v3
  %3 = add i16 %2, %v4
  br i1 %cmp230, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert43 = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat44 = shufflevector <8 x i16> %broadcast.splatinsert43, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.034.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi41 = phi <8 x i16> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %5, align 2, !tbaa !30
  %6 = getelementptr inbounds i16, ptr %5, i64 8
  %wide.load42 = load <8 x i16>, ptr %6, align 2, !tbaa !30
  %7 = sub <8 x i16> %vec.phi, %broadcast.splat
  %8 = sub <8 x i16> %vec.phi41, %broadcast.splat44
  %9 = add <8 x i16> %7, %wide.load
  %10 = add <8 x i16> %8, %wide.load42
  %index.next = add nuw i64 %index, 16
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !192

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %10, %9
  %12 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.031.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre38, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !193

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i16 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %15 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub7.i.us = sub i16 %result.031.us, %3
  %add.us = add i16 %sub7.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !194

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %16 to i16
  %sub7.i.i.us = sub i16 %conv.i.us, %3
  %mul.i.us = mul i16 %sub7.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %18 to i16
  %sub7.i.i = sub i16 %conv.i, %3
  %mul.i = mul i16 %sub7.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !193

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs28custom_sub_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %22
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i.i = mul i16 %v1, 8000
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, %broadcast.splat
  %5 = mul <8 x i16> %wide.load35, %broadcast.splat37
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !195

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !196

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul.i15.us = mul i16 %12, %v1
  %add.us = add i16 %mul.i15.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !197

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %mul.i.us = mul i16 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %mul.i = mul i16 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !196

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs24custom_multiply_variableIsEEvT_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i18 = mul i16 %v2, %v1
  %mul3.i = mul i16 %mul.i18, %v3
  %mul5.i = mul i16 %mul3.i, %v4
  %mul3.i.i = mul i16 %mul.i18, 8000
  %mul5.i.i = mul i16 %mul3.i.i, %v3
  %mul7.i.i = mul i16 %mul5.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %mul5.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %mul5.i, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load38 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %broadcast.splat, %wide.load
  %5 = mul <8 x i16> %broadcast.splat40, %wide.load38
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi37
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !198

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !199

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul7.i.us = mul i16 %mul5.i, %12
  %add.us = add i16 %mul7.i.us, %result.027.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !200

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %mul.i.us = mul i16 %mul7.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %mul.i = mul i16 %mul7.i.i, %conv.i
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !199

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs33custom_multiply_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %19
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %mul.i18 = mul i16 %v2, %v1
  %mul4.i = mul i16 %mul.i18, %v3
  %mul6.i = mul i16 %mul4.i, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %mul6.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <8 x i16> poison, i16 %mul6.i, i64 0
  %broadcast.splat41 = shufflevector <8 x i16> %broadcast.splatinsert40, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load39 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, %broadcast.splat
  %5 = add <8 x i16> %vec.phi38, %broadcast.splat41
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load39
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !201

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !202

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i16 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.028.us, %mul6.i
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !203

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %add.i.i.us = add i16 %mul6.i, %conv.i.us
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %add.i.i = add i16 %mul6.i, %conv.i
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !202

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs34custom_multiply_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %23, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %19
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %conv1.i = sext i16 %v1 to i32
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !204

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.025.us = phi i16 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %5 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %conv.i15.us = sext i16 %5 to i32
  %div.i.us = sdiv i32 %conv.i15.us, %conv1.i
  %conv2.i.us = trunc i32 %div.i.us to i16
  %add.us = add i16 %result.025.us, %conv2.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i16, ptr %first, i64 %indvars.iv.next
  %6 = load i16, ptr %arrayidx.us.1, align 2, !tbaa !30
  %conv.i15.us.1 = sext i16 %6 to i32
  %div.i.us.1 = sdiv i32 %conv.i15.us.1, %conv1.i
  %conv2.i.us.1 = trunc i32 %div.i.us.1 to i16
  %add.us.1 = add i16 %add.us, %conv2.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !205

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i16 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.025.us.unr = phi i16 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i16, ptr %first, i64 %indvars.iv.unr
  %7 = load i16, ptr %arrayidx.us.epil, align 2, !tbaa !30
  %conv.i15.us.epil = sext i16 %7 to i32
  %div.i.us.epil = sdiv i32 %conv.i15.us.epil, %conv1.i
  %conv2.i.us.epil = trunc i32 %div.i.us.epil to i16
  %add.us.epil = add i16 %result.025.us.unr, %conv2.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i16 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i16
  %conv.i.i.us = sext i16 %conv.i.us to i32
  %div.i.i.us = sdiv i32 %conv.i.i.us, %conv1.i
  %conv2.i.i.us = trunc i32 %div.i.i.us to i16
  %mul.i.us = mul i16 %conv2.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i16
  %conv.i.i = sext i16 %conv.i to i32
  %div.i.i = sdiv i32 %conv.i.i, %conv1.i
  %conv2.i.i = trunc i32 %div.i.i to i16
  %mul.i = mul i16 %conv2.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc7, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !204

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs22custom_divide_variableIsEEvT_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end8
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %14
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %conv1.i = sext i16 %v1 to i32
  %conv2.i = sext i16 %v2 to i32
  %conv4.i = sext i16 %v3 to i32
  %conv6.i = sext i16 %v4 to i32
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !206

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.028.us = phi i16 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %4 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %conv.i18.us = sext i16 %4 to i32
  %div.i.us = sdiv i32 %conv.i18.us, %conv1.i
  %div3.i.us = sdiv i32 %div.i.us, %conv2.i
  %div5.i.us = sdiv i32 %div3.i.us, %conv4.i
  %div7.i.us = sdiv i32 %div5.i.us, %conv6.i
  %conv8.i.us = trunc i32 %div7.i.us to i16
  %add.us = add i16 %result.028.us, %conv8.i.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !207

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %5 to i16
  %conv.i.i.us = sext i16 %conv.i.us to i32
  %div.i.i.us = sdiv i32 %conv.i.i.us, %conv1.i
  %div3.i.i.us = sdiv i32 %div.i.i.us, %conv2.i
  %div5.i.i.us = sdiv i32 %div3.i.i.us, %conv4.i
  %div7.i.i.us = sdiv i32 %div5.i.i.us, %conv6.i
  %conv8.i.i.us = trunc i32 %div7.i.i.us to i16
  %mul.i.us = mul i16 %conv8.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %7 to i16
  %conv.i.i = sext i16 %conv.i to i32
  %div.i.i = sdiv i32 %conv.i.i, %conv1.i
  %div3.i.i = sdiv i32 %div.i.i, %conv2.i
  %div5.i.i = sdiv i32 %div3.i.i, %conv4.i
  %div7.i.i = sdiv i32 %div5.i.i, %conv6.i
  %conv8.i.i = trunc i32 %div7.i.i to i16
  %mul.i = mul i16 %conv8.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc7, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !206

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs31custom_divide_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end8
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %11
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i21 = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i21, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %conv1.i.i = sext i16 %v1 to i32
  %conv2.i.i = sext i16 %v2 to i32
  %div.i.i = sdiv i32 %conv1.i.i, %conv2.i.i
  %conv3.i.i = sext i16 %v3 to i32
  %div4.i.i = sdiv i32 %div.i.i, %conv3.i.i
  %conv5.i.i = sext i16 %v4 to i32
  %div6.i.i = sdiv i32 %div4.i.i, %conv5.i.i
  %1 = trunc i32 %div6.i.i to i16
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %1, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %2 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %12, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %8, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %3 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = getelementptr inbounds i16, ptr %3, i64 8
  %wide.load38 = load <8 x i16>, ptr %4, align 2, !tbaa !30
  %5 = add <8 x i16> %wide.load, %vec.phi
  %6 = add <8 x i16> %wide.load38, %vec.phi37
  %7 = add <8 x i16> %5, %broadcast.splat
  %8 = add <8 x i16> %6, %broadcast.splat40
  %index.next = add nuw i64 %index, 16
  %9 = icmp eq i64 %index.next, %n.vec
  br i1 %9, label %middle.block, label %vector.body, !llvm.loop !208

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %8, %7
  %10 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %10, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %12 = phi i32 [ %.pre34, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %12
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !209

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %13 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %conv7.i.us = add i16 %13, %result.027.us
  %add.us = add i16 %conv7.i.us, %1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !210

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %10, %middle.block ], [ %add.us, %for.body3.us ]
  %14 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %14 to i16
  %conv7.i.i.us = add i16 %1, %conv.i.us
  %mul.i.us = mul i16 %conv7.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit
  %15 = phi i32 [ %18, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %16 = phi double [ %19, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %16 to i16
  %conv7.i.i = add i16 %1, %conv.i
  %mul.i = mul i16 %conv7.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %18 = phi i32 [ %15, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %19 = phi double [ %16, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %18
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !209

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs32custom_divide_multiple_variable2IsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %20 = load i64, ptr @start_time, align 8, !tbaa !26
  %21 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %21, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %22 = load i32, ptr @current_test, align 4, !tbaa !9
  %23 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %22, %23
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %24 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %add.i = add nsw i32 %24, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %21, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %25)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %26 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %27 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %20
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %26 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %27, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %27, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %26, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp32 = icmp sgt i32 %0, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp229 = icmp sgt i32 %count, 0
  %conv16.i = zext i16 %v1 to i32
  %conv2.i.i = sext i16 %v2 to i32
  %conv3.i.i = sext i16 %v3 to i32
  %mul.i.i = mul nsw i32 %conv3.i.i, %conv2.i.i
  %conv4.i.i = sext i16 %v4 to i32
  %div.i.i = sdiv i32 %mul.i.i, %conv4.i.i
  %1 = trunc i32 %div.i.i to i16
  br i1 %cmp229, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre35 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i32> poison, i32 %conv16.i, i64 0
  %broadcast.splat = shufflevector <8 x i32> %broadcast.splatinsert, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <8 x i32> poison, i32 %conv16.i, i64 0
  %broadcast.splat43 = shufflevector <8 x i32> %broadcast.splatinsert42, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <8 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat45 = shufflevector <8 x i32> %broadcast.splatinsert44, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert46 = insertelement <8 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat47 = shufflevector <8 x i32> %broadcast.splatinsert46, <8 x i32> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %2 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %18, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ]
  %i.033.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi40 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %3 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = getelementptr inbounds i16, ptr %3, i64 8
  %wide.load41 = load <8 x i16>, ptr %4, align 2, !tbaa !30
  %5 = zext <8 x i16> %wide.load to <8 x i32>
  %6 = zext <8 x i16> %wide.load41 to <8 x i32>
  %7 = add nuw nsw <8 x i32> %broadcast.splat, %5
  %8 = add nuw nsw <8 x i32> %broadcast.splat43, %6
  %9 = sub nsw <8 x i32> %7, %broadcast.splat45
  %10 = sub nsw <8 x i32> %8, %broadcast.splat47
  %11 = trunc <8 x i32> %9 to <8 x i16>
  %12 = trunc <8 x i32> %10 to <8 x i16>
  %13 = add <8 x i16> %vec.phi, %11
  %14 = add <8 x i16> %vec.phi40, %12
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !211

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.030.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre37, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.033.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !212

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.030.us = phi i16 [ %add.us, %for.body3.us ], [ %result.030.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %conv7.i.us = zext i16 %19 to i32
  %add.i.us = add nuw nsw i32 %conv7.i.us, %conv16.i
  %sub.i.us = sub nsw i32 %add.i.us, %div.i.i
  %conv5.i.us = trunc i32 %sub.i.us to i16
  %add.us = add i16 %result.030.us, %conv5.i.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !213

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %20 to i16
  %21 = add i16 %conv.i.us, %v1
  %conv5.i.i.us = sub i16 %21, %1
  %mul.i.us = mul i16 %conv5.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit
  %22 = phi i32 [ %26, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %27, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre35, %for.cond1.preheader.preheader ]
  %i.033 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %23 to i16
  %24 = add i16 %conv.i, %v1
  %conv5.i.i = sub i16 %24, %1
  %mul.i = mul i16 %conv5.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre36, %if.then.i ]
  %27 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.033, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !212

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs30custom_mixed_multiple_variableIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i27

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i27

if.then.i27:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i23 = add nsw i32 %32, 10
  store i32 %add.i23, ptr @allocated_results, align 4, !tbaa !9
  %conv.i24 = sext i32 %add.i23 to i64
  %mul.i25 = shl nsw i64 %conv.i24, 4
  %call.i26 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i25) #14
  store ptr %call.i26, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i26, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i27
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i27
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i28 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i26, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i20 = sub nsw i64 %call.i19, %28
  %conv.i21 = sitofp i64 %sub.i20 to double
  %div.i22 = fdiv double %conv.i21, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i22, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, %broadcast.splat
  %5 = and <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !214

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !215

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %and3.i.us = and i16 %12, %v1
  %add.us = add i16 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !216

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %and3.i.i.us = and i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %and3.i.i = and i16 %conv.i, %v1
  %mul.i = mul i16 %and3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !215

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs19custom_variable_andIsEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = and i16 %v2, %v1
  %2 = and i16 %1, %v3
  %3 = and i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = and i16 %v2, %v1
  %.scalar52 = and i16 %v2, %v1
  %.scalar53 = and i16 %.scalar, %v3
  %.scalar54 = and i16 %.scalar52, %v3
  %.scalar55 = and i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = and i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = and <8 x i16> %5, %wide.load
  %12 = and <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !217

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !218

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = and i16 %19, %v1
  %21 = and i16 %20, %v2
  %22 = and i16 %21, %v3
  %and712.i.us = and i16 %22, %v4
  %add.us = add i16 %and712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !219

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i16
  %and712.i.i.us = and i16 %3, %conv.i.us
  %mul.i.us = mul i16 %and712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i16
  %and712.i.i = and i16 %3, %conv.i
  %mul.i = mul i16 %and712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !218

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_andIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, %broadcast.splat
  %5 = or <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !220

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !221

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %or3.i.us = or i16 %12, %v1
  %add.us = add i16 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !222

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %or3.i.i.us = or i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %or3.i.i = or i16 %conv.i, %v1
  %mul.i = mul i16 %or3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !221

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs18custom_variable_orIsEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = or i16 %v2, %v1
  %2 = or i16 %1, %v3
  %3 = or i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = or i16 %v2, %v1
  %.scalar52 = or i16 %v2, %v1
  %.scalar53 = or i16 %.scalar, %v3
  %.scalar54 = or i16 %.scalar52, %v3
  %.scalar55 = or i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = or i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = or <8 x i16> %5, %wide.load
  %12 = or <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !223

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !224

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = or i16 %19, %v1
  %21 = or i16 %20, %v2
  %22 = or i16 %21, %v3
  %or712.i.us = or i16 %22, %v4
  %add.us = add i16 %or712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !225

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i16
  %or712.i.i.us = or i16 %3, %conv.i.us
  %mul.i.us = mul i16 %or712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i16
  %or712.i.i = or i16 %3, %conv.i
  %mul.i = mul i16 %or712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !224

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs27custom_multiple_variable_orIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, %broadcast.splat
  %5 = xor <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !226

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !227

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %xor3.i.us = xor i16 %12, %v1
  %add.us = add i16 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !228

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i16
  %xor3.i.i.us = xor i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i16
  %xor3.i.i = xor i16 %conv.i, %v1
  %mul.i = mul i16 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit

_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !227

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit, %_Z26check_shifted_variable_sumIs19custom_variable_xorIsEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef signext %v1, i16 noundef signext %v2, i16 noundef signext %v3, i16 noundef signext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = xor i16 %v2, %v1
  %2 = xor i16 %1, %v3
  %3 = xor i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = xor i16 %v2, %v1
  %.scalar52 = xor i16 %v2, %v1
  %.scalar53 = xor i16 %.scalar, %v3
  %.scalar54 = xor i16 %.scalar52, %v3
  %.scalar55 = xor i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = xor i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = xor <8 x i16> %5, %wide.load
  %12 = xor <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !229

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !230

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = xor i16 %19, %v1
  %21 = xor i16 %20, %v2
  %22 = xor i16 %21, %v3
  %xor712.i.us = xor i16 %22, %v4
  %add.us = add i16 %xor712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !231

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i16
  %xor712.i.i.us = xor i16 %3, %conv.i.us
  %mul.i.us = mul i16 %xor712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i16
  %xor712.i.i = xor i16 %3, %conv.i
  %mul.i = mul i16 %xor712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !230

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIs28custom_multiple_variable_xorIsEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, %broadcast.splat
  %5 = add <8 x i16> %vec.phi34, %broadcast.splat37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load35
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !232

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !233

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.024.us, %v1
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !234

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %add.i.i.us = add i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %add.i.i = add i16 %conv.i, %v1
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !233

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i17 = add nsw i32 %23, 10
  store i32 %add.i17, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i17 to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end12

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = trunc i32 %count to i16
  %2 = mul i16 %1, %v1
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us
  %3 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc11.us, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %4 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %4, align 2, !tbaa !30
  %5 = getelementptr inbounds i16, ptr %4, i64 8
  %wide.load39 = load <8 x i16>, ptr %5, align 2, !tbaa !30
  %6 = add <8 x i16> %wide.load, %vec.phi
  %7 = add <8 x i16> %wide.load39, %vec.phi38
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !235

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre35, %if.then.i.us ], [ %3, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc11.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc11.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end12, !llvm.loop !236

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i16 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.us = add i16 %12, %result.028.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !237

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %conv9.us = add i16 %add.us.lcssa, %2
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %add.i.i.us = add i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %conv9.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc11, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %add.i.i = add i16 %conv.i, %v1
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, %2
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc11 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc11, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end12, !llvm.loop !236

for.end12:                                        ; preds = %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt19custom_add_variableItEEvT_S2_.exit.us, %entry
  %call.i20 = tail call i64 @clock() #17
  store i64 %call.i20, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end12
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end12
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i20, %19
  %conv.i21 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i21, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %add.i = add i16 %v2, %v1
  %add3.i = add i16 %add.i, %v3
  %add5.i = add i16 %add3.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %add5.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %add5.i, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load38 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %broadcast.splat, %vec.phi
  %5 = add <8 x i16> %broadcast.splat40, %vec.phi37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load38
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !238

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !239

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add7.i.us = add i16 %add5.i, %result.027.us
  %add.us = add i16 %add7.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !240

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %add7.i.i.us = add i16 %add5.i, %conv.i.us
  %mul.i.us = mul i16 %add7.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %add7.i.i = add i16 %add5.i, %conv.i
  %mul.i = mul i16 %add7.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !239

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt28custom_add_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %23, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %19
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = sub <8 x i16> %vec.phi, %broadcast.splat
  %5 = sub <8 x i16> %vec.phi34, %broadcast.splat37
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load35
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !242

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub.i.us = sub i16 %result.024.us, %v1
  %add.us = add i16 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !243

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %sub.i.i.us = sub i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %sub.i.i = sub i16 %conv.i, %v1
  %mul.i = mul i16 %sub.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !242

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt19custom_sub_variableItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i16 = sub nsw i64 %call.i15, %19
  %conv.i17 = sitofp i64 %sub.i16 to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %1 = add i16 %v2, %v1
  %2 = add i16 %1, %v3
  %3 = add i16 %2, %v4
  br i1 %cmp230, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert43 = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat44 = shufflevector <8 x i16> %broadcast.splatinsert43, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.034.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi41 = phi <8 x i16> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %5, align 2, !tbaa !30
  %6 = getelementptr inbounds i16, ptr %5, i64 8
  %wide.load42 = load <8 x i16>, ptr %6, align 2, !tbaa !30
  %7 = sub <8 x i16> %vec.phi, %broadcast.splat
  %8 = sub <8 x i16> %vec.phi41, %broadcast.splat44
  %9 = add <8 x i16> %7, %wide.load
  %10 = add <8 x i16> %8, %wide.load42
  %index.next = add nuw i64 %index, 16
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !244

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %10, %9
  %12 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.031.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre38, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !245

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i16 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %15 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %sub7.i.us = sub i16 %result.031.us, %3
  %add.us = add i16 %sub7.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !246

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %16 to i16
  %sub7.i.i.us = sub i16 %conv.i.us, %3
  %mul.i.us = mul i16 %sub7.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %18 to i16
  %sub7.i.i = sub i16 %conv.i, %3
  %mul.i = mul i16 %sub7.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !245

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt28custom_sub_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %22
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i.i = mul i16 %v1, 8000
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert36 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat37 = shufflevector <8 x i16> %broadcast.splatinsert36, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load35 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %wide.load, %broadcast.splat
  %5 = mul <8 x i16> %wide.load35, %broadcast.splat37
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi34
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !247

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre31, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !248

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i16 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul.i15.us = mul i16 %12, %v1
  %add.us = add i16 %mul.i15.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !249

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %mul.i.us = mul i16 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %mul.i = mul i16 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !248

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt24custom_multiply_variableItEEvT_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i22 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i18 = mul i16 %v2, %v1
  %mul3.i = mul i16 %mul.i18, %v3
  %mul5.i = mul i16 %mul3.i, %v4
  %mul3.i.i = mul i16 %mul.i18, 8000
  %mul5.i.i = mul i16 %mul3.i.i, %v3
  %mul7.i.i = mul i16 %mul5.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %mul5.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %mul5.i, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load38 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = mul <8 x i16> %broadcast.splat, %wide.load
  %5 = mul <8 x i16> %broadcast.splat40, %wide.load38
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi37
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !250

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre34, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !251

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %mul7.i.us = mul i16 %mul5.i, %12
  %add.us = add i16 %mul7.i.us, %result.027.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !252

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %mul.i.us = mul i16 %mul7.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %mul.i = mul i16 %mul7.i.i, %conv.i
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !251

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt33custom_multiply_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %19
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %mul.i18 = mul i16 %v2, %v1
  %mul4.i = mul i16 %mul.i18, %v3
  %mul6.i = mul i16 %mul4.i, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %mul6.i, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <8 x i16> poison, i16 %mul6.i, i64 0
  %broadcast.splat41 = shufflevector <8 x i16> %broadcast.splatinsert40, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load39 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = add <8 x i16> %vec.phi, %broadcast.splat
  %5 = add <8 x i16> %vec.phi38, %broadcast.splat41
  %6 = add <8 x i16> %4, %wide.load
  %7 = add <8 x i16> %5, %wide.load39
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !253

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !254

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i16 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %result.028.us, %mul6.i
  %add.us = add i16 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !255

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %add.i.i.us = add i16 %mul6.i, %conv.i.us
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %add.i.i = add i16 %mul6.i, %conv.i
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !254

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt34custom_multiply_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i19 = tail call i64 @clock() #17
  store i64 %call.i19, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %23, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i19, %19
  %conv.i20 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i20, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre30, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !256

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi i16 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %5 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %6 = udiv i16 %5, %v1
  %add.us = add i16 %6, %result.023.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i16, ptr %first, i64 %indvars.iv.next
  %7 = load i16, ptr %arrayidx.us.1, align 2, !tbaa !30
  %8 = udiv i16 %7, %v1
  %add.us.1 = add i16 %8, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !257

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i16 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi i16 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i16, ptr %first, i64 %indvars.iv.unr
  %9 = load i16, ptr %arrayidx.us.epil, align 2, !tbaa !30
  %10 = udiv i16 %9, %v1
  %add.us.epil = add i16 %10, %result.023.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i16 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i16
  %12 = udiv i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %12, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %14 to i16
  %15 = udiv i16 %conv.i, %v1
  %mul.i = mul i16 %15, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !256

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt22custom_divide_variableItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !258

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.026.us = phi i16 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %4 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %5 = udiv i16 %4, %v1
  %6 = udiv i16 %5, %v2
  %7 = udiv i16 %6, %v3
  %8 = udiv i16 %7, %v4
  %add.us = add i16 %8, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !259

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %9 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %9 to i16
  %10 = udiv i16 %conv.i.us, %v1
  %11 = udiv i16 %10, %v2
  %12 = udiv i16 %11, %v3
  %13 = udiv i16 %12, %v4
  %mul.i.us = mul i16 %13, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %21, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %22, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %16 = udiv i16 %conv.i, %v1
  %17 = udiv i16 %16, %v2
  %18 = udiv i16 %17, %v3
  %19 = udiv i16 %18, %v4
  %mul.i = mul i16 %19, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %20 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %20)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %21 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %22 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %21
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !258

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt31custom_divide_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %23 = load i64, ptr @start_time, align 8, !tbaa !26
  %24 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %24, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %25, %26
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %27 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %26, %lor.lhs.false.i ]
  %add.i = add nsw i32 %27, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %24, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %28 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %28)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %29 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %30 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %23
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %29 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %30, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %30, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %29, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %1 = udiv i16 %v1, %v2
  %2 = udiv i16 %1, %v3
  %3 = udiv i16 %2, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <8 x i16> poison, i16 %3, i64 0
  %broadcast.splat40 = shufflevector <8 x i16> %broadcast.splatinsert39, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %4 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %14, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi37 = phi <8 x i16> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %5, align 2, !tbaa !30
  %6 = getelementptr inbounds i16, ptr %5, i64 8
  %wide.load38 = load <8 x i16>, ptr %6, align 2, !tbaa !30
  %7 = add <8 x i16> %wide.load, %vec.phi
  %8 = add <8 x i16> %wide.load38, %vec.phi37
  %9 = add <8 x i16> %7, %broadcast.splat
  %10 = add <8 x i16> %8, %broadcast.splat40
  %index.next = add nuw i64 %index, 16
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !260

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %10, %9
  %12 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre34, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !261

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i16 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %15 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %add.i.us = add i16 %15, %result.027.us
  %add.us = add i16 %add.i.us, %3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !262

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %16 to i16
  %add.i.i.us = add i16 %3, %conv.i.us
  %mul.i.us = mul i16 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %18 to i16
  %add.i.i = add i16 %3, %conv.i
  %mul.i = mul i16 %add.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc7, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !261

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt32custom_divide_multiple_variable2ItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end8
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %26, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %22
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp230 = icmp sgt i32 %count, 0
  %conv1.i = zext i16 %v1 to i32
  %conv2.i.i = zext i16 %v2 to i32
  %conv3.i.i = zext i16 %v3 to i32
  %mul.i.i = mul nuw nsw i32 %conv3.i.i, %conv2.i.i
  %conv4.i.i = zext i16 %v4 to i32
  %div.i.i = udiv i32 %mul.i.i, %conv4.i.i
  %1 = trunc i32 %div.i.i to i16
  br i1 %cmp230, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre36 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i32> poison, i32 %conv1.i, i64 0
  %broadcast.splat = shufflevector <8 x i32> %broadcast.splatinsert, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert43 = insertelement <8 x i32> poison, i32 %conv1.i, i64 0
  %broadcast.splat44 = shufflevector <8 x i32> %broadcast.splatinsert43, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert45 = insertelement <8 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat46 = shufflevector <8 x i32> %broadcast.splatinsert45, <8 x i32> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert47 = insertelement <8 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat48 = shufflevector <8 x i32> %broadcast.splatinsert47, <8 x i32> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %2 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %18, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ]
  %i.034.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc7.us, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi41 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %3 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = getelementptr inbounds i16, ptr %3, i64 8
  %wide.load42 = load <8 x i16>, ptr %4, align 2, !tbaa !30
  %5 = zext <8 x i16> %wide.load to <8 x i32>
  %6 = zext <8 x i16> %wide.load42 to <8 x i32>
  %7 = add nuw nsw <8 x i32> %broadcast.splat, %5
  %8 = add nuw nsw <8 x i32> %broadcast.splat44, %6
  %9 = sub nsw <8 x i32> %7, %broadcast.splat46
  %10 = sub nsw <8 x i32> %8, %broadcast.splat48
  %11 = trunc <8 x i32> %9 to <8 x i16>
  %12 = trunc <8 x i32> %10 to <8 x i16>
  %13 = add <8 x i16> %vec.phi, %11
  %14 = add <8 x i16> %vec.phi41, %12
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !263

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.031.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre38 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre38, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.034.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !264

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.031.us = phi i16 [ %add.us, %for.body3.us ], [ %result.031.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %conv.i18.us = zext i16 %19 to i32
  %add.i.us = add nuw nsw i32 %conv.i18.us, %conv1.i
  %sub.i.us = sub nsw i32 %add.i.us, %div.i.i
  %conv5.i.us = trunc i32 %sub.i.us to i16
  %add.us = add i16 %result.031.us, %conv5.i.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !265

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %20 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %20 to i16
  %21 = add i16 %conv.i.us, %v1
  %conv5.i.i.us = sub i16 %21, %1
  %mul.i.us = mul i16 %conv5.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit
  %22 = phi i32 [ %26, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %23 = phi double [ %27, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ %.pre36, %for.cond1.preheader.preheader ]
  %i.034 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %23 to i16
  %24 = add i16 %conv.i, %v1
  %conv5.i.i = sub i16 %24, %1
  %mul.i = mul i16 %conv5.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre37 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %22, %for.cond1.preheader ], [ %.pre37, %if.then.i ]
  %27 = phi double [ %23, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.034, 1
  %cmp = icmp slt i32 %inc7, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !264

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt30custom_mixed_multiple_variableItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i20 = tail call i64 @clock() #17
  store i64 %call.i20, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i28

lor.lhs.false.i:                                  ; preds = %for.end8
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i28

if.then.i28:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i24 = add nsw i32 %32, 10
  store i32 %add.i24, ptr @allocated_results, align 4, !tbaa !9
  %conv.i25 = sext i32 %add.i24 to i64
  %mul.i26 = shl nsw i64 %conv.i25, 4
  %call.i27 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i26) #14
  store ptr %call.i27, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i27, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i28
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i28
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i29 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i27, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i21 = sub nsw i64 %call.i20, %28
  %conv.i22 = sitofp i64 %sub.i21 to double
  %div.i23 = fdiv double %conv.i22, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i23, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = and <8 x i16> %wide.load, %broadcast.splat
  %5 = and <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !266

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !267

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %and3.i.us = and i16 %12, %v1
  %add.us = add i16 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !268

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %and3.i.i.us = and i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %and3.i.i = and i16 %conv.i, %v1
  %mul.i = mul i16 %and3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !267

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt19custom_variable_andItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = and i16 %v2, %v1
  %2 = and i16 %1, %v3
  %3 = and i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = and i16 %v2, %v1
  %.scalar52 = and i16 %v2, %v1
  %.scalar53 = and i16 %.scalar, %v3
  %.scalar54 = and i16 %.scalar52, %v3
  %.scalar55 = and i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = and i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = and <8 x i16> %5, %wide.load
  %12 = and <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !269

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !270

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = and i16 %19, %v1
  %21 = and i16 %20, %v2
  %22 = and i16 %21, %v3
  %and712.i.us = and i16 %22, %v4
  %add.us = add i16 %and712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !271

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i16
  %and712.i.i.us = and i16 %3, %conv.i.us
  %mul.i.us = mul i16 %and712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i16
  %and712.i.i = and i16 %3, %conv.i
  %mul.i = mul i16 %and712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !270

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_andItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = or <8 x i16> %wide.load, %broadcast.splat
  %5 = or <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !273

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %or3.i.us = or i16 %12, %v1
  %add.us = add i16 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !274

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %or3.i.i.us = or i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %or3.i.i = or i16 %conv.i, %v1
  %mul.i = mul i16 %or3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !273

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt18custom_variable_orItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = or i16 %v2, %v1
  %2 = or i16 %1, %v3
  %3 = or i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = or i16 %v2, %v1
  %.scalar52 = or i16 %v2, %v1
  %.scalar53 = or i16 %.scalar, %v3
  %.scalar54 = or i16 %.scalar52, %v3
  %.scalar55 = or i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = or i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = or <8 x i16> %5, %wide.load
  %12 = or <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !275

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !276

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = or i16 %19, %v1
  %21 = or i16 %20, %v2
  %22 = or i16 %21, %v3
  %or712.i.us = or i16 %22, %v4
  %add.us = add i16 %or712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !277

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i16
  %or712.i.i.us = or i16 %3, %conv.i.us
  %mul.i.us = mul i16 %or712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i16
  %or712.i.i = or i16 %3, %conv.i
  %mul.i = mul i16 %or712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !276

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt27custom_multiple_variable_orItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %broadcast.splatinsert = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat = shufflevector <8 x i16> %broadcast.splatinsert, <8 x i16> poison, <8 x i32> zeroinitializer
  %broadcast.splatinsert35 = insertelement <8 x i16> poison, i16 %v1, i64 0
  %broadcast.splat36 = shufflevector <8 x i16> %broadcast.splatinsert35, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <8 x i16> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %2, align 2, !tbaa !30
  %3 = getelementptr inbounds i16, ptr %2, i64 8
  %wide.load34 = load <8 x i16>, ptr %3, align 2, !tbaa !30
  %4 = xor <8 x i16> %wide.load, %broadcast.splat
  %5 = xor <8 x i16> %wide.load34, %broadcast.splat36
  %6 = add <8 x i16> %4, %vec.phi
  %7 = add <8 x i16> %5, %vec.phi33
  %index.next = add nuw i64 %index, 16
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !278

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %7, %6
  %9 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !279

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i16 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %12 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %xor3.i.us = xor i16 %12, %v1
  %add.us = add i16 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !280

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i16
  %xor3.i.i.us = xor i16 %conv.i.us, %v1
  %mul.i.us = mul i16 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i16
  %xor3.i.i = xor i16 %conv.i, %v1
  %mul.i = mul i16 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit

_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc7, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !279

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit, %_Z26check_shifted_variable_sumIt19custom_variable_xorItEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end8
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %19
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i16 noundef zeroext %v1, i16 noundef zeroext %v2, i16 noundef zeroext %v3, i16 noundef zeroext %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end8

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %1 = xor i16 %v2, %v1
  %2 = xor i16 %1, %v3
  %3 = xor i16 %2, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 16
  %n.vec = and i64 %wide.trip.count, 4294967280
  %.scalar = xor i16 %v2, %v1
  %.scalar52 = xor i16 %v2, %v1
  %.scalar53 = xor i16 %.scalar, %v3
  %.scalar54 = xor i16 %.scalar52, %v3
  %.scalar55 = xor i16 %.scalar53, %v4
  %4 = insertelement <8 x i16> poison, i16 %.scalar55, i64 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> poison, <8 x i32> zeroinitializer
  %.scalar56 = xor i16 %.scalar54, %v4
  %6 = insertelement <8 x i16> poison, i16 %.scalar56, i64 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc7.us, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <8 x i16> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <8 x i16> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i16, ptr %first, i64 %index
  %wide.load = load <8 x i16>, ptr %9, align 2, !tbaa !30
  %10 = getelementptr inbounds i16, ptr %9, i64 8
  %wide.load37 = load <8 x i16>, ptr %10, align 2, !tbaa !30
  %11 = xor <8 x i16> %5, %wide.load
  %12 = xor <8 x i16> %7, %wide.load37
  %13 = add <8 x i16> %11, %vec.phi
  %14 = add <8 x i16> %12, %vec.phi36
  %index.next = add nuw i64 %index, 16
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <8 x i16> %14, %13
  %16 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.026.us.ph = phi i16 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre33, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc7.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc7.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end8, !llvm.loop !282

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.026.us = phi i16 [ %add.us, %for.body3.us ], [ %result.026.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i16, ptr %first, i64 %indvars.iv
  %19 = load i16, ptr %arrayidx.us, align 2, !tbaa !30
  %20 = xor i16 %19, %v1
  %21 = xor i16 %20, %v2
  %22 = xor i16 %21, %v3
  %xor712.i.us = xor i16 %22, %v4
  %add.us = add i16 %xor712.i.us, %result.026.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !283

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i16 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i16
  %xor712.i.i.us = xor i16 %3, %conv.i.us
  %mul.i.us = mul i16 %xor712.i.i.us, 8000
  %cmp.i.i.us = icmp eq i16 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc7, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i16
  %xor712.i.i = xor i16 %3, %conv.i
  %mul.i = mul i16 %xor712.i.i, 8000
  %cmp.i.i = icmp eq i16 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc7 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc7, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end8, !llvm.loop !282

for.end8:                                         ; preds = %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIt28custom_multiple_variable_xorItEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i18 = tail call i64 @clock() #17
  store i64 %call.i18, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end8
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end8
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i18, %29
  %conv.i19 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i = sub i32 0, %v1
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi32, %broadcast.splat35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load33
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !284

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !285

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.021.us, %v1
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !286

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %add.i.i.us = add nsw i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %cmp.i.i = icmp eq i32 %conv.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !285

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %23, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end7

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  %mul = mul nsw i32 %v1, %count
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us
  %1 = phi i32 [ %9, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc6.us, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <4 x i32> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load34 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 8
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !287

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %5, %4
  %7 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc6.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc6.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end7, !llvm.loop !288

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i32 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %10 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.us = add nsw i32 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !289

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %add4.us = add nsw i32 %add.us.lcssa, %mul
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %11 to i32
  %add.i.i.us = add nsw i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add4.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit
  %12 = phi i32 [ %15, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc6, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %13 to i32
  %add.i.i = add nsw i32 %conv.i, %v1
  %mul.i = mul nsw i32 %add.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, %mul
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc6 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc6, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end7, !llvm.loop !288

for.end7:                                         ; preds = %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi19custom_add_variableIiEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end7
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end7
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %17
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %add.i = add i32 %v2, %v1
  %add1.i = add i32 %add.i, %v3
  %add2.i = add i32 %add1.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %add2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <4 x i32> poison, i32 %add2.i, i64 0
  %broadcast.splat38 = shufflevector <4 x i32> %broadcast.splatinsert37, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load36 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %broadcast.splat, %vec.phi
  %5 = add <4 x i32> %broadcast.splat38, %vec.phi35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load36
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !290

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !291

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i32 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add3.i.us = add i32 %add2.i, %result.024.us
  %add.us = add i32 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !292

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %add3.i.i.us = add i32 %add2.i, %conv.i.us
  %mul.i.us = mul nsw i32 %add3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %add3.i.i = sub i32 0, %conv.i
  %cmp.i.i = icmp eq i32 %add2.i, %add3.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !291

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi28custom_add_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = sub <4 x i32> %vec.phi, %broadcast.splat
  %5 = sub <4 x i32> %vec.phi32, %broadcast.splat35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load33
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !293

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !294

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub.i.us = sub i32 %result.021.us, %v1
  %add.us = add i32 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !295

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %sub.i.i.us = sub nsw i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %cmp.i.i = icmp eq i32 %conv.i, %v1
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !294

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi19custom_sub_variableIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %19
  %conv.i15 = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = add i32 %v2, %v1
  %2 = add i32 %1, %v3
  %3 = add i32 %2, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre34 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %3, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <4 x i32> poison, i32 %3, i64 0
  %broadcast.splat42 = shufflevector <4 x i32> %broadcast.splatinsert41, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi39 = phi <4 x i32> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %5, align 4, !tbaa !9
  %6 = getelementptr inbounds i32, ptr %5, i64 4
  %wide.load40 = load <4 x i32>, ptr %6, align 4, !tbaa !9
  %7 = sub <4 x i32> %vec.phi, %broadcast.splat
  %8 = sub <4 x i32> %vec.phi39, %broadcast.splat42
  %9 = add <4 x i32> %7, %wide.load
  %10 = add <4 x i32> %8, %wide.load40
  %index.next = add nuw i64 %index, 8
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !296

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %10, %9
  %12 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre36, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !297

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i32 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %15 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub3.i.us = sub i32 %result.028.us, %3
  %add.us = add i32 %sub3.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !298

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %16 to i32
  %sub3.i.i.us = sub i32 %conv.i.us, %3
  %mul.i.us = mul nsw i32 %sub3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre34, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %18 to i32
  %cmp.i.i = icmp eq i32 %3, %conv.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre35, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc5, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !297

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi28custom_sub_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %22
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  %mul.i.i = mul i32 %v1, 8000
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul nsw <4 x i32> %wide.load, %broadcast.splat
  %5 = mul nsw <4 x i32> %wide.load33, %broadcast.splat35
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !299

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !300

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul.i13.us = mul nsw i32 %12, %v1
  %add.us = add nsw i32 %mul.i13.us, %result.021.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !301

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %mul.i.us = mul i32 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %mul.i = mul i32 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !300

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi24custom_multiply_variableIiEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i16 = mul i32 %v2, %v1
  %mul1.i = mul i32 %mul.i16, %v3
  %mul2.i = mul i32 %mul1.i, %v4
  %mul1.i.i = mul i32 %mul.i16, 8000
  %mul2.i.i = mul i32 %mul1.i.i, %v3
  %mul3.i.i = mul i32 %mul2.i.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat38 = shufflevector <4 x i32> %broadcast.splatinsert37, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load36 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %broadcast.splat, %wide.load
  %5 = mul <4 x i32> %broadcast.splat38, %wide.load36
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi35
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !302

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !303

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i32 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul3.i.us = mul i32 %mul2.i, %12
  %add.us = add nsw i32 %mul3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !304

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %mul.i.us = mul i32 %mul3.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %mul.i = mul i32 %mul3.i.i, %conv.i
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !303

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi33custom_multiply_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %mul.i16 = mul nsw i32 %v2, %v1
  %mul1.i = mul nsw i32 %mul.i16, %v3
  %mul2.i = mul nsw i32 %mul1.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat39 = shufflevector <4 x i32> %broadcast.splatinsert38, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load37 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi36, %broadcast.splat39
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load37
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !305

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !306

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i32 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.025.us, %mul2.i
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !307

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %add.i.i.us = add nsw i32 %mul2.i, %conv.i.us
  %mul.i.us = mul nsw i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %add.i.i = sub i32 0, %conv.i
  %cmp.i.i = icmp eq i32 %mul2.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !306

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi34custom_multiply_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !308

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i32 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %5 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = sdiv i32 %5, %v1
  %add.us = add nsw i32 %div.i.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i32, ptr %first, i64 %indvars.iv.next
  %6 = load i32, ptr %arrayidx.us.1, align 4, !tbaa !9
  %div.i.us.1 = sdiv i32 %6, %v1
  %add.us.1 = add nsw i32 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !309

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i32 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.021.us.unr = phi i32 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i32, ptr %first, i64 %indvars.iv.unr
  %7 = load i32, ptr %arrayidx.us.epil, align 4, !tbaa !9
  %div.i.us.epil = sdiv i32 %7, %v1
  %add.us.epil = add nsw i32 %div.i.us.epil, %result.021.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i32 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i32
  %div.i.i.us = sdiv i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i32
  %div.i.i = sdiv i32 %conv.i, %v1
  %cmp.i.i = icmp eq i32 %div.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !308

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi22custom_divide_variableIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %14
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i15 = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !310

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.024.us = phi i32 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %4 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = sdiv i32 %4, %v1
  %div1.i.us = sdiv i32 %div.i.us, %v2
  %div2.i.us = sdiv i32 %div1.i.us, %v3
  %div3.i.us = sdiv i32 %div2.i.us, %v4
  %add.us = add nsw i32 %div3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !311

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %5 to i32
  %div.i.i.us = sdiv i32 %conv.i.us, %v1
  %div1.i.i.us = sdiv i32 %div.i.i.us, %v2
  %div2.i.i.us = sdiv i32 %div1.i.i.us, %v3
  %div3.i.i.us = sdiv i32 %div2.i.i.us, %v4
  %mul.i.us = mul nsw i32 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %7 to i32
  %div.i.i = sdiv i32 %conv.i, %v1
  %div1.i.i = sdiv i32 %div.i.i, %v2
  %div2.i.i = sdiv i32 %div1.i.i, %v3
  %div3.i.i = sdiv i32 %div2.i.i, %v4
  %cmp.i.i = icmp eq i32 %div3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !310

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi31custom_divide_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %11
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %div.i.i = sdiv i32 %v1, %v2
  %div1.i.i = sdiv i32 %div.i.i, %v3
  %div2.i.i = sdiv i32 %div1.i.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %div2.i.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <4 x i32> poison, i32 %div2.i.i, i64 0
  %broadcast.splat39 = shufflevector <4 x i32> %broadcast.splatinsert38, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %11, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us ]
  %i.028.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load37 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load37, %vec.phi36
  %6 = add <4 x i32> %4, %broadcast.splat
  %7 = add <4 x i32> %5, %broadcast.splat39
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !312

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !313

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i32 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %12, %result.025.us
  %add.us = add i32 %add.i.us, %div2.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !314

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %add.i.i.us = add nsw i32 %div2.i.i, %conv.i.us
  %mul.i.us = mul nsw i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %add.i.i = sub i32 0, %conv.i
  %cmp.i.i = icmp eq i32 %div2.i.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !313

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi32custom_divide_multiple_variable2IiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i.i = mul nsw i32 %v3, %v2
  %div.i.i = sdiv i32 %mul.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat41 = shufflevector <4 x i32> %broadcast.splatinsert40, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <4 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat43 = shufflevector <4 x i32> %broadcast.splatinsert42, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <4 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat45 = shufflevector <4 x i32> %broadcast.splatinsert44, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %13, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %8, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <4 x i32> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load39 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi38, %broadcast.splat41
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load39
  %8 = sub <4 x i32> %6, %broadcast.splat43
  %9 = sub <4 x i32> %7, %broadcast.splat45
  %index.next = add nuw i64 %index, 8
  %10 = icmp eq i64 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !315

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %9, %8
  %11 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %11, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %12)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %13
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !316

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i32 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %14 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.027.us, %v1
  %sub.i.us = add i32 %add.i.us, %14
  %add.us = sub i32 %sub.i.us, %div.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !317

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %11, %middle.block ], [ %add.us, %for.body3.us ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %15 to i32
  %add.i.i.us = add nsw i32 %conv.i.us, %v1
  %sub.i.i.us = sub i32 %add.i.i.us, %div.i.i
  %mul.i.us = mul nsw i32 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit
  %16 = phi i32 [ %19, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %20, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i32
  %add.i.i = add nsw i32 %conv.i, %v1
  %cmp.i.i = icmp eq i32 %add.i.i, %div.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %20 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !316

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi30custom_mixed_multiple_variableIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %25, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %21
  %conv.i19 = sitofp i64 %sub.i18 to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, %broadcast.splat
  %5 = and <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !318

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !319

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and.i.us = and i32 %12, %v1
  %add.us = add nsw i32 %and.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !320

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %and.i.i.us = and i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %and.i.i = and i32 %conv.i, %v1
  %cmp.i.i = icmp eq i32 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !319

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi19custom_variable_andIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = and i32 %v2, %v1
  %2 = and i32 %1, %v3
  %3 = and i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = and i32 %v2, %v1
  %.scalar50 = and i32 %v2, %v1
  %.scalar51 = and i32 %.scalar, %v3
  %.scalar52 = and i32 %.scalar50, %v3
  %.scalar53 = and i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = and i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = and <4 x i32> %5, %wide.load
  %12 = and <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !321

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !322

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = and i32 %19, %v1
  %21 = and i32 %20, %v2
  %22 = and i32 %21, %v3
  %and3.i.us = and i32 %22, %v4
  %add.us = add nsw i32 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !323

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i32
  %and3.i.i.us = and i32 %3, %conv.i.us
  %mul.i.us = mul nsw i32 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i32
  %and3.i.i = and i32 %3, %conv.i
  %cmp.i.i = icmp eq i32 %and3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !322

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_andIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, %broadcast.splat
  %5 = or <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !324

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !325

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or.i.us = or i32 %12, %v1
  %add.us = add nsw i32 %or.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !326

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %or.i.i.us = or i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %or.i.i = or i32 %conv.i, %v1
  %cmp.i.i = icmp eq i32 %or.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !325

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi18custom_variable_orIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = or i32 %v2, %v1
  %2 = or i32 %1, %v3
  %3 = or i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = or i32 %v2, %v1
  %.scalar50 = or i32 %v2, %v1
  %.scalar51 = or i32 %.scalar, %v3
  %.scalar52 = or i32 %.scalar50, %v3
  %.scalar53 = or i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = or i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = or <4 x i32> %5, %wide.load
  %12 = or <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !328

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = or i32 %19, %v1
  %21 = or i32 %20, %v2
  %22 = or i32 %21, %v3
  %or3.i.us = or i32 %22, %v4
  %add.us = add nsw i32 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !329

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i32
  %or3.i.i.us = or i32 %3, %conv.i.us
  %mul.i.us = mul nsw i32 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i32
  %or3.i.i = or i32 %3, %conv.i
  %cmp.i.i = icmp eq i32 %or3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !328

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi27custom_multiple_variable_orIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, %broadcast.splat
  %5 = xor <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !330

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !331

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor.i.us = xor i32 %12, %v1
  %add.us = add nsw i32 %xor.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !332

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i32
  %xor.i.i.us = xor i32 %conv.i.us, %v1
  %mul.i.us = mul nsw i32 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i32
  %cmp.i.i = icmp eq i32 %conv.i, %v1
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit

_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !331

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit, %_Z26check_shifted_variable_sumIi19custom_variable_xorIiEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = xor i32 %v2, %v1
  %2 = xor i32 %1, %v3
  %3 = xor i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = xor i32 %v2, %v1
  %.scalar50 = xor i32 %v2, %v1
  %.scalar51 = xor i32 %.scalar, %v3
  %.scalar52 = xor i32 %.scalar50, %v3
  %.scalar53 = xor i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = xor i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = xor <4 x i32> %5, %wide.load
  %12 = xor <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !333

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !334

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = xor i32 %19, %v1
  %21 = xor i32 %20, %v2
  %22 = xor i32 %21, %v3
  %xor3.i.us = xor i32 %22, %v4
  %add.us = add nsw i32 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !335

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i32
  %xor3.i.i.us = xor i32 %3, %conv.i.us
  %mul.i.us = mul nsw i32 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i32
  %cmp.i.i = icmp eq i32 %3, %conv.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !334

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIi28custom_multiple_variable_xorIiEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi32, %broadcast.splat35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load33
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !336

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !337

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.021.us, %v1
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !338

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %add.i.i.us = add i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %add.i.i = add i32 %conv.i, %v1
  %mul.i = mul i32 %add.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !337

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %23, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end7

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  %mul = mul i32 %v1, %count
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us
  %1 = phi i32 [ %9, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc6.us, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <4 x i32> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load34 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 8
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !339

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %5, %4
  %7 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc6.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc6.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end7, !llvm.loop !340

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i32 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %10 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.us = add i32 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !341

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %add4.us = add i32 %add.us.lcssa, %mul
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i32
  %add.i.i.us = add i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add4.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit
  %12 = phi i32 [ %15, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc6, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %13 to i32
  %add.i.i = add i32 %conv.i, %v1
  %mul.i = mul i32 %add.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, %mul
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc6 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc6, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end7, !llvm.loop !340

for.end7:                                         ; preds = %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj19custom_add_variableIjEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end7
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end7
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %17
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %add.i = add i32 %v2, %v1
  %add1.i = add i32 %add.i, %v3
  %add2.i = add i32 %add1.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %add2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <4 x i32> poison, i32 %add2.i, i64 0
  %broadcast.splat38 = shufflevector <4 x i32> %broadcast.splatinsert37, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load36 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %broadcast.splat, %vec.phi
  %5 = add <4 x i32> %broadcast.splat38, %vec.phi35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load36
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !342

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !343

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i32 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add3.i.us = add i32 %add2.i, %result.024.us
  %add.us = add i32 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !344

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %add3.i.i.us = add i32 %add2.i, %conv.i.us
  %mul.i.us = mul i32 %add3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %add3.i.i = add i32 %add2.i, %conv.i
  %mul.i = mul i32 %add3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !343

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj28custom_add_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = sub <4 x i32> %vec.phi, %broadcast.splat
  %5 = sub <4 x i32> %vec.phi32, %broadcast.splat35
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load33
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !345

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !346

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub.i.us = sub i32 %result.021.us, %v1
  %add.us = add i32 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !347

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %sub.i.i.us = sub i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %sub.i.i = sub i32 %conv.i, %v1
  %mul.i = mul i32 %sub.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !346

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj19custom_sub_variableIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %19
  %conv.i15 = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = add i32 %v2, %v1
  %2 = add i32 %1, %v3
  %3 = add i32 %2, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre34 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %3, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <4 x i32> poison, i32 %3, i64 0
  %broadcast.splat42 = shufflevector <4 x i32> %broadcast.splatinsert41, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi39 = phi <4 x i32> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %5, align 4, !tbaa !9
  %6 = getelementptr inbounds i32, ptr %5, i64 4
  %wide.load40 = load <4 x i32>, ptr %6, align 4, !tbaa !9
  %7 = sub <4 x i32> %vec.phi, %broadcast.splat
  %8 = sub <4 x i32> %vec.phi39, %broadcast.splat42
  %9 = add <4 x i32> %7, %wide.load
  %10 = add <4 x i32> %8, %wide.load40
  %index.next = add nuw i64 %index, 8
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !348

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %10, %9
  %12 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre36, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !349

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i32 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %15 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %sub3.i.us = sub i32 %result.028.us, %3
  %add.us = add i32 %sub3.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !350

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %16 to i32
  %sub3.i.i.us = sub i32 %conv.i.us, %3
  %mul.i.us = mul i32 %sub3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre34, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %18 to i32
  %sub3.i.i = sub i32 %conv.i, %3
  %mul.i = mul i32 %sub3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre35, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc5, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !349

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj28custom_sub_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %22
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  %mul.i.i = mul i32 %v1, 8000
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat35 = shufflevector <4 x i32> %broadcast.splatinsert34, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load33 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %wide.load, %broadcast.splat
  %5 = mul <4 x i32> %wide.load33, %broadcast.splat35
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi32
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !351

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !352

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i32 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul.i13.us = mul i32 %12, %v1
  %add.us = add i32 %mul.i13.us, %result.021.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !353

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %mul.i.us = mul i32 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %mul.i = mul i32 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !352

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj24custom_multiply_variableIjEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i16 = mul i32 %v2, %v1
  %mul1.i = mul i32 %mul.i16, %v3
  %mul2.i = mul i32 %mul1.i, %v4
  %mul1.i.i = mul i32 %mul.i16, 8000
  %mul2.i.i = mul i32 %mul1.i.i, %v3
  %mul3.i.i = mul i32 %mul2.i.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat38 = shufflevector <4 x i32> %broadcast.splatinsert37, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load36 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = mul <4 x i32> %broadcast.splat, %wide.load
  %5 = mul <4 x i32> %broadcast.splat38, %wide.load36
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi35
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !354

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !355

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i32 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %mul3.i.us = mul i32 %mul2.i, %12
  %add.us = add i32 %mul3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !356

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %mul.i.us = mul i32 %mul3.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %mul.i = mul i32 %mul3.i.i, %conv.i
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !355

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj33custom_multiply_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %mul.i16 = mul i32 %v2, %v1
  %mul1.i = mul i32 %mul.i16, %v3
  %mul2.i = mul i32 %mul1.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <4 x i32> poison, i32 %mul2.i, i64 0
  %broadcast.splat39 = shufflevector <4 x i32> %broadcast.splatinsert38, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load37 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi36, %broadcast.splat39
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load37
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !357

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !358

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i32 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.025.us, %mul2.i
  %add.us = add i32 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !359

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %add.i.i.us = add i32 %mul2.i, %conv.i.us
  %mul.i.us = mul i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %add.i.i = add i32 %mul2.i, %conv.i
  %mul.i = mul i32 %add.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !358

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj34custom_multiply_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !360

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i32 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %5 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = udiv i32 %5, %v1
  %add.us = add i32 %div.i.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i32, ptr %first, i64 %indvars.iv.next
  %6 = load i32, ptr %arrayidx.us.1, align 4, !tbaa !9
  %div.i.us.1 = udiv i32 %6, %v1
  %add.us.1 = add i32 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !361

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i32 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.021.us.unr = phi i32 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i32, ptr %first, i64 %indvars.iv.unr
  %7 = load i32, ptr %arrayidx.us.epil, align 4, !tbaa !9
  %div.i.us.epil = udiv i32 %7, %v1
  %add.us.epil = add i32 %div.i.us.epil, %result.021.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i32 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %8 to i32
  %div.i.i.us = udiv i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %10 to i32
  %div.i.i = udiv i32 %conv.i, %v1
  %mul.i = mul i32 %div.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !360

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj22custom_divide_variableIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %14
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i15 = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !362

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.024.us = phi i32 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %4 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %div.i.us = udiv i32 %4, %v1
  %div1.i.us = udiv i32 %div.i.us, %v2
  %div2.i.us = udiv i32 %div1.i.us, %v3
  %div3.i.us = udiv i32 %div2.i.us, %v4
  %add.us = add i32 %div3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !363

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %5 to i32
  %div.i.i.us = udiv i32 %conv.i.us, %v1
  %div1.i.i.us = udiv i32 %div.i.i.us, %v2
  %div2.i.i.us = udiv i32 %div1.i.i.us, %v3
  %div3.i.i.us = udiv i32 %div2.i.i.us, %v4
  %mul.i.us = mul i32 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %7 to i32
  %div.i.i = udiv i32 %conv.i, %v1
  %div1.i.i = udiv i32 %div.i.i, %v2
  %div2.i.i = udiv i32 %div1.i.i, %v3
  %div3.i.i = udiv i32 %div2.i.i, %v4
  %mul.i = mul i32 %div3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !362

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj31custom_divide_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %11
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %div.i.i = udiv i32 %v1, %v2
  %div1.i.i = udiv i32 %div.i.i, %v3
  %div2.i.i = udiv i32 %div1.i.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %div2.i.i, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <4 x i32> poison, i32 %div2.i.i, i64 0
  %broadcast.splat39 = shufflevector <4 x i32> %broadcast.splatinsert38, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %11, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us ]
  %i.028.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load37 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %wide.load, %vec.phi
  %5 = add <4 x i32> %wide.load37, %vec.phi36
  %6 = add <4 x i32> %4, %broadcast.splat
  %7 = add <4 x i32> %5, %broadcast.splat39
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !364

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !365

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i32 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %12, %result.025.us
  %add.us = add i32 %add.i.us, %div2.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !366

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %add.i.i.us = add i32 %div2.i.i, %conv.i.us
  %mul.i.us = mul i32 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %add.i.i = add i32 %div2.i.i, %conv.i
  %mul.i = mul i32 %add.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !365

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj32custom_divide_multiple_variable2IjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i.i = mul i32 %v3, %v2
  %div.i.i = udiv i32 %mul.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat41 = shufflevector <4 x i32> %broadcast.splatinsert40, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <4 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat43 = shufflevector <4 x i32> %broadcast.splatinsert42, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <4 x i32> poison, i32 %div.i.i, i64 0
  %broadcast.splat45 = shufflevector <4 x i32> %broadcast.splatinsert44, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %13, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %8, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <4 x i32> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load39 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = add <4 x i32> %vec.phi, %broadcast.splat
  %5 = add <4 x i32> %vec.phi38, %broadcast.splat41
  %6 = add <4 x i32> %4, %wide.load
  %7 = add <4 x i32> %5, %wide.load39
  %8 = sub <4 x i32> %6, %broadcast.splat43
  %9 = sub <4 x i32> %7, %broadcast.splat45
  %index.next = add nuw i64 %index, 8
  %10 = icmp eq i64 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !367

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %9, %8
  %11 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %11, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %12)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %13
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !368

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i32 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %14 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %add.i.us = add i32 %result.027.us, %v1
  %sub.i.us = add i32 %add.i.us, %14
  %add.us = sub i32 %sub.i.us, %div.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !369

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %11, %middle.block ], [ %add.us, %for.body3.us ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %15 to i32
  %add.i.i.us = add i32 %conv.i.us, %v1
  %sub.i.i.us = sub i32 %add.i.i.us, %div.i.i
  %mul.i.us = mul i32 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit
  %16 = phi i32 [ %19, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %20, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i32
  %add.i.i = add i32 %conv.i, %v1
  %sub.i.i = sub i32 %add.i.i, %div.i.i
  %mul.i = mul i32 %sub.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %20 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !368

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj30custom_mixed_multiple_variableIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %25, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %21
  %conv.i19 = sitofp i64 %sub.i18 to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = and <4 x i32> %wide.load, %broadcast.splat
  %5 = and <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !370

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !371

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %and.i.us = and i32 %12, %v1
  %add.us = add i32 %and.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !372

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %and.i.i.us = and i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %and.i.i = and i32 %conv.i, %v1
  %mul.i = mul i32 %and.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !371

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj19custom_variable_andIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = and i32 %v2, %v1
  %2 = and i32 %1, %v3
  %3 = and i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = and i32 %v2, %v1
  %.scalar50 = and i32 %v2, %v1
  %.scalar51 = and i32 %.scalar, %v3
  %.scalar52 = and i32 %.scalar50, %v3
  %.scalar53 = and i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = and i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = and <4 x i32> %5, %wide.load
  %12 = and <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !373

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !374

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = and i32 %19, %v1
  %21 = and i32 %20, %v2
  %22 = and i32 %21, %v3
  %and3.i.us = and i32 %22, %v4
  %add.us = add i32 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !375

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i32
  %and3.i.i.us = and i32 %3, %conv.i.us
  %mul.i.us = mul i32 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i32
  %and3.i.i = and i32 %3, %conv.i
  %mul.i = mul i32 %and3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !374

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_andIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = or <4 x i32> %wide.load, %broadcast.splat
  %5 = or <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !376

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !377

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %or.i.us = or i32 %12, %v1
  %add.us = add i32 %or.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !378

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %or.i.i.us = or i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %or.i.i = or i32 %conv.i, %v1
  %mul.i = mul i32 %or.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !377

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj18custom_variable_orIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = or i32 %v2, %v1
  %2 = or i32 %1, %v3
  %3 = or i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = or i32 %v2, %v1
  %.scalar50 = or i32 %v2, %v1
  %.scalar51 = or i32 %.scalar, %v3
  %.scalar52 = or i32 %.scalar50, %v3
  %.scalar53 = or i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = or i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = or <4 x i32> %5, %wide.load
  %12 = or <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !379

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !380

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = or i32 %19, %v1
  %21 = or i32 %20, %v2
  %22 = or i32 %21, %v3
  %or3.i.us = or i32 %22, %v4
  %add.us = add i32 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !381

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i32
  %or3.i.i.us = or i32 %3, %conv.i.us
  %mul.i.us = mul i32 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i32
  %or3.i.i = or i32 %3, %conv.i
  %mul.i = mul i32 %or3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !380

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj27custom_multiple_variable_orIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <4 x i32> poison, i32 %v1, i64 0
  %broadcast.splat34 = shufflevector <4 x i32> %broadcast.splatinsert33, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <4 x i32> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %2, align 4, !tbaa !9
  %3 = getelementptr inbounds i32, ptr %2, i64 4
  %wide.load32 = load <4 x i32>, ptr %3, align 4, !tbaa !9
  %4 = xor <4 x i32> %wide.load, %broadcast.splat
  %5 = xor <4 x i32> %wide.load32, %broadcast.splat34
  %6 = add <4 x i32> %4, %vec.phi
  %7 = add <4 x i32> %5, %vec.phi31
  %index.next = add nuw i64 %index, 8
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !382

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %7, %6
  %9 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !383

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i32 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %12 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %xor.i.us = xor i32 %12, %v1
  %add.us = add i32 %xor.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !384

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i32
  %xor.i.i.us = xor i32 %conv.i.us, %v1
  %mul.i.us = mul i32 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i32
  %xor.i.i = xor i32 %conv.i, %v1
  %mul.i = mul i32 %xor.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit

_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !383

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit, %_Z26check_shifted_variable_sumIj19custom_variable_xorIjEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i32 noundef %v1, i32 noundef %v2, i32 noundef %v3, i32 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = xor i32 %v2, %v1
  %2 = xor i32 %1, %v3
  %3 = xor i32 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 8
  %n.vec = and i64 %wide.trip.count, 4294967288
  %.scalar = xor i32 %v2, %v1
  %.scalar50 = xor i32 %v2, %v1
  %.scalar51 = xor i32 %.scalar, %v3
  %.scalar52 = xor i32 %.scalar50, %v3
  %.scalar53 = xor i32 %.scalar51, %v4
  %4 = insertelement <4 x i32> poison, i32 %.scalar53, i64 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> poison, <4 x i32> zeroinitializer
  %.scalar54 = xor i32 %.scalar52, %v4
  %6 = insertelement <4 x i32> poison, i32 %.scalar54, i64 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> poison, <4 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <4 x i32> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <4 x i32> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i32, ptr %first, i64 %index
  %wide.load = load <4 x i32>, ptr %9, align 4, !tbaa !9
  %10 = getelementptr inbounds i32, ptr %9, i64 4
  %wide.load35 = load <4 x i32>, ptr %10, align 4, !tbaa !9
  %11 = xor <4 x i32> %5, %wide.load
  %12 = xor <4 x i32> %7, %wide.load35
  %13 = add <4 x i32> %11, %vec.phi
  %14 = add <4 x i32> %12, %vec.phi34
  %index.next = add nuw i64 %index, 8
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !385

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %14, %13
  %16 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i32 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !386

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i32 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i32, ptr %first, i64 %indvars.iv
  %19 = load i32, ptr %arrayidx.us, align 4, !tbaa !9
  %20 = xor i32 %19, %v1
  %21 = xor i32 %20, %v2
  %22 = xor i32 %21, %v3
  %xor3.i.us = xor i32 %22, %v4
  %add.us = add i32 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !387

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i32 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i32
  %xor3.i.i.us = xor i32 %3, %conv.i.us
  %mul.i.us = mul i32 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i32 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i32
  %xor3.i.i = xor i32 %3, %conv.i
  %mul.i = mul i32 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !386

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIj28custom_multiple_variable_xorIjEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i = sub i64 0, %v1
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat35 = shufflevector <2 x i64> %broadcast.splatinsert34, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load33 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi32, %broadcast.splat35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load33
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !388

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !389

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i64 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.021.us, %v1
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !390

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %add.i.i.us = add nsw i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %cmp.i.i = icmp eq i64 %conv.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !389

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %23, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end7

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  %conv = sext i32 %count to i64
  %mul = mul nsw i64 %conv, %v1
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us
  %1 = phi i32 [ %9, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc6.us, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <2 x i64> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load34 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 4
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !391

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %5, %4
  %7 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc6.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc6.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end7, !llvm.loop !392

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i64 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %10 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.us = add nsw i64 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !393

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %add4.us = add nsw i64 %add.us.lcssa, %mul
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %11 to i64
  %add.i.i.us = add nsw i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add4.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit
  %12 = phi i32 [ %15, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc6, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %13 to i64
  %add.i.i = add nsw i64 %conv.i, %v1
  %mul.i = mul nsw i64 %add.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, %mul
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc6 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc6, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end7, !llvm.loop !392

for.end7:                                         ; preds = %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl19custom_add_variableIlEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end7
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end7
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %17
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %add.i = add i64 %v2, %v1
  %add1.i = add i64 %add.i, %v3
  %add2.i = add i64 %add1.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %add2.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <2 x i64> poison, i64 %add2.i, i64 0
  %broadcast.splat38 = shufflevector <2 x i64> %broadcast.splatinsert37, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load36 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %broadcast.splat, %vec.phi
  %5 = add <2 x i64> %broadcast.splat38, %vec.phi35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load36
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !394

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !395

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i64 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add3.i.us = add i64 %add2.i, %result.024.us
  %add.us = add i64 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !396

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %add3.i.i.us = add i64 %add2.i, %conv.i.us
  %mul.i.us = mul nsw i64 %add3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %add3.i.i = sub i64 0, %conv.i
  %cmp.i.i = icmp eq i64 %add2.i, %add3.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !395

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl28custom_add_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat35 = shufflevector <2 x i64> %broadcast.splatinsert34, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load33 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = sub <2 x i64> %vec.phi, %broadcast.splat
  %5 = sub <2 x i64> %vec.phi32, %broadcast.splat35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load33
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !397

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !398

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i64 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub.i.us = sub i64 %result.021.us, %v1
  %add.us = add i64 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !399

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %sub.i.i.us = sub nsw i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %cmp.i.i = icmp eq i64 %conv.i, %v1
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !398

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl19custom_sub_variableIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %19
  %conv.i15 = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = add i64 %v2, %v1
  %2 = add i64 %1, %v3
  %3 = add i64 %2, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre34 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %3, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <2 x i64> poison, i64 %3, i64 0
  %broadcast.splat42 = shufflevector <2 x i64> %broadcast.splatinsert41, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi39 = phi <2 x i64> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %5, align 8, !tbaa !26
  %6 = getelementptr inbounds i64, ptr %5, i64 2
  %wide.load40 = load <2 x i64>, ptr %6, align 8, !tbaa !26
  %7 = sub <2 x i64> %vec.phi, %broadcast.splat
  %8 = sub <2 x i64> %vec.phi39, %broadcast.splat42
  %9 = add <2 x i64> %7, %wide.load
  %10 = add <2 x i64> %8, %wide.load40
  %index.next = add nuw i64 %index, 4
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !400

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %10, %9
  %12 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre36, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !401

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i64 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %15 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub3.i.us = sub i64 %result.028.us, %3
  %add.us = add i64 %sub3.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !402

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %16 to i64
  %sub3.i.i.us = sub i64 %conv.i.us, %3
  %mul.i.us = mul nsw i64 %sub3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre34, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %18 to i64
  %cmp.i.i = icmp eq i64 %3, %conv.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre35, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc5, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !401

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl28custom_sub_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %22
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  %mul.i.i = mul i64 %v1, 8000
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !403

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul.i13.us = mul nsw i64 %5, %v1
  %add.us = add nsw i64 %mul.i13.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul.i13.us.1 = mul nsw i64 %6, %v1
  %add.us.1 = add nsw i64 %mul.i13.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul.i13.us.2 = mul nsw i64 %7, %v1
  %add.us.2 = add nsw i64 %mul.i13.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul.i13.us.3 = mul nsw i64 %8, %v1
  %add.us.3 = add nsw i64 %mul.i13.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !404

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul.i13.us.epil = mul nsw i64 %9, %v1
  %add.us.epil = add nsw i64 %mul.i13.us.epil, %result.021.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !405

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %10 to i64
  %mul.i.us = mul i64 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit
  %11 = phi i32 [ %14, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %12 to i64
  %mul.i = mul i64 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !403

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl24custom_multiply_variableIlEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %16
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i16 = mul i64 %v2, %v1
  %mul1.i = mul i64 %mul.i16, %v3
  %mul2.i = mul i64 %mul1.i, %v4
  %mul1.i.i = mul i64 %mul.i16, 8000
  %mul2.i.i = mul i64 %mul1.i.i, %v3
  %mul3.i.i = mul i64 %mul2.i.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !406

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul3.i.us = mul i64 %mul2.i, %5
  %add.us = add nsw i64 %mul3.i.us, %result.024.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul3.i.us.1 = mul i64 %mul2.i, %6
  %add.us.1 = add nsw i64 %mul3.i.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul3.i.us.2 = mul i64 %mul2.i, %7
  %add.us.2 = add nsw i64 %mul3.i.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul3.i.us.3 = mul i64 %mul2.i, %8
  %add.us.3 = add nsw i64 %mul3.i.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !407

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.024.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.024.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.024.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul3.i.us.epil = mul i64 %mul2.i, %9
  %add.us.epil = add nsw i64 %mul3.i.us.epil, %result.024.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !408

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %10 to i64
  %mul.i.us = mul i64 %mul3.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %14, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %12 to i64
  %mul.i = mul i64 %mul3.i.i, %conv.i
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !406

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl33custom_multiply_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %16
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %mul.i16 = mul nsw i64 %v2, %v1
  %mul1.i = mul nsw i64 %mul.i16, %v3
  %mul2.i = mul nsw i64 %mul1.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %mul2.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <2 x i64> poison, i64 %mul2.i, i64 0
  %broadcast.splat39 = shufflevector <2 x i64> %broadcast.splatinsert38, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load37 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi36, %broadcast.splat39
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load37
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !409

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !410

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i64 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.025.us, %mul2.i
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !411

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %add.i.i.us = add nsw i64 %mul2.i, %conv.i.us
  %mul.i.us = mul nsw i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %add.i.i = sub i64 0, %conv.i
  %cmp.i.i = icmp eq i64 %mul2.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !410

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl34custom_multiply_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !412

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = sdiv i64 %5, %v1
  %add.us = add nsw i64 %div.i.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div.i.us.1 = sdiv i64 %6, %v1
  %add.us.1 = add nsw i64 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !413

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.021.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div.i.us.epil = sdiv i64 %7, %v1
  %add.us.epil = add nsw i64 %div.i.us.epil, %result.021.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %8 to i64
  %div.i.i.us = sdiv i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %10 to i64
  %div.i.i = sdiv i64 %conv.i, %v1
  %cmp.i.i = icmp eq i64 %div.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !412

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl22custom_divide_variableIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %14
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i15 = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !414

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.024.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %4 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = sdiv i64 %4, %v1
  %div1.i.us = sdiv i64 %div.i.us, %v2
  %div2.i.us = sdiv i64 %div1.i.us, %v3
  %div3.i.us = sdiv i64 %div2.i.us, %v4
  %add.us = add nsw i64 %div3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !415

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %5 to i64
  %div.i.i.us = sdiv i64 %conv.i.us, %v1
  %div1.i.i.us = sdiv i64 %div.i.i.us, %v2
  %div2.i.i.us = sdiv i64 %div1.i.i.us, %v3
  %div3.i.i.us = sdiv i64 %div2.i.i.us, %v4
  %mul.i.us = mul nsw i64 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %7 to i64
  %div.i.i = sdiv i64 %conv.i, %v1
  %div1.i.i = sdiv i64 %div.i.i, %v2
  %div2.i.i = sdiv i64 %div1.i.i, %v3
  %div3.i.i = sdiv i64 %div2.i.i, %v4
  %cmp.i.i = icmp eq i64 %div3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !414

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl31custom_divide_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %11
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %div.i.i = sdiv i64 %v1, %v2
  %div1.i.i = sdiv i64 %div.i.i, %v3
  %div2.i.i = sdiv i64 %div1.i.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %div2.i.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <2 x i64> poison, i64 %div2.i.i, i64 0
  %broadcast.splat39 = shufflevector <2 x i64> %broadcast.splatinsert38, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %11, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us ]
  %i.028.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load37 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load37, %vec.phi36
  %6 = add <2 x i64> %4, %broadcast.splat
  %7 = add <2 x i64> %5, %broadcast.splat39
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !416

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !417

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i64 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %12, %result.025.us
  %add.us = add i64 %add.i.us, %div2.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !418

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %add.i.i.us = add nsw i64 %div2.i.i, %conv.i.us
  %mul.i.us = mul nsw i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %add.i.i = sub i64 0, %conv.i
  %cmp.i.i = icmp eq i64 %div2.i.i, %add.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !417

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl32custom_divide_multiple_variable2IlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i.i = mul nsw i64 %v3, %v2
  %div.i.i = sdiv i64 %mul.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat41 = shufflevector <2 x i64> %broadcast.splatinsert40, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <2 x i64> poison, i64 %div.i.i, i64 0
  %broadcast.splat43 = shufflevector <2 x i64> %broadcast.splatinsert42, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <2 x i64> poison, i64 %div.i.i, i64 0
  %broadcast.splat45 = shufflevector <2 x i64> %broadcast.splatinsert44, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %13, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %8, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <2 x i64> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load39 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi38, %broadcast.splat41
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load39
  %8 = sub <2 x i64> %6, %broadcast.splat43
  %9 = sub <2 x i64> %7, %broadcast.splat45
  %index.next = add nuw i64 %index, 4
  %10 = icmp eq i64 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !419

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %9, %8
  %11 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %11, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %12)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %13
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !420

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i64 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %14 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.027.us, %v1
  %sub.i.us = add i64 %add.i.us, %14
  %add.us = sub i64 %sub.i.us, %div.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !421

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %11, %middle.block ], [ %add.us, %for.body3.us ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %15 to i64
  %add.i.i.us = add nsw i64 %conv.i.us, %v1
  %sub.i.i.us = sub i64 %add.i.i.us, %div.i.i
  %mul.i.us = mul nsw i64 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit
  %16 = phi i32 [ %19, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %20, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %17 to i64
  %add.i.i = add nsw i64 %conv.i, %v1
  %cmp.i.i = icmp eq i64 %add.i.i, %div.i.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %20 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !420

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl30custom_mixed_multiple_variableIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %25, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %21
  %conv.i19 = sitofp i64 %sub.i18 to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, %broadcast.splat
  %5 = and <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !422

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !423

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and.i.us = and i64 %12, %v1
  %add.us = add nsw i64 %and.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !424

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %and.i.i.us = and i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %and.i.i = and i64 %conv.i, %v1
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !423

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl19custom_variable_andIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = and i64 %v2, %v1
  %2 = and i64 %1, %v3
  %3 = and i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = and i64 %v2, %v1
  %.scalar50 = and i64 %v2, %v1
  %.scalar51 = and i64 %.scalar, %v3
  %.scalar52 = and i64 %.scalar50, %v3
  %.scalar53 = and i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = and i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = and <2 x i64> %5, %wide.load
  %12 = and <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !425

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !426

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = and i64 %19, %v1
  %21 = and i64 %20, %v2
  %22 = and i64 %21, %v3
  %and3.i.us = and i64 %22, %v4
  %add.us = add nsw i64 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !427

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i64
  %and3.i.i.us = and i64 %3, %conv.i.us
  %mul.i.us = mul nsw i64 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i64
  %and3.i.i = and i64 %3, %conv.i
  %cmp.i.i = icmp eq i64 %and3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !426

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_andIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, %broadcast.splat
  %5 = or <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !428

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !429

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or.i.us = or i64 %12, %v1
  %add.us = add nsw i64 %or.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !430

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %or.i.i.us = or i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %or.i.i = or i64 %conv.i, %v1
  %cmp.i.i = icmp eq i64 %or.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !429

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl18custom_variable_orIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = or i64 %v2, %v1
  %2 = or i64 %1, %v3
  %3 = or i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = or i64 %v2, %v1
  %.scalar50 = or i64 %v2, %v1
  %.scalar51 = or i64 %.scalar, %v3
  %.scalar52 = or i64 %.scalar50, %v3
  %.scalar53 = or i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = or i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = or <2 x i64> %5, %wide.load
  %12 = or <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !431

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !432

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = or i64 %19, %v1
  %21 = or i64 %20, %v2
  %22 = or i64 %21, %v3
  %or3.i.us = or i64 %22, %v4
  %add.us = add nsw i64 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !433

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i64
  %or3.i.i.us = or i64 %3, %conv.i.us
  %mul.i.us = mul nsw i64 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i64
  %or3.i.i = or i64 %3, %conv.i
  %cmp.i.i = icmp eq i64 %or3.i.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !432

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl27custom_multiple_variable_orIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, %broadcast.splat
  %5 = xor <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !434

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !435

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor.i.us = xor i64 %12, %v1
  %add.us = add nsw i64 %xor.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !436

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %13 to i64
  %xor.i.i.us = xor i64 %conv.i.us, %v1
  %mul.i.us = mul nsw i64 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %15 to i64
  %cmp.i.i = icmp eq i64 %conv.i, %v1
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit

_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !435

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit, %_Z26check_shifted_variable_sumIl19custom_variable_xorIlEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = xor i64 %v2, %v1
  %2 = xor i64 %1, %v3
  %3 = xor i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = xor i64 %v2, %v1
  %.scalar50 = xor i64 %v2, %v1
  %.scalar51 = xor i64 %.scalar, %v3
  %.scalar52 = xor i64 %.scalar50, %v3
  %.scalar53 = xor i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = xor i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = xor <2 x i64> %5, %wide.load
  %12 = xor <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !437

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !438

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = xor i64 %19, %v1
  %21 = xor i64 %20, %v2
  %22 = xor i64 %21, %v3
  %xor3.i.us = xor i64 %22, %v4
  %add.us = add nsw i64 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !439

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptosi double %23 to i64
  %xor3.i.i.us = xor i64 %3, %conv.i.us
  %mul.i.us = mul nsw i64 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptosi double %25 to i64
  %cmp.i.i = icmp eq i64 %3, %conv.i
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !438

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIl28custom_multiple_variable_xorIlEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat35 = shufflevector <2 x i64> %broadcast.splatinsert34, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load33 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi32, %broadcast.splat35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load33
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !440

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !441

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i64 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.021.us, %v1
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !442

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %add.i.i.us = add i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %add.i.i = add i64 %conv.i, %v1
  %mul.i = mul i64 %add.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !441

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %23, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp24 = icmp sgt i32 %0, 0
  br i1 %cmp24, label %for.cond1.preheader.lr.ph, label %for.end7

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp221 = icmp sgt i32 %count, 0
  %conv = sext i32 %count to i64
  %mul = mul i64 %conv, %v1
  br i1 %cmp221, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre28 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us
  %1 = phi i32 [ %9, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.025.us = phi i32 [ %inc6.us, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %4, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi33 = phi <2 x i64> [ %5, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load34 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load34, %vec.phi33
  %index.next = add nuw i64 %index, 4
  %6 = icmp eq i64 %index.next, %n.vec
  br i1 %6, label %middle.block, label %vector.body, !llvm.loop !443

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %5, %4
  %7 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.022.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %7, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %9 = phi i32 [ %.pre30, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc6.us = add nuw nsw i32 %i.025.us, 1
  %cmp.us = icmp slt i32 %inc6.us, %9
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end7, !llvm.loop !444

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.022.us = phi i64 [ %add.us, %for.body3.us ], [ %result.022.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %10 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.us = add i64 %10, %result.022.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !445

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %7, %middle.block ], [ %add.us, %for.body3.us ]
  %add4.us = add i64 %add.us.lcssa, %mul
  %11 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %11 to i64
  %add.i.i.us = add i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add4.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit
  %12 = phi i32 [ %15, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %16, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ %.pre28, %for.cond1.preheader.preheader ]
  %i.025 = phi i32 [ %inc6, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %13 to i64
  %add.i.i = add i64 %conv.i, %v1
  %mul.i = mul i64 %add.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, %mul
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre29, %if.then.i ]
  %16 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc6 = add nuw nsw i32 %i.025, 1
  %cmp = icmp slt i32 %inc6, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end7, !llvm.loop !444

for.end7:                                         ; preds = %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm19custom_add_variableImEEvT_S2_.exit.us, %entry
  %call.i15 = tail call i64 @clock() #17
  store i64 %call.i15, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end7
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i20

lor.lhs.false.i:                                  ; preds = %for.end7
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i20

if.then.i20:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i17 = sext i32 %add.i to i64
  %mul.i18 = shl nsw i64 %conv.i17, 4
  %call.i19 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i18) #14
  store ptr %call.i19, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i19, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i20
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i20
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i19, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i15, %17
  %conv.i16 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i16, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %add.i = add i64 %v2, %v1
  %add1.i = add i64 %add.i, %v3
  %add2.i = add i64 %add1.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %add2.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert37 = insertelement <2 x i64> poison, i64 %add2.i, i64 0
  %broadcast.splat38 = shufflevector <2 x i64> %broadcast.splatinsert37, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi35 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load36 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %broadcast.splat, %vec.phi
  %5 = add <2 x i64> %broadcast.splat38, %vec.phi35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load36
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !446

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.024.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !447

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.024.us = phi i64 [ %add.us, %for.body3.us ], [ %result.024.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add3.i.us = add i64 %add2.i, %result.024.us
  %add.us = add i64 %add3.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !448

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %add3.i.i.us = add i64 %add2.i, %conv.i.us
  %mul.i.us = mul i64 %add3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %add3.i.i = add i64 %add2.i, %conv.i
  %mul.i = mul i64 %add3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !447

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm28custom_add_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert34 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat35 = shufflevector <2 x i64> %broadcast.splatinsert34, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi32 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load33 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = sub <2 x i64> %vec.phi, %broadcast.splat
  %5 = sub <2 x i64> %vec.phi32, %broadcast.splat35
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load33
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !449

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.021.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre29, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !450

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.021.us = phi i64 [ %add.us, %for.body3.us ], [ %result.021.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub.i.us = sub i64 %result.021.us, %v1
  %add.us = add i64 %sub.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !451

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %sub.i.i.us = sub i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %sub.i.i = sub i64 %conv.i, %v1
  %mul.i = mul i64 %sub.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !450

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm19custom_sub_variableImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %19
  %conv.i15 = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp227 = icmp sgt i32 %count, 0
  %1 = add i64 %v2, %v1
  %2 = add i64 %1, %v3
  %3 = add i64 %2, %v4
  br i1 %cmp227, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre34 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %3, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert41 = insertelement <2 x i64> poison, i64 %3, i64 0
  %broadcast.splat42 = shufflevector <2 x i64> %broadcast.splatinsert41, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
  %4 = phi i32 [ %14, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.031.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi39 = phi <2 x i64> [ %10, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %5 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %5, align 8, !tbaa !26
  %6 = getelementptr inbounds i64, ptr %5, i64 2
  %wide.load40 = load <2 x i64>, ptr %6, align 8, !tbaa !26
  %7 = sub <2 x i64> %vec.phi, %broadcast.splat
  %8 = sub <2 x i64> %vec.phi39, %broadcast.splat42
  %9 = add <2 x i64> %7, %wide.load
  %10 = add <2 x i64> %8, %wide.load40
  %index.next = add nuw i64 %index, 4
  %11 = icmp eq i64 %index.next, %n.vec
  br i1 %11, label %middle.block, label %vector.body, !llvm.loop !452

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %10, %9
  %12 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.028.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %12, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre36 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %14 = phi i32 [ %.pre36, %if.then.i.us ], [ %4, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.031.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %14
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !453

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.028.us = phi i64 [ %add.us, %for.body3.us ], [ %result.028.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %15 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %sub3.i.us = sub i64 %result.028.us, %3
  %add.us = add i64 %sub3.i.us, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !454

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %12, %middle.block ], [ %add.us, %for.body3.us ]
  %16 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %16 to i64
  %sub3.i.i.us = sub i64 %conv.i.us, %3
  %mul.i.us = mul i64 %sub3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit
  %17 = phi i32 [ %20, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %18 = phi double [ %21, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %.pre34, %for.cond1.preheader.preheader ]
  %i.031 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %18 to i64
  %sub3.i.i = sub i64 %conv.i, %3
  %mul.i = mul i64 %sub3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %19)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %20 = phi i32 [ %17, %for.cond1.preheader ], [ %.pre35, %if.then.i ]
  %21 = phi double [ %18, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.031, 1
  %cmp = icmp slt i32 %inc5, %20
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !453

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm28custom_sub_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %22 = load i64, ptr @start_time, align 8, !tbaa !26
  %23 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %23, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %24 = load i32, ptr @current_test, align 4, !tbaa !9
  %25 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %24, %25
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %26 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %25, %lor.lhs.false.i ]
  %add.i = add nsw i32 %26, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %23, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %27 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %27)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %28 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %29 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %22
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %28 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %29, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  %mul.i.i = mul i64 %v1, 8000
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !455

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul.i13.us = mul i64 %5, %v1
  %add.us = add i64 %mul.i13.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul.i13.us.1 = mul i64 %6, %v1
  %add.us.1 = add i64 %mul.i13.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul.i13.us.2 = mul i64 %7, %v1
  %add.us.2 = add i64 %mul.i13.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul.i13.us.3 = mul i64 %8, %v1
  %add.us.3 = add i64 %mul.i13.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !456

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul.i13.us.epil = mul i64 %9, %v1
  %add.us.epil = add i64 %mul.i13.us.epil, %result.021.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !457

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %10 to i64
  %mul.i.us = mul i64 %mul.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit
  %11 = phi i32 [ %14, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %12 to i64
  %mul.i = mul i64 %mul.i.i, %conv.i
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !455

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm24custom_multiply_variableImEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %16
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i16 = mul i64 %v2, %v1
  %mul1.i = mul i64 %mul.i16, %v3
  %mul2.i = mul i64 %mul1.i, %v4
  %mul1.i.i = mul i64 %mul.i16, 8000
  %mul2.i.i = mul i64 %mul1.i.i, %v3
  %mul3.i.i = mul i64 %mul2.i.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !458

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi i64 [ %add.us.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %mul3.i.us = mul i64 %mul2.i, %5
  %add.us = add i64 %mul3.i.us, %result.024.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %mul3.i.us.1 = mul i64 %mul2.i, %6
  %add.us.1 = add i64 %mul3.i.us.1, %add.us
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.1
  %7 = load i64, ptr %arrayidx.us.2, align 8, !tbaa !26
  %mul3.i.us.2 = mul i64 %mul2.i, %7
  %add.us.2 = add i64 %mul3.i.us.2, %add.us.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next.2
  %8 = load i64, ptr %arrayidx.us.3, align 8, !tbaa !26
  %mul3.i.us.3 = mul i64 %mul2.i, %8
  %add.us.3 = add i64 %mul3.i.us.3, %add.us.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !459

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.024.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.024.us.epil = phi i64 [ %add.us.epil, %for.body3.us.epil ], [ %result.024.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.epil
  %9 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %mul3.i.us.epil = mul i64 %mul2.i, %9
  %add.us.epil = add i64 %mul3.i.us.epil, %result.024.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !460

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %10 to i64
  %mul.i.us = mul i64 %mul3.i.i, %conv.i.us
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %14, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %15, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %12 to i64
  %mul.i = mul i64 %mul3.i.i, %conv.i
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %13)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %14 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %15 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %14
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !458

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm33custom_multiply_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %16 = load i64, ptr @start_time, align 8, !tbaa !26
  %17 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %17, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %18, %19
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %20 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %add.i = add nsw i32 %20, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %17, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %21 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %21)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %22 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %23 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %16
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %22 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %23, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %mul.i16 = mul i64 %v2, %v1
  %mul1.i = mul i64 %mul.i16, %v3
  %mul2.i = mul i64 %mul1.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %mul2.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <2 x i64> poison, i64 %mul2.i, i64 0
  %broadcast.splat39 = shufflevector <2 x i64> %broadcast.splatinsert38, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load37 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi36, %broadcast.splat39
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load37
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !461

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !462

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i64 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.025.us, %mul2.i
  %add.us = add i64 %add.i.us, %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !463

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %add.i.i.us = add i64 %mul2.i, %conv.i.us
  %mul.i.us = mul i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %add.i.i = add i64 %mul2.i, %conv.i
  %mul.i = mul i64 %add.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !462

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm34custom_multiply_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !464

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi i64 [ %add.us.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %5 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = udiv i64 %5, %v1
  %add.us = add i64 %div.i.us, %result.021.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.next
  %6 = load i64, ptr %arrayidx.us.1, align 8, !tbaa !26
  %div.i.us.1 = udiv i64 %6, %v1
  %add.us.1 = add i64 %div.i.us.1, %add.us
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !465

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi i64 [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.021.us.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds i64, ptr %first, i64 %indvars.iv.unr
  %7 = load i64, ptr %arrayidx.us.epil, align 8, !tbaa !26
  %div.i.us.epil = udiv i64 %7, %v1
  %add.us.epil = add i64 %div.i.us.epil, %result.021.us.unr
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi i64 [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %8 to i64
  %div.i.i.us = udiv i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %div.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit
  %9 = phi i32 [ %12, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %10 = phi double [ %13, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %10 to i64
  %div.i.i = udiv i64 %conv.i, %v1
  %mul.i = mul i64 %div.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %11 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %11)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %12 = phi i32 [ %9, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %13 = phi double [ %10, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %12
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !464

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm22custom_divide_variableImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %14 = load i64, ptr @start_time, align 8, !tbaa !26
  %15 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %15, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %17 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %16, %17
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %18 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %17, %lor.lhs.false.i ]
  %add.i = add nsw i32 %18, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %15, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %19 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %19)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %20 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %16, %lor.lhs.false.i ]
  %21 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %15, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %14
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i15 = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %20 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i
  store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %21, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %20, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us
  %1 = phi i32 [ %3, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %2 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %2)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = phi i32 [ %.pre32, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %3
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !466

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next, %for.body3.us ]
  %result.024.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %add.us, %for.body3.us ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %4 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %div.i.us = udiv i64 %4, %v1
  %div1.i.us = udiv i64 %div.i.us, %v2
  %div2.i.us = udiv i64 %div1.i.us, %v3
  %div3.i.us = udiv i64 %div2.i.us, %v4
  %add.us = add i64 %div3.i.us, %result.024.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !467

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us
  %5 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %5 to i64
  %div.i.i.us = udiv i64 %conv.i.us, %v1
  %div1.i.i.us = udiv i64 %div.i.i.us, %v2
  %div2.i.i.us = udiv i64 %div1.i.i.us, %v3
  %div3.i.i.us = udiv i64 %div2.i.i.us, %v4
  %mul.i.us = mul i64 %div3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit
  %6 = phi i32 [ %9, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %7 = phi double [ %10, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %7 to i64
  %div.i.i = udiv i64 %conv.i, %v1
  %div1.i.i = udiv i64 %div.i.i, %v2
  %div2.i.i = udiv i64 %div1.i.i, %v3
  %div3.i.i = udiv i64 %div2.i.i, %v4
  %mul.i = mul i64 %div3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %8 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %8)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %9 = phi i32 [ %6, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %10 = phi double [ %7, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %9
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !466

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm31custom_divide_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %11 = load i64, ptr @start_time, align 8, !tbaa !26
  %12 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %12, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %13 = load i32, ptr @current_test, align 4, !tbaa !9
  %14 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %13, %14
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %15 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %14, %lor.lhs.false.i ]
  %add.i = add nsw i32 %15, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %12, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %16 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %16)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %17 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %13, %lor.lhs.false.i ]
  %18 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %12, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %11
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %18, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %17, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %div.i.i = udiv i64 %v1, %v2
  %div1.i.i = udiv i64 %div.i.i, %v3
  %div2.i.i = udiv i64 %div1.i.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %div2.i.i, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert38 = insertelement <2 x i64> poison, i64 %div2.i.i, i64 0
  %broadcast.splat39 = shufflevector <2 x i64> %broadcast.splatinsert38, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %11, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us ]
  %i.028.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi36 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load37 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %wide.load, %vec.phi
  %5 = add <2 x i64> %wide.load37, %vec.phi36
  %6 = add <2 x i64> %4, %broadcast.splat
  %7 = add <2 x i64> %5, %broadcast.splat39
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !468

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.025.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre33, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !469

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.025.us = phi i64 [ %add.us, %for.body3.us ], [ %result.025.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %12, %result.025.us
  %add.us = add i64 %add.i.us, %div2.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !470

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %add.i.i.us = add i64 %div2.i.i, %conv.i.us
  %mul.i.us = mul i64 %add.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %add.i.i = add i64 %div2.i.i, %conv.i
  %mul.i = mul i64 %add.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !469

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm32custom_divide_multiple_variable2ImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %23, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i.i = mul i64 %v3, %v2
  %div.i.i = udiv i64 %mul.i.i, %v4
  br i1 %cmp226, label %for.cond1.preheader.lr.ph.split.us, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.lr.ph.split.us:               ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert40 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat41 = shufflevector <2 x i64> %broadcast.splatinsert40, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert42 = insertelement <2 x i64> poison, i64 %div.i.i, i64 0
  %broadcast.splat43 = shufflevector <2 x i64> %broadcast.splatinsert42, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert44 = insertelement <2 x i64> poison, i64 %div.i.i, i64 0
  %broadcast.splat45 = shufflevector <2 x i64> %broadcast.splatinsert44, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %for.cond1.preheader.lr.ph.split.us
  %1 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split.us ], [ %13, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ]
  %i.030.us = phi i32 [ 0, %for.cond1.preheader.lr.ph.split.us ], [ %inc5.us, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %8, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi38 = phi <2 x i64> [ %9, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load39 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = add <2 x i64> %vec.phi, %broadcast.splat
  %5 = add <2 x i64> %vec.phi38, %broadcast.splat41
  %6 = add <2 x i64> %4, %wide.load
  %7 = add <2 x i64> %5, %wide.load39
  %8 = sub <2 x i64> %6, %broadcast.splat43
  %9 = sub <2 x i64> %7, %broadcast.splat45
  %index.next = add nuw i64 %index, 4
  %10 = icmp eq i64 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !471

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %9, %8
  %11 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.027.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %11, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %12 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %12)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %13 = phi i32 [ %.pre35, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %13
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !472

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.027.us = phi i64 [ %add.us, %for.body3.us ], [ %result.027.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %14 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %add.i.us = add i64 %result.027.us, %v1
  %sub.i.us = add i64 %add.i.us, %14
  %add.us = sub i64 %sub.i.us, %div.i.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !473

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %11, %middle.block ], [ %add.us, %for.body3.us ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %15 to i64
  %add.i.i.us = add i64 %conv.i.us, %v1
  %sub.i.i.us = sub i64 %add.i.i.us, %div.i.i
  %mul.i.us = mul i64 %sub.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit
  %16 = phi i32 [ %19, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %17 = phi double [ %20, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %17 to i64
  %add.i.i = add i64 %conv.i, %v1
  %sub.i.i = sub i64 %add.i.i, %div.i.i
  %mul.i = mul i64 %sub.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %16, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %20 = phi double [ %17, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !472

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm30custom_mixed_multiple_variableImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %25, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %21
  %conv.i19 = sitofp i64 %sub.i18 to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = and <2 x i64> %wide.load, %broadcast.splat
  %5 = and <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !474

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !475

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %and.i.us = and i64 %12, %v1
  %add.us = add i64 %and.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !476

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %and.i.i.us = and i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %and.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %and.i.i = and i64 %conv.i, %v1
  %mul.i = mul i64 %and.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !475

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm19custom_variable_andImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = and i64 %v2, %v1
  %2 = and i64 %1, %v3
  %3 = and i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = and i64 %v2, %v1
  %.scalar50 = and i64 %v2, %v1
  %.scalar51 = and i64 %.scalar, %v3
  %.scalar52 = and i64 %.scalar50, %v3
  %.scalar53 = and i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = and i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = and <2 x i64> %5, %wide.load
  %12 = and <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !477

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !478

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = and i64 %19, %v1
  %21 = and i64 %20, %v2
  %22 = and i64 %21, %v3
  %and3.i.us = and i64 %22, %v4
  %add.us = add i64 %and3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !479

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i64
  %and3.i.i.us = and i64 %3, %conv.i.us
  %mul.i.us = mul i64 %and3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i64
  %and3.i.i = and i64 %3, %conv.i
  %mul.i = mul i64 %and3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !478

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_andImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = or <2 x i64> %wide.load, %broadcast.splat
  %5 = or <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !480

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !481

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %or.i.us = or i64 %12, %v1
  %add.us = add i64 %or.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !482

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %or.i.i.us = or i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %or.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %or.i.i = or i64 %conv.i, %v1
  %mul.i = mul i64 %or.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !481

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm18custom_variable_orImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = or i64 %v2, %v1
  %2 = or i64 %1, %v3
  %3 = or i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = or i64 %v2, %v1
  %.scalar50 = or i64 %v2, %v1
  %.scalar51 = or i64 %.scalar, %v3
  %.scalar52 = or i64 %.scalar50, %v3
  %.scalar53 = or i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = or i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = or <2 x i64> %5, %wide.load
  %12 = or <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !483

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !484

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = or i64 %19, %v1
  %21 = or i64 %20, %v2
  %22 = or i64 %21, %v3
  %or3.i.us = or i64 %22, %v4
  %add.us = add i64 %or3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !485

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i64
  %or3.i.i.us = or i64 %3, %conv.i.us
  %mul.i.us = mul i64 %or3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i64
  %or3.i.i = or i64 %3, %conv.i
  %mul.i = mul i64 %or3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !484

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm27custom_multiple_variable_orImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert33 = insertelement <2 x i64> poison, i64 %v1, i64 0
  %broadcast.splat34 = shufflevector <2 x i64> %broadcast.splatinsert33, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us
  %1 = phi i32 [ %11, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %6, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi31 = phi <2 x i64> [ %7, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %2 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %2, align 8, !tbaa !26
  %3 = getelementptr inbounds i64, ptr %2, i64 2
  %wide.load32 = load <2 x i64>, ptr %3, align 8, !tbaa !26
  %4 = xor <2 x i64> %wide.load, %broadcast.splat
  %5 = xor <2 x i64> %wide.load32, %broadcast.splat34
  %6 = add <2 x i64> %4, %vec.phi
  %7 = add <2 x i64> %5, %vec.phi31
  %index.next = add nuw i64 %index, 4
  %8 = icmp eq i64 %index.next, %n.vec
  br i1 %8, label %middle.block, label %vector.body, !llvm.loop !486

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %7, %6
  %9 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.020.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %9, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %10 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %10)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %11 = phi i32 [ %.pre28, %if.then.i.us ], [ %1, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %11
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !487

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.020.us = phi i64 [ %add.us, %for.body3.us ], [ %result.020.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %12 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %xor.i.us = xor i64 %12, %v1
  %add.us = add i64 %xor.i.us, %result.020.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !488

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %9, %middle.block ], [ %add.us, %for.body3.us ]
  %13 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %13 to i64
  %xor.i.i.us = xor i64 %conv.i.us, %v1
  %mul.i.us = mul i64 %xor.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit
  %14 = phi i32 [ %17, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %18, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %15 to i64
  %xor.i.i = xor i64 %conv.i, %v1
  %mul.i = mul i64 %xor.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit

_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !487

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit, %_Z26check_shifted_variable_sumIm19custom_variable_xorImEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, i64 noundef %v1, i64 noundef %v2, i64 noundef %v3, i64 noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %1 = xor i64 %v2, %v1
  %2 = xor i64 %1, %v3
  %3 = xor i64 %2, %v4
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %min.iters.check = icmp ult i32 %count, 4
  %n.vec = and i64 %wide.trip.count, 4294967292
  %.scalar = xor i64 %v2, %v1
  %.scalar50 = xor i64 %v2, %v1
  %.scalar51 = xor i64 %.scalar, %v3
  %.scalar52 = xor i64 %.scalar50, %v3
  %.scalar53 = xor i64 %.scalar51, %v4
  %4 = insertelement <2 x i64> poison, i64 %.scalar53, i64 0
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <2 x i32> zeroinitializer
  %.scalar54 = xor i64 %.scalar52, %v4
  %6 = insertelement <2 x i64> poison, i64 %.scalar54, i64 0
  %7 = shufflevector <2 x i64> %6, <2 x i64> poison, <2 x i32> zeroinitializer
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us
  %8 = phi i32 [ %18, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %min.iters.check, label %for.body3.us.preheader, label %vector.body

vector.body:                                      ; preds = %for.cond1.preheader.us, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for.cond1.preheader.us ]
  %vec.phi = phi <2 x i64> [ %13, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %vec.phi34 = phi <2 x i64> [ %14, %vector.body ], [ zeroinitializer, %for.cond1.preheader.us ]
  %9 = getelementptr inbounds i64, ptr %first, i64 %index
  %wide.load = load <2 x i64>, ptr %9, align 8, !tbaa !26
  %10 = getelementptr inbounds i64, ptr %9, i64 2
  %wide.load35 = load <2 x i64>, ptr %10, align 8, !tbaa !26
  %11 = xor <2 x i64> %5, %wide.load
  %12 = xor <2 x i64> %7, %wide.load35
  %13 = add <2 x i64> %11, %vec.phi
  %14 = add <2 x i64> %12, %vec.phi34
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !489

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <2 x i64> %14, %13
  %16 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %bin.rdx)
  br i1 %cmp.n, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.preheader

for.body3.us.preheader:                           ; preds = %for.cond1.preheader.us, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %n.vec, %middle.block ]
  %result.023.us.ph = phi i64 [ 0, %for.cond1.preheader.us ], [ %16, %middle.block ]
  br label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %17 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %17)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %18 = phi i32 [ %.pre31, %if.then.i.us ], [ %8, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %18
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !490

for.body3.us:                                     ; preds = %for.body3.us.preheader, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.us ], [ %indvars.iv.ph, %for.body3.us.preheader ]
  %result.023.us = phi i64 [ %add.us, %for.body3.us ], [ %result.023.us.ph, %for.body3.us.preheader ]
  %arrayidx.us = getelementptr inbounds i64, ptr %first, i64 %indvars.iv
  %19 = load i64, ptr %arrayidx.us, align 8, !tbaa !26
  %20 = xor i64 %19, %v1
  %21 = xor i64 %20, %v2
  %22 = xor i64 %21, %v3
  %xor3.i.us = xor i64 %22, %v4
  %add.us = add i64 %xor3.i.us, %result.023.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us, !llvm.loop !491

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us, %middle.block
  %add.us.lcssa = phi i64 [ %16, %middle.block ], [ %add.us, %for.body3.us ]
  %23 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptoui double %23 to i64
  %xor3.i.i.us = xor i64 %3, %conv.i.us
  %mul.i.us = mul i64 %xor3.i.i.us, 8000
  %cmp.i.i.us = icmp eq i64 %mul.i.us, %add.us.lcssa
  br i1 %cmp.i.i.us, label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit
  %24 = phi i32 [ %27, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %25 = phi double [ %28, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptoui double %25 to i64
  %xor3.i.i = xor i64 %3, %conv.i
  %mul.i = mul i64 %xor3.i.i, 8000
  %cmp.i.i = icmp eq i64 %mul.i, 0
  br i1 %cmp.i.i, label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %26 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %26)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %27 = phi i32 [ %24, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %28 = phi double [ %25, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %27
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !490

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIm28custom_multiple_variable_xorImEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %29 = load i64, ptr @start_time, align 8, !tbaa !26
  %30 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %30, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %31 = load i32, ptr @current_test, align 4, !tbaa !9
  %32 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %31, %32
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %33 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %32, %lor.lhs.false.i ]
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %30, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %34)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %35 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %36 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %29
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %35 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %36, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !492

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, %v1
  %add.us = fadd float %result.021.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, %v1
  %add.us.1 = fadd float %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, %v1
  %add.us.2 = fadd float %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, %v1
  %add.us.3 = fadd float %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !493

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, %v1
  %add.us.epil = fadd float %result.021.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !494

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, %v1
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, %v1
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit

_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !492

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i15 = add nsw i32 %25, 10
  store i32 %add.i15, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i15 to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %21
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  %conv = sitofp i32 %count to float
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.lr.ph.split

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i64 %wide.trip.count, 4294967288
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !495

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.us = fadd float %result.021.us, %5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.us.1 = fadd float %add.us, %6
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.us.2 = fadd float %add.us.1, %7
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.us.3 = fadd float %add.us.2, %8
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.us.4 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.3
  %9 = load float, ptr %arrayidx.us.4, align 4, !tbaa !40
  %add.us.4 = fadd float %add.us.3, %9
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.us.5 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.4
  %10 = load float, ptr %arrayidx.us.5, align 4, !tbaa !40
  %add.us.5 = fadd float %add.us.4, %10
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.us.6 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.5
  %11 = load float, ptr %arrayidx.us.6, align 4, !tbaa !40
  %add.us.6 = fadd float %add.us.5, %11
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.us.7 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.6
  %12 = load float, ptr %arrayidx.us.7, align 4, !tbaa !40
  %add.us.7 = fadd float %add.us.6, %12
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !496

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.7, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %13 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.us.epil = fadd float %result.021.us.epil, %13
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !497

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %14 = tail call float @llvm.fmuladd.f32(float %conv, float %v1, float %add.us.lcssa)
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %15 to float
  %add.i.i.us = fadd float %conv.i.us, %v1
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %14, %mul.i.us
  %16 = tail call float @llvm.fabs.f32(float %14)
  %conv1.i.i.us = fpext float %16 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %14, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %17 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %18 = fpext float %17 to double
  %cmp3.i.i.us = fcmp olt double %18, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader.lr.ph.split:                  ; preds = %for.cond1.preheader.lr.ph
  %19 = tail call float @llvm.fmuladd.f32(float %conv, float %v1, float 0.000000e+00)
  %20 = tail call float @llvm.fabs.f32(float %19)
  %conv1.i.i = fpext float %20 to double
  %cmp.i.i = fcmp ogt double %conv1.i.i, 1.000000e-04
  %div.i.i = select i1 %cmp.i.i, float %19, float 1.000000e+00
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph.split, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit
  %21 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split ], [ %26, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ]
  %22 = phi double [ %.pre27, %for.cond1.preheader.lr.ph.split ], [ %27, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ]
  %i.024 = phi i32 [ 0, %for.cond1.preheader.lr.ph.split ], [ %inc5, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit ]
  %conv.i = fptrunc double %22 to float
  %add.i.i = fadd float %conv.i, %v1
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float %19, %mul.i
  %reldiff.0.in.i.i = fdiv float %sub.i.i, %div.i.i
  %23 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i)
  %24 = fpext float %23 to double
  %cmp3.i.i = fcmp olt double %24, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit

_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %21, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %27 = phi double [ %22, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !495

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit, %_Z26check_shifted_variable_sumIf19custom_add_variableIfEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %28
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !498

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, %v1
  %add1.i.us = fadd float %add.i.us, %v2
  %add2.i.us = fadd float %add1.i.us, %v3
  %add3.i.us = fadd float %add2.i.us, %v4
  %add.us = fadd float %result.024.us, %add3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, %v1
  %add1.i.us.1 = fadd float %add.i.us.1, %v2
  %add2.i.us.1 = fadd float %add1.i.us.1, %v3
  %add3.i.us.1 = fadd float %add2.i.us.1, %v4
  %add.us.1 = fadd float %add.us, %add3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !499

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.024.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %7, %v1
  %add1.i.us.epil = fadd float %add.i.us.epil, %v2
  %add2.i.us.epil = fadd float %add1.i.us.epil, %v3
  %add3.i.us.epil = fadd float %add2.i.us.epil, %v4
  %add.us.epil = fadd float %result.024.us.unr, %add3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %add.i.i.us = fadd float %conv.i.us, %v1
  %add1.i.i.us = fadd float %add.i.i.us, %v2
  %add2.i.i.us = fadd float %add1.i.i.us, %v3
  %add3.i.i.us = fadd float %add2.i.i.us, %v4
  %mul.i.us = fmul float %add3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
  %12 = phi i32 [ %17, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %add.i.i = fadd float %conv.i, %v1
  %add1.i.i = fadd float %add.i.i, %v2
  %add2.i.i = fadd float %add1.i.i, %v3
  %add3.i.i = fadd float %add2.i.i, %v4
  %mul.i = fmul float %add3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !498

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf28custom_add_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !500

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %sub.i.us = fsub float %5, %v1
  %add.us = fadd float %result.021.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %sub.i.us.1 = fsub float %6, %v1
  %add.us.1 = fadd float %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %sub.i.us.2 = fsub float %7, %v1
  %add.us.2 = fadd float %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %sub.i.us.3 = fsub float %8, %v1
  %add.us.3 = fadd float %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !501

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %sub.i.us.epil = fsub float %9, %v1
  %add.us.epil = fadd float %result.021.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !502

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %sub.i.i.us = fsub float %conv.i.us, %v1
  %mul.i.us = fmul float %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %sub.i.i = fsub float %conv.i, %v1
  %mul.i = fmul float %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit

_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !500

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit, %_Z26check_shifted_variable_sumIf19custom_sub_variableIfEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %21
  %conv.i15 = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !503

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %sub.i.us = fsub float %5, %v1
  %sub1.i.us = fsub float %sub.i.us, %v2
  %sub2.i.us = fsub float %sub1.i.us, %v3
  %sub3.i.us = fsub float %sub2.i.us, %v4
  %add.us = fadd float %result.024.us, %sub3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %sub.i.us.1 = fsub float %6, %v1
  %sub1.i.us.1 = fsub float %sub.i.us.1, %v2
  %sub2.i.us.1 = fsub float %sub1.i.us.1, %v3
  %sub3.i.us.1 = fsub float %sub2.i.us.1, %v4
  %add.us.1 = fadd float %add.us, %sub3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !504

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.024.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %sub.i.us.epil = fsub float %7, %v1
  %sub1.i.us.epil = fsub float %sub.i.us.epil, %v2
  %sub2.i.us.epil = fsub float %sub1.i.us.epil, %v3
  %sub3.i.us.epil = fsub float %sub2.i.us.epil, %v4
  %add.us.epil = fadd float %result.024.us.unr, %sub3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %sub.i.i.us = fsub float %conv.i.us, %v1
  %sub1.i.i.us = fsub float %sub.i.i.us, %v2
  %sub2.i.i.us = fsub float %sub1.i.i.us, %v3
  %sub3.i.i.us = fsub float %sub2.i.i.us, %v4
  %mul.i.us = fmul float %sub3.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
  %12 = phi i32 [ %17, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %sub.i.i = fsub float %conv.i, %v1
  %sub1.i.i = fsub float %sub.i.i, %v2
  %sub2.i.i = fsub float %sub1.i.i, %v3
  %sub3.i.i = fsub float %sub2.i.i, %v4
  %mul.i = fmul float %sub3.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !503

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf28custom_sub_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i17 = sub nsw i64 %call.i16, %19
  %conv.i18 = sitofp i64 %sub.i17 to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !505

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %mul.i13.us = fmul float %5, %v1
  %add.us = fadd float %result.021.us, %mul.i13.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %mul.i13.us.1 = fmul float %6, %v1
  %add.us.1 = fadd float %add.us, %mul.i13.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %mul.i13.us.2 = fmul float %7, %v1
  %add.us.2 = fadd float %add.us.1, %mul.i13.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %mul.i13.us.3 = fmul float %8, %v1
  %add.us.3 = fadd float %add.us.2, %mul.i13.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !506

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %mul.i13.us.epil = fmul float %9, %v1
  %add.us.epil = fadd float %result.021.us.epil, %mul.i13.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !507

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %mul.i.i.us = fmul float %conv.i.us, %v1
  %mul.i.us = fmul float %mul.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %mul.i.i = fmul float %conv.i, %v1
  %mul.i = fmul float %mul.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit

_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !505

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit, %_Z26check_shifted_variable_sumIf24custom_multiply_variableIfEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %21
  %conv.i15 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i15, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !508

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %mul.i16.us = fmul float %5, %v1
  %mul1.i.us = fmul float %mul.i16.us, %v2
  %mul2.i.us = fmul float %mul1.i.us, %v3
  %mul3.i.us = fmul float %mul2.i.us, %v4
  %add.us = fadd float %result.024.us, %mul3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %mul.i16.us.1 = fmul float %6, %v1
  %mul1.i.us.1 = fmul float %mul.i16.us.1, %v2
  %mul2.i.us.1 = fmul float %mul1.i.us.1, %v3
  %mul3.i.us.1 = fmul float %mul2.i.us.1, %v4
  %add.us.1 = fadd float %add.us, %mul3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !509

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.024.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %mul.i16.us.epil = fmul float %7, %v1
  %mul1.i.us.epil = fmul float %mul.i16.us.epil, %v2
  %mul2.i.us.epil = fmul float %mul1.i.us.epil, %v3
  %mul3.i.us.epil = fmul float %mul2.i.us.epil, %v4
  %add.us.epil = fadd float %result.024.us.unr, %mul3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %mul.i.i.us = fmul float %conv.i.us, %v1
  %mul1.i.i.us = fmul float %mul.i.i.us, %v2
  %mul2.i.i.us = fmul float %mul1.i.i.us, %v3
  %mul3.i.i.us = fmul float %mul2.i.i.us, %v4
  %mul.i.us = fmul float %mul3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
  %12 = phi i32 [ %17, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %mul.i.i = fmul float %conv.i, %v1
  %mul1.i.i = fmul float %mul.i.i, %v2
  %mul2.i.i = fmul float %mul1.i.i, %v3
  %mul3.i.i = fmul float %mul2.i.i, %v4
  %mul.i = fmul float %mul3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !508

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf33custom_multiply_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %19
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %mul.i16 = fmul float %v1, %v2
  %mul1.i = fmul float %mul.i16, %v3
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !510

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %6 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %5)
  %add.us = fadd float %result.024.us, %6
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %7 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %8 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %7)
  %add.us.1 = fadd float %add.us, %8
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %9 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %10 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %9)
  %add.us.2 = fadd float %add.us.1, %10
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %11 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %12 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %11)
  %add.us.3 = fadd float %add.us.2, %12
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !511

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.024.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.024.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.024.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %13 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %14 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %13)
  %add.us.epil = fadd float %result.024.us.epil, %14
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !512

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %15 to float
  %16 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %conv.i.us)
  %mul.i.us = fmul float %16, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %17 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %17 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i.i.us
  %18 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %19 = fpext float %18 to double
  %cmp3.i.i.us = fcmp olt double %19, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit
  %20 = phi i32 [ %26, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %21 = phi double [ %27, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %21 to float
  %22 = tail call float @llvm.fmuladd.f32(float %mul1.i, float %v4, float %conv.i)
  %mul.i = fmul float %22, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %23 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %24 = fpext float %23 to double
  %cmp3.i.i = fcmp olt double %24, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %25 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %25)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %26 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %27 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %26
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !510

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf34custom_multiply_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %28 = load i64, ptr @start_time, align 8, !tbaa !26
  %29 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %29, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %30 = load i32, ptr @current_test, align 4, !tbaa !9
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %30, %31
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %32 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %31, %lor.lhs.false.i ]
  %add.i = add nsw i32 %32, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %29, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %33 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %33)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %34 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %30, %lor.lhs.false.i ]
  %35 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %28
  %conv.i18 = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i18, 1.000000e+06
  %idxprom.i = sext i32 %34 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %35, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %34, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp23 = icmp sgt i32 %0, 0
  br i1 %cmp23, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp220 = icmp sgt i32 %count, 0
  br i1 %cmp220, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre27 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.024.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre29 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us

_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre29, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.024.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !513

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.021.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %div.i.us = fdiv float %5, %v1
  %add.us = fadd float %result.021.us, %div.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %div.i.us.1 = fdiv float %6, %v1
  %add.us.1 = fadd float %add.us, %div.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %div.i.us.2 = fdiv float %7, %v1
  %add.us.2 = fadd float %add.us.1, %div.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %div.i.us.3 = fdiv float %8, %v1
  %add.us.3 = fadd float %add.us.2, %div.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !514

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.021.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.021.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.021.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %div.i.us.epil = fdiv float %9, %v1
  %add.us.epil = fadd float %result.021.us.epil, %div.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !515

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %div.i.i.us = fdiv float %conv.i.us, %v1
  %mul.i.us = fmul float %div.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i3.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i3.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit ], [ %.pre27, %for.cond1.preheader.preheader ]
  %i.024 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %div.i.i = fdiv float %conv.i, %v1
  %mul.i = fmul float %div.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit

_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre28, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.024, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !513

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit, %_Z26check_shifted_variable_sumIf22custom_divide_variableIfEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i19

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i19

if.then.i19:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i = add nsw i32 %25, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i16 = sext i32 %add.i to i64
  %mul.i17 = shl nsw i64 %conv.i16, 4
  %call.i18 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i17) #14
  store ptr %call.i18, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i18, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i19
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i19
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i18, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %21
  %conv.i14 = sitofp i64 %sub.i to double
  %div.i15 = fdiv double %conv.i14, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !516

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi float [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %div.i.us = fdiv float %5, %v1
  %div1.i.us = fdiv float %div.i.us, %v2
  %div2.i.us = fdiv float %div1.i.us, %v3
  %div3.i.us = fdiv float %div2.i.us, %v4
  %add.us = fadd float %result.024.us, %div3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %div.i.us.1 = fdiv float %6, %v1
  %div1.i.us.1 = fdiv float %div.i.us.1, %v2
  %div2.i.us.1 = fdiv float %div1.i.us.1, %v3
  %div3.i.us.1 = fdiv float %div2.i.us.1, %v4
  %add.us.1 = fadd float %add.us, %div3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !517

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.024.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.unr
  %7 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %div.i.us.epil = fdiv float %7, %v1
  %div1.i.us.epil = fdiv float %div.i.us.epil, %v2
  %div2.i.us.epil = fdiv float %div1.i.us.epil, %v3
  %div3.i.us.epil = fdiv float %div2.i.us.epil, %v4
  %add.us.epil = fadd float %result.024.us.unr, %div3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %8 to float
  %div.i.i.us = fdiv float %conv.i.us, %v1
  %div1.i.i.us = fdiv float %div.i.i.us, %v2
  %div2.i.i.us = fdiv float %div1.i.i.us, %v3
  %div3.i.i.us = fdiv float %div2.i.i.us, %v4
  %mul.i.us = fmul float %div3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %9 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %9 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i3.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i3.i.us
  %10 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %11 = fpext float %10 to double
  %cmp3.i.i.us = fcmp olt double %11, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
  %12 = phi i32 [ %17, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %13 = phi double [ %18, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %13 to float
  %div.i.i = fdiv float %conv.i, %v1
  %div1.i.i = fdiv float %div.i.i, %v2
  %div2.i.i = fdiv float %div1.i.i, %v3
  %div3.i.i = fdiv float %div2.i.i, %v4
  %mul.i = fmul float %div3.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %14 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %15 = fpext float %14 to double
  %cmp3.i.i = fcmp olt double %15, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %12, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %13, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !516

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf31custom_divide_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp224 = icmp sgt i32 %count, 0
  %div.i = fdiv float %v1, %v2
  %div1.i = fdiv float %div.i, %v3
  %div2.i = fdiv float %div1.i, %v4
  br i1 %cmp224, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre31 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.028.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre33, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.028.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !518

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.025.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %div2.i, %5
  %add.us = fadd float %result.025.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %div2.i, %6
  %add.us.1 = fadd float %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %div2.i, %7
  %add.us.2 = fadd float %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %div2.i, %8
  %add.us.3 = fadd float %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !519

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.025.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.025.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.025.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %div2.i, %9
  %add.us.epil = fadd float %result.025.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !520

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %div2.i, %conv.i.us
  %mul.i.us = fmul float %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i3.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i.i.us, %div.i3.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ %.pre31, %for.cond1.preheader.preheader ]
  %i.028 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %div2.i, %conv.i
  %mul.i = fmul float %add.i.i, 8.000000e+03
  %sub.i.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre32, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.028, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !518

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf32custom_divide_multiple_variable2IfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i23

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i23

if.then.i23:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i19 = add nsw i32 %25, 10
  store i32 %add.i19, ptr @allocated_results, align 4, !tbaa !9
  %conv.i20 = sext i32 %add.i19 to i64
  %mul.i21 = shl nsw i64 %conv.i20, 4
  %call.i22 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i21) #14
  store ptr %call.i22, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i22, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i23
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i23
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i22, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %21
  %conv.i17 = sitofp i64 %sub.i to double
  %div.i18 = fdiv double %conv.i17, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i18, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, float noundef %v1, float noundef %v2, float noundef %v3, float noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp226 = icmp sgt i32 %count, 0
  %mul.i16 = fmul float %v2, %v3
  %div.i = fdiv float %mul.i16, %v4
  br i1 %cmp226, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre33 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.030.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre35 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre35, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.030.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !521

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.027.us = phi float [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds float, ptr %first, i64 %indvars.iv
  %5 = load float, ptr %arrayidx.us, align 4, !tbaa !40
  %add.i.us = fadd float %5, %v1
  %sub.i.us = fsub float %add.i.us, %div.i
  %add.us = fadd float %result.027.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next
  %6 = load float, ptr %arrayidx.us.1, align 4, !tbaa !40
  %add.i.us.1 = fadd float %6, %v1
  %sub.i.us.1 = fsub float %add.i.us.1, %div.i
  %add.us.1 = fadd float %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.1
  %7 = load float, ptr %arrayidx.us.2, align 4, !tbaa !40
  %add.i.us.2 = fadd float %7, %v1
  %sub.i.us.2 = fsub float %add.i.us.2, %div.i
  %add.us.2 = fadd float %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds float, ptr %first, i64 %indvars.iv.next.2
  %8 = load float, ptr %arrayidx.us.3, align 4, !tbaa !40
  %add.i.us.3 = fadd float %8, %v1
  %sub.i.us.3 = fsub float %add.i.us.3, %div.i
  %add.us.3 = fadd float %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !522

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi float [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.027.us.unr = phi float [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.027.us.epil = phi float [ %add.us.epil, %for.body3.us.epil ], [ %result.027.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds float, ptr %first, i64 %indvars.iv.epil
  %9 = load float, ptr %arrayidx.us.epil, align 4, !tbaa !40
  %add.i.us.epil = fadd float %9, %v1
  %sub.i.us.epil = fsub float %add.i.us.epil, %div.i
  %add.us.epil = fadd float %result.027.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !523

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi float [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %conv.i.us = fptrunc double %10 to float
  %add.i.i.us = fadd float %conv.i.us, %v1
  %sub.i.i.us = fsub float %add.i.i.us, %div.i
  %mul.i.us = fmul float %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub float %add.us.lcssa, %mul.i.us
  %11 = tail call float @llvm.fabs.f32(float %add.us.lcssa)
  %conv1.i.i.us = fpext float %11 to double
  %cmp.i.i.us = fcmp ogt double %conv1.i.i.us, 1.000000e-04
  %div.i4.i.us = select i1 %cmp.i.i.us, float %add.us.lcssa, float 1.000000e+00
  %reldiff.0.in.i.i.us = fdiv float %sub.i3.i.us, %div.i4.i.us
  %12 = tail call float @llvm.fabs.f32(float %reldiff.0.in.i.i.us)
  %13 = fpext float %12 to double
  %cmp3.i.i.us = fcmp olt double %13, 1.000000e-03
  br i1 %cmp3.i.i.us, label %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit
  %14 = phi i32 [ %19, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %15 = phi double [ %20, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ %.pre33, %for.cond1.preheader.preheader ]
  %i.030 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %conv.i = fptrunc double %15 to float
  %add.i.i = fadd float %conv.i, %v1
  %sub.i.i = fsub float %add.i.i, %div.i
  %mul.i = fmul float %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub float 0.000000e+00, %mul.i
  %16 = tail call float @llvm.fabs.f32(float %sub.i3.i)
  %17 = fpext float %16 to double
  %cmp3.i.i = fcmp olt double %17, 1.000000e-03
  br i1 %cmp3.i.i, label %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %18 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %18)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %19 = phi i32 [ %14, %for.cond1.preheader ], [ %.pre34, %if.then.i ]
  %20 = phi double [ %15, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.030, 1
  %cmp = icmp slt i32 %inc5, %19
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !521

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumIf30custom_mixed_multiple_variableIfEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %21 = load i64, ptr @start_time, align 8, !tbaa !26
  %22 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %22, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i25

lor.lhs.false.i:                                  ; preds = %for.end6
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %23, %24
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i25

if.then.i25:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %25 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %24, %lor.lhs.false.i ]
  %add.i21 = add nsw i32 %25, 10
  store i32 %add.i21, ptr @allocated_results, align 4, !tbaa !9
  %conv.i22 = sext i32 %add.i21 to i64
  %mul.i23 = shl nsw i64 %conv.i22, 4
  %call.i24 = tail call ptr @realloc(ptr noundef %22, i64 noundef %mul.i23) #14
  store ptr %call.i24, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i24, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i25
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i25
  %26 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %26)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %27 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %23, %lor.lhs.false.i ]
  %28 = phi ptr [ %call.i24, %if.then.if.end5_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %21
  %conv.i19 = sitofp i64 %sub.i18 to double
  %div.i20 = fdiv double %conv.i19, 1.000000e+06
  %idxprom.i = sext i32 %27 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i
  store double %div.i20, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %28, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us

_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !524

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, %v1
  %add.us = fadd double %result.020.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, %v1
  %add.us.1 = fadd double %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, %v1
  %add.us.2 = fadd double %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, %v1
  %add.us.3 = fadd double %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !525

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, %v1
  %add.us.epil = fadd double %result.020.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !526

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, %v1
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, %v1
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit

_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !524

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i14 = add nsw i32 %23, 10
  store i32 %add.i14, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i14 to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  %conv = sitofp i32 %count to double
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.lr.ph.split

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 7
  %1 = icmp ult i32 %count, 8
  %unroll_iter = and i64 %wide.trip.count, 4294967288
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us

_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !527

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.7, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.7, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.us = fadd double %result.020.us, %5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.us.1 = fadd double %add.us, %6
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.us.2 = fadd double %add.us.1, %7
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.us.3 = fadd double %add.us.2, %8
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.us.4 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.3
  %9 = load double, ptr %arrayidx.us.4, align 8, !tbaa !28
  %add.us.4 = fadd double %add.us.3, %9
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.us.5 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.4
  %10 = load double, ptr %arrayidx.us.5, align 8, !tbaa !28
  %add.us.5 = fadd double %add.us.4, %10
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.us.6 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.5
  %11 = load double, ptr %arrayidx.us.6, align 8, !tbaa !28
  %add.us.6 = fadd double %add.us.5, %11
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.us.7 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.6
  %12 = load double, ptr %arrayidx.us.7, align 8, !tbaa !28
  %add.us.7 = fadd double %add.us.6, %12
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !528

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.7, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.7, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %13 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.us.epil = fadd double %result.020.us.epil, %13
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !529

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %14 = tail call double @llvm.fmuladd.f64(double %conv, double %v1, double %add.us.lcssa)
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %15, %v1
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %14, %mul.i.us
  %16 = tail call double @llvm.fabs.f64(double %14)
  %cmp.i.i.us = fcmp ogt double %16, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %14, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %17 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %17, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader.lr.ph.split:                  ; preds = %for.cond1.preheader.lr.ph
  %18 = tail call double @llvm.fmuladd.f64(double %conv, double %v1, double 0.000000e+00)
  %19 = tail call double @llvm.fabs.f64(double %18)
  %cmp.i.i = fcmp ogt double %19, 1.000000e-08
  %div.i.i = select i1 %cmp.i.i, double %18, double 1.000000e+00
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph.split, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit
  %20 = phi i32 [ %0, %for.cond1.preheader.lr.ph.split ], [ %24, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ]
  %21 = phi double [ %.pre26, %for.cond1.preheader.lr.ph.split ], [ %25, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ]
  %i.023 = phi i32 [ 0, %for.cond1.preheader.lr.ph.split ], [ %inc5, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit ]
  %add.i.i = fadd double %21, %v1
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double %18, %mul.i
  %reldiff.0.i.i = fdiv double %sub.i.i, %div.i.i
  %22 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i)
  %cmp1.i.i = fcmp olt double %22, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %23)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit

_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %24 = phi i32 [ %20, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %25 = phi double [ %21, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %24
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !527

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit, %_Z26check_shifted_variable_sumId19custom_add_variableIdEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %26 = load i64, ptr @start_time, align 8, !tbaa !26
  %27 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %27, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %28 = load i32, ptr @current_test, align 4, !tbaa !9
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %28, %29
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %30 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %add.i = add nsw i32 %30, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %27, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %31)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %32 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %33 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %26
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %32 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %32, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !530

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, %v1
  %add1.i.us = fadd double %add.i.us, %v2
  %add2.i.us = fadd double %add1.i.us, %v3
  %add3.i.us = fadd double %add2.i.us, %v4
  %add.us = fadd double %result.023.us, %add3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, %v1
  %add1.i.us.1 = fadd double %add.i.us.1, %v2
  %add2.i.us.1 = fadd double %add1.i.us.1, %v3
  %add3.i.us.1 = fadd double %add2.i.us.1, %v4
  %add.us.1 = fadd double %add.us, %add3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !531

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %7, %v1
  %add1.i.us.epil = fadd double %add.i.us.epil, %v2
  %add2.i.us.epil = fadd double %add1.i.us.epil, %v3
  %add3.i.us.epil = fadd double %add2.i.us.epil, %v4
  %add.us.epil = fadd double %result.023.us.unr, %add3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %8, %v1
  %add1.i.i.us = fadd double %add.i.i.us, %v2
  %add2.i.i.us = fadd double %add1.i.i.us, %v3
  %add3.i.i.us = fadd double %add2.i.i.us, %v4
  %mul.i.us = fmul double %add3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %15, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %12, %v1
  %add1.i.i = fadd double %add.i.i, %v2
  %add2.i.i = fadd double %add1.i.i, %v3
  %add3.i.i = fadd double %add2.i.i, %v4
  %mul.i = fmul double %add3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !530

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId28custom_add_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i17 = add nsw i32 %21, 10
  store i32 %add.i17, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i17 to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us

_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !532

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %sub.i.us = fsub double %5, %v1
  %add.us = fadd double %result.020.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %sub.i.us.1 = fsub double %6, %v1
  %add.us.1 = fadd double %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %sub.i.us.2 = fsub double %7, %v1
  %add.us.2 = fadd double %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %sub.i.us.3 = fsub double %8, %v1
  %add.us.3 = fadd double %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !533

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %sub.i.us.epil = fsub double %9, %v1
  %add.us.epil = fadd double %result.020.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !534

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %sub.i.i.us = fsub double %10, %v1
  %mul.i.us = fmul double %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %sub.i.i = fsub double %14, %v1
  %mul.i = fmul double %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit

_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !532

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit, %_Z26check_shifted_variable_sumId19custom_sub_variableIdEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i14 = sub nsw i64 %call.i13, %19
  %conv.i = sitofp i64 %sub.i14 to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !535

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %sub.i.us = fsub double %5, %v1
  %sub1.i.us = fsub double %sub.i.us, %v2
  %sub2.i.us = fsub double %sub1.i.us, %v3
  %sub3.i.us = fsub double %sub2.i.us, %v4
  %add.us = fadd double %result.023.us, %sub3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %sub.i.us.1 = fsub double %6, %v1
  %sub1.i.us.1 = fsub double %sub.i.us.1, %v2
  %sub2.i.us.1 = fsub double %sub1.i.us.1, %v3
  %sub3.i.us.1 = fsub double %sub2.i.us.1, %v4
  %add.us.1 = fadd double %add.us, %sub3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !536

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %sub.i.us.epil = fsub double %7, %v1
  %sub1.i.us.epil = fsub double %sub.i.us.epil, %v2
  %sub2.i.us.epil = fsub double %sub1.i.us.epil, %v3
  %sub3.i.us.epil = fsub double %sub2.i.us.epil, %v4
  %add.us.epil = fadd double %result.023.us.unr, %sub3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %sub.i.i.us = fsub double %8, %v1
  %sub1.i.i.us = fsub double %sub.i.i.us, %v2
  %sub2.i.i.us = fsub double %sub1.i.i.us, %v3
  %sub3.i.i.us = fsub double %sub2.i.i.us, %v4
  %mul.i.us = fmul double %sub3.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %15, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %sub.i.i = fsub double %12, %v1
  %sub1.i.i = fsub double %sub.i.i, %v2
  %sub2.i.i = fsub double %sub1.i.i, %v3
  %sub3.i.i = fsub double %sub2.i.i, %v4
  %mul.i = fmul double %sub3.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !535

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId28custom_sub_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i17 = sub nsw i64 %call.i16, %17
  %conv.i = sitofp i64 %sub.i17 to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us

_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !537

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %mul.i13.us = fmul double %5, %v1
  %add.us = fadd double %result.020.us, %mul.i13.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %mul.i13.us.1 = fmul double %6, %v1
  %add.us.1 = fadd double %add.us, %mul.i13.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %mul.i13.us.2 = fmul double %7, %v1
  %add.us.2 = fadd double %add.us.1, %mul.i13.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %mul.i13.us.3 = fmul double %8, %v1
  %add.us.3 = fadd double %add.us.2, %mul.i13.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !538

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %mul.i13.us.epil = fmul double %9, %v1
  %add.us.epil = fadd double %result.020.us.epil, %mul.i13.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !539

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %mul.i.i.us = fmul double %10, %v1
  %mul.i.us = fmul double %mul.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %mul.i.i = fmul double %14, %v1
  %mul.i = fmul double %mul.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit

_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !537

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit, %_Z26check_shifted_variable_sumId24custom_multiply_variableIdEEvT_S2_.exit.us, %entry
  %call.i14 = tail call i64 @clock() #17
  store i64 %call.i14, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i14, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !540

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %mul.i16.us = fmul double %5, %v1
  %mul1.i.us = fmul double %mul.i16.us, %v2
  %mul2.i.us = fmul double %mul1.i.us, %v3
  %mul3.i.us = fmul double %mul2.i.us, %v4
  %add.us = fadd double %result.023.us, %mul3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %mul.i16.us.1 = fmul double %6, %v1
  %mul1.i.us.1 = fmul double %mul.i16.us.1, %v2
  %mul2.i.us.1 = fmul double %mul1.i.us.1, %v3
  %mul3.i.us.1 = fmul double %mul2.i.us.1, %v4
  %add.us.1 = fadd double %add.us, %mul3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !541

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %mul.i16.us.epil = fmul double %7, %v1
  %mul1.i.us.epil = fmul double %mul.i16.us.epil, %v2
  %mul2.i.us.epil = fmul double %mul1.i.us.epil, %v3
  %mul3.i.us.epil = fmul double %mul2.i.us.epil, %v4
  %add.us.epil = fadd double %result.023.us.unr, %mul3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %mul.i.i.us = fmul double %8, %v1
  %mul1.i.i.us = fmul double %mul.i.i.us, %v2
  %mul2.i.i.us = fmul double %mul1.i.i.us, %v3
  %mul3.i.i.us = fmul double %mul2.i.i.us, %v4
  %mul.i.us = fmul double %mul3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %15, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %mul.i.i = fmul double %12, %v1
  %mul1.i.i = fmul double %mul.i.i, %v2
  %mul2.i.i = fmul double %mul1.i.i, %v3
  %mul3.i.i = fmul double %mul2.i.i, %v4
  %mul.i = fmul double %mul3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !540

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId33custom_multiply_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  %mul.i16 = fmul double %v1, %v2
  %mul1.i = fmul double %mul.i16, %v3
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !542

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %6 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %5)
  %add.us = fadd double %result.023.us, %6
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %7 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %8 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %7)
  %add.us.1 = fadd double %add.us, %8
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %9 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %10 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %9)
  %add.us.2 = fadd double %add.us.1, %10
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %11 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %12 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %11)
  %add.us.3 = fadd double %add.us.2, %12
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !543

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.023.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.023.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.023.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %13 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %14 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %13)
  %add.us.epil = fadd double %result.023.us.epil, %14
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !544

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %15 = load double, ptr @init_value, align 8, !tbaa !28
  %16 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %15)
  %mul.i.us = fmul double %16, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %17 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %17, 1.000000e-08
  %div.i.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i.i.us
  %18 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %18, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit
  %19 = phi i32 [ %24, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %20 = phi double [ %25, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %21 = tail call double @llvm.fmuladd.f64(double %mul1.i, double %v4, double %20)
  %mul.i = fmul double %21, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %22 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %22, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %23 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %23)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %24 = phi i32 [ %19, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %25 = phi double [ %20, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %24
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !542

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId34custom_multiply_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %26 = load i64, ptr @start_time, align 8, !tbaa !26
  %27 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %27, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %28 = load i32, ptr @current_test, align 4, !tbaa !9
  %29 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %28, %29
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %30 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %29, %lor.lhs.false.i ]
  %add.i = add nsw i32 %30, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %27, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %31 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %31)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %32 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %28, %lor.lhs.false.i ]
  %33 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %27, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i17, %26
  %conv.i = sitofp i64 %sub.i to double
  %div.i = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %32 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i
  store double %div.i, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %33, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %32, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp22 = icmp sgt i32 %0, 0
  br i1 %cmp22, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp219 = icmp sgt i32 %count, 0
  br i1 %cmp219, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre26 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.023.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre28 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us

_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre28, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.023.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !545

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.020.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %div.i.us = fdiv double %5, %v1
  %add.us = fadd double %result.020.us, %div.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %div.i.us.1 = fdiv double %6, %v1
  %add.us.1 = fadd double %add.us, %div.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %div.i.us.2 = fdiv double %7, %v1
  %add.us.2 = fadd double %add.us.1, %div.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %div.i.us.3 = fdiv double %8, %v1
  %add.us.3 = fadd double %add.us.2, %div.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !546

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.020.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.020.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.020.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %div.i.us.epil = fdiv double %9, %v1
  %add.us.epil = fadd double %result.020.us.epil, %div.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !547

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %div.i.i.us = fdiv double %10, %v1
  %mul.i.us = fmul double %div.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i3.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i3.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit ], [ %.pre26, %for.cond1.preheader.preheader ]
  %i.023 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %div.i.i = fdiv double %14, %v1
  %mul.i = fmul double %div.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre27 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit

_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre27, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.023, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !545

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit, %_Z26check_shifted_variable_sumId22custom_divide_variableIdEEvT_S2_.exit.us, %entry
  %call.i13 = tail call i64 @clock() #17
  store i64 %call.i13, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i18

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i18

if.then.i18:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i = add nsw i32 %23, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i15 = sext i32 %add.i to i64
  %mul.i16 = shl nsw i64 %conv.i15, 4
  %call.i17 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i16) #14
  store ptr %call.i17, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i17, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i18
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i18
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i17, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i13, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i14 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i14, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp25 = icmp sgt i32 %0, 0
  br i1 %cmp25, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp222 = icmp sgt i32 %count, 0
  br i1 %cmp222, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre29 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %1 = icmp eq i32 %count, 1
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.026.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre31, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.026.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !548

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.023.us = phi double [ %add.us.1, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.1, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %div.i.us = fdiv double %5, %v1
  %div1.i.us = fdiv double %div.i.us, %v2
  %div2.i.us = fdiv double %div1.i.us, %v3
  %div3.i.us = fdiv double %div2.i.us, %v4
  %add.us = fadd double %result.023.us, %div3.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %div.i.us.1 = fdiv double %6, %v1
  %div1.i.us.1 = fdiv double %div.i.us.1, %v2
  %div2.i.us.1 = fdiv double %div1.i.us.1, %v3
  %div3.i.us.1 = fdiv double %div2.i.us.1, %v4
  %add.us.1 = fadd double %add.us, %div3.i.us.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !549

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.1, %for.body3.us ]
  %result.023.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.1, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.unr
  %7 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %div.i.us.epil = fdiv double %7, %v1
  %div1.i.us.epil = fdiv double %div.i.us.epil, %v2
  %div2.i.us.epil = fdiv double %div1.i.us.epil, %v3
  %div3.i.us.epil = fdiv double %div2.i.us.epil, %v4
  %add.us.epil = fadd double %result.023.us.unr, %div3.i.us.epil
  br label %for.cond1.for.cond.cleanup_crit_edge.us

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %8 = load double, ptr @init_value, align 8, !tbaa !28
  %div.i.i.us = fdiv double %8, %v1
  %div1.i.i.us = fdiv double %div.i.i.us, %v2
  %div2.i.i.us = fdiv double %div1.i.i.us, %v3
  %div3.i.i.us = fdiv double %div2.i.i.us, %v4
  %mul.i.us = fmul double %div3.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %9 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %9, 1.000000e-08
  %div.i3.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i3.i.us
  %10 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %10, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
  %11 = phi i32 [ %15, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %12 = phi double [ %16, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %.pre29, %for.cond1.preheader.preheader ]
  %i.026 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %div.i.i = fdiv double %12, %v1
  %div1.i.i = fdiv double %div.i.i, %v2
  %div2.i.i = fdiv double %div1.i.i, %v3
  %div3.i.i = fdiv double %div2.i.i, %v4
  %mul.i = fmul double %div3.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %13 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %13, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %14 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %14)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre30 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %15 = phi i32 [ %11, %for.cond1.preheader ], [ %.pre30, %if.then.i ]
  %16 = phi double [ %12, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.026, 1
  %cmp = icmp slt i32 %inc5, %15
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !548

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId31custom_divide_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %17 = load i64, ptr @start_time, align 8, !tbaa !26
  %18 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %18, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i21

lor.lhs.false.i:                                  ; preds = %for.end6
  %19 = load i32, ptr @current_test, align 4, !tbaa !9
  %20 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %19, %20
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i21

if.then.i21:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %21 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %add.i = add nsw i32 %21, 10
  store i32 %add.i, ptr @allocated_results, align 4, !tbaa !9
  %conv.i18 = sext i32 %add.i to i64
  %mul.i19 = shl nsw i64 %conv.i18, 4
  %call.i20 = tail call ptr @realloc(ptr noundef %18, i64 noundef %mul.i19) #14
  store ptr %call.i20, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i20, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i21
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i21
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %23 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %19, %lor.lhs.false.i ]
  %24 = phi ptr [ %call.i20, %if.then.if.end5_crit_edge.i ], [ %18, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %17
  %conv.i = sitofp i64 %sub.i to double
  %div.i17 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %23 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i
  store double %div.i17, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %24, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp26 = icmp sgt i32 %0, 0
  br i1 %cmp26, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp223 = icmp sgt i32 %count, 0
  %div.i = fdiv double %v1, %v2
  %div1.i = fdiv double %div.i, %v3
  %div2.i = fdiv double %div1.i, %v4
  br i1 %cmp223, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre30 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.027.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre32 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre32, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.027.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !550

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.024.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %div2.i, %5
  %add.us = fadd double %result.024.us, %add.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %div2.i, %6
  %add.us.1 = fadd double %add.us, %add.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %div2.i, %7
  %add.us.2 = fadd double %add.us.1, %add.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %div2.i, %8
  %add.us.3 = fadd double %add.us.2, %add.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !551

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.024.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.024.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.024.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %div2.i, %9
  %add.us.epil = fadd double %result.024.us.epil, %add.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !552

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %div2.i, %10
  %mul.i.us = fmul double %add.i.i.us, 8.000000e+03
  %sub.i.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i3.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i.i.us, %div.i3.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ %.pre30, %for.cond1.preheader.preheader ]
  %i.027 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %div2.i, %14
  %mul.i = fmul double %add.i.i, 8.000000e+03
  %sub.i.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre31 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre31, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.027, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !550

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId32custom_divide_multiple_variable2IdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i16 = tail call i64 @clock() #17
  store i64 %call.i16, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i22

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i22

if.then.i22:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i18 = add nsw i32 %23, 10
  store i32 %add.i18, ptr @allocated_results, align 4, !tbaa !9
  %conv.i19 = sext i32 %add.i18 to i64
  %mul.i20 = shl nsw i64 %conv.i19, 4
  %call.i21 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i20) #14
  store ptr %call.i21, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i21, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i22
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i22
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i21, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i = sub nsw i64 %call.i16, %19
  %conv.i = sitofp i64 %sub.i to double
  %div.i17 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i17, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc(ptr noundef %first, i32 noundef %count, double noundef %v1, double noundef %v2, double noundef %v3, double noundef %v4, ptr noundef %label) local_unnamed_addr #9 comdat {
entry:
  %call.i = tail call i64 @clock() #17
  store i64 %call.i, ptr @start_time, align 8, !tbaa !26
  %0 = load i32, ptr @iterations, align 4, !tbaa !9
  %cmp28 = icmp sgt i32 %0, 0
  br i1 %cmp28, label %for.cond1.preheader.lr.ph, label %for.end6

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp225 = icmp sgt i32 %count, 0
  %mul.i16 = fmul double %v2, %v3
  %div.i = fdiv double %mul.i16, %v4
  br i1 %cmp225, label %for.cond1.preheader.us.preheader, label %for.cond1.preheader.preheader

for.cond1.preheader.preheader:                    ; preds = %for.cond1.preheader.lr.ph
  %.pre32 = load double, ptr @init_value, align 8, !tbaa !28
  br label %for.cond1.preheader

for.cond1.preheader.us.preheader:                 ; preds = %for.cond1.preheader.lr.ph
  %wide.trip.count = zext i32 %count to i64
  %xtraiter = and i64 %wide.trip.count, 3
  %1 = icmp ult i32 %count, 4
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %for.cond1.preheader.us

for.cond1.preheader.us:                           ; preds = %for.cond1.preheader.us.preheader, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us
  %2 = phi i32 [ %4, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ %0, %for.cond1.preheader.us.preheader ]
  %i.029.us = phi i32 [ %inc5.us, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us ], [ 0, %for.cond1.preheader.us.preheader ]
  br i1 %1, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us

if.then.i.us:                                     ; preds = %for.cond1.for.cond.cleanup_crit_edge.us
  %3 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i.us = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %3)
  %.pre34 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us

_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us: ; preds = %if.then.i.us, %for.cond1.for.cond.cleanup_crit_edge.us
  %4 = phi i32 [ %.pre34, %if.then.i.us ], [ %2, %for.cond1.for.cond.cleanup_crit_edge.us ]
  %inc5.us = add nuw nsw i32 %i.029.us, 1
  %cmp.us = icmp slt i32 %inc5.us, %4
  br i1 %cmp.us, label %for.cond1.preheader.us, label %for.end6, !llvm.loop !553

for.body3.us:                                     ; preds = %for.cond1.preheader.us, %for.body3.us
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %result.026.us = phi double [ %add.us.3, %for.body3.us ], [ 0.000000e+00, %for.cond1.preheader.us ]
  %niter = phi i64 [ %niter.next.3, %for.body3.us ], [ 0, %for.cond1.preheader.us ]
  %arrayidx.us = getelementptr inbounds double, ptr %first, i64 %indvars.iv
  %5 = load double, ptr %arrayidx.us, align 8, !tbaa !28
  %add.i.us = fadd double %5, %v1
  %sub.i.us = fsub double %add.i.us, %div.i
  %add.us = fadd double %result.026.us, %sub.i.us
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.us.1 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next
  %6 = load double, ptr %arrayidx.us.1, align 8, !tbaa !28
  %add.i.us.1 = fadd double %6, %v1
  %sub.i.us.1 = fsub double %add.i.us.1, %div.i
  %add.us.1 = fadd double %add.us, %sub.i.us.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.us.2 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.1
  %7 = load double, ptr %arrayidx.us.2, align 8, !tbaa !28
  %add.i.us.2 = fadd double %7, %v1
  %sub.i.us.2 = fsub double %add.i.us.2, %div.i
  %add.us.2 = fadd double %add.us.1, %sub.i.us.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.us.3 = getelementptr inbounds double, ptr %first, i64 %indvars.iv.next.2
  %8 = load double, ptr %arrayidx.us.3, align 8, !tbaa !28
  %add.i.us.3 = fadd double %8, %v1
  %sub.i.us.3 = fsub double %add.i.us.3, %div.i
  %add.us.3 = fadd double %add.us.2, %sub.i.us.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.next.3 = add i64 %niter, 4
  %niter.ncmp.3 = icmp eq i64 %niter.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, label %for.body3.us, !llvm.loop !554

for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa: ; preds = %for.body3.us, %for.cond1.preheader.us
  %add.us.lcssa.ph = phi double [ undef, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  %indvars.iv.unr = phi i64 [ 0, %for.cond1.preheader.us ], [ %indvars.iv.next.3, %for.body3.us ]
  %result.026.us.unr = phi double [ 0.000000e+00, %for.cond1.preheader.us ], [ %add.us.3, %for.body3.us ]
  br i1 %lcmp.mod.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil

for.body3.us.epil:                                ; preds = %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa, %for.body3.us.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body3.us.epil ], [ %indvars.iv.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %result.026.us.epil = phi double [ %add.us.epil, %for.body3.us.epil ], [ %result.026.us.unr, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.us.epil ], [ 0, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ]
  %arrayidx.us.epil = getelementptr inbounds double, ptr %first, i64 %indvars.iv.epil
  %9 = load double, ptr %arrayidx.us.epil, align 8, !tbaa !28
  %add.i.us.epil = fadd double %9, %v1
  %sub.i.us.epil = fsub double %add.i.us.epil, %div.i
  %add.us.epil = fadd double %result.026.us.epil, %sub.i.us.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.cond1.for.cond.cleanup_crit_edge.us, label %for.body3.us.epil, !llvm.loop !555

for.cond1.for.cond.cleanup_crit_edge.us:          ; preds = %for.body3.us.epil, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa
  %add.us.lcssa = phi double [ %add.us.lcssa.ph, %for.cond1.for.cond.cleanup_crit_edge.us.unr-lcssa ], [ %add.us.epil, %for.body3.us.epil ]
  %10 = load double, ptr @init_value, align 8, !tbaa !28
  %add.i.i.us = fadd double %10, %v1
  %sub.i.i.us = fsub double %add.i.i.us, %div.i
  %mul.i.us = fmul double %sub.i.i.us, 8.000000e+03
  %sub.i3.i.us = fsub double %add.us.lcssa, %mul.i.us
  %11 = tail call double @llvm.fabs.f64(double %add.us.lcssa)
  %cmp.i.i.us = fcmp ogt double %11, 1.000000e-08
  %div.i4.i.us = select i1 %cmp.i.i.us, double %add.us.lcssa, double 1.000000e+00
  %reldiff.0.i.i.us = fdiv double %sub.i3.i.us, %div.i4.i.us
  %12 = tail call double @llvm.fabs.f64(double %reldiff.0.i.i.us)
  %cmp1.i.i.us = fcmp olt double %12, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i.us, label %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, label %if.then.i.us

for.cond1.preheader:                              ; preds = %for.cond1.preheader.preheader, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit
  %13 = phi i32 [ %17, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %0, %for.cond1.preheader.preheader ]
  %14 = phi double [ %18, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ %.pre32, %for.cond1.preheader.preheader ]
  %i.029 = phi i32 [ %inc5, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit ], [ 0, %for.cond1.preheader.preheader ]
  %add.i.i = fadd double %14, %v1
  %sub.i.i = fsub double %add.i.i, %div.i
  %mul.i = fmul double %sub.i.i, 8.000000e+03
  %sub.i3.i = fsub double 0.000000e+00, %mul.i
  %15 = tail call double @llvm.fabs.f64(double %sub.i3.i)
  %cmp1.i.i = fcmp olt double %15, 0x3EB0C6F7A0B5ED8D
  br i1 %cmp1.i.i, label %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond1.preheader
  %16 = load i32, ptr @current_test, align 4, !tbaa !9
  %call2.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.179, i32 noundef %16)
  %.pre = load double, ptr @init_value, align 8, !tbaa !28
  %.pre33 = load i32, ptr @iterations, align 4, !tbaa !9
  br label %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit

_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit: ; preds = %for.cond1.preheader, %if.then.i
  %17 = phi i32 [ %13, %for.cond1.preheader ], [ %.pre33, %if.then.i ]
  %18 = phi double [ %14, %for.cond1.preheader ], [ %.pre, %if.then.i ]
  %inc5 = add nuw nsw i32 %i.029, 1
  %cmp = icmp slt i32 %inc5, %17
  br i1 %cmp, label %for.cond1.preheader, label %for.end6, !llvm.loop !553

for.end6:                                         ; preds = %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit, %_Z26check_shifted_variable_sumId30custom_mixed_multiple_variableIdEEvT_S2_S2_S2_S2_.exit.us, %entry
  %call.i17 = tail call i64 @clock() #17
  store i64 %call.i17, ptr @end_time, align 8, !tbaa !26
  %19 = load i64, ptr @start_time, align 8, !tbaa !26
  %20 = load ptr, ptr @results, align 8, !tbaa !5
  %cmp.i = icmp eq ptr %20, null
  br i1 %cmp.i, label %entry.if.then_crit_edge.i, label %lor.lhs.false.i

entry.if.then_crit_edge.i:                        ; preds = %for.end6
  %.pre.i = load i32, ptr @allocated_results, align 4, !tbaa !9
  br label %if.then.i24

lor.lhs.false.i:                                  ; preds = %for.end6
  %21 = load i32, ptr @current_test, align 4, !tbaa !9
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %cmp1.not.i = icmp slt i32 %21, %22
  br i1 %cmp1.not.i, label %_Z13record_resultdPKc.exit, label %if.then.i24

if.then.i24:                                      ; preds = %lor.lhs.false.i, %entry.if.then_crit_edge.i
  %23 = phi i32 [ %.pre.i, %entry.if.then_crit_edge.i ], [ %22, %lor.lhs.false.i ]
  %add.i20 = add nsw i32 %23, 10
  store i32 %add.i20, ptr @allocated_results, align 4, !tbaa !9
  %conv.i21 = sext i32 %add.i20 to i64
  %mul.i22 = shl nsw i64 %conv.i21, 4
  %call.i23 = tail call ptr @realloc(ptr noundef %20, i64 noundef %mul.i22) #14
  store ptr %call.i23, ptr @results, align 8, !tbaa !5
  %cmp2.i = icmp eq ptr %call.i23, null
  br i1 %cmp2.i, label %if.then3.i, label %if.then.if.end5_crit_edge.i

if.then.if.end5_crit_edge.i:                      ; preds = %if.then.i24
  %.pre10.i = load i32, ptr @current_test, align 4, !tbaa !9
  br label %_Z13record_resultdPKc.exit

if.then3.i:                                       ; preds = %if.then.i24
  %24 = load i32, ptr @allocated_results, align 4, !tbaa !9
  %call4.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %24)
  tail call void @exit(i32 noundef -1) #15
  unreachable

_Z13record_resultdPKc.exit:                       ; preds = %lor.lhs.false.i, %if.then.if.end5_crit_edge.i
  %25 = phi i32 [ %.pre10.i, %if.then.if.end5_crit_edge.i ], [ %21, %lor.lhs.false.i ]
  %26 = phi ptr [ %call.i23, %if.then.if.end5_crit_edge.i ], [ %20, %lor.lhs.false.i ]
  %sub.i18 = sub nsw i64 %call.i17, %19
  %conv.i = sitofp i64 %sub.i18 to double
  %div.i19 = fdiv double %conv.i, 1.000000e+06
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i
  store double %div.i19, ptr %arrayidx.i, align 8, !tbaa !11
  %label9.i = getelementptr inbounds %struct.one_result, ptr %26, i64 %idxprom.i, i32 1
  store ptr %label, ptr %label9.i, align 8, !tbaa !14
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, ptr @current_test, align 4, !tbaa !9
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v16i8(<16 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v8i8(<8 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.add.v8i16(<8 x i16>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #12

attributes #0 = { mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nofree nounwind willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { nounwind allocsize(1) }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind willreturn memory(read) }
attributes #17 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!12, !13, i64 0}
!12 = !{!"_ZTS10one_result", !13, i64 0, !6, i64 8}
!13 = !{!"double", !7, i64 0}
!14 = !{!12, !6, i64 8}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !16}
!22 = distinct !{!22, !16}
!23 = distinct !{!23, !16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !20}
!26 = !{!27, !27, i64 0}
!27 = !{!"long", !7, i64 0}
!28 = !{!13, !13, i64 0}
!29 = !{!7, !7, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"short", !7, i64 0}
!32 = distinct !{!32, !16, !33, !34}
!33 = !{!"llvm.loop.isvectorized", i32 1}
!34 = !{!"llvm.loop.unroll.runtime.disable"}
!35 = distinct !{!35, !16, !33, !34}
!36 = distinct !{!36, !16, !33, !34}
!37 = distinct !{!37, !16, !33, !34}
!38 = distinct !{!38, !16, !33, !34}
!39 = distinct !{!39, !16, !33, !34}
!40 = !{!41, !41, i64 0}
!41 = !{!"float", !7, i64 0}
!42 = distinct !{!42, !16, !33, !34}
!43 = distinct !{!43, !16, !33, !34}
!44 = distinct !{!44, !16, !33, !34}
!45 = distinct !{!45, !16, !33, !34}
!46 = distinct !{!46, !16}
!47 = distinct !{!47, !16, !34, !33}
!48 = distinct !{!48, !16, !33, !34}
!49 = distinct !{!49, !16, !33, !34}
!50 = distinct !{!50, !16}
!51 = distinct !{!51, !16, !34, !33}
!52 = distinct !{!52, !16, !33, !34}
!53 = distinct !{!53, !16, !33, !34}
!54 = distinct !{!54, !16}
!55 = distinct !{!55, !16, !34, !33}
!56 = distinct !{!56, !16, !33, !34}
!57 = distinct !{!57, !16, !33, !34}
!58 = distinct !{!58, !16}
!59 = distinct !{!59, !16, !34, !33}
!60 = distinct !{!60, !16, !33, !34}
!61 = distinct !{!61, !16, !33, !34}
!62 = distinct !{!62, !16}
!63 = distinct !{!63, !16, !34, !33}
!64 = distinct !{!64, !16, !33, !34}
!65 = distinct !{!65, !16, !33, !34}
!66 = distinct !{!66, !16}
!67 = distinct !{!67, !16, !34, !33}
!68 = distinct !{!68, !16, !33, !34}
!69 = distinct !{!69, !16, !33, !34}
!70 = distinct !{!70, !16}
!71 = distinct !{!71, !16, !34, !33}
!72 = distinct !{!72, !16, !33, !34}
!73 = distinct !{!73, !16, !33, !34}
!74 = distinct !{!74, !16}
!75 = distinct !{!75, !16, !34, !33}
!76 = distinct !{!76, !16}
!77 = distinct !{!77, !16}
!78 = distinct !{!78, !16}
!79 = distinct !{!79, !16}
!80 = distinct !{!80, !16, !33, !34}
!81 = distinct !{!81, !16, !33, !34}
!82 = distinct !{!82, !16}
!83 = distinct !{!83, !16, !34, !33}
!84 = distinct !{!84, !16, !33, !34}
!85 = distinct !{!85, !16, !33, !34}
!86 = distinct !{!86, !16}
!87 = distinct !{!87, !16, !34, !33}
!88 = distinct !{!88, !16, !33, !34}
!89 = distinct !{!89, !16, !33, !34}
!90 = distinct !{!90, !16}
!91 = distinct !{!91, !16, !34, !33}
!92 = distinct !{!92, !16, !33, !34}
!93 = distinct !{!93, !16, !33, !34}
!94 = distinct !{!94, !16}
!95 = distinct !{!95, !16, !34, !33}
!96 = distinct !{!96, !16, !33, !34}
!97 = distinct !{!97, !16, !33, !34}
!98 = distinct !{!98, !16}
!99 = distinct !{!99, !16, !34, !33}
!100 = distinct !{!100, !16, !33, !34}
!101 = distinct !{!101, !16, !33, !34}
!102 = distinct !{!102, !16}
!103 = distinct !{!103, !16, !34, !33}
!104 = distinct !{!104, !16, !33, !34}
!105 = distinct !{!105, !16, !33, !34}
!106 = distinct !{!106, !16}
!107 = distinct !{!107, !16, !34, !33}
!108 = distinct !{!108, !16, !33, !34}
!109 = distinct !{!109, !16, !33, !34}
!110 = distinct !{!110, !16}
!111 = distinct !{!111, !16, !34, !33}
!112 = distinct !{!112, !16, !33, !34}
!113 = distinct !{!113, !16, !33, !34}
!114 = distinct !{!114, !16}
!115 = distinct !{!115, !16, !34, !33}
!116 = distinct !{!116, !16, !33, !34}
!117 = distinct !{!117, !16, !33, !34}
!118 = distinct !{!118, !16}
!119 = distinct !{!119, !16, !34, !33}
!120 = distinct !{!120, !16, !33, !34}
!121 = distinct !{!121, !16, !33, !34}
!122 = distinct !{!122, !16}
!123 = distinct !{!123, !16, !34, !33}
!124 = distinct !{!124, !16, !33, !34}
!125 = distinct !{!125, !16, !33, !34}
!126 = distinct !{!126, !16}
!127 = distinct !{!127, !16, !34, !33}
!128 = distinct !{!128, !16, !33, !34}
!129 = distinct !{!129, !16, !33, !34}
!130 = distinct !{!130, !16}
!131 = distinct !{!131, !16, !34, !33}
!132 = distinct !{!132, !16, !33, !34}
!133 = distinct !{!133, !16, !33, !34}
!134 = distinct !{!134, !16}
!135 = distinct !{!135, !16, !34, !33}
!136 = distinct !{!136, !16, !33, !34}
!137 = distinct !{!137, !16, !33, !34}
!138 = distinct !{!138, !16}
!139 = distinct !{!139, !16, !34, !33}
!140 = distinct !{!140, !16, !33, !34}
!141 = distinct !{!141, !16, !33, !34}
!142 = distinct !{!142, !16}
!143 = distinct !{!143, !16, !34, !33}
!144 = distinct !{!144, !16}
!145 = distinct !{!145, !16}
!146 = distinct !{!146, !16}
!147 = distinct !{!147, !16}
!148 = distinct !{!148, !16, !33, !34}
!149 = distinct !{!149, !16, !33, !34}
!150 = distinct !{!150, !16}
!151 = distinct !{!151, !16, !34, !33}
!152 = distinct !{!152, !16, !33, !34}
!153 = distinct !{!153, !16, !33, !34}
!154 = distinct !{!154, !16}
!155 = distinct !{!155, !16, !34, !33}
!156 = distinct !{!156, !16, !33, !34}
!157 = distinct !{!157, !16, !33, !34}
!158 = distinct !{!158, !16}
!159 = distinct !{!159, !16, !34, !33}
!160 = distinct !{!160, !16, !33, !34}
!161 = distinct !{!161, !16, !33, !34}
!162 = distinct !{!162, !16}
!163 = distinct !{!163, !16, !34, !33}
!164 = distinct !{!164, !16, !33, !34}
!165 = distinct !{!165, !16, !33, !34}
!166 = distinct !{!166, !16}
!167 = distinct !{!167, !16, !34, !33}
!168 = distinct !{!168, !16, !33, !34}
!169 = distinct !{!169, !16, !33, !34}
!170 = distinct !{!170, !16}
!171 = distinct !{!171, !16, !34, !33}
!172 = distinct !{!172, !16, !33, !34}
!173 = distinct !{!173, !16, !33, !34}
!174 = distinct !{!174, !16}
!175 = distinct !{!175, !16, !34, !33}
!176 = distinct !{!176, !16, !33, !34}
!177 = distinct !{!177, !16, !33, !34}
!178 = distinct !{!178, !16}
!179 = distinct !{!179, !16, !34, !33}
!180 = distinct !{!180, !16, !33, !34}
!181 = distinct !{!181, !16}
!182 = distinct !{!182, !16, !34, !33}
!183 = distinct !{!183, !16, !33, !34}
!184 = distinct !{!184, !16}
!185 = distinct !{!185, !16, !34, !33}
!186 = distinct !{!186, !16, !33, !34}
!187 = distinct !{!187, !16}
!188 = distinct !{!188, !16, !34, !33}
!189 = distinct !{!189, !16, !33, !34}
!190 = distinct !{!190, !16}
!191 = distinct !{!191, !16, !34, !33}
!192 = distinct !{!192, !16, !33, !34}
!193 = distinct !{!193, !16}
!194 = distinct !{!194, !16, !34, !33}
!195 = distinct !{!195, !16, !33, !34}
!196 = distinct !{!196, !16}
!197 = distinct !{!197, !16, !34, !33}
!198 = distinct !{!198, !16, !33, !34}
!199 = distinct !{!199, !16}
!200 = distinct !{!200, !16, !34, !33}
!201 = distinct !{!201, !16, !33, !34}
!202 = distinct !{!202, !16}
!203 = distinct !{!203, !16, !34, !33}
!204 = distinct !{!204, !16}
!205 = distinct !{!205, !16}
!206 = distinct !{!206, !16}
!207 = distinct !{!207, !16}
!208 = distinct !{!208, !16, !33, !34}
!209 = distinct !{!209, !16}
!210 = distinct !{!210, !16, !34, !33}
!211 = distinct !{!211, !16, !33, !34}
!212 = distinct !{!212, !16}
!213 = distinct !{!213, !16, !34, !33}
!214 = distinct !{!214, !16, !33, !34}
!215 = distinct !{!215, !16}
!216 = distinct !{!216, !16, !34, !33}
!217 = distinct !{!217, !16, !33, !34}
!218 = distinct !{!218, !16}
!219 = distinct !{!219, !16, !34, !33}
!220 = distinct !{!220, !16, !33, !34}
!221 = distinct !{!221, !16}
!222 = distinct !{!222, !16, !34, !33}
!223 = distinct !{!223, !16, !33, !34}
!224 = distinct !{!224, !16}
!225 = distinct !{!225, !16, !34, !33}
!226 = distinct !{!226, !16, !33, !34}
!227 = distinct !{!227, !16}
!228 = distinct !{!228, !16, !34, !33}
!229 = distinct !{!229, !16, !33, !34}
!230 = distinct !{!230, !16}
!231 = distinct !{!231, !16, !34, !33}
!232 = distinct !{!232, !16, !33, !34}
!233 = distinct !{!233, !16}
!234 = distinct !{!234, !16, !34, !33}
!235 = distinct !{!235, !16, !33, !34}
!236 = distinct !{!236, !16}
!237 = distinct !{!237, !16, !34, !33}
!238 = distinct !{!238, !16, !33, !34}
!239 = distinct !{!239, !16}
!240 = distinct !{!240, !16, !34, !33}
!241 = distinct !{!241, !16, !33, !34}
!242 = distinct !{!242, !16}
!243 = distinct !{!243, !16, !34, !33}
!244 = distinct !{!244, !16, !33, !34}
!245 = distinct !{!245, !16}
!246 = distinct !{!246, !16, !34, !33}
!247 = distinct !{!247, !16, !33, !34}
!248 = distinct !{!248, !16}
!249 = distinct !{!249, !16, !34, !33}
!250 = distinct !{!250, !16, !33, !34}
!251 = distinct !{!251, !16}
!252 = distinct !{!252, !16, !34, !33}
!253 = distinct !{!253, !16, !33, !34}
!254 = distinct !{!254, !16}
!255 = distinct !{!255, !16, !34, !33}
!256 = distinct !{!256, !16}
!257 = distinct !{!257, !16}
!258 = distinct !{!258, !16}
!259 = distinct !{!259, !16}
!260 = distinct !{!260, !16, !33, !34}
!261 = distinct !{!261, !16}
!262 = distinct !{!262, !16, !34, !33}
!263 = distinct !{!263, !16, !33, !34}
!264 = distinct !{!264, !16}
!265 = distinct !{!265, !16, !34, !33}
!266 = distinct !{!266, !16, !33, !34}
!267 = distinct !{!267, !16}
!268 = distinct !{!268, !16, !34, !33}
!269 = distinct !{!269, !16, !33, !34}
!270 = distinct !{!270, !16}
!271 = distinct !{!271, !16, !34, !33}
!272 = distinct !{!272, !16, !33, !34}
!273 = distinct !{!273, !16}
!274 = distinct !{!274, !16, !34, !33}
!275 = distinct !{!275, !16, !33, !34}
!276 = distinct !{!276, !16}
!277 = distinct !{!277, !16, !34, !33}
!278 = distinct !{!278, !16, !33, !34}
!279 = distinct !{!279, !16}
!280 = distinct !{!280, !16, !34, !33}
!281 = distinct !{!281, !16, !33, !34}
!282 = distinct !{!282, !16}
!283 = distinct !{!283, !16, !34, !33}
!284 = distinct !{!284, !16, !33, !34}
!285 = distinct !{!285, !16}
!286 = distinct !{!286, !16, !34, !33}
!287 = distinct !{!287, !16, !33, !34}
!288 = distinct !{!288, !16}
!289 = distinct !{!289, !16, !34, !33}
!290 = distinct !{!290, !16, !33, !34}
!291 = distinct !{!291, !16}
!292 = distinct !{!292, !16, !34, !33}
!293 = distinct !{!293, !16, !33, !34}
!294 = distinct !{!294, !16}
!295 = distinct !{!295, !16, !34, !33}
!296 = distinct !{!296, !16, !33, !34}
!297 = distinct !{!297, !16}
!298 = distinct !{!298, !16, !34, !33}
!299 = distinct !{!299, !16, !33, !34}
!300 = distinct !{!300, !16}
!301 = distinct !{!301, !16, !34, !33}
!302 = distinct !{!302, !16, !33, !34}
!303 = distinct !{!303, !16}
!304 = distinct !{!304, !16, !34, !33}
!305 = distinct !{!305, !16, !33, !34}
!306 = distinct !{!306, !16}
!307 = distinct !{!307, !16, !34, !33}
!308 = distinct !{!308, !16}
!309 = distinct !{!309, !16}
!310 = distinct !{!310, !16}
!311 = distinct !{!311, !16}
!312 = distinct !{!312, !16, !33, !34}
!313 = distinct !{!313, !16}
!314 = distinct !{!314, !16, !34, !33}
!315 = distinct !{!315, !16, !33, !34}
!316 = distinct !{!316, !16}
!317 = distinct !{!317, !16, !34, !33}
!318 = distinct !{!318, !16, !33, !34}
!319 = distinct !{!319, !16}
!320 = distinct !{!320, !16, !34, !33}
!321 = distinct !{!321, !16, !33, !34}
!322 = distinct !{!322, !16}
!323 = distinct !{!323, !16, !34, !33}
!324 = distinct !{!324, !16, !33, !34}
!325 = distinct !{!325, !16}
!326 = distinct !{!326, !16, !34, !33}
!327 = distinct !{!327, !16, !33, !34}
!328 = distinct !{!328, !16}
!329 = distinct !{!329, !16, !34, !33}
!330 = distinct !{!330, !16, !33, !34}
!331 = distinct !{!331, !16}
!332 = distinct !{!332, !16, !34, !33}
!333 = distinct !{!333, !16, !33, !34}
!334 = distinct !{!334, !16}
!335 = distinct !{!335, !16, !34, !33}
!336 = distinct !{!336, !16, !33, !34}
!337 = distinct !{!337, !16}
!338 = distinct !{!338, !16, !34, !33}
!339 = distinct !{!339, !16, !33, !34}
!340 = distinct !{!340, !16}
!341 = distinct !{!341, !16, !34, !33}
!342 = distinct !{!342, !16, !33, !34}
!343 = distinct !{!343, !16}
!344 = distinct !{!344, !16, !34, !33}
!345 = distinct !{!345, !16, !33, !34}
!346 = distinct !{!346, !16}
!347 = distinct !{!347, !16, !34, !33}
!348 = distinct !{!348, !16, !33, !34}
!349 = distinct !{!349, !16}
!350 = distinct !{!350, !16, !34, !33}
!351 = distinct !{!351, !16, !33, !34}
!352 = distinct !{!352, !16}
!353 = distinct !{!353, !16, !34, !33}
!354 = distinct !{!354, !16, !33, !34}
!355 = distinct !{!355, !16}
!356 = distinct !{!356, !16, !34, !33}
!357 = distinct !{!357, !16, !33, !34}
!358 = distinct !{!358, !16}
!359 = distinct !{!359, !16, !34, !33}
!360 = distinct !{!360, !16}
!361 = distinct !{!361, !16}
!362 = distinct !{!362, !16}
!363 = distinct !{!363, !16}
!364 = distinct !{!364, !16, !33, !34}
!365 = distinct !{!365, !16}
!366 = distinct !{!366, !16, !34, !33}
!367 = distinct !{!367, !16, !33, !34}
!368 = distinct !{!368, !16}
!369 = distinct !{!369, !16, !34, !33}
!370 = distinct !{!370, !16, !33, !34}
!371 = distinct !{!371, !16}
!372 = distinct !{!372, !16, !34, !33}
!373 = distinct !{!373, !16, !33, !34}
!374 = distinct !{!374, !16}
!375 = distinct !{!375, !16, !34, !33}
!376 = distinct !{!376, !16, !33, !34}
!377 = distinct !{!377, !16}
!378 = distinct !{!378, !16, !34, !33}
!379 = distinct !{!379, !16, !33, !34}
!380 = distinct !{!380, !16}
!381 = distinct !{!381, !16, !34, !33}
!382 = distinct !{!382, !16, !33, !34}
!383 = distinct !{!383, !16}
!384 = distinct !{!384, !16, !34, !33}
!385 = distinct !{!385, !16, !33, !34}
!386 = distinct !{!386, !16}
!387 = distinct !{!387, !16, !34, !33}
!388 = distinct !{!388, !16, !33, !34}
!389 = distinct !{!389, !16}
!390 = distinct !{!390, !16, !34, !33}
!391 = distinct !{!391, !16, !33, !34}
!392 = distinct !{!392, !16}
!393 = distinct !{!393, !16, !34, !33}
!394 = distinct !{!394, !16, !33, !34}
!395 = distinct !{!395, !16}
!396 = distinct !{!396, !16, !34, !33}
!397 = distinct !{!397, !16, !33, !34}
!398 = distinct !{!398, !16}
!399 = distinct !{!399, !16, !34, !33}
!400 = distinct !{!400, !16, !33, !34}
!401 = distinct !{!401, !16}
!402 = distinct !{!402, !16, !34, !33}
!403 = distinct !{!403, !16}
!404 = distinct !{!404, !16}
!405 = distinct !{!405, !20}
!406 = distinct !{!406, !16}
!407 = distinct !{!407, !16}
!408 = distinct !{!408, !20}
!409 = distinct !{!409, !16, !33, !34}
!410 = distinct !{!410, !16}
!411 = distinct !{!411, !16, !34, !33}
!412 = distinct !{!412, !16}
!413 = distinct !{!413, !16}
!414 = distinct !{!414, !16}
!415 = distinct !{!415, !16}
!416 = distinct !{!416, !16, !33, !34}
!417 = distinct !{!417, !16}
!418 = distinct !{!418, !16, !34, !33}
!419 = distinct !{!419, !16, !33, !34}
!420 = distinct !{!420, !16}
!421 = distinct !{!421, !16, !34, !33}
!422 = distinct !{!422, !16, !33, !34}
!423 = distinct !{!423, !16}
!424 = distinct !{!424, !16, !34, !33}
!425 = distinct !{!425, !16, !33, !34}
!426 = distinct !{!426, !16}
!427 = distinct !{!427, !16, !34, !33}
!428 = distinct !{!428, !16, !33, !34}
!429 = distinct !{!429, !16}
!430 = distinct !{!430, !16, !34, !33}
!431 = distinct !{!431, !16, !33, !34}
!432 = distinct !{!432, !16}
!433 = distinct !{!433, !16, !34, !33}
!434 = distinct !{!434, !16, !33, !34}
!435 = distinct !{!435, !16}
!436 = distinct !{!436, !16, !34, !33}
!437 = distinct !{!437, !16, !33, !34}
!438 = distinct !{!438, !16}
!439 = distinct !{!439, !16, !34, !33}
!440 = distinct !{!440, !16, !33, !34}
!441 = distinct !{!441, !16}
!442 = distinct !{!442, !16, !34, !33}
!443 = distinct !{!443, !16, !33, !34}
!444 = distinct !{!444, !16}
!445 = distinct !{!445, !16, !34, !33}
!446 = distinct !{!446, !16, !33, !34}
!447 = distinct !{!447, !16}
!448 = distinct !{!448, !16, !34, !33}
!449 = distinct !{!449, !16, !33, !34}
!450 = distinct !{!450, !16}
!451 = distinct !{!451, !16, !34, !33}
!452 = distinct !{!452, !16, !33, !34}
!453 = distinct !{!453, !16}
!454 = distinct !{!454, !16, !34, !33}
!455 = distinct !{!455, !16}
!456 = distinct !{!456, !16}
!457 = distinct !{!457, !20}
!458 = distinct !{!458, !16}
!459 = distinct !{!459, !16}
!460 = distinct !{!460, !20}
!461 = distinct !{!461, !16, !33, !34}
!462 = distinct !{!462, !16}
!463 = distinct !{!463, !16, !34, !33}
!464 = distinct !{!464, !16}
!465 = distinct !{!465, !16}
!466 = distinct !{!466, !16}
!467 = distinct !{!467, !16}
!468 = distinct !{!468, !16, !33, !34}
!469 = distinct !{!469, !16}
!470 = distinct !{!470, !16, !34, !33}
!471 = distinct !{!471, !16, !33, !34}
!472 = distinct !{!472, !16}
!473 = distinct !{!473, !16, !34, !33}
!474 = distinct !{!474, !16, !33, !34}
!475 = distinct !{!475, !16}
!476 = distinct !{!476, !16, !34, !33}
!477 = distinct !{!477, !16, !33, !34}
!478 = distinct !{!478, !16}
!479 = distinct !{!479, !16, !34, !33}
!480 = distinct !{!480, !16, !33, !34}
!481 = distinct !{!481, !16}
!482 = distinct !{!482, !16, !34, !33}
!483 = distinct !{!483, !16, !33, !34}
!484 = distinct !{!484, !16}
!485 = distinct !{!485, !16, !34, !33}
!486 = distinct !{!486, !16, !33, !34}
!487 = distinct !{!487, !16}
!488 = distinct !{!488, !16, !34, !33}
!489 = distinct !{!489, !16, !33, !34}
!490 = distinct !{!490, !16}
!491 = distinct !{!491, !16, !34, !33}
!492 = distinct !{!492, !16}
!493 = distinct !{!493, !16}
!494 = distinct !{!494, !20}
!495 = distinct !{!495, !16}
!496 = distinct !{!496, !16}
!497 = distinct !{!497, !20}
!498 = distinct !{!498, !16}
!499 = distinct !{!499, !16}
!500 = distinct !{!500, !16}
!501 = distinct !{!501, !16}
!502 = distinct !{!502, !20}
!503 = distinct !{!503, !16}
!504 = distinct !{!504, !16}
!505 = distinct !{!505, !16}
!506 = distinct !{!506, !16}
!507 = distinct !{!507, !20}
!508 = distinct !{!508, !16}
!509 = distinct !{!509, !16}
!510 = distinct !{!510, !16}
!511 = distinct !{!511, !16}
!512 = distinct !{!512, !20}
!513 = distinct !{!513, !16}
!514 = distinct !{!514, !16}
!515 = distinct !{!515, !20}
!516 = distinct !{!516, !16}
!517 = distinct !{!517, !16}
!518 = distinct !{!518, !16}
!519 = distinct !{!519, !16}
!520 = distinct !{!520, !20}
!521 = distinct !{!521, !16}
!522 = distinct !{!522, !16}
!523 = distinct !{!523, !20}
!524 = distinct !{!524, !16}
!525 = distinct !{!525, !16}
!526 = distinct !{!526, !20}
!527 = distinct !{!527, !16}
!528 = distinct !{!528, !16}
!529 = distinct !{!529, !20}
!530 = distinct !{!530, !16}
!531 = distinct !{!531, !16}
!532 = distinct !{!532, !16}
!533 = distinct !{!533, !16}
!534 = distinct !{!534, !20}
!535 = distinct !{!535, !16}
!536 = distinct !{!536, !16}
!537 = distinct !{!537, !16}
!538 = distinct !{!538, !16}
!539 = distinct !{!539, !20}
!540 = distinct !{!540, !16}
!541 = distinct !{!541, !16}
!542 = distinct !{!542, !16}
!543 = distinct !{!543, !16}
!544 = distinct !{!544, !20}
!545 = distinct !{!545, !16}
!546 = distinct !{!546, !16}
!547 = distinct !{!547, !20}
!548 = distinct !{!548, !16}
!549 = distinct !{!549, !16}
!550 = distinct !{!550, !16}
!551 = distinct !{!551, !16}
!552 = distinct !{!552, !20}
!553 = distinct !{!553, !16}
!554 = distinct !{!554, !16}
!555 = distinct !{!555, !20}
